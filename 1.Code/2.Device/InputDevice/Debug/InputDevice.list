
InputDevice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000462c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080046e4  080046e4  000146e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800476c  0800476c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800476c  0800476c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800476c  0800476c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  08004780  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004780  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ebe  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000222d  00000000  00000000  00030ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00033120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  00033f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016209  00000000  00000000  00034c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d9e  00000000  00000000  0004ae41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e503  00000000  00000000  0005bbdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea0e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003268  00000000  00000000  000ea134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080046cc 	.word	0x080046cc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080046cc 	.word	0x080046cc

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  if(huart->Instance == USART1)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a14      	ldr	r2, [pc, #80]	; (800044c <HAL_UART_RxCpltCallback+0x60>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d121      	bne.n	8000442 <HAL_UART_RxCpltCallback+0x56>
  {
    if(buffComming == 0)
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <HAL_UART_RxCpltCallback+0x64>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d106      	bne.n	8000414 <HAL_UART_RxCpltCallback+0x28>
    {
    	buffComming = 1;
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <HAL_UART_RxCpltCallback+0x64>)
 8000408:	2201      	movs	r2, #1
 800040a:	701a      	strb	r2, [r3, #0]
    	HAL_TIM_Base_Start(&htim3);
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <HAL_UART_RxCpltCallback+0x68>)
 800040e:	0018      	movs	r0, r3
 8000410:	f001 ff12 	bl	8002238 <HAL_TIM_Base_Start>
    }

    HAL_UART_Receive_IT(&huart1, &rx_dataChar, 1);
 8000414:	4910      	ldr	r1, [pc, #64]	; (8000458 <HAL_UART_RxCpltCallback+0x6c>)
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <HAL_UART_RxCpltCallback+0x70>)
 8000418:	2201      	movs	r2, #1
 800041a:	0018      	movs	r0, r3
 800041c:	f002 fac2 	bl	80029a4 <HAL_UART_Receive_IT>
    rx_data[rx_count] = rx_dataChar;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <HAL_UART_RxCpltCallback+0x74>)
 8000422:	881b      	ldrh	r3, [r3, #0]
 8000424:	001a      	movs	r2, r3
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_UART_RxCpltCallback+0x6c>)
 8000428:	7819      	ldrb	r1, [r3, #0]
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <HAL_UART_RxCpltCallback+0x78>)
 800042c:	5499      	strb	r1, [r3, r2]
    rx_count++;
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <HAL_UART_RxCpltCallback+0x74>)
 8000430:	881b      	ldrh	r3, [r3, #0]
 8000432:	3301      	adds	r3, #1
 8000434:	b29a      	uxth	r2, r3
 8000436:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <HAL_UART_RxCpltCallback+0x74>)
 8000438:	801a      	strh	r2, [r3, #0]
    __HAL_TIM_SET_COUNTER(&htim3,0);
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <HAL_UART_RxCpltCallback+0x68>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2200      	movs	r2, #0
 8000440:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	b002      	add	sp, #8
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	40013800 	.word	0x40013800
 8000450:	20000108 	.word	0x20000108
 8000454:	20000028 	.word	0x20000028
 8000458:	20000172 	.word	0x20000172
 800045c:	20000074 	.word	0x20000074
 8000460:	20000174 	.word	0x20000174
 8000464:	2000010c 	.word	0x2000010c

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046e:	f000 fc7b 	bl	8000d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000472:	f000 f8a3 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000476:	f000 f98d 	bl	8000794 <MX_GPIO_Init>
  MX_TIM3_Init();
 800047a:	f000 f8e7 	bl	800064c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800047e:	f000 f93b 	bl	80006f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000482:	4b44      	ldr	r3, [pc, #272]	; (8000594 <main+0x12c>)
 8000484:	0018      	movs	r0, r3
 8000486:	f001 fed7 	bl	8002238 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart1, &rx_dataChar, 1);
 800048a:	4943      	ldr	r1, [pc, #268]	; (8000598 <main+0x130>)
 800048c:	4b43      	ldr	r3, [pc, #268]	; (800059c <main+0x134>)
 800048e:	2201      	movs	r2, #1
 8000490:	0018      	movs	r0, r3
 8000492:	f002 fa87 	bl	80029a4 <HAL_UART_Receive_IT>
  uint8_t preset_sensor_1 = 0;
 8000496:	1dfb      	adds	r3, r7, #7
 8000498:	2200      	movs	r2, #0
 800049a:	701a      	strb	r2, [r3, #0]
  uint8_t preset_sensor_2 = 0;
 800049c:	1dbb      	adds	r3, r7, #6
 800049e:	2200      	movs	r2, #0
 80004a0:	701a      	strb	r2, [r3, #0]
  uint8_t preset_sensor_3 = 0;
 80004a2:	1d7b      	adds	r3, r7, #5
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
        countingStatusInput3++;
      }
    }*/

	  //xac dinh trang thai chan
	if(HAL_GPIO_ReadPin(Input_Sensor_01_GPIO_Port, Input_Sensor_01_Pin) == GPIO_PIN_RESET)
 80004a8:	23a0      	movs	r3, #160	; 0xa0
 80004aa:	05db      	lsls	r3, r3, #23
 80004ac:	2108      	movs	r1, #8
 80004ae:	0018      	movs	r0, r3
 80004b0:	f001 f812 	bl	80014d8 <HAL_GPIO_ReadPin>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d10e      	bne.n	80004d6 <main+0x6e>
	{
		HAL_Delay(delayReduceNoise);
 80004b8:	200a      	movs	r0, #10
 80004ba:	f000 fcdb 	bl	8000e74 <HAL_Delay>
		if(HAL_GPIO_ReadPin(Input_Sensor_01_GPIO_Port, Input_Sensor_01_Pin) == GPIO_PIN_RESET) countingStatusInput1 = 1;
 80004be:	23a0      	movs	r3, #160	; 0xa0
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	2108      	movs	r1, #8
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 f807 	bl	80014d8 <HAL_GPIO_ReadPin>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d106      	bne.n	80004dc <main+0x74>
 80004ce:	4b34      	ldr	r3, [pc, #208]	; (80005a0 <main+0x138>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	801a      	strh	r2, [r3, #0]
 80004d4:	e002      	b.n	80004dc <main+0x74>
	}
	else countingStatusInput1 = 0;
 80004d6:	4b32      	ldr	r3, [pc, #200]	; (80005a0 <main+0x138>)
 80004d8:	2200      	movs	r2, #0
 80004da:	801a      	strh	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(Input_Sensor_02_GPIO_Port, Input_Sensor_02_Pin) == GPIO_PIN_RESET)
 80004dc:	23a0      	movs	r3, #160	; 0xa0
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	2104      	movs	r1, #4
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fff8 	bl	80014d8 <HAL_GPIO_ReadPin>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d10e      	bne.n	800050a <main+0xa2>
	{
		HAL_Delay(delayReduceNoise);
 80004ec:	200a      	movs	r0, #10
 80004ee:	f000 fcc1 	bl	8000e74 <HAL_Delay>
		if(HAL_GPIO_ReadPin(Input_Sensor_02_GPIO_Port, Input_Sensor_02_Pin) == GPIO_PIN_RESET) countingStatusInput2 = 1;
 80004f2:	23a0      	movs	r3, #160	; 0xa0
 80004f4:	05db      	lsls	r3, r3, #23
 80004f6:	2104      	movs	r1, #4
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 ffed 	bl	80014d8 <HAL_GPIO_ReadPin>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d106      	bne.n	8000510 <main+0xa8>
 8000502:	4b28      	ldr	r3, [pc, #160]	; (80005a4 <main+0x13c>)
 8000504:	2201      	movs	r2, #1
 8000506:	801a      	strh	r2, [r3, #0]
 8000508:	e002      	b.n	8000510 <main+0xa8>
	}
	else countingStatusInput2 = 0;
 800050a:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <main+0x13c>)
 800050c:	2200      	movs	r2, #0
 800050e:	801a      	strh	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(Input_Sensor_03_GPIO_Port, Input_Sensor_03_Pin) == GPIO_PIN_RESET)
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	01db      	lsls	r3, r3, #7
 8000514:	4a24      	ldr	r2, [pc, #144]	; (80005a8 <main+0x140>)
 8000516:	0019      	movs	r1, r3
 8000518:	0010      	movs	r0, r2
 800051a:	f000 ffdd 	bl	80014d8 <HAL_GPIO_ReadPin>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d10f      	bne.n	8000542 <main+0xda>
	{
		HAL_Delay(delayReduceNoise);
 8000522:	200a      	movs	r0, #10
 8000524:	f000 fca6 	bl	8000e74 <HAL_Delay>
		if(HAL_GPIO_ReadPin(Input_Sensor_03_GPIO_Port, Input_Sensor_03_Pin) == GPIO_PIN_RESET) countingStatusInput3 = 1;
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	01db      	lsls	r3, r3, #7
 800052c:	4a1e      	ldr	r2, [pc, #120]	; (80005a8 <main+0x140>)
 800052e:	0019      	movs	r1, r3
 8000530:	0010      	movs	r0, r2
 8000532:	f000 ffd1 	bl	80014d8 <HAL_GPIO_ReadPin>
 8000536:	1e03      	subs	r3, r0, #0
 8000538:	d106      	bne.n	8000548 <main+0xe0>
 800053a:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <main+0x144>)
 800053c:	2201      	movs	r2, #1
 800053e:	801a      	strh	r2, [r3, #0]
 8000540:	e002      	b.n	8000548 <main+0xe0>
	}
	else countingStatusInput3 = 0;
 8000542:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <main+0x144>)
 8000544:	2200      	movs	r2, #0
 8000546:	801a      	strh	r2, [r3, #0]

    if(__HAL_TIM_GetCounter(&htim3) > 5)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <main+0x12c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800054e:	2b05      	cmp	r3, #5
 8000550:	d9aa      	bls.n	80004a8 <main+0x40>
    {
      __HAL_TIM_SET_COUNTER(&htim3,0);
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <main+0x12c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2200      	movs	r2, #0
 8000558:	625a      	str	r2, [r3, #36]	; 0x24
      HAL_TIM_Base_Stop(&htim3);
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <main+0x12c>)
 800055c:	0018      	movs	r0, r3
 800055e:	f001 feb9 	bl	80022d4 <HAL_TIM_Base_Stop>
      buffComming = 0;
 8000562:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <main+0x148>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
      if(CRC_MODBUS(rx_data, rx_count) && rx_data[0]== address) ModbusTransHandle();
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <main+0x14c>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <main+0x150>)
 8000570:	0011      	movs	r1, r2
 8000572:	0018      	movs	r0, r3
 8000574:	f000 f9f2 	bl	800095c <CRC_MODBUS>
 8000578:	1e03      	subs	r3, r0, #0
 800057a:	d005      	beq.n	8000588 <main+0x120>
 800057c:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <main+0x150>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d101      	bne.n	8000588 <main+0x120>
 8000584:	f000 fa6a 	bl	8000a5c <ModbusTransHandle>
      clearUart(rx_data, uartBytes);
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <main+0x150>)
 800058a:	2132      	movs	r1, #50	; 0x32
 800058c:	0018      	movs	r0, r3
 800058e:	f000 f94d 	bl	800082c <clearUart>
	if(HAL_GPIO_ReadPin(Input_Sensor_01_GPIO_Port, Input_Sensor_01_Pin) == GPIO_PIN_RESET)
 8000592:	e789      	b.n	80004a8 <main+0x40>
 8000594:	20000028 	.word	0x20000028
 8000598:	20000172 	.word	0x20000172
 800059c:	20000074 	.word	0x20000074
 80005a0:	20000176 	.word	0x20000176
 80005a4:	20000178 	.word	0x20000178
 80005a8:	50000400 	.word	0x50000400
 80005ac:	2000017a 	.word	0x2000017a
 80005b0:	20000108 	.word	0x20000108
 80005b4:	20000174 	.word	0x20000174
 80005b8:	2000010c 	.word	0x2000010c

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b093      	sub	sp, #76	; 0x4c
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	2414      	movs	r4, #20
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	0018      	movs	r0, r3
 80005c8:	2334      	movs	r3, #52	; 0x34
 80005ca:	001a      	movs	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	f004 f875 	bl	80046bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	0018      	movs	r0, r3
 80005d6:	2310      	movs	r3, #16
 80005d8:	001a      	movs	r2, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	f004 f86e 	bl	80046bc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	0018      	movs	r0, r3
 80005e6:	f000 ff95 	bl	8001514 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	2202      	movs	r2, #2
 80005ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	0052      	lsls	r2, r2, #1
 80005f6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	2240      	movs	r2, #64	; 0x40
 8000602:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000604:	193b      	adds	r3, r7, r4
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	193b      	adds	r3, r7, r4
 800060c:	0018      	movs	r0, r3
 800060e:	f000 ffcd 	bl	80015ac <HAL_RCC_OscConfig>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000616:	f000 fa79 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2207      	movs	r2, #7
 800061e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2100      	movs	r1, #0
 8000636:	0018      	movs	r0, r3
 8000638:	f001 fac8 	bl	8001bcc <HAL_RCC_ClockConfig>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000640:	f000 fa64 	bl	8000b0c <Error_Handler>
  }
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b013      	add	sp, #76	; 0x4c
 800064a:	bd90      	pop	{r4, r7, pc}

0800064c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000652:	2310      	movs	r3, #16
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	0018      	movs	r0, r3
 8000658:	2310      	movs	r3, #16
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f004 f82d 	bl	80046bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	0018      	movs	r0, r3
 8000666:	230c      	movs	r3, #12
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f004 f826 	bl	80046bc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_TIM3_Init+0xa0>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <MX_TIM3_Init+0xa4>)
 8000674:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000;
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <MX_TIM3_Init+0xa0>)
 8000678:	22fa      	movs	r2, #250	; 0xfa
 800067a:	0192      	lsls	r2, r2, #6
 800067c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_TIM3_Init+0xa0>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_TIM3_Init+0xa0>)
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <MX_TIM3_Init+0xa8>)
 8000688:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_TIM3_Init+0xa0>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000690:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_TIM3_Init+0xa0>)
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_TIM3_Init+0xa0>)
 8000698:	0018      	movs	r0, r3
 800069a:	f001 fd75 	bl	8002188 <HAL_TIM_Base_Init>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80006a2:	f000 fa33 	bl	8000b0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a6:	2110      	movs	r1, #16
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	0152      	lsls	r2, r2, #5
 80006ae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006b0:	187a      	adds	r2, r7, r1
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_TIM3_Init+0xa0>)
 80006b4:	0011      	movs	r1, r2
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 fe32 	bl	8002320 <HAL_TIM_ConfigClockSource>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80006c0:	f000 fa24 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006d0:	1d3a      	adds	r2, r7, #4
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_TIM3_Init+0xa0>)
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f002 f80a 	bl	80026f0 <HAL_TIMEx_MasterConfigSynchronization>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80006e0:	f000 fa14 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b008      	add	sp, #32
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000028 	.word	0x20000028
 80006f0:	40000400 	.word	0x40000400
 80006f4:	0000ffff 	.word	0x0000ffff

080006f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <MX_USART1_UART_Init+0x94>)
 80006fe:	4a24      	ldr	r2, [pc, #144]	; (8000790 <MX_USART1_UART_Init+0x98>)
 8000700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <MX_USART1_UART_Init+0x94>)
 8000704:	22e1      	movs	r2, #225	; 0xe1
 8000706:	0252      	lsls	r2, r2, #9
 8000708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b20      	ldr	r3, [pc, #128]	; (800078c <MX_USART1_UART_Init+0x94>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_USART1_UART_Init+0x94>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_USART1_UART_Init+0x94>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_USART1_UART_Init+0x94>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_USART1_UART_Init+0x94>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_USART1_UART_Init+0x94>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_USART1_UART_Init+0x94>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_USART1_UART_Init+0x94>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_USART1_UART_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_USART1_UART_Init+0x94>)
 8000742:	0018      	movs	r0, r3
 8000744:	f002 f83c 	bl	80027c0 <HAL_UART_Init>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800074c:	f000 f9de 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART1_UART_Init+0x94>)
 8000752:	2100      	movs	r1, #0
 8000754:	0018      	movs	r0, r3
 8000756:	f003 fead 	bl	80044b4 <HAL_UARTEx_SetTxFifoThreshold>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d001      	beq.n	8000762 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800075e:	f000 f9d5 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_USART1_UART_Init+0x94>)
 8000764:	2100      	movs	r1, #0
 8000766:	0018      	movs	r0, r3
 8000768:	f003 fee4 	bl	8004534 <HAL_UARTEx_SetRxFifoThreshold>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000770:	f000 f9cc 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <MX_USART1_UART_Init+0x94>)
 8000776:	0018      	movs	r0, r3
 8000778:	f003 fe62 	bl	8004440 <HAL_UARTEx_DisableFifoMode>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000780:	f000 f9c4 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20000074 	.word	0x20000074
 8000790:	40013800 	.word	0x40013800

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	240c      	movs	r4, #12
 800079c:	193b      	adds	r3, r7, r4
 800079e:	0018      	movs	r0, r3
 80007a0:	2314      	movs	r3, #20
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f003 ff89 	bl	80046bc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_GPIO_Init+0x90>)
 80007ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_GPIO_Init+0x90>)
 80007b0:	2101      	movs	r1, #1
 80007b2:	430a      	orrs	r2, r1
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_GPIO_Init+0x90>)
 80007b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ba:	2201      	movs	r2, #1
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_GPIO_Init+0x90>)
 80007c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_GPIO_Init+0x90>)
 80007c8:	2102      	movs	r1, #2
 80007ca:	430a      	orrs	r2, r1
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_GPIO_Init+0x90>)
 80007d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d2:	2202      	movs	r2, #2
 80007d4:	4013      	ands	r3, r2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : Input_Sensor_02_Pin Input_Sensor_01_Pin */
  GPIO_InitStruct.Pin = Input_Sensor_02_Pin|Input_Sensor_01_Pin;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	220c      	movs	r2, #12
 80007de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2200      	movs	r2, #0
 80007e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	2201      	movs	r2, #1
 80007ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	193a      	adds	r2, r7, r4
 80007ee:	23a0      	movs	r3, #160	; 0xa0
 80007f0:	05db      	lsls	r3, r3, #23
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f000 fd0b 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : Input_Sensor_03_Pin */
  GPIO_InitStruct.Pin = Input_Sensor_03_Pin;
 80007fa:	0021      	movs	r1, r4
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2280      	movs	r2, #128	; 0x80
 8000800:	01d2      	lsls	r2, r2, #7
 8000802:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2201      	movs	r2, #1
 800080e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Input_Sensor_03_GPIO_Port, &GPIO_InitStruct);
 8000810:	187b      	adds	r3, r7, r1
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <MX_GPIO_Init+0x94>)
 8000814:	0019      	movs	r1, r3
 8000816:	0010      	movs	r0, r2
 8000818:	f000 fcfa 	bl	8001210 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b009      	add	sp, #36	; 0x24
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	40021000 	.word	0x40021000
 8000828:	50000400 	.word	0x50000400

0800082c <clearUart>:

/* USER CODE BEGIN 4 */
void clearUart(uint8_t *ptrBuffer, uint16_t sizeBuffer)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	000a      	movs	r2, r1
 8000836:	1cbb      	adds	r3, r7, #2
 8000838:	801a      	strh	r2, [r3, #0]
  if(ptrBuffer == &rx_data[0]) rx_count = 0;
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <clearUart+0x58>)
 800083e:	429a      	cmp	r2, r3
 8000840:	d102      	bne.n	8000848 <clearUart+0x1c>
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <clearUart+0x5c>)
 8000844:	2200      	movs	r2, #0
 8000846:	801a      	strh	r2, [r3, #0]

	for(uint16_t i = 0; i < sizeBuffer; i++) ptrBuffer[i] = '\0';
 8000848:	230e      	movs	r3, #14
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	2200      	movs	r2, #0
 800084e:	801a      	strh	r2, [r3, #0]
 8000850:	e00b      	b.n	800086a <clearUart+0x3e>
 8000852:	210e      	movs	r1, #14
 8000854:	187b      	adds	r3, r7, r1
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	18d3      	adds	r3, r2, r3
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
 8000860:	187b      	adds	r3, r7, r1
 8000862:	881a      	ldrh	r2, [r3, #0]
 8000864:	187b      	adds	r3, r7, r1
 8000866:	3201      	adds	r2, #1
 8000868:	801a      	strh	r2, [r3, #0]
 800086a:	230e      	movs	r3, #14
 800086c:	18fa      	adds	r2, r7, r3
 800086e:	1cbb      	adds	r3, r7, #2
 8000870:	8812      	ldrh	r2, [r2, #0]
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	429a      	cmp	r2, r3
 8000876:	d3ec      	bcc.n	8000852 <clearUart+0x26>
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b004      	add	sp, #16
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	2000010c 	.word	0x2000010c
 8000888:	20000174 	.word	0x20000174

0800088c <Calc_CRC16>:
  }
  *buff_1_len = *buff_1_len + buff_2_len;
}

void Calc_CRC16(uint8_t *input, uint16_t size, uint8_t *output)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	230a      	movs	r3, #10
 8000898:	18fb      	adds	r3, r7, r3
 800089a:	1c0a      	adds	r2, r1, #0
 800089c:	801a      	strh	r2, [r3, #0]
  uint16_t reg_crc = 0xFFFF;
 800089e:	2316      	movs	r3, #22
 80008a0:	18fb      	adds	r3, r7, r3
 80008a2:	2201      	movs	r2, #1
 80008a4:	4252      	negs	r2, r2
 80008a6:	801a      	strh	r2, [r3, #0]

  for(uint16_t i = 0; i < size; i++)
 80008a8:	2314      	movs	r3, #20
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	2200      	movs	r2, #0
 80008ae:	801a      	strh	r2, [r3, #0]
 80008b0:	e037      	b.n	8000922 <Calc_CRC16+0x96>
  {
    reg_crc ^= input[i];
 80008b2:	2314      	movs	r3, #20
 80008b4:	18fb      	adds	r3, r7, r3
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	18d3      	adds	r3, r2, r3
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b299      	uxth	r1, r3
 80008c0:	2216      	movs	r2, #22
 80008c2:	18bb      	adds	r3, r7, r2
 80008c4:	18ba      	adds	r2, r7, r2
 80008c6:	8812      	ldrh	r2, [r2, #0]
 80008c8:	404a      	eors	r2, r1
 80008ca:	801a      	strh	r2, [r3, #0]
    for(uint8_t j = 0; j < 8; j++)
 80008cc:	2313      	movs	r3, #19
 80008ce:	18fb      	adds	r3, r7, r3
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
 80008d4:	e01a      	b.n	800090c <Calc_CRC16+0x80>
    {
      if((reg_crc & 0x01) == 1) reg_crc = (reg_crc >> 1) ^ 0xA001;
 80008d6:	2116      	movs	r1, #22
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	2201      	movs	r2, #1
 80008de:	4013      	ands	r3, r2
 80008e0:	d008      	beq.n	80008f4 <Calc_CRC16+0x68>
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	085b      	lsrs	r3, r3, #1
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	491a      	ldr	r1, [pc, #104]	; (8000958 <Calc_CRC16+0xcc>)
 80008ee:	404a      	eors	r2, r1
 80008f0:	801a      	strh	r2, [r3, #0]
 80008f2:	e005      	b.n	8000900 <Calc_CRC16+0x74>
      else reg_crc = reg_crc >> 1;
 80008f4:	2216      	movs	r2, #22
 80008f6:	18bb      	adds	r3, r7, r2
 80008f8:	18ba      	adds	r2, r7, r2
 80008fa:	8812      	ldrh	r2, [r2, #0]
 80008fc:	0852      	lsrs	r2, r2, #1
 80008fe:	801a      	strh	r2, [r3, #0]
    for(uint8_t j = 0; j < 8; j++)
 8000900:	2113      	movs	r1, #19
 8000902:	187b      	adds	r3, r7, r1
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	187b      	adds	r3, r7, r1
 8000908:	3201      	adds	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
 800090c:	2313      	movs	r3, #19
 800090e:	18fb      	adds	r3, r7, r3
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b07      	cmp	r3, #7
 8000914:	d9df      	bls.n	80008d6 <Calc_CRC16+0x4a>
  for(uint16_t i = 0; i < size; i++)
 8000916:	2114      	movs	r1, #20
 8000918:	187b      	adds	r3, r7, r1
 800091a:	881a      	ldrh	r2, [r3, #0]
 800091c:	187b      	adds	r3, r7, r1
 800091e:	3201      	adds	r2, #1
 8000920:	801a      	strh	r2, [r3, #0]
 8000922:	2314      	movs	r3, #20
 8000924:	18fa      	adds	r2, r7, r3
 8000926:	230a      	movs	r3, #10
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	8812      	ldrh	r2, [r2, #0]
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	429a      	cmp	r2, r3
 8000930:	d3bf      	bcc.n	80008b2 <Calc_CRC16+0x26>
    }
  }

  output[1] = (reg_crc >> 8) & 0xFF;
 8000932:	2116      	movs	r1, #22
 8000934:	187b      	adds	r3, r7, r1
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	0a1b      	lsrs	r3, r3, #8
 800093a:	b29a      	uxth	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3301      	adds	r3, #1
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	701a      	strb	r2, [r3, #0]
  output[0] = reg_crc & 0xFF;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	b2da      	uxtb	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	701a      	strb	r2, [r3, #0]
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b006      	add	sp, #24
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	ffffa001 	.word	0xffffa001

0800095c <CRC_MODBUS>:

uint8_t CRC_MODBUS(uint8_t *input, uint8_t size)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	000a      	movs	r2, r1
 8000966:	1cfb      	adds	r3, r7, #3
 8000968:	701a      	strb	r2, [r3, #0]
  uint16_t check_sum[2];
  uint16_t reg_crc = 0xFFFF;
 800096a:	230e      	movs	r3, #14
 800096c:	18fb      	adds	r3, r7, r3
 800096e:	2201      	movs	r2, #1
 8000970:	4252      	negs	r2, r2
 8000972:	801a      	strh	r2, [r3, #0]

  for(uint8_t i = 0; i < size - 2; i++) { //tru 2 bytes CRC cuoi
 8000974:	230d      	movs	r3, #13
 8000976:	18fb      	adds	r3, r7, r3
 8000978:	2200      	movs	r2, #0
 800097a:	701a      	strb	r2, [r3, #0]
 800097c:	e046      	b.n	8000a0c <CRC_MODBUS+0xb0>
    reg_crc ^= input[i];
 800097e:	230d      	movs	r3, #13
 8000980:	18fb      	adds	r3, r7, r3
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	18d3      	adds	r3, r2, r3
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b299      	uxth	r1, r3
 800098c:	220e      	movs	r2, #14
 800098e:	18bb      	adds	r3, r7, r2
 8000990:	18ba      	adds	r2, r7, r2
 8000992:	8812      	ldrh	r2, [r2, #0]
 8000994:	404a      	eors	r2, r1
 8000996:	801a      	strh	r2, [r3, #0]

    for(uint8_t j = 0; j < 8; j++) {
 8000998:	230c      	movs	r3, #12
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
 80009a0:	e01a      	b.n	80009d8 <CRC_MODBUS+0x7c>
      if((reg_crc & 0x01) == 1) reg_crc = (reg_crc >> 1) ^ 0xA001;
 80009a2:	210e      	movs	r1, #14
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	2201      	movs	r2, #1
 80009aa:	4013      	ands	r3, r2
 80009ac:	d008      	beq.n	80009c0 <CRC_MODBUS+0x64>
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	085b      	lsrs	r3, r3, #1
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	4927      	ldr	r1, [pc, #156]	; (8000a58 <CRC_MODBUS+0xfc>)
 80009ba:	404a      	eors	r2, r1
 80009bc:	801a      	strh	r2, [r3, #0]
 80009be:	e005      	b.n	80009cc <CRC_MODBUS+0x70>
      else reg_crc = reg_crc >> 1;
 80009c0:	220e      	movs	r2, #14
 80009c2:	18bb      	adds	r3, r7, r2
 80009c4:	18ba      	adds	r2, r7, r2
 80009c6:	8812      	ldrh	r2, [r2, #0]
 80009c8:	0852      	lsrs	r2, r2, #1
 80009ca:	801a      	strh	r2, [r3, #0]
    for(uint8_t j = 0; j < 8; j++) {
 80009cc:	210c      	movs	r1, #12
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	781a      	ldrb	r2, [r3, #0]
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	3201      	adds	r2, #1
 80009d6:	701a      	strb	r2, [r3, #0]
 80009d8:	230c      	movs	r3, #12
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b07      	cmp	r3, #7
 80009e0:	d9df      	bls.n	80009a2 <CRC_MODBUS+0x46>
    }

    check_sum[1] = (reg_crc >> 8) &0xFF;
 80009e2:	210e      	movs	r1, #14
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	2008      	movs	r0, #8
 80009ee:	183b      	adds	r3, r7, r0
 80009f0:	805a      	strh	r2, [r3, #2]
    check_sum[0] = reg_crc & 0xFF;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	22ff      	movs	r2, #255	; 0xff
 80009f8:	4013      	ands	r3, r2
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	183b      	adds	r3, r7, r0
 80009fe:	801a      	strh	r2, [r3, #0]
  for(uint8_t i = 0; i < size - 2; i++) { //tru 2 bytes CRC cuoi
 8000a00:	210d      	movs	r1, #13
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	3201      	adds	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	230d      	movs	r3, #13
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	1cfb      	adds	r3, r7, #3
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	3b02      	subs	r3, #2
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	dbb0      	blt.n	800097e <CRC_MODBUS+0x22>
    //debug = check_sum[0];
  }

  if(input[size-2] == check_sum[0] && input[size-1] == check_sum[1]) return 1;
 8000a1c:	1cfb      	adds	r3, r7, #3
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	3b02      	subs	r3, #2
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	18d3      	adds	r3, r2, r3
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	2108      	movs	r1, #8
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d10c      	bne.n	8000a4e <CRC_MODBUS+0xf2>
 8000a34:	1cfb      	adds	r3, r7, #3
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	18d3      	adds	r3, r2, r3
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	885b      	ldrh	r3, [r3, #2]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d101      	bne.n	8000a4e <CRC_MODBUS+0xf2>
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e000      	b.n	8000a50 <CRC_MODBUS+0xf4>
  else return 0;
 8000a4e:	2300      	movs	r3, #0
}
 8000a50:	0018      	movs	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b004      	add	sp, #16
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	ffffa001 	.word	0xffffa001

08000a5c <ModbusTransHandle>:

void ModbusTransHandle(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  tx_data[0] = address;
 8000a60:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <ModbusTransHandle+0x98>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
  tx_data[1] = function;
 8000a66:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <ModbusTransHandle+0x98>)
 8000a68:	2204      	movs	r2, #4
 8000a6a:	705a      	strb	r2, [r3, #1]
  tx_data[2] = amongBytes;
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <ModbusTransHandle+0x98>)
 8000a6e:	2204      	movs	r2, #4
 8000a70:	709a      	strb	r2, [r3, #2]
  tx_data[3] = countingStatusInput1 >> 8;
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <ModbusTransHandle+0x9c>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	0a1b      	lsrs	r3, r3, #8
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <ModbusTransHandle+0x98>)
 8000a7e:	70da      	strb	r2, [r3, #3]
  tx_data[4] = countingStatusInput1;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <ModbusTransHandle+0x9c>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <ModbusTransHandle+0x98>)
 8000a88:	711a      	strb	r2, [r3, #4]
  tx_data[5] = countingStatusInput2 >> 8;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <ModbusTransHandle+0xa0>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	0a1b      	lsrs	r3, r3, #8
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <ModbusTransHandle+0x98>)
 8000a96:	715a      	strb	r2, [r3, #5]
  tx_data[6] = countingStatusInput2;
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <ModbusTransHandle+0xa0>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <ModbusTransHandle+0x98>)
 8000aa0:	719a      	strb	r2, [r3, #6]
  tx_data[7] = countingStatusInput3 >> 8;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <ModbusTransHandle+0xa4>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	0a1b      	lsrs	r3, r3, #8
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <ModbusTransHandle+0x98>)
 8000aae:	71da      	strb	r2, [r3, #7]
  tx_data[8] = countingStatusInput3;
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <ModbusTransHandle+0xa4>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <ModbusTransHandle+0x98>)
 8000ab8:	721a      	strb	r2, [r3, #8]

  Calc_CRC16(tx_data, 9, checkSumCRC);
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <ModbusTransHandle+0xa8>)
 8000abc:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <ModbusTransHandle+0x98>)
 8000abe:	2109      	movs	r1, #9
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f7ff fee3 	bl	800088c <Calc_CRC16>

  tx_data[9] = checkSumCRC[0];
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <ModbusTransHandle+0xa8>)
 8000ac8:	781a      	ldrb	r2, [r3, #0]
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <ModbusTransHandle+0x98>)
 8000acc:	725a      	strb	r2, [r3, #9]
  tx_data[10] = checkSumCRC[1];
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <ModbusTransHandle+0xa8>)
 8000ad0:	785a      	ldrb	r2, [r3, #1]
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <ModbusTransHandle+0x98>)
 8000ad4:	729a      	strb	r2, [r3, #10]
  HAL_UART_Transmit(&huart1, tx_data, 11, 1000);
 8000ad6:	23fa      	movs	r3, #250	; 0xfa
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	4906      	ldr	r1, [pc, #24]	; (8000af4 <ModbusTransHandle+0x98>)
 8000adc:	480a      	ldr	r0, [pc, #40]	; (8000b08 <ModbusTransHandle+0xac>)
 8000ade:	220b      	movs	r2, #11
 8000ae0:	f001 fec4 	bl	800286c <HAL_UART_Transmit>

  clearUart(tx_data, uartBytes);
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <ModbusTransHandle+0x98>)
 8000ae6:	2132      	movs	r1, #50	; 0x32
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff fe9f 	bl	800082c <clearUart>
}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000140 	.word	0x20000140
 8000af8:	20000176 	.word	0x20000176
 8000afc:	20000178 	.word	0x20000178
 8000b00:	2000017a 	.word	0x2000017a
 8000b04:	2000017c 	.word	0x2000017c
 8000b08:	20000074 	.word	0x20000074

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <Error_Handler+0x8>
	...

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_MspInit+0x44>)
 8000b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_MspInit+0x44>)
 8000b24:	2101      	movs	r1, #1
 8000b26:	430a      	orrs	r2, r1
 8000b28:	641a      	str	r2, [r3, #64]	; 0x40
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_MspInit+0x44>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4013      	ands	r3, r2
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <HAL_MspInit+0x44>)
 8000b38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_MspInit+0x44>)
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	0549      	lsls	r1, r1, #21
 8000b40:	430a      	orrs	r2, r1
 8000b42:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_MspInit+0x44>)
 8000b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	055b      	lsls	r3, r3, #21
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b002      	add	sp, #8
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	40021000 	.word	0x40021000

08000b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <HAL_TIM_Base_MspInit+0x34>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d10b      	bne.n	8000b8a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_TIM_Base_MspInit+0x38>)
 8000b74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_TIM_Base_MspInit+0x38>)
 8000b78:	2102      	movs	r1, #2
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_TIM_Base_MspInit+0x38>)
 8000b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b82:	2202      	movs	r2, #2
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b004      	add	sp, #16
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	40000400 	.word	0x40000400
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b091      	sub	sp, #68	; 0x44
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	232c      	movs	r3, #44	; 0x2c
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	0018      	movs	r0, r3
 8000baa:	2314      	movs	r3, #20
 8000bac:	001a      	movs	r2, r3
 8000bae:	2100      	movs	r1, #0
 8000bb0:	f003 fd84 	bl	80046bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb4:	2410      	movs	r4, #16
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	0018      	movs	r0, r3
 8000bba:	231c      	movs	r3, #28
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f003 fd7c 	bl	80046bc <memset>
  if(huart->Instance==USART1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a3a      	ldr	r2, [pc, #232]	; (8000cb4 <HAL_UART_MspInit+0x118>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d16e      	bne.n	8000cac <HAL_UART_MspInit+0x110>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f001 f99f 	bl	8001f20 <HAL_RCCEx_PeriphCLKConfig>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000be6:	f7ff ff91 	bl	8000b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bea:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <HAL_UART_MspInit+0x11c>)
 8000bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bee:	4b32      	ldr	r3, [pc, #200]	; (8000cb8 <HAL_UART_MspInit+0x11c>)
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	01c9      	lsls	r1, r1, #7
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	641a      	str	r2, [r3, #64]	; 0x40
 8000bf8:	4b2f      	ldr	r3, [pc, #188]	; (8000cb8 <HAL_UART_MspInit+0x11c>)
 8000bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bfc:	2380      	movs	r3, #128	; 0x80
 8000bfe:	01db      	lsls	r3, r3, #7
 8000c00:	4013      	ands	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <HAL_UART_MspInit+0x11c>)
 8000c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c0a:	4b2b      	ldr	r3, [pc, #172]	; (8000cb8 <HAL_UART_MspInit+0x11c>)
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	635a      	str	r2, [r3, #52]	; 0x34
 8000c12:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <HAL_UART_MspInit+0x11c>)
 8000c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c16:	2201      	movs	r2, #1
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS485_Tx_Pin;
 8000c1e:	212c      	movs	r1, #44	; 0x2c
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2280      	movs	r2, #128	; 0x80
 8000c24:	0092      	lsls	r2, r2, #2
 8000c26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	000c      	movs	r4, r1
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	2201      	movs	r2, #1
 8000c34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2203      	movs	r2, #3
 8000c3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2201      	movs	r2, #1
 8000c40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RS485_Tx_GPIO_Port, &GPIO_InitStruct);
 8000c42:	193a      	adds	r2, r7, r4
 8000c44:	23a0      	movs	r3, #160	; 0xa0
 8000c46:	05db      	lsls	r3, r3, #23
 8000c48:	0011      	movs	r1, r2
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fae0 	bl	8001210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_Rx_Pin;
 8000c50:	0021      	movs	r1, r4
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	00d2      	lsls	r2, r2, #3
 8000c58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2202      	movs	r2, #2
 8000c64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2203      	movs	r2, #3
 8000c6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2201      	movs	r2, #1
 8000c70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RS485_Rx_GPIO_Port, &GPIO_InitStruct);
 8000c72:	187a      	adds	r2, r7, r1
 8000c74:	23a0      	movs	r3, #160	; 0xa0
 8000c76:	05db      	lsls	r3, r3, #23
 8000c78:	0011      	movs	r1, r2
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 fac8 	bl	8001210 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA9);
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_UART_MspInit+0x120>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_UART_MspInit+0x120>)
 8000c86:	2180      	movs	r1, #128	; 0x80
 8000c88:	03c9      	lsls	r1, r1, #15
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	601a      	str	r2, [r3, #0]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA10);
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_UART_MspInit+0x120>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_UART_MspInit+0x120>)
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	0409      	lsls	r1, r1, #16
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	201b      	movs	r0, #27
 8000ca2:	f000 f9b7 	bl	8001014 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ca6:	201b      	movs	r0, #27
 8000ca8:	f000 f9c9 	bl	800103e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b011      	add	sp, #68	; 0x44
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	40013800 	.word	0x40013800
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010000 	.word	0x40010000

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce4:	f000 f8aa 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <USART1_IRQHandler+0x14>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f001 feac 	bl	8002a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	20000074 	.word	0x20000074

08000d08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d18:	f7ff fff6 	bl	8000d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1e:	490d      	ldr	r1, [pc, #52]	; (8000d54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <LoopForever+0xe>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d34:	4c0a      	ldr	r4, [pc, #40]	; (8000d60 <LoopForever+0x16>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d42:	f003 fc97 	bl	8004674 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d46:	f7ff fb8f 	bl	8000468 <main>

08000d4a <LoopForever>:

LoopForever:
  b LoopForever
 8000d4a:	e7fe      	b.n	8000d4a <LoopForever>
  ldr   r0, =_estack
 8000d4c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d58:	08004774 	.word	0x08004774
  ldr r2, =_sbss
 8000d5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d60:	20000184 	.word	0x20000184

08000d64 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC1_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_Init+0x3c>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_Init+0x3c>)
 8000d7a:	2180      	movs	r1, #128	; 0x80
 8000d7c:	0049      	lsls	r1, r1, #1
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d82:	2003      	movs	r0, #3
 8000d84:	f000 f810 	bl	8000da8 <HAL_InitTick>
 8000d88:	1e03      	subs	r3, r0, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	e001      	b.n	8000d98 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fec0 	bl	8000b18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	781b      	ldrb	r3, [r3, #0]
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b002      	add	sp, #8
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40022000 	.word	0x40022000

08000da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <HAL_InitTick+0x88>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d02b      	beq.n	8000e18 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <HAL_InitTick+0x8c>)
 8000dc2:	681c      	ldr	r4, [r3, #0]
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_InitTick+0x88>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	0019      	movs	r1, r3
 8000dca:	23fa      	movs	r3, #250	; 0xfa
 8000dcc:	0098      	lsls	r0, r3, #2
 8000dce:	f7ff f997 	bl	8000100 <__udivsi3>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	0020      	movs	r0, r4
 8000dd8:	f7ff f992 	bl	8000100 <__udivsi3>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	0018      	movs	r0, r3
 8000de0:	f000 f93d 	bl	800105e <HAL_SYSTICK_Config>
 8000de4:	1e03      	subs	r3, r0, #0
 8000de6:	d112      	bne.n	8000e0e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d80a      	bhi.n	8000e04 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	2301      	movs	r3, #1
 8000df2:	425b      	negs	r3, r3
 8000df4:	2200      	movs	r2, #0
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 f90c 	bl	8001014 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_InitTick+0x90>)
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	e00d      	b.n	8000e20 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e04:	230f      	movs	r3, #15
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	e008      	b.n	8000e20 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e0e:	230f      	movs	r3, #15
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	e003      	b.n	8000e20 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e18:	230f      	movs	r3, #15
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e20:	230f      	movs	r3, #15
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	781b      	ldrb	r3, [r3, #0]
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b005      	add	sp, #20
 8000e2c:	bd90      	pop	{r4, r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000000 	.word	0x20000000
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_IncTick+0x1c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	001a      	movs	r2, r3
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_IncTick+0x20>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	18d2      	adds	r2, r2, r3
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_IncTick+0x20>)
 8000e4e:	601a      	str	r2, [r3, #0]
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000180 	.word	0x20000180

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <HAL_GetTick+0x10>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	20000180 	.word	0x20000180

08000e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff fff0 	bl	8000e60 <HAL_GetTick>
 8000e80:	0003      	movs	r3, r0
 8000e82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	d005      	beq.n	8000e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_Delay+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	001a      	movs	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	189b      	adds	r3, r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	f7ff ffe0 	bl	8000e60 <HAL_GetTick>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f7      	bhi.n	8000e9c <HAL_Delay+0x28>
  {
  }
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b004      	add	sp, #16
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	20000008 	.word	0x20000008

08000ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	1dfb      	adds	r3, r7, #7
 8000ec6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b7f      	cmp	r3, #127	; 0x7f
 8000ece:	d809      	bhi.n	8000ee4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed0:	1dfb      	adds	r3, r7, #7
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	231f      	movs	r3, #31
 8000ed8:	401a      	ands	r2, r3
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <__NVIC_EnableIRQ+0x30>)
 8000edc:	2101      	movs	r1, #1
 8000ede:	4091      	lsls	r1, r2
 8000ee0:	000a      	movs	r2, r1
 8000ee2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b002      	add	sp, #8
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b7f      	cmp	r3, #127	; 0x7f
 8000f04:	d828      	bhi.n	8000f58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f06:	4a2f      	ldr	r2, [pc, #188]	; (8000fc4 <__NVIC_SetPriority+0xd4>)
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	33c0      	adds	r3, #192	; 0xc0
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	589b      	ldr	r3, [r3, r2]
 8000f16:	1dfa      	adds	r2, r7, #7
 8000f18:	7812      	ldrb	r2, [r2, #0]
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	400a      	ands	r2, r1
 8000f20:	00d2      	lsls	r2, r2, #3
 8000f22:	21ff      	movs	r1, #255	; 0xff
 8000f24:	4091      	lsls	r1, r2
 8000f26:	000a      	movs	r2, r1
 8000f28:	43d2      	mvns	r2, r2
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	019b      	lsls	r3, r3, #6
 8000f32:	22ff      	movs	r2, #255	; 0xff
 8000f34:	401a      	ands	r2, r3
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	4003      	ands	r3, r0
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f44:	481f      	ldr	r0, [pc, #124]	; (8000fc4 <__NVIC_SetPriority+0xd4>)
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	33c0      	adds	r3, #192	; 0xc0
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f56:	e031      	b.n	8000fbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f58:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <__NVIC_SetPriority+0xd8>)
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	0019      	movs	r1, r3
 8000f60:	230f      	movs	r3, #15
 8000f62:	400b      	ands	r3, r1
 8000f64:	3b08      	subs	r3, #8
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	3306      	adds	r3, #6
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	18d3      	adds	r3, r2, r3
 8000f6e:	3304      	adds	r3, #4
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	1dfa      	adds	r2, r7, #7
 8000f74:	7812      	ldrb	r2, [r2, #0]
 8000f76:	0011      	movs	r1, r2
 8000f78:	2203      	movs	r2, #3
 8000f7a:	400a      	ands	r2, r1
 8000f7c:	00d2      	lsls	r2, r2, #3
 8000f7e:	21ff      	movs	r1, #255	; 0xff
 8000f80:	4091      	lsls	r1, r2
 8000f82:	000a      	movs	r2, r1
 8000f84:	43d2      	mvns	r2, r2
 8000f86:	401a      	ands	r2, r3
 8000f88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	019b      	lsls	r3, r3, #6
 8000f8e:	22ff      	movs	r2, #255	; 0xff
 8000f90:	401a      	ands	r2, r3
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	0018      	movs	r0, r3
 8000f98:	2303      	movs	r3, #3
 8000f9a:	4003      	ands	r3, r0
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa0:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <__NVIC_SetPriority+0xd8>)
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	001c      	movs	r4, r3
 8000fa8:	230f      	movs	r3, #15
 8000faa:	4023      	ands	r3, r4
 8000fac:	3b08      	subs	r3, #8
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	3306      	adds	r3, #6
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	18c3      	adds	r3, r0, r3
 8000fb8:	3304      	adds	r3, #4
 8000fba:	601a      	str	r2, [r3, #0]
}
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b003      	add	sp, #12
 8000fc2:	bd90      	pop	{r4, r7, pc}
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	1e5a      	subs	r2, r3, #1
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	045b      	lsls	r3, r3, #17
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d301      	bcc.n	8000fe4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e010      	b.n	8001006 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <SysTick_Config+0x44>)
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	3a01      	subs	r2, #1
 8000fea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fec:	2301      	movs	r3, #1
 8000fee:	425b      	negs	r3, r3
 8000ff0:	2103      	movs	r1, #3
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f7ff ff7c 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x44>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x44>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	0018      	movs	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	210f      	movs	r1, #15
 8001020:	187b      	adds	r3, r7, r1
 8001022:	1c02      	adds	r2, r0, #0
 8001024:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	187b      	adds	r3, r7, r1
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b25b      	sxtb	r3, r3
 800102e:	0011      	movs	r1, r2
 8001030:	0018      	movs	r0, r3
 8001032:	f7ff ff5d 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	0002      	movs	r2, r0
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b25b      	sxtb	r3, r3
 8001050:	0018      	movs	r0, r3
 8001052:	f7ff ff33 	bl	8000ebc <__NVIC_EnableIRQ>
}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	46bd      	mov	sp, r7
 800105a:	b002      	add	sp, #8
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	0018      	movs	r0, r3
 800106a:	f7ff ffaf 	bl	8000fcc <SysTick_Config>
 800106e:	0003      	movs	r3, r0
}
 8001070:	0018      	movs	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	b002      	add	sp, #8
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e050      	b.n	800112c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2225      	movs	r2, #37	; 0x25
 800108e:	5c9b      	ldrb	r3, [r3, r2]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d008      	beq.n	80010a8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2204      	movs	r2, #4
 800109a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2224      	movs	r2, #36	; 0x24
 80010a0:	2100      	movs	r1, #0
 80010a2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e041      	b.n	800112c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	210e      	movs	r1, #14
 80010b4:	438a      	bics	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	491c      	ldr	r1, [pc, #112]	; (8001134 <HAL_DMA_Abort+0xbc>)
 80010c4:	400a      	ands	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2101      	movs	r1, #1
 80010d4:	438a      	bics	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_DMA_Abort+0xc0>)
 80010da:	6859      	ldr	r1, [r3, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	221c      	movs	r2, #28
 80010e2:	4013      	ands	r3, r2
 80010e4:	2201      	movs	r2, #1
 80010e6:	409a      	lsls	r2, r3
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <HAL_DMA_Abort+0xc0>)
 80010ea:	430a      	orrs	r2, r1
 80010ec:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80010f6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00c      	beq.n	800111a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800110a:	490a      	ldr	r1, [pc, #40]	; (8001134 <HAL_DMA_Abort+0xbc>)
 800110c:	400a      	ands	r2, r1
 800110e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001118:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2225      	movs	r2, #37	; 0x25
 800111e:	2101      	movs	r1, #1
 8001120:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2224      	movs	r2, #36	; 0x24
 8001126:	2100      	movs	r1, #0
 8001128:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	b002      	add	sp, #8
 8001132:	bd80      	pop	{r7, pc}
 8001134:	fffffeff 	.word	0xfffffeff
 8001138:	40020000 	.word	0x40020000

0800113c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001144:	210f      	movs	r1, #15
 8001146:	187b      	adds	r3, r7, r1
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2225      	movs	r2, #37	; 0x25
 8001150:	5c9b      	ldrb	r3, [r3, r2]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d006      	beq.n	8001166 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2204      	movs	r2, #4
 800115c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800115e:	187b      	adds	r3, r7, r1
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	e049      	b.n	80011fa <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	210e      	movs	r1, #14
 8001172:	438a      	bics	r2, r1
 8001174:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2101      	movs	r1, #1
 8001182:	438a      	bics	r2, r1
 8001184:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001190:	491d      	ldr	r1, [pc, #116]	; (8001208 <HAL_DMA_Abort_IT+0xcc>)
 8001192:	400a      	ands	r2, r1
 8001194:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <HAL_DMA_Abort_IT+0xd0>)
 8001198:	6859      	ldr	r1, [r3, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	221c      	movs	r2, #28
 80011a0:	4013      	ands	r3, r2
 80011a2:	2201      	movs	r2, #1
 80011a4:	409a      	lsls	r2, r3
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_DMA_Abort_IT+0xd0>)
 80011a8:	430a      	orrs	r2, r1
 80011aa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80011b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00c      	beq.n	80011d8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011c8:	490f      	ldr	r1, [pc, #60]	; (8001208 <HAL_DMA_Abort_IT+0xcc>)
 80011ca:	400a      	ands	r2, r1
 80011cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80011d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2225      	movs	r2, #37	; 0x25
 80011dc:	2101      	movs	r1, #1
 80011de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2224      	movs	r2, #36	; 0x24
 80011e4:	2100      	movs	r1, #0
 80011e6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d004      	beq.n	80011fa <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	0010      	movs	r0, r2
 80011f8:	4798      	blx	r3
    }
  }
  return status;
 80011fa:	230f      	movs	r3, #15
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	781b      	ldrb	r3, [r3, #0]
}
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	b004      	add	sp, #16
 8001206:	bd80      	pop	{r7, pc}
 8001208:	fffffeff 	.word	0xfffffeff
 800120c:	40020000 	.word	0x40020000

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121e:	e147      	b.n	80014b0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2101      	movs	r1, #1
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4091      	lsls	r1, r2
 800122a:	000a      	movs	r2, r1
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d100      	bne.n	8001238 <HAL_GPIO_Init+0x28>
 8001236:	e138      	b.n	80014aa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2203      	movs	r2, #3
 800123e:	4013      	ands	r3, r2
 8001240:	2b01      	cmp	r3, #1
 8001242:	d005      	beq.n	8001250 <HAL_GPIO_Init+0x40>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2203      	movs	r2, #3
 800124a:	4013      	ands	r3, r2
 800124c:	2b02      	cmp	r3, #2
 800124e:	d130      	bne.n	80012b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	409a      	lsls	r2, r3
 800125e:	0013      	movs	r3, r2
 8001260:	43da      	mvns	r2, r3
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001286:	2201      	movs	r2, #1
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
 800128c:	0013      	movs	r3, r2
 800128e:	43da      	mvns	r2, r3
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	091b      	lsrs	r3, r3, #4
 800129c:	2201      	movs	r2, #1
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2203      	movs	r2, #3
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d017      	beq.n	80012ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	409a      	lsls	r2, r3
 80012cc:	0013      	movs	r3, r2
 80012ce:	43da      	mvns	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	409a      	lsls	r2, r3
 80012e0:	0013      	movs	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2203      	movs	r2, #3
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d123      	bne.n	8001342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	08da      	lsrs	r2, r3, #3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3208      	adds	r2, #8
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	58d3      	ldr	r3, [r2, r3]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2207      	movs	r2, #7
 800130c:	4013      	ands	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	409a      	lsls	r2, r3
 8001314:	0013      	movs	r3, r2
 8001316:	43da      	mvns	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	691a      	ldr	r2, [r3, #16]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	2107      	movs	r1, #7
 8001326:	400b      	ands	r3, r1
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	409a      	lsls	r2, r3
 800132c:	0013      	movs	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	6939      	ldr	r1, [r7, #16]
 8001340:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	43da      	mvns	r2, r3
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2203      	movs	r2, #3
 8001360:	401a      	ands	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	409a      	lsls	r2, r3
 8001368:	0013      	movs	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	23c0      	movs	r3, #192	; 0xc0
 800137c:	029b      	lsls	r3, r3, #10
 800137e:	4013      	ands	r3, r2
 8001380:	d100      	bne.n	8001384 <HAL_GPIO_Init+0x174>
 8001382:	e092      	b.n	80014aa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001384:	4a50      	ldr	r2, [pc, #320]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3318      	adds	r3, #24
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	589b      	ldr	r3, [r3, r2]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2203      	movs	r2, #3
 8001396:	4013      	ands	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	220f      	movs	r2, #15
 800139c:	409a      	lsls	r2, r3
 800139e:	0013      	movs	r3, r2
 80013a0:	43da      	mvns	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	23a0      	movs	r3, #160	; 0xa0
 80013ac:	05db      	lsls	r3, r3, #23
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d013      	beq.n	80013da <HAL_GPIO_Init+0x1ca>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a45      	ldr	r2, [pc, #276]	; (80014cc <HAL_GPIO_Init+0x2bc>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d00d      	beq.n	80013d6 <HAL_GPIO_Init+0x1c6>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a44      	ldr	r2, [pc, #272]	; (80014d0 <HAL_GPIO_Init+0x2c0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d007      	beq.n	80013d2 <HAL_GPIO_Init+0x1c2>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a43      	ldr	r2, [pc, #268]	; (80014d4 <HAL_GPIO_Init+0x2c4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d101      	bne.n	80013ce <HAL_GPIO_Init+0x1be>
 80013ca:	2303      	movs	r3, #3
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x1cc>
 80013ce:	2305      	movs	r3, #5
 80013d0:	e004      	b.n	80013dc <HAL_GPIO_Init+0x1cc>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_Init+0x1cc>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x1cc>
 80013da:	2300      	movs	r3, #0
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	2103      	movs	r1, #3
 80013e0:	400a      	ands	r2, r1
 80013e2:	00d2      	lsls	r2, r2, #3
 80013e4:	4093      	lsls	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80013ec:	4936      	ldr	r1, [pc, #216]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3318      	adds	r3, #24
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43da      	mvns	r2, r3
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	035b      	lsls	r3, r3, #13
 8001412:	4013      	ands	r3, r2
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001424:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43da      	mvns	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	039b      	lsls	r3, r3, #14
 800143c:	4013      	ands	r3, r2
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001448:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 8001450:	2384      	movs	r3, #132	; 0x84
 8001452:	58d3      	ldr	r3, [r2, r3]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43da      	mvns	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	029b      	lsls	r3, r3, #10
 8001468:	4013      	ands	r3, r2
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001474:	4914      	ldr	r1, [pc, #80]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 8001476:	2284      	movs	r2, #132	; 0x84
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800147c:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	58d3      	ldr	r3, [r2, r3]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43da      	mvns	r2, r3
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	025b      	lsls	r3, r3, #9
 8001496:	4013      	ands	r3, r2
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014a2:	4909      	ldr	r1, [pc, #36]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	40da      	lsrs	r2, r3
 80014b8:	1e13      	subs	r3, r2, #0
 80014ba:	d000      	beq.n	80014be <HAL_GPIO_Init+0x2ae>
 80014bc:	e6b0      	b.n	8001220 <HAL_GPIO_Init+0x10>
  }
}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b006      	add	sp, #24
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021800 	.word	0x40021800
 80014cc:	50000400 	.word	0x50000400
 80014d0:	50000800 	.word	0x50000800
 80014d4:	50000c00 	.word	0x50000c00

080014d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	000a      	movs	r2, r1
 80014e2:	1cbb      	adds	r3, r7, #2
 80014e4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	1cba      	adds	r2, r7, #2
 80014ec:	8812      	ldrh	r2, [r2, #0]
 80014ee:	4013      	ands	r3, r2
 80014f0:	d004      	beq.n	80014fc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80014f2:	230f      	movs	r3, #15
 80014f4:	18fb      	adds	r3, r7, r3
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	e003      	b.n	8001504 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014fc:	230f      	movs	r3, #15
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001504:	230f      	movs	r3, #15
 8001506:	18fb      	adds	r3, r7, r3
 8001508:	781b      	ldrb	r3, [r3, #0]
}
 800150a:	0018      	movs	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	b004      	add	sp, #16
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a19      	ldr	r2, [pc, #100]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001522:	4013      	ands	r3, r2
 8001524:	0019      	movs	r1, r3
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	430a      	orrs	r2, r1
 800152c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	429a      	cmp	r2, r3
 8001536:	d11f      	bne.n	8001578 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	0013      	movs	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	189b      	adds	r3, r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4912      	ldr	r1, [pc, #72]	; (8001590 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001546:	0018      	movs	r0, r3
 8001548:	f7fe fdda 	bl	8000100 <__udivsi3>
 800154c:	0003      	movs	r3, r0
 800154e:	3301      	adds	r3, #1
 8001550:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001552:	e008      	b.n	8001566 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3b01      	subs	r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e001      	b.n	8001566 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e009      	b.n	800157a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001568:	695a      	ldr	r2, [r3, #20]
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	401a      	ands	r2, r3
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	429a      	cmp	r2, r3
 8001576:	d0ed      	beq.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b004      	add	sp, #16
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	40007000 	.word	0x40007000
 8001588:	fffff9ff 	.word	0xfffff9ff
 800158c:	20000000 	.word	0x20000000
 8001590:	000f4240 	.word	0x000f4240

08001594 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	23e0      	movs	r3, #224	; 0xe0
 800159e:	01db      	lsls	r3, r3, #7
 80015a0:	4013      	ands	r3, r2
}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40021000 	.word	0x40021000

080015ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e2f3      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2201      	movs	r2, #1
 80015c4:	4013      	ands	r3, r2
 80015c6:	d100      	bne.n	80015ca <HAL_RCC_OscConfig+0x1e>
 80015c8:	e07c      	b.n	80016c4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ca:	4bc3      	ldr	r3, [pc, #780]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2238      	movs	r2, #56	; 0x38
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d4:	4bc0      	ldr	r3, [pc, #768]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2203      	movs	r2, #3
 80015da:	4013      	ands	r3, r2
 80015dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	2b10      	cmp	r3, #16
 80015e2:	d102      	bne.n	80015ea <HAL_RCC_OscConfig+0x3e>
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d002      	beq.n	80015f0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d10b      	bne.n	8001608 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f0:	4bb9      	ldr	r3, [pc, #740]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	029b      	lsls	r3, r3, #10
 80015f8:	4013      	ands	r3, r2
 80015fa:	d062      	beq.n	80016c2 <HAL_RCC_OscConfig+0x116>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d15e      	bne.n	80016c2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e2ce      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	025b      	lsls	r3, r3, #9
 8001610:	429a      	cmp	r2, r3
 8001612:	d107      	bne.n	8001624 <HAL_RCC_OscConfig+0x78>
 8001614:	4bb0      	ldr	r3, [pc, #704]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4baf      	ldr	r3, [pc, #700]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800161a:	2180      	movs	r1, #128	; 0x80
 800161c:	0249      	lsls	r1, r1, #9
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	e020      	b.n	8001666 <HAL_RCC_OscConfig+0xba>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	23a0      	movs	r3, #160	; 0xa0
 800162a:	02db      	lsls	r3, r3, #11
 800162c:	429a      	cmp	r2, r3
 800162e:	d10e      	bne.n	800164e <HAL_RCC_OscConfig+0xa2>
 8001630:	4ba9      	ldr	r3, [pc, #676]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4ba8      	ldr	r3, [pc, #672]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001636:	2180      	movs	r1, #128	; 0x80
 8001638:	02c9      	lsls	r1, r1, #11
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	4ba6      	ldr	r3, [pc, #664]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4ba5      	ldr	r3, [pc, #660]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	0249      	lsls	r1, r1, #9
 8001648:	430a      	orrs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e00b      	b.n	8001666 <HAL_RCC_OscConfig+0xba>
 800164e:	4ba2      	ldr	r3, [pc, #648]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4ba1      	ldr	r3, [pc, #644]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001654:	49a1      	ldr	r1, [pc, #644]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001656:	400a      	ands	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	4b9f      	ldr	r3, [pc, #636]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4b9e      	ldr	r3, [pc, #632]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001660:	499f      	ldr	r1, [pc, #636]	; (80018e0 <HAL_RCC_OscConfig+0x334>)
 8001662:	400a      	ands	r2, r1
 8001664:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d014      	beq.n	8001698 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166e:	f7ff fbf7 	bl	8000e60 <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff fbf2 	bl	8000e60 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e28d      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800168a:	4b93      	ldr	r3, [pc, #588]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	029b      	lsls	r3, r3, #10
 8001692:	4013      	ands	r3, r2
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0xcc>
 8001696:	e015      	b.n	80016c4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fbe2 	bl	8000e60 <HAL_GetTick>
 800169c:	0003      	movs	r3, r0
 800169e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a2:	f7ff fbdd 	bl	8000e60 <HAL_GetTick>
 80016a6:	0002      	movs	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b64      	cmp	r3, #100	; 0x64
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e278      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016b4:	4b88      	ldr	r3, [pc, #544]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	029b      	lsls	r3, r3, #10
 80016bc:	4013      	ands	r3, r2
 80016be:	d1f0      	bne.n	80016a2 <HAL_RCC_OscConfig+0xf6>
 80016c0:	e000      	b.n	80016c4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2202      	movs	r2, #2
 80016ca:	4013      	ands	r3, r2
 80016cc:	d100      	bne.n	80016d0 <HAL_RCC_OscConfig+0x124>
 80016ce:	e099      	b.n	8001804 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d0:	4b81      	ldr	r3, [pc, #516]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2238      	movs	r2, #56	; 0x38
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016da:	4b7f      	ldr	r3, [pc, #508]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2203      	movs	r2, #3
 80016e0:	4013      	ands	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2b10      	cmp	r3, #16
 80016e8:	d102      	bne.n	80016f0 <HAL_RCC_OscConfig+0x144>
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d002      	beq.n	80016f6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d135      	bne.n	8001762 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f6:	4b78      	ldr	r3, [pc, #480]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4013      	ands	r3, r2
 8001700:	d005      	beq.n	800170e <HAL_RCC_OscConfig+0x162>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e24b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170e:	4b72      	ldr	r3, [pc, #456]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4a74      	ldr	r2, [pc, #464]	; (80018e4 <HAL_RCC_OscConfig+0x338>)
 8001714:	4013      	ands	r3, r2
 8001716:	0019      	movs	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	021a      	lsls	r2, r3, #8
 800171e:	4b6e      	ldr	r3, [pc, #440]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001720:	430a      	orrs	r2, r1
 8001722:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d112      	bne.n	8001750 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800172a:	4b6b      	ldr	r3, [pc, #428]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a6e      	ldr	r2, [pc, #440]	; (80018e8 <HAL_RCC_OscConfig+0x33c>)
 8001730:	4013      	ands	r3, r2
 8001732:	0019      	movs	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	4b67      	ldr	r3, [pc, #412]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800173a:	430a      	orrs	r2, r1
 800173c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800173e:	4b66      	ldr	r3, [pc, #408]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	0adb      	lsrs	r3, r3, #11
 8001744:	2207      	movs	r2, #7
 8001746:	4013      	ands	r3, r2
 8001748:	4a68      	ldr	r2, [pc, #416]	; (80018ec <HAL_RCC_OscConfig+0x340>)
 800174a:	40da      	lsrs	r2, r3
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x344>)
 800174e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001750:	4b68      	ldr	r3, [pc, #416]	; (80018f4 <HAL_RCC_OscConfig+0x348>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	0018      	movs	r0, r3
 8001756:	f7ff fb27 	bl	8000da8 <HAL_InitTick>
 800175a:	1e03      	subs	r3, r0, #0
 800175c:	d051      	beq.n	8001802 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e221      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d030      	beq.n	80017cc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800176a:	4b5b      	ldr	r3, [pc, #364]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a5e      	ldr	r2, [pc, #376]	; (80018e8 <HAL_RCC_OscConfig+0x33c>)
 8001770:	4013      	ands	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	4b57      	ldr	r3, [pc, #348]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800177a:	430a      	orrs	r2, r1
 800177c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800177e:	4b56      	ldr	r3, [pc, #344]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b55      	ldr	r3, [pc, #340]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	0049      	lsls	r1, r1, #1
 8001788:	430a      	orrs	r2, r1
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fb68 	bl	8000e60 <HAL_GetTick>
 8001790:	0003      	movs	r3, r0
 8001792:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001796:	f7ff fb63 	bl	8000e60 <HAL_GetTick>
 800179a:	0002      	movs	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e1fe      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a8:	4b4b      	ldr	r3, [pc, #300]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4013      	ands	r3, r2
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b4:	4b48      	ldr	r3, [pc, #288]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a4a      	ldr	r2, [pc, #296]	; (80018e4 <HAL_RCC_OscConfig+0x338>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	0019      	movs	r1, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	021a      	lsls	r2, r3, #8
 80017c4:	4b44      	ldr	r3, [pc, #272]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80017c6:	430a      	orrs	r2, r1
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	e01b      	b.n	8001804 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80017cc:	4b42      	ldr	r3, [pc, #264]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b41      	ldr	r3, [pc, #260]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80017d2:	4949      	ldr	r1, [pc, #292]	; (80018f8 <HAL_RCC_OscConfig+0x34c>)
 80017d4:	400a      	ands	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff fb42 	bl	8000e60 <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e2:	f7ff fb3d 	bl	8000e60 <HAL_GetTick>
 80017e6:	0002      	movs	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e1d8      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f4:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	4013      	ands	r3, r2
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0x236>
 8001800:	e000      	b.n	8001804 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001802:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2208      	movs	r2, #8
 800180a:	4013      	ands	r3, r2
 800180c:	d047      	beq.n	800189e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800180e:	4b32      	ldr	r3, [pc, #200]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2238      	movs	r2, #56	; 0x38
 8001814:	4013      	ands	r3, r2
 8001816:	2b18      	cmp	r3, #24
 8001818:	d10a      	bne.n	8001830 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800181a:	4b2f      	ldr	r3, [pc, #188]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800181c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181e:	2202      	movs	r2, #2
 8001820:	4013      	ands	r3, r2
 8001822:	d03c      	beq.n	800189e <HAL_RCC_OscConfig+0x2f2>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d138      	bne.n	800189e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e1ba      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d019      	beq.n	800186c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001838:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800183a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800183c:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800183e:	2101      	movs	r1, #1
 8001840:	430a      	orrs	r2, r1
 8001842:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff fb0c 	bl	8000e60 <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184e:	f7ff fb07 	bl	8000e60 <HAL_GetTick>
 8001852:	0002      	movs	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e1a2      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001864:	2202      	movs	r2, #2
 8001866:	4013      	ands	r3, r2
 8001868:	d0f1      	beq.n	800184e <HAL_RCC_OscConfig+0x2a2>
 800186a:	e018      	b.n	800189e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800186e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001872:	2101      	movs	r1, #1
 8001874:	438a      	bics	r2, r1
 8001876:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff faf2 	bl	8000e60 <HAL_GetTick>
 800187c:	0003      	movs	r3, r0
 800187e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001882:	f7ff faed 	bl	8000e60 <HAL_GetTick>
 8001886:	0002      	movs	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e188      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001894:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001898:	2202      	movs	r2, #2
 800189a:	4013      	ands	r3, r2
 800189c:	d1f1      	bne.n	8001882 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2204      	movs	r2, #4
 80018a4:	4013      	ands	r3, r2
 80018a6:	d100      	bne.n	80018aa <HAL_RCC_OscConfig+0x2fe>
 80018a8:	e0c6      	b.n	8001a38 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018aa:	231f      	movs	r3, #31
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2238      	movs	r2, #56	; 0x38
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b20      	cmp	r3, #32
 80018bc:	d11e      	bne.n	80018fc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80018c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c2:	2202      	movs	r2, #2
 80018c4:	4013      	ands	r3, r2
 80018c6:	d100      	bne.n	80018ca <HAL_RCC_OscConfig+0x31e>
 80018c8:	e0b6      	b.n	8001a38 <HAL_RCC_OscConfig+0x48c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d000      	beq.n	80018d4 <HAL_RCC_OscConfig+0x328>
 80018d2:	e0b1      	b.n	8001a38 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e166      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
 80018d8:	40021000 	.word	0x40021000
 80018dc:	fffeffff 	.word	0xfffeffff
 80018e0:	fffbffff 	.word	0xfffbffff
 80018e4:	ffff80ff 	.word	0xffff80ff
 80018e8:	ffffc7ff 	.word	0xffffc7ff
 80018ec:	00f42400 	.word	0x00f42400
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004
 80018f8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018fc:	4bac      	ldr	r3, [pc, #688]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 80018fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	055b      	lsls	r3, r3, #21
 8001904:	4013      	ands	r3, r2
 8001906:	d101      	bne.n	800190c <HAL_RCC_OscConfig+0x360>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <HAL_RCC_OscConfig+0x362>
 800190c:	2300      	movs	r3, #0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d011      	beq.n	8001936 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	4ba7      	ldr	r3, [pc, #668]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001916:	4ba6      	ldr	r3, [pc, #664]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001918:	2180      	movs	r1, #128	; 0x80
 800191a:	0549      	lsls	r1, r1, #21
 800191c:	430a      	orrs	r2, r1
 800191e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001920:	4ba3      	ldr	r3, [pc, #652]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	055b      	lsls	r3, r3, #21
 8001928:	4013      	ands	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800192e:	231f      	movs	r3, #31
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	2201      	movs	r2, #1
 8001934:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001936:	4b9f      	ldr	r3, [pc, #636]	; (8001bb4 <HAL_RCC_OscConfig+0x608>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4013      	ands	r3, r2
 8001940:	d11a      	bne.n	8001978 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001942:	4b9c      	ldr	r3, [pc, #624]	; (8001bb4 <HAL_RCC_OscConfig+0x608>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4b9b      	ldr	r3, [pc, #620]	; (8001bb4 <HAL_RCC_OscConfig+0x608>)
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	0049      	lsls	r1, r1, #1
 800194c:	430a      	orrs	r2, r1
 800194e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001950:	f7ff fa86 	bl	8000e60 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195a:	f7ff fa81 	bl	8000e60 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e11c      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196c:	4b91      	ldr	r3, [pc, #580]	; (8001bb4 <HAL_RCC_OscConfig+0x608>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4013      	ands	r3, r2
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x3e2>
 8001980:	4b8b      	ldr	r3, [pc, #556]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001982:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001984:	4b8a      	ldr	r3, [pc, #552]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001986:	2101      	movs	r1, #1
 8001988:	430a      	orrs	r2, r1
 800198a:	65da      	str	r2, [r3, #92]	; 0x5c
 800198c:	e01c      	b.n	80019c8 <HAL_RCC_OscConfig+0x41c>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b05      	cmp	r3, #5
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x404>
 8001996:	4b86      	ldr	r3, [pc, #536]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001998:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800199a:	4b85      	ldr	r3, [pc, #532]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 800199c:	2104      	movs	r1, #4
 800199e:	430a      	orrs	r2, r1
 80019a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80019a2:	4b83      	ldr	r3, [pc, #524]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 80019a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019a6:	4b82      	ldr	r3, [pc, #520]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 80019a8:	2101      	movs	r1, #1
 80019aa:	430a      	orrs	r2, r1
 80019ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80019ae:	e00b      	b.n	80019c8 <HAL_RCC_OscConfig+0x41c>
 80019b0:	4b7f      	ldr	r3, [pc, #508]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 80019b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019b4:	4b7e      	ldr	r3, [pc, #504]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 80019b6:	2101      	movs	r1, #1
 80019b8:	438a      	bics	r2, r1
 80019ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80019bc:	4b7c      	ldr	r3, [pc, #496]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 80019be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019c0:	4b7b      	ldr	r3, [pc, #492]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 80019c2:	2104      	movs	r1, #4
 80019c4:	438a      	bics	r2, r1
 80019c6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d014      	beq.n	80019fa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff fa46 	bl	8000e60 <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d8:	e009      	b.n	80019ee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019da:	f7ff fa41 	bl	8000e60 <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	4a74      	ldr	r2, [pc, #464]	; (8001bb8 <HAL_RCC_OscConfig+0x60c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e0db      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ee:	4b70      	ldr	r3, [pc, #448]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	2202      	movs	r2, #2
 80019f4:	4013      	ands	r3, r2
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x42e>
 80019f8:	e013      	b.n	8001a22 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff fa31 	bl	8000e60 <HAL_GetTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a02:	e009      	b.n	8001a18 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a04:	f7ff fa2c 	bl	8000e60 <HAL_GetTick>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	4a6a      	ldr	r2, [pc, #424]	; (8001bb8 <HAL_RCC_OscConfig+0x60c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e0c6      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a18:	4b65      	ldr	r3, [pc, #404]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a22:	231f      	movs	r3, #31
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d105      	bne.n	8001a38 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a2c:	4b60      	ldr	r3, [pc, #384]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a30:	4b5f      	ldr	r3, [pc, #380]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001a32:	4962      	ldr	r1, [pc, #392]	; (8001bbc <HAL_RCC_OscConfig+0x610>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d100      	bne.n	8001a42 <HAL_RCC_OscConfig+0x496>
 8001a40:	e0b0      	b.n	8001ba4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a42:	4b5b      	ldr	r3, [pc, #364]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2238      	movs	r2, #56	; 0x38
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	d100      	bne.n	8001a50 <HAL_RCC_OscConfig+0x4a4>
 8001a4e:	e078      	b.n	8001b42 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d153      	bne.n	8001b00 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a58:	4b55      	ldr	r3, [pc, #340]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b54      	ldr	r3, [pc, #336]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001a5e:	4958      	ldr	r1, [pc, #352]	; (8001bc0 <HAL_RCC_OscConfig+0x614>)
 8001a60:	400a      	ands	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff f9fc 	bl	8000e60 <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6e:	f7ff f9f7 	bl	8000e60 <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e092      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a80:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	049b      	lsls	r3, r3, #18
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d1f0      	bne.n	8001a6e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a8c:	4b48      	ldr	r3, [pc, #288]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4a4c      	ldr	r2, [pc, #304]	; (8001bc4 <HAL_RCC_OscConfig+0x618>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	0019      	movs	r1, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1a      	ldr	r2, [r3, #32]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	4b3e      	ldr	r3, [pc, #248]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aba:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001ac0:	2180      	movs	r1, #128	; 0x80
 8001ac2:	0449      	lsls	r1, r1, #17
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ac8:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001ace:	2180      	movs	r1, #128	; 0x80
 8001ad0:	0549      	lsls	r1, r1, #21
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff f9c3 	bl	8000e60 <HAL_GetTick>
 8001ada:	0003      	movs	r3, r0
 8001adc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f9be 	bl	8000e60 <HAL_GetTick>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e059      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	049b      	lsls	r3, r3, #18
 8001afa:	4013      	ands	r3, r2
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x534>
 8001afe:	e051      	b.n	8001ba4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b00:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001b06:	492e      	ldr	r1, [pc, #184]	; (8001bc0 <HAL_RCC_OscConfig+0x614>)
 8001b08:	400a      	ands	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7ff f9a8 	bl	8000e60 <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b16:	f7ff f9a3 	bl	8000e60 <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e03e      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	049b      	lsls	r3, r3, #18
 8001b30:	4013      	ands	r3, r2
 8001b32:	d1f0      	bne.n	8001b16 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001b34:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001b3a:	4923      	ldr	r1, [pc, #140]	; (8001bc8 <HAL_RCC_OscConfig+0x61c>)
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	e030      	b.n	8001ba4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e02b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001b4e:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2203      	movs	r2, #3
 8001b58:	401a      	ands	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d11e      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2270      	movs	r2, #112	; 0x70
 8001b66:	401a      	ands	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d117      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	23fe      	movs	r3, #254	; 0xfe
 8001b74:	01db      	lsls	r3, r3, #7
 8001b76:	401a      	ands	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d10e      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	23f8      	movs	r3, #248	; 0xf8
 8001b86:	039b      	lsls	r3, r3, #14
 8001b88:	401a      	ands	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d106      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	0f5b      	lsrs	r3, r3, #29
 8001b96:	075a      	lsls	r2, r3, #29
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b008      	add	sp, #32
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	00001388 	.word	0x00001388
 8001bbc:	efffffff 	.word	0xefffffff
 8001bc0:	feffffff 	.word	0xfeffffff
 8001bc4:	1fc1808c 	.word	0x1fc1808c
 8001bc8:	effefffc 	.word	0xeffefffc

08001bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0e9      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001be0:	4b76      	ldr	r3, [pc, #472]	; (8001dbc <HAL_RCC_ClockConfig+0x1f0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2207      	movs	r2, #7
 8001be6:	4013      	ands	r3, r2
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d91e      	bls.n	8001c2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b73      	ldr	r3, [pc, #460]	; (8001dbc <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2207      	movs	r2, #7
 8001bf4:	4393      	bics	r3, r2
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	4b70      	ldr	r3, [pc, #448]	; (8001dbc <HAL_RCC_ClockConfig+0x1f0>)
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c00:	f7ff f92e 	bl	8000e60 <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c08:	e009      	b.n	8001c1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0a:	f7ff f929 	bl	8000e60 <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	4a6a      	ldr	r2, [pc, #424]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e0ca      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c1e:	4b67      	ldr	r3, [pc, #412]	; (8001dbc <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2207      	movs	r2, #7
 8001c24:	4013      	ands	r3, r2
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d1ee      	bne.n	8001c0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2202      	movs	r2, #2
 8001c32:	4013      	ands	r3, r2
 8001c34:	d015      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d006      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c40:	4b60      	ldr	r3, [pc, #384]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	4b5f      	ldr	r3, [pc, #380]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c46:	21e0      	movs	r1, #224	; 0xe0
 8001c48:	01c9      	lsls	r1, r1, #7
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4e:	4b5d      	ldr	r3, [pc, #372]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	4a5d      	ldr	r2, [pc, #372]	; (8001dc8 <HAL_RCC_ClockConfig+0x1fc>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	0019      	movs	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2201      	movs	r2, #1
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d057      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d107      	bne.n	8001c84 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c74:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	029b      	lsls	r3, r3, #10
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d12b      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e097      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8c:	4b4d      	ldr	r3, [pc, #308]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	049b      	lsls	r3, r3, #18
 8001c94:	4013      	ands	r3, r2
 8001c96:	d11f      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e08b      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d107      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca4:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4013      	ands	r3, r2
 8001cae:	d113      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e07f      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d106      	bne.n	8001cca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cbc:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d108      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e074      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cca:	4b3e      	ldr	r3, [pc, #248]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	2202      	movs	r2, #2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e06d      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2207      	movs	r2, #7
 8001cde:	4393      	bics	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cec:	f7ff f8b8 	bl	8000e60 <HAL_GetTick>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf4:	e009      	b.n	8001d0a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf6:	f7ff f8b3 	bl	8000e60 <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	4a2f      	ldr	r2, [pc, #188]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e054      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2238      	movs	r2, #56	; 0x38
 8001d10:	401a      	ands	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1ec      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <HAL_RCC_ClockConfig+0x1f0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2207      	movs	r2, #7
 8001d22:	4013      	ands	r3, r2
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d21e      	bcs.n	8001d68 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_RCC_ClockConfig+0x1f0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2207      	movs	r2, #7
 8001d30:	4393      	bics	r3, r2
 8001d32:	0019      	movs	r1, r3
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <HAL_RCC_ClockConfig+0x1f0>)
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d3c:	f7ff f890 	bl	8000e60 <HAL_GetTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d44:	e009      	b.n	8001d5a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d46:	f7ff f88b 	bl	8000e60 <HAL_GetTick>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e02c      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <HAL_RCC_ClockConfig+0x1f0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2207      	movs	r2, #7
 8001d60:	4013      	ands	r3, r2
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1ee      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d009      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	4a15      	ldr	r2, [pc, #84]	; (8001dcc <HAL_RCC_ClockConfig+0x200>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d82:	430a      	orrs	r2, r1
 8001d84:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d86:	f000 f829 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8001d8a:	0001      	movs	r1, r0
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	220f      	movs	r2, #15
 8001d94:	401a      	ands	r2, r3
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_RCC_ClockConfig+0x204>)
 8001d98:	0092      	lsls	r2, r2, #2
 8001d9a:	58d3      	ldr	r3, [r2, r3]
 8001d9c:	221f      	movs	r2, #31
 8001d9e:	4013      	ands	r3, r2
 8001da0:	000a      	movs	r2, r1
 8001da2:	40da      	lsrs	r2, r3
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_ClockConfig+0x208>)
 8001da6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_ClockConfig+0x20c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0018      	movs	r0, r3
 8001dae:	f7fe fffb 	bl	8000da8 <HAL_InitTick>
 8001db2:	0003      	movs	r3, r0
}
 8001db4:	0018      	movs	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b004      	add	sp, #16
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	00001388 	.word	0x00001388
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	fffff0ff 	.word	0xfffff0ff
 8001dcc:	ffff8fff 	.word	0xffff8fff
 8001dd0:	080046e4 	.word	0x080046e4
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	20000004 	.word	0x20000004

08001ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de2:	4b3c      	ldr	r3, [pc, #240]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2238      	movs	r2, #56	; 0x38
 8001de8:	4013      	ands	r3, r2
 8001dea:	d10f      	bne.n	8001e0c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001dec:	4b39      	ldr	r3, [pc, #228]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0adb      	lsrs	r3, r3, #11
 8001df2:	2207      	movs	r2, #7
 8001df4:	4013      	ands	r3, r2
 8001df6:	2201      	movs	r2, #1
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	0013      	movs	r3, r2
 8001dfc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001dfe:	6839      	ldr	r1, [r7, #0]
 8001e00:	4835      	ldr	r0, [pc, #212]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e02:	f7fe f97d 	bl	8000100 <__udivsi3>
 8001e06:	0003      	movs	r3, r0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	e05d      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e0c:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2238      	movs	r2, #56	; 0x38
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d102      	bne.n	8001e1e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e18:	4b30      	ldr	r3, [pc, #192]	; (8001edc <HAL_RCC_GetSysClockFreq+0x100>)
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	e054      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2238      	movs	r2, #56	; 0x38
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b10      	cmp	r3, #16
 8001e28:	d138      	bne.n	8001e9c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2203      	movs	r2, #3
 8001e30:	4013      	ands	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e34:	4b27      	ldr	r3, [pc, #156]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	2207      	movs	r2, #7
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	3301      	adds	r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d10d      	bne.n	8001e64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	4824      	ldr	r0, [pc, #144]	; (8001edc <HAL_RCC_GetSysClockFreq+0x100>)
 8001e4c:	f7fe f958 	bl	8000100 <__udivsi3>
 8001e50:	0003      	movs	r3, r0
 8001e52:	0019      	movs	r1, r3
 8001e54:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	227f      	movs	r2, #127	; 0x7f
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	434b      	muls	r3, r1
 8001e60:	617b      	str	r3, [r7, #20]
        break;
 8001e62:	e00d      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	481c      	ldr	r0, [pc, #112]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e68:	f7fe f94a 	bl	8000100 <__udivsi3>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	0019      	movs	r1, r3
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	227f      	movs	r2, #127	; 0x7f
 8001e78:	4013      	ands	r3, r2
 8001e7a:	434b      	muls	r3, r1
 8001e7c:	617b      	str	r3, [r7, #20]
        break;
 8001e7e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0f5b      	lsrs	r3, r3, #29
 8001e86:	2207      	movs	r2, #7
 8001e88:	4013      	ands	r3, r2
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	6978      	ldr	r0, [r7, #20]
 8001e92:	f7fe f935 	bl	8000100 <__udivsi3>
 8001e96:	0003      	movs	r3, r0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	e015      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2238      	movs	r2, #56	; 0x38
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d103      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	e00b      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2238      	movs	r2, #56	; 0x38
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b18      	cmp	r3, #24
 8001eba:	d103      	bne.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001ebc:	23fa      	movs	r3, #250	; 0xfa
 8001ebe:	01db      	lsls	r3, r3, #7
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	e001      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ec8:	693b      	ldr	r3, [r7, #16]
}
 8001eca:	0018      	movs	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b006      	add	sp, #24
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	00f42400 	.word	0x00f42400
 8001edc:	007a1200 	.word	0x007a1200

08001ee0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee4:	4b02      	ldr	r3, [pc, #8]	; (8001ef0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	20000000 	.word	0x20000000

08001ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef4:	b5b0      	push	{r4, r5, r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ef8:	f7ff fff2 	bl	8001ee0 <HAL_RCC_GetHCLKFreq>
 8001efc:	0004      	movs	r4, r0
 8001efe:	f7ff fb49 	bl	8001594 <LL_RCC_GetAPB1Prescaler>
 8001f02:	0003      	movs	r3, r0
 8001f04:	0b1a      	lsrs	r2, r3, #12
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f08:	0092      	lsls	r2, r2, #2
 8001f0a:	58d3      	ldr	r3, [r2, r3]
 8001f0c:	221f      	movs	r2, #31
 8001f0e:	4013      	ands	r3, r2
 8001f10:	40dc      	lsrs	r4, r3
 8001f12:	0023      	movs	r3, r4
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	08004724 	.word	0x08004724

08001f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f28:	2313      	movs	r3, #19
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f30:	2312      	movs	r3, #18
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	029b      	lsls	r3, r3, #10
 8001f40:	4013      	ands	r3, r2
 8001f42:	d100      	bne.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001f44:	e0a3      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f46:	2011      	movs	r0, #17
 8001f48:	183b      	adds	r3, r7, r0
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4e:	4b86      	ldr	r3, [pc, #536]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	055b      	lsls	r3, r3, #21
 8001f56:	4013      	ands	r3, r2
 8001f58:	d110      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	4b83      	ldr	r3, [pc, #524]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f5e:	4b82      	ldr	r3, [pc, #520]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f60:	2180      	movs	r1, #128	; 0x80
 8001f62:	0549      	lsls	r1, r1, #21
 8001f64:	430a      	orrs	r2, r1
 8001f66:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f68:	4b7f      	ldr	r3, [pc, #508]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	055b      	lsls	r3, r3, #21
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f76:	183b      	adds	r3, r7, r0
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f7c:	4b7b      	ldr	r3, [pc, #492]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b7a      	ldr	r3, [pc, #488]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f82:	2180      	movs	r1, #128	; 0x80
 8001f84:	0049      	lsls	r1, r1, #1
 8001f86:	430a      	orrs	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f8a:	f7fe ff69 	bl	8000e60 <HAL_GetTick>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f92:	e00b      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f94:	f7fe ff64 	bl	8000e60 <HAL_GetTick>
 8001f98:	0002      	movs	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d904      	bls.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001fa2:	2313      	movs	r3, #19
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	701a      	strb	r2, [r3, #0]
        break;
 8001faa:	e005      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fac:	4b6f      	ldr	r3, [pc, #444]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d0ed      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001fb8:	2313      	movs	r3, #19
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d154      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fc2:	4b69      	ldr	r3, [pc, #420]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fc6:	23c0      	movs	r3, #192	; 0xc0
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d019      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d014      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fde:	4b62      	ldr	r3, [pc, #392]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	4a63      	ldr	r2, [pc, #396]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fe8:	4b5f      	ldr	r3, [pc, #380]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fec:	4b5e      	ldr	r3, [pc, #376]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	0249      	lsls	r1, r1, #9
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ff6:	4b5c      	ldr	r3, [pc, #368]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ff8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ffa:	4b5b      	ldr	r3, [pc, #364]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ffc:	495d      	ldr	r1, [pc, #372]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001ffe:	400a      	ands	r2, r1
 8002000:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002002:	4b59      	ldr	r3, [pc, #356]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2201      	movs	r2, #1
 800200c:	4013      	ands	r3, r2
 800200e:	d016      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7fe ff26 	bl	8000e60 <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002018:	e00c      	b.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201a:	f7fe ff21 	bl	8000e60 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	4a54      	ldr	r2, [pc, #336]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d904      	bls.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800202a:	2313      	movs	r3, #19
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	2203      	movs	r2, #3
 8002030:	701a      	strb	r2, [r3, #0]
            break;
 8002032:	e004      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002034:	4b4c      	ldr	r3, [pc, #304]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	2202      	movs	r2, #2
 800203a:	4013      	ands	r3, r2
 800203c:	d0ed      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800203e:	2313      	movs	r3, #19
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10a      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002048:	4b47      	ldr	r3, [pc, #284]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	4a48      	ldr	r2, [pc, #288]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800204e:	4013      	ands	r3, r2
 8002050:	0019      	movs	r1, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	4b44      	ldr	r3, [pc, #272]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002058:	430a      	orrs	r2, r1
 800205a:	65da      	str	r2, [r3, #92]	; 0x5c
 800205c:	e00c      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800205e:	2312      	movs	r3, #18
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	2213      	movs	r2, #19
 8002064:	18ba      	adds	r2, r7, r2
 8002066:	7812      	ldrb	r2, [r2, #0]
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	e005      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800206c:	2312      	movs	r3, #18
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	2213      	movs	r2, #19
 8002072:	18ba      	adds	r2, r7, r2
 8002074:	7812      	ldrb	r2, [r2, #0]
 8002076:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002078:	2311      	movs	r3, #17
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002082:	4b39      	ldr	r3, [pc, #228]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002086:	4b38      	ldr	r3, [pc, #224]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002088:	493c      	ldr	r1, [pc, #240]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800208a:	400a      	ands	r2, r1
 800208c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2201      	movs	r2, #1
 8002094:	4013      	ands	r3, r2
 8002096:	d009      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002098:	4b33      	ldr	r3, [pc, #204]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800209a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209c:	2203      	movs	r2, #3
 800209e:	4393      	bics	r3, r2
 80020a0:	0019      	movs	r1, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	4b30      	ldr	r3, [pc, #192]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020a8:	430a      	orrs	r2, r1
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2202      	movs	r2, #2
 80020b2:	4013      	ands	r3, r2
 80020b4:	d009      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020b6:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	220c      	movs	r2, #12
 80020bc:	4393      	bics	r3, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	4b28      	ldr	r3, [pc, #160]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2220      	movs	r2, #32
 80020d0:	4013      	ands	r3, r2
 80020d2:	d009      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020d4:	4b24      	ldr	r3, [pc, #144]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	4a29      	ldr	r2, [pc, #164]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	4b21      	ldr	r3, [pc, #132]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020e4:	430a      	orrs	r2, r1
 80020e6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	01db      	lsls	r3, r3, #7
 80020f0:	4013      	ands	r3, r2
 80020f2:	d015      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020f4:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	0899      	lsrs	r1, r3, #2
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	4b19      	ldr	r3, [pc, #100]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002102:	430a      	orrs	r2, r1
 8002104:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	05db      	lsls	r3, r3, #23
 800210e:	429a      	cmp	r2, r3
 8002110:	d106      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002118:	2180      	movs	r1, #128	; 0x80
 800211a:	0249      	lsls	r1, r1, #9
 800211c:	430a      	orrs	r2, r1
 800211e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	4013      	ands	r3, r2
 800212a:	d016      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800212e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002130:	4a14      	ldr	r2, [pc, #80]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002132:	4013      	ands	r3, r2
 8002134:	0019      	movs	r1, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800213c:	430a      	orrs	r2, r1
 800213e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	01db      	lsls	r3, r3, #7
 8002148:	429a      	cmp	r2, r3
 800214a:	d106      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002152:	2180      	movs	r1, #128	; 0x80
 8002154:	0249      	lsls	r1, r1, #9
 8002156:	430a      	orrs	r2, r1
 8002158:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800215a:	2312      	movs	r3, #18
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	781b      	ldrb	r3, [r3, #0]
}
 8002160:	0018      	movs	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	b006      	add	sp, #24
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000
 800216c:	40007000 	.word	0x40007000
 8002170:	fffffcff 	.word	0xfffffcff
 8002174:	fffeffff 	.word	0xfffeffff
 8002178:	00001388 	.word	0x00001388
 800217c:	efffffff 	.word	0xefffffff
 8002180:	ffffcfff 	.word	0xffffcfff
 8002184:	ffff3fff 	.word	0xffff3fff

08002188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e04a      	b.n	8002230 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	223d      	movs	r2, #61	; 0x3d
 800219e:	5c9b      	ldrb	r3, [r3, r2]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d107      	bne.n	80021b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	223c      	movs	r2, #60	; 0x3c
 80021aa:	2100      	movs	r1, #0
 80021ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	0018      	movs	r0, r3
 80021b2:	f7fe fcd5 	bl	8000b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	223d      	movs	r2, #61	; 0x3d
 80021ba:	2102      	movs	r1, #2
 80021bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3304      	adds	r3, #4
 80021c6:	0019      	movs	r1, r3
 80021c8:	0010      	movs	r0, r2
 80021ca:	f000 f97f 	bl	80024cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2248      	movs	r2, #72	; 0x48
 80021d2:	2101      	movs	r1, #1
 80021d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	223e      	movs	r2, #62	; 0x3e
 80021da:	2101      	movs	r1, #1
 80021dc:	5499      	strb	r1, [r3, r2]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	223f      	movs	r2, #63	; 0x3f
 80021e2:	2101      	movs	r1, #1
 80021e4:	5499      	strb	r1, [r3, r2]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2240      	movs	r2, #64	; 0x40
 80021ea:	2101      	movs	r1, #1
 80021ec:	5499      	strb	r1, [r3, r2]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2241      	movs	r2, #65	; 0x41
 80021f2:	2101      	movs	r1, #1
 80021f4:	5499      	strb	r1, [r3, r2]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2242      	movs	r2, #66	; 0x42
 80021fa:	2101      	movs	r1, #1
 80021fc:	5499      	strb	r1, [r3, r2]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2243      	movs	r2, #67	; 0x43
 8002202:	2101      	movs	r1, #1
 8002204:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2244      	movs	r2, #68	; 0x44
 800220a:	2101      	movs	r1, #1
 800220c:	5499      	strb	r1, [r3, r2]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2245      	movs	r2, #69	; 0x45
 8002212:	2101      	movs	r1, #1
 8002214:	5499      	strb	r1, [r3, r2]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2246      	movs	r2, #70	; 0x46
 800221a:	2101      	movs	r1, #1
 800221c:	5499      	strb	r1, [r3, r2]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2247      	movs	r2, #71	; 0x47
 8002222:	2101      	movs	r1, #1
 8002224:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	223d      	movs	r2, #61	; 0x3d
 800222a:	2101      	movs	r1, #1
 800222c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	b002      	add	sp, #8
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	223d      	movs	r2, #61	; 0x3d
 8002244:	5c9b      	ldrb	r3, [r3, r2]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b01      	cmp	r3, #1
 800224a:	d001      	beq.n	8002250 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e034      	b.n	80022ba <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	223d      	movs	r2, #61	; 0x3d
 8002254:	2102      	movs	r1, #2
 8002256:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <HAL_TIM_Base_Start+0x8c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d009      	beq.n	8002276 <HAL_TIM_Base_Start+0x3e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a18      	ldr	r2, [pc, #96]	; (80022c8 <HAL_TIM_Base_Start+0x90>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d004      	beq.n	8002276 <HAL_TIM_Base_Start+0x3e>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a16      	ldr	r2, [pc, #88]	; (80022cc <HAL_TIM_Base_Start+0x94>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d116      	bne.n	80022a4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <HAL_TIM_Base_Start+0x98>)
 800227e:	4013      	ands	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b06      	cmp	r3, #6
 8002286:	d016      	beq.n	80022b6 <HAL_TIM_Base_Start+0x7e>
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	025b      	lsls	r3, r3, #9
 800228e:	429a      	cmp	r2, r3
 8002290:	d011      	beq.n	80022b6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2101      	movs	r1, #1
 800229e:	430a      	orrs	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a2:	e008      	b.n	80022b6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2101      	movs	r1, #1
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e000      	b.n	80022b8 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b004      	add	sp, #16
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	40012c00 	.word	0x40012c00
 80022c8:	40000400 	.word	0x40000400
 80022cc:	40014000 	.word	0x40014000
 80022d0:	00010007 	.word	0x00010007

080022d4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4a0d      	ldr	r2, [pc, #52]	; (8002318 <HAL_TIM_Base_Stop+0x44>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	d10d      	bne.n	8002304 <HAL_TIM_Base_Stop+0x30>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a0b      	ldr	r2, [pc, #44]	; (800231c <HAL_TIM_Base_Stop+0x48>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	d107      	bne.n	8002304 <HAL_TIM_Base_Stop+0x30>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2101      	movs	r1, #1
 8002300:	438a      	bics	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	223d      	movs	r2, #61	; 0x3d
 8002308:	2101      	movs	r1, #1
 800230a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	0018      	movs	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	b002      	add	sp, #8
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	00001111 	.word	0x00001111
 800231c:	00000444 	.word	0x00000444

08002320 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800232a:	230f      	movs	r3, #15
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	223c      	movs	r2, #60	; 0x3c
 8002336:	5c9b      	ldrb	r3, [r3, r2]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_TIM_ConfigClockSource+0x20>
 800233c:	2302      	movs	r3, #2
 800233e:	e0bc      	b.n	80024ba <HAL_TIM_ConfigClockSource+0x19a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	223c      	movs	r2, #60	; 0x3c
 8002344:	2101      	movs	r1, #1
 8002346:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	223d      	movs	r2, #61	; 0x3d
 800234c:	2102      	movs	r1, #2
 800234e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	4a5a      	ldr	r2, [pc, #360]	; (80024c4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800235c:	4013      	ands	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4a59      	ldr	r2, [pc, #356]	; (80024c8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002364:	4013      	ands	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2280      	movs	r2, #128	; 0x80
 8002376:	0192      	lsls	r2, r2, #6
 8002378:	4293      	cmp	r3, r2
 800237a:	d040      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0xde>
 800237c:	2280      	movs	r2, #128	; 0x80
 800237e:	0192      	lsls	r2, r2, #6
 8002380:	4293      	cmp	r3, r2
 8002382:	d900      	bls.n	8002386 <HAL_TIM_ConfigClockSource+0x66>
 8002384:	e088      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x178>
 8002386:	2280      	movs	r2, #128	; 0x80
 8002388:	0152      	lsls	r2, r2, #5
 800238a:	4293      	cmp	r3, r2
 800238c:	d100      	bne.n	8002390 <HAL_TIM_ConfigClockSource+0x70>
 800238e:	e088      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x182>
 8002390:	2280      	movs	r2, #128	; 0x80
 8002392:	0152      	lsls	r2, r2, #5
 8002394:	4293      	cmp	r3, r2
 8002396:	d900      	bls.n	800239a <HAL_TIM_ConfigClockSource+0x7a>
 8002398:	e07e      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x178>
 800239a:	2b70      	cmp	r3, #112	; 0x70
 800239c:	d018      	beq.n	80023d0 <HAL_TIM_ConfigClockSource+0xb0>
 800239e:	d900      	bls.n	80023a2 <HAL_TIM_ConfigClockSource+0x82>
 80023a0:	e07a      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x178>
 80023a2:	2b60      	cmp	r3, #96	; 0x60
 80023a4:	d04f      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x126>
 80023a6:	d900      	bls.n	80023aa <HAL_TIM_ConfigClockSource+0x8a>
 80023a8:	e076      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x178>
 80023aa:	2b50      	cmp	r3, #80	; 0x50
 80023ac:	d03b      	beq.n	8002426 <HAL_TIM_ConfigClockSource+0x106>
 80023ae:	d900      	bls.n	80023b2 <HAL_TIM_ConfigClockSource+0x92>
 80023b0:	e072      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x178>
 80023b2:	2b40      	cmp	r3, #64	; 0x40
 80023b4:	d057      	beq.n	8002466 <HAL_TIM_ConfigClockSource+0x146>
 80023b6:	d900      	bls.n	80023ba <HAL_TIM_ConfigClockSource+0x9a>
 80023b8:	e06e      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x178>
 80023ba:	2b30      	cmp	r3, #48	; 0x30
 80023bc:	d063      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x166>
 80023be:	d86b      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x178>
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d060      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x166>
 80023c4:	d868      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x178>
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d05d      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x166>
 80023ca:	2b10      	cmp	r3, #16
 80023cc:	d05b      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x166>
 80023ce:	e063      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6899      	ldr	r1, [r3, #8]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f000 f966 	bl	80026b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2277      	movs	r2, #119	; 0x77
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	609a      	str	r2, [r3, #8]
      break;
 80023fc:	e052      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6899      	ldr	r1, [r3, #8]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f000 f94f 	bl	80026b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2180      	movs	r1, #128	; 0x80
 800241e:	01c9      	lsls	r1, r1, #7
 8002420:	430a      	orrs	r2, r1
 8002422:	609a      	str	r2, [r3, #8]
      break;
 8002424:	e03e      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6859      	ldr	r1, [r3, #4]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	001a      	movs	r2, r3
 8002434:	f000 f8c0 	bl	80025b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2150      	movs	r1, #80	; 0x50
 800243e:	0018      	movs	r0, r3
 8002440:	f000 f91a 	bl	8002678 <TIM_ITRx_SetConfig>
      break;
 8002444:	e02e      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	001a      	movs	r2, r3
 8002454:	f000 f8de 	bl	8002614 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2160      	movs	r1, #96	; 0x60
 800245e:	0018      	movs	r0, r3
 8002460:	f000 f90a 	bl	8002678 <TIM_ITRx_SetConfig>
      break;
 8002464:	e01e      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	001a      	movs	r2, r3
 8002474:	f000 f8a0 	bl	80025b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2140      	movs	r1, #64	; 0x40
 800247e:	0018      	movs	r0, r3
 8002480:	f000 f8fa 	bl	8002678 <TIM_ITRx_SetConfig>
      break;
 8002484:	e00e      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0019      	movs	r1, r3
 8002490:	0010      	movs	r0, r2
 8002492:	f000 f8f1 	bl	8002678 <TIM_ITRx_SetConfig>
      break;
 8002496:	e005      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002498:	230f      	movs	r3, #15
 800249a:	18fb      	adds	r3, r7, r3
 800249c:	2201      	movs	r2, #1
 800249e:	701a      	strb	r2, [r3, #0]
      break;
 80024a0:	e000      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80024a2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	223d      	movs	r2, #61	; 0x3d
 80024a8:	2101      	movs	r1, #1
 80024aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	223c      	movs	r2, #60	; 0x3c
 80024b0:	2100      	movs	r1, #0
 80024b2:	5499      	strb	r1, [r3, r2]

  return status;
 80024b4:	230f      	movs	r3, #15
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	781b      	ldrb	r3, [r3, #0]
}
 80024ba:	0018      	movs	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	b004      	add	sp, #16
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	ffceff88 	.word	0xffceff88
 80024c8:	ffff00ff 	.word	0xffff00ff

080024cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a2f      	ldr	r2, [pc, #188]	; (800259c <TIM_Base_SetConfig+0xd0>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d003      	beq.n	80024ec <TIM_Base_SetConfig+0x20>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a2e      	ldr	r2, [pc, #184]	; (80025a0 <TIM_Base_SetConfig+0xd4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d108      	bne.n	80024fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2270      	movs	r2, #112	; 0x70
 80024f0:	4393      	bics	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a26      	ldr	r2, [pc, #152]	; (800259c <TIM_Base_SetConfig+0xd0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d013      	beq.n	800252e <TIM_Base_SetConfig+0x62>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a25      	ldr	r2, [pc, #148]	; (80025a0 <TIM_Base_SetConfig+0xd4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d00f      	beq.n	800252e <TIM_Base_SetConfig+0x62>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a24      	ldr	r2, [pc, #144]	; (80025a4 <TIM_Base_SetConfig+0xd8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00b      	beq.n	800252e <TIM_Base_SetConfig+0x62>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a23      	ldr	r2, [pc, #140]	; (80025a8 <TIM_Base_SetConfig+0xdc>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d007      	beq.n	800252e <TIM_Base_SetConfig+0x62>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a22      	ldr	r2, [pc, #136]	; (80025ac <TIM_Base_SetConfig+0xe0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d003      	beq.n	800252e <TIM_Base_SetConfig+0x62>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a21      	ldr	r2, [pc, #132]	; (80025b0 <TIM_Base_SetConfig+0xe4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d108      	bne.n	8002540 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4a20      	ldr	r2, [pc, #128]	; (80025b4 <TIM_Base_SetConfig+0xe8>)
 8002532:	4013      	ands	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2280      	movs	r2, #128	; 0x80
 8002544:	4393      	bics	r3, r2
 8002546:	001a      	movs	r2, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	4313      	orrs	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a0c      	ldr	r2, [pc, #48]	; (800259c <TIM_Base_SetConfig+0xd0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00b      	beq.n	8002586 <TIM_Base_SetConfig+0xba>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a0d      	ldr	r2, [pc, #52]	; (80025a8 <TIM_Base_SetConfig+0xdc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d007      	beq.n	8002586 <TIM_Base_SetConfig+0xba>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a0c      	ldr	r2, [pc, #48]	; (80025ac <TIM_Base_SetConfig+0xe0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d003      	beq.n	8002586 <TIM_Base_SetConfig+0xba>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <TIM_Base_SetConfig+0xe4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d103      	bne.n	800258e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	615a      	str	r2, [r3, #20]
}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b004      	add	sp, #16
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40012c00 	.word	0x40012c00
 80025a0:	40000400 	.word	0x40000400
 80025a4:	40002000 	.word	0x40002000
 80025a8:	40014000 	.word	0x40014000
 80025ac:	40014400 	.word	0x40014400
 80025b0:	40014800 	.word	0x40014800
 80025b4:	fffffcff 	.word	0xfffffcff

080025b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	2201      	movs	r2, #1
 80025d0:	4393      	bics	r3, r2
 80025d2:	001a      	movs	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	22f0      	movs	r2, #240	; 0xf0
 80025e2:	4393      	bics	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	220a      	movs	r2, #10
 80025f4:	4393      	bics	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	621a      	str	r2, [r3, #32]
}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b006      	add	sp, #24
 8002612:	bd80      	pop	{r7, pc}

08002614 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	2210      	movs	r2, #16
 8002626:	4393      	bics	r3, r2
 8002628:	001a      	movs	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	4a0d      	ldr	r2, [pc, #52]	; (8002674 <TIM_TI2_ConfigInputStage+0x60>)
 800263e:	4013      	ands	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	031b      	lsls	r3, r3, #12
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4313      	orrs	r3, r2
 800264a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	22a0      	movs	r2, #160	; 0xa0
 8002650:	4393      	bics	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	621a      	str	r2, [r3, #32]
}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	b006      	add	sp, #24
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	ffff0fff 	.word	0xffff0fff

08002678 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4a08      	ldr	r2, [pc, #32]	; (80026ac <TIM_ITRx_SetConfig+0x34>)
 800268c:	4013      	ands	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	2207      	movs	r2, #7
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	609a      	str	r2, [r3, #8]
}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b004      	add	sp, #16
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	ffcfff8f 	.word	0xffcfff8f

080026b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	4a09      	ldr	r2, [pc, #36]	; (80026ec <TIM_ETR_SetConfig+0x3c>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	021a      	lsls	r2, r3, #8
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	4313      	orrs	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	609a      	str	r2, [r3, #8]
}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b006      	add	sp, #24
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	ffff00ff 	.word	0xffff00ff

080026f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	223c      	movs	r2, #60	; 0x3c
 80026fe:	5c9b      	ldrb	r3, [r3, r2]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002704:	2302      	movs	r3, #2
 8002706:	e04f      	b.n	80027a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	223c      	movs	r2, #60	; 0x3c
 800270c:	2101      	movs	r1, #1
 800270e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	223d      	movs	r2, #61	; 0x3d
 8002714:	2102      	movs	r1, #2
 8002716:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a20      	ldr	r2, [pc, #128]	; (80027b0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d108      	bne.n	8002744 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4a1f      	ldr	r2, [pc, #124]	; (80027b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002736:	4013      	ands	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4313      	orrs	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2270      	movs	r2, #112	; 0x70
 8002748:	4393      	bics	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a13      	ldr	r2, [pc, #76]	; (80027b0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d009      	beq.n	800277c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d004      	beq.n	800277c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a11      	ldr	r2, [pc, #68]	; (80027bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d10c      	bne.n	8002796 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2280      	movs	r2, #128	; 0x80
 8002780:	4393      	bics	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	4313      	orrs	r3, r2
 800278c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	223d      	movs	r2, #61	; 0x3d
 800279a:	2101      	movs	r1, #1
 800279c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	223c      	movs	r2, #60	; 0x3c
 80027a2:	2100      	movs	r1, #0
 80027a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40012c00 	.word	0x40012c00
 80027b4:	ff0fffff 	.word	0xff0fffff
 80027b8:	40000400 	.word	0x40000400
 80027bc:	40014000 	.word	0x40014000

080027c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e046      	b.n	8002860 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2288      	movs	r2, #136	; 0x88
 80027d6:	589b      	ldr	r3, [r3, r2]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d107      	bne.n	80027ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2284      	movs	r2, #132	; 0x84
 80027e0:	2100      	movs	r1, #0
 80027e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	0018      	movs	r0, r3
 80027e8:	f7fe f9d8 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2288      	movs	r2, #136	; 0x88
 80027f0:	2124      	movs	r1, #36	; 0x24
 80027f2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2101      	movs	r1, #1
 8002800:	438a      	bics	r2, r1
 8002802:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	0018      	movs	r0, r3
 8002808:	f000 fc66 	bl	80030d8 <UART_SetConfig>
 800280c:	0003      	movs	r3, r0
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e024      	b.n	8002860 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	0018      	movs	r0, r3
 8002822:	f000 fdfd 	bl	8003420 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	490d      	ldr	r1, [pc, #52]	; (8002868 <HAL_UART_Init+0xa8>)
 8002832:	400a      	ands	r2, r1
 8002834:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	212a      	movs	r1, #42	; 0x2a
 8002842:	438a      	bics	r2, r1
 8002844:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2101      	movs	r1, #1
 8002852:	430a      	orrs	r2, r1
 8002854:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	0018      	movs	r0, r3
 800285a:	f000 fe95 	bl	8003588 <UART_CheckIdleState>
 800285e:	0003      	movs	r3, r0
}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	b002      	add	sp, #8
 8002866:	bd80      	pop	{r7, pc}
 8002868:	ffffb7ff 	.word	0xffffb7ff

0800286c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	; 0x28
 8002870:	af02      	add	r7, sp, #8
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	1dbb      	adds	r3, r7, #6
 800287a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2288      	movs	r2, #136	; 0x88
 8002880:	589b      	ldr	r3, [r3, r2]
 8002882:	2b20      	cmp	r3, #32
 8002884:	d000      	beq.n	8002888 <HAL_UART_Transmit+0x1c>
 8002886:	e088      	b.n	800299a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_UART_Transmit+0x2a>
 800288e:	1dbb      	adds	r3, r7, #6
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e080      	b.n	800299c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	015b      	lsls	r3, r3, #5
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d109      	bne.n	80028ba <HAL_UART_Transmit+0x4e>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d105      	bne.n	80028ba <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2201      	movs	r2, #1
 80028b2:	4013      	ands	r3, r2
 80028b4:	d001      	beq.n	80028ba <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e070      	b.n	800299c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2290      	movs	r2, #144	; 0x90
 80028be:	2100      	movs	r1, #0
 80028c0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2288      	movs	r2, #136	; 0x88
 80028c6:	2121      	movs	r1, #33	; 0x21
 80028c8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ca:	f7fe fac9 	bl	8000e60 <HAL_GetTick>
 80028ce:	0003      	movs	r3, r0
 80028d0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1dba      	adds	r2, r7, #6
 80028d6:	2154      	movs	r1, #84	; 0x54
 80028d8:	8812      	ldrh	r2, [r2, #0]
 80028da:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1dba      	adds	r2, r7, #6
 80028e0:	2156      	movs	r1, #86	; 0x56
 80028e2:	8812      	ldrh	r2, [r2, #0]
 80028e4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	015b      	lsls	r3, r3, #5
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d108      	bne.n	8002904 <HAL_UART_Transmit+0x98>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d104      	bne.n	8002904 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	e003      	b.n	800290c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002908:	2300      	movs	r3, #0
 800290a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800290c:	e02c      	b.n	8002968 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	0013      	movs	r3, r2
 8002918:	2200      	movs	r2, #0
 800291a:	2180      	movs	r1, #128	; 0x80
 800291c:	f000 fe82 	bl	8003624 <UART_WaitOnFlagUntilTimeout>
 8002920:	1e03      	subs	r3, r0, #0
 8002922:	d001      	beq.n	8002928 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e039      	b.n	800299c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10b      	bne.n	8002946 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	001a      	movs	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	05d2      	lsls	r2, r2, #23
 800293a:	0dd2      	lsrs	r2, r2, #23
 800293c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	3302      	adds	r3, #2
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	e007      	b.n	8002956 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	3301      	adds	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2256      	movs	r2, #86	; 0x56
 800295a:	5a9b      	ldrh	r3, [r3, r2]
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b299      	uxth	r1, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2256      	movs	r2, #86	; 0x56
 8002966:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2256      	movs	r2, #86	; 0x56
 800296c:	5a9b      	ldrh	r3, [r3, r2]
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1cc      	bne.n	800290e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	0013      	movs	r3, r2
 800297e:	2200      	movs	r2, #0
 8002980:	2140      	movs	r1, #64	; 0x40
 8002982:	f000 fe4f 	bl	8003624 <UART_WaitOnFlagUntilTimeout>
 8002986:	1e03      	subs	r3, r0, #0
 8002988:	d001      	beq.n	800298e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e006      	b.n	800299c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2288      	movs	r2, #136	; 0x88
 8002992:	2120      	movs	r1, #32
 8002994:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	e000      	b.n	800299c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800299a:	2302      	movs	r3, #2
  }
}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b008      	add	sp, #32
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	1dbb      	adds	r3, r7, #6
 80029b0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	228c      	movs	r2, #140	; 0x8c
 80029b6:	589b      	ldr	r3, [r3, r2]
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d145      	bne.n	8002a48 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_UART_Receive_IT+0x26>
 80029c2:	1dbb      	adds	r3, r7, #6
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e03d      	b.n	8002a4a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	2380      	movs	r3, #128	; 0x80
 80029d4:	015b      	lsls	r3, r3, #5
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d109      	bne.n	80029ee <HAL_UART_Receive_IT+0x4a>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d105      	bne.n	80029ee <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2201      	movs	r2, #1
 80029e6:	4013      	ands	r3, r2
 80029e8:	d001      	beq.n	80029ee <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e02d      	b.n	8002a4a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	041b      	lsls	r3, r3, #16
 80029fe:	4013      	ands	r3, r2
 8002a00:	d019      	beq.n	8002a36 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a02:	f3ef 8310 	mrs	r3, PRIMASK
 8002a06:	613b      	str	r3, [r7, #16]
  return(result);
 8002a08:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a0a:	61fb      	str	r3, [r7, #28]
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f383 8810 	msr	PRIMASK, r3
}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2180      	movs	r1, #128	; 0x80
 8002a24:	04c9      	lsls	r1, r1, #19
 8002a26:	430a      	orrs	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	f383 8810 	msr	PRIMASK, r3
}
 8002a34:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a36:	1dbb      	adds	r3, r7, #6
 8002a38:	881a      	ldrh	r2, [r3, #0]
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 feb8 	bl	80037b4 <UART_Start_Receive_IT>
 8002a44:	0003      	movs	r3, r0
 8002a46:	e000      	b.n	8002a4a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
  }
}
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b008      	add	sp, #32
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a54:	b5b0      	push	{r4, r5, r7, lr}
 8002a56:	b0aa      	sub	sp, #168	; 0xa8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	22a4      	movs	r2, #164	; 0xa4
 8002a64:	18b9      	adds	r1, r7, r2
 8002a66:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	20a0      	movs	r0, #160	; 0xa0
 8002a70:	1839      	adds	r1, r7, r0
 8002a72:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	249c      	movs	r4, #156	; 0x9c
 8002a7c:	1939      	adds	r1, r7, r4
 8002a7e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a80:	0011      	movs	r1, r2
 8002a82:	18bb      	adds	r3, r7, r2
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4aa2      	ldr	r2, [pc, #648]	; (8002d10 <HAL_UART_IRQHandler+0x2bc>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2298      	movs	r2, #152	; 0x98
 8002a8c:	18bd      	adds	r5, r7, r2
 8002a8e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002a90:	18bb      	adds	r3, r7, r2
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d11a      	bne.n	8002ace <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a98:	187b      	adds	r3, r7, r1
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d015      	beq.n	8002ace <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002aa2:	183b      	adds	r3, r7, r0
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d105      	bne.n	8002ab8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	2380      	movs	r3, #128	; 0x80
 8002ab2:	055b      	lsls	r3, r3, #21
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d00a      	beq.n	8002ace <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d100      	bne.n	8002ac2 <HAL_UART_IRQHandler+0x6e>
 8002ac0:	e2dc      	b.n	800307c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	0010      	movs	r0, r2
 8002aca:	4798      	blx	r3
      }
      return;
 8002acc:	e2d6      	b.n	800307c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ace:	2398      	movs	r3, #152	; 0x98
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d100      	bne.n	8002ada <HAL_UART_IRQHandler+0x86>
 8002ad8:	e122      	b.n	8002d20 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002ada:	239c      	movs	r3, #156	; 0x9c
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a8c      	ldr	r2, [pc, #560]	; (8002d14 <HAL_UART_IRQHandler+0x2c0>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d106      	bne.n	8002af4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ae6:	23a0      	movs	r3, #160	; 0xa0
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a8a      	ldr	r2, [pc, #552]	; (8002d18 <HAL_UART_IRQHandler+0x2c4>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	d100      	bne.n	8002af4 <HAL_UART_IRQHandler+0xa0>
 8002af2:	e115      	b.n	8002d20 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002af4:	23a4      	movs	r3, #164	; 0xa4
 8002af6:	18fb      	adds	r3, r7, r3
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2201      	movs	r2, #1
 8002afc:	4013      	ands	r3, r2
 8002afe:	d012      	beq.n	8002b26 <HAL_UART_IRQHandler+0xd2>
 8002b00:	23a0      	movs	r3, #160	; 0xa0
 8002b02:	18fb      	adds	r3, r7, r3
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	2380      	movs	r3, #128	; 0x80
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d00b      	beq.n	8002b26 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2201      	movs	r2, #1
 8002b14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2290      	movs	r2, #144	; 0x90
 8002b1a:	589b      	ldr	r3, [r3, r2]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2190      	movs	r1, #144	; 0x90
 8002b24:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b26:	23a4      	movs	r3, #164	; 0xa4
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d011      	beq.n	8002b56 <HAL_UART_IRQHandler+0x102>
 8002b32:	239c      	movs	r3, #156	; 0x9c
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d00b      	beq.n	8002b56 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2202      	movs	r2, #2
 8002b44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2290      	movs	r2, #144	; 0x90
 8002b4a:	589b      	ldr	r3, [r3, r2]
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2190      	movs	r1, #144	; 0x90
 8002b54:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b56:	23a4      	movs	r3, #164	; 0xa4
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d011      	beq.n	8002b86 <HAL_UART_IRQHandler+0x132>
 8002b62:	239c      	movs	r3, #156	; 0x9c
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d00b      	beq.n	8002b86 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2204      	movs	r2, #4
 8002b74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2290      	movs	r2, #144	; 0x90
 8002b7a:	589b      	ldr	r3, [r3, r2]
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2190      	movs	r1, #144	; 0x90
 8002b84:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b86:	23a4      	movs	r3, #164	; 0xa4
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d017      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b92:	23a0      	movs	r3, #160	; 0xa0
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d105      	bne.n	8002baa <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002b9e:	239c      	movs	r3, #156	; 0x9c
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a5b      	ldr	r2, [pc, #364]	; (8002d14 <HAL_UART_IRQHandler+0x2c0>)
 8002ba6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002ba8:	d00b      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2208      	movs	r2, #8
 8002bb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2290      	movs	r2, #144	; 0x90
 8002bb6:	589b      	ldr	r3, [r3, r2]
 8002bb8:	2208      	movs	r2, #8
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2190      	movs	r1, #144	; 0x90
 8002bc0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bc2:	23a4      	movs	r3, #164	; 0xa4
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d013      	beq.n	8002bf8 <HAL_UART_IRQHandler+0x1a4>
 8002bd0:	23a0      	movs	r3, #160	; 0xa0
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	04db      	lsls	r3, r3, #19
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d00c      	beq.n	8002bf8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2280      	movs	r2, #128	; 0x80
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2290      	movs	r2, #144	; 0x90
 8002bec:	589b      	ldr	r3, [r3, r2]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2190      	movs	r1, #144	; 0x90
 8002bf6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2290      	movs	r2, #144	; 0x90
 8002bfc:	589b      	ldr	r3, [r3, r2]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d100      	bne.n	8002c04 <HAL_UART_IRQHandler+0x1b0>
 8002c02:	e23d      	b.n	8003080 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c04:	23a4      	movs	r3, #164	; 0xa4
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d015      	beq.n	8002c3c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c10:	23a0      	movs	r3, #160	; 0xa0
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2220      	movs	r2, #32
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d106      	bne.n	8002c2a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c1c:	239c      	movs	r3, #156	; 0x9c
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	055b      	lsls	r3, r3, #21
 8002c26:	4013      	ands	r3, r2
 8002c28:	d008      	beq.n	8002c3c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d004      	beq.n	8002c3c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	0010      	movs	r0, r2
 8002c3a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2290      	movs	r2, #144	; 0x90
 8002c40:	589b      	ldr	r3, [r3, r2]
 8002c42:	2194      	movs	r1, #148	; 0x94
 8002c44:	187a      	adds	r2, r7, r1
 8002c46:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2240      	movs	r2, #64	; 0x40
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b40      	cmp	r3, #64	; 0x40
 8002c54:	d004      	beq.n	8002c60 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2228      	movs	r2, #40	; 0x28
 8002c5c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c5e:	d04c      	beq.n	8002cfa <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	0018      	movs	r0, r3
 8002c64:	f000 feca 	bl	80039fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2240      	movs	r2, #64	; 0x40
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d13c      	bne.n	8002cf0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c76:	f3ef 8310 	mrs	r3, PRIMASK
 8002c7a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002c7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c7e:	2090      	movs	r0, #144	; 0x90
 8002c80:	183a      	adds	r2, r7, r0
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	2301      	movs	r3, #1
 8002c86:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c8a:	f383 8810 	msr	PRIMASK, r3
}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2140      	movs	r1, #64	; 0x40
 8002c9c:	438a      	bics	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	183b      	adds	r3, r7, r0
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ca8:	f383 8810 	msr	PRIMASK, r3
}
 8002cac:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2280      	movs	r2, #128	; 0x80
 8002cb2:	589b      	ldr	r3, [r3, r2]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d016      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	589b      	ldr	r3, [r3, r2]
 8002cbe:	4a17      	ldr	r2, [pc, #92]	; (8002d1c <HAL_UART_IRQHandler+0x2c8>)
 8002cc0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2280      	movs	r2, #128	; 0x80
 8002cc6:	589b      	ldr	r3, [r3, r2]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7fe fa37 	bl	800113c <HAL_DMA_Abort_IT>
 8002cce:	1e03      	subs	r3, r0, #0
 8002cd0:	d01c      	beq.n	8002d0c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2280      	movs	r2, #128	; 0x80
 8002cd6:	589b      	ldr	r3, [r3, r2]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	2180      	movs	r1, #128	; 0x80
 8002cde:	5852      	ldr	r2, [r2, r1]
 8002ce0:	0010      	movs	r0, r2
 8002ce2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce4:	e012      	b.n	8002d0c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 f9e1 	bl	80030b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cee:	e00d      	b.n	8002d0c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f000 f9dc 	bl	80030b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf8:	e008      	b.n	8002d0c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f000 f9d7 	bl	80030b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2290      	movs	r2, #144	; 0x90
 8002d06:	2100      	movs	r1, #0
 8002d08:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002d0a:	e1b9      	b.n	8003080 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d0c:	46c0      	nop			; (mov r8, r8)
    return;
 8002d0e:	e1b7      	b.n	8003080 <HAL_UART_IRQHandler+0x62c>
 8002d10:	0000080f 	.word	0x0000080f
 8002d14:	10000001 	.word	0x10000001
 8002d18:	04000120 	.word	0x04000120
 8002d1c:	08003ac9 	.word	0x08003ac9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d000      	beq.n	8002d2a <HAL_UART_IRQHandler+0x2d6>
 8002d28:	e13e      	b.n	8002fa8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d2a:	23a4      	movs	r3, #164	; 0xa4
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2210      	movs	r2, #16
 8002d32:	4013      	ands	r3, r2
 8002d34:	d100      	bne.n	8002d38 <HAL_UART_IRQHandler+0x2e4>
 8002d36:	e137      	b.n	8002fa8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d38:	23a0      	movs	r3, #160	; 0xa0
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2210      	movs	r2, #16
 8002d40:	4013      	ands	r3, r2
 8002d42:	d100      	bne.n	8002d46 <HAL_UART_IRQHandler+0x2f2>
 8002d44:	e130      	b.n	8002fa8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2240      	movs	r2, #64	; 0x40
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b40      	cmp	r3, #64	; 0x40
 8002d5a:	d000      	beq.n	8002d5e <HAL_UART_IRQHandler+0x30a>
 8002d5c:	e0a4      	b.n	8002ea8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2280      	movs	r2, #128	; 0x80
 8002d62:	589b      	ldr	r3, [r3, r2]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	217e      	movs	r1, #126	; 0x7e
 8002d6a:	187b      	adds	r3, r7, r1
 8002d6c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002d6e:	187b      	adds	r3, r7, r1
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d100      	bne.n	8002d78 <HAL_UART_IRQHandler+0x324>
 8002d76:	e185      	b.n	8003084 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	225c      	movs	r2, #92	; 0x5c
 8002d7c:	5a9b      	ldrh	r3, [r3, r2]
 8002d7e:	187a      	adds	r2, r7, r1
 8002d80:	8812      	ldrh	r2, [r2, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d300      	bcc.n	8002d88 <HAL_UART_IRQHandler+0x334>
 8002d86:	e17d      	b.n	8003084 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	187a      	adds	r2, r7, r1
 8002d8c:	215e      	movs	r1, #94	; 0x5e
 8002d8e:	8812      	ldrh	r2, [r2, #0]
 8002d90:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2280      	movs	r2, #128	; 0x80
 8002d96:	589b      	ldr	r3, [r3, r2]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d170      	bne.n	8002e84 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da2:	f3ef 8310 	mrs	r3, PRIMASK
 8002da6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002daa:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dac:	2301      	movs	r3, #1
 8002dae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db2:	f383 8810 	msr	PRIMASK, r3
}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	49b4      	ldr	r1, [pc, #720]	; (8003094 <HAL_UART_IRQHandler+0x640>)
 8002dc4:	400a      	ands	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dce:	f383 8810 	msr	PRIMASK, r3
}
 8002dd2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ddc:	677b      	str	r3, [r7, #116]	; 0x74
 8002dde:	2301      	movs	r3, #1
 8002de0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de4:	f383 8810 	msr	PRIMASK, r3
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2101      	movs	r1, #1
 8002df6:	438a      	bics	r2, r1
 8002df8:	609a      	str	r2, [r3, #8]
 8002dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dfc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e00:	f383 8810 	msr	PRIMASK, r3
}
 8002e04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e06:	f3ef 8310 	mrs	r3, PRIMASK
 8002e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e0e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e10:	2301      	movs	r3, #1
 8002e12:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e16:	f383 8810 	msr	PRIMASK, r3
}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2140      	movs	r1, #64	; 0x40
 8002e28:	438a      	bics	r2, r1
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e2e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e32:	f383 8810 	msr	PRIMASK, r3
}
 8002e36:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	228c      	movs	r2, #140	; 0x8c
 8002e3c:	2120      	movs	r1, #32
 8002e3e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e46:	f3ef 8310 	mrs	r3, PRIMASK
 8002e4a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e50:	2301      	movs	r3, #1
 8002e52:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e56:	f383 8810 	msr	PRIMASK, r3
}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2110      	movs	r1, #16
 8002e68:	438a      	bics	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e72:	f383 8810 	msr	PRIMASK, r3
}
 8002e76:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2280      	movs	r2, #128	; 0x80
 8002e7c:	589b      	ldr	r3, [r3, r2]
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f7fe f8fa 	bl	8001078 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	225c      	movs	r2, #92	; 0x5c
 8002e8e:	5a9a      	ldrh	r2, [r3, r2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	215e      	movs	r1, #94	; 0x5e
 8002e94:	5a5b      	ldrh	r3, [r3, r1]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	0011      	movs	r1, r2
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f000 f90d 	bl	80030c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ea6:	e0ed      	b.n	8003084 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	225c      	movs	r2, #92	; 0x5c
 8002eac:	5a99      	ldrh	r1, [r3, r2]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	225e      	movs	r2, #94	; 0x5e
 8002eb2:	5a9b      	ldrh	r3, [r3, r2]
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	208e      	movs	r0, #142	; 0x8e
 8002eb8:	183b      	adds	r3, r7, r0
 8002eba:	1a8a      	subs	r2, r1, r2
 8002ebc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	225e      	movs	r2, #94	; 0x5e
 8002ec2:	5a9b      	ldrh	r3, [r3, r2]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d100      	bne.n	8002ecc <HAL_UART_IRQHandler+0x478>
 8002eca:	e0dd      	b.n	8003088 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002ecc:	183b      	adds	r3, r7, r0
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d100      	bne.n	8002ed6 <HAL_UART_IRQHandler+0x482>
 8002ed4:	e0d8      	b.n	8003088 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eda:	60fb      	str	r3, [r7, #12]
  return(result);
 8002edc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ede:	2488      	movs	r4, #136	; 0x88
 8002ee0:	193a      	adds	r2, r7, r4
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f383 8810 	msr	PRIMASK, r3
}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4967      	ldr	r1, [pc, #412]	; (8003098 <HAL_UART_IRQHandler+0x644>)
 8002efc:	400a      	ands	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	193b      	adds	r3, r7, r4
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f383 8810 	msr	PRIMASK, r3
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f12:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f14:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f16:	2484      	movs	r4, #132	; 0x84
 8002f18:	193a      	adds	r2, r7, r4
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f383 8810 	msr	PRIMASK, r3
}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	495a      	ldr	r1, [pc, #360]	; (800309c <HAL_UART_IRQHandler+0x648>)
 8002f34:	400a      	ands	r2, r1
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	193b      	adds	r3, r7, r4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	f383 8810 	msr	PRIMASK, r3
}
 8002f44:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	228c      	movs	r2, #140	; 0x8c
 8002f4a:	2120      	movs	r1, #32
 8002f4c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f62:	2480      	movs	r4, #128	; 0x80
 8002f64:	193a      	adds	r2, r7, r4
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	2301      	movs	r3, #1
 8002f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	f383 8810 	msr	PRIMASK, r3
}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2110      	movs	r1, #16
 8002f80:	438a      	bics	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	193b      	adds	r3, r7, r4
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	f383 8810 	msr	PRIMASK, r3
}
 8002f90:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2202      	movs	r2, #2
 8002f96:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f98:	183b      	adds	r3, r7, r0
 8002f9a:	881a      	ldrh	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	0011      	movs	r1, r2
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 f88d 	bl	80030c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fa6:	e06f      	b.n	8003088 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fa8:	23a4      	movs	r3, #164	; 0xa4
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	2380      	movs	r3, #128	; 0x80
 8002fb0:	035b      	lsls	r3, r3, #13
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d010      	beq.n	8002fd8 <HAL_UART_IRQHandler+0x584>
 8002fb6:	239c      	movs	r3, #156	; 0x9c
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	03db      	lsls	r3, r3, #15
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d009      	beq.n	8002fd8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2280      	movs	r2, #128	; 0x80
 8002fca:	0352      	lsls	r2, r2, #13
 8002fcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f001 fa1d 	bl	8004410 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fd6:	e05a      	b.n	800308e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002fd8:	23a4      	movs	r3, #164	; 0xa4
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2280      	movs	r2, #128	; 0x80
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d016      	beq.n	8003012 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002fe4:	23a0      	movs	r3, #160	; 0xa0
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2280      	movs	r2, #128	; 0x80
 8002fec:	4013      	ands	r3, r2
 8002fee:	d106      	bne.n	8002ffe <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002ff0:	239c      	movs	r3, #156	; 0x9c
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	041b      	lsls	r3, r3, #16
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d009      	beq.n	8003012 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003002:	2b00      	cmp	r3, #0
 8003004:	d042      	beq.n	800308c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	0010      	movs	r0, r2
 800300e:	4798      	blx	r3
    }
    return;
 8003010:	e03c      	b.n	800308c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003012:	23a4      	movs	r3, #164	; 0xa4
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2240      	movs	r2, #64	; 0x40
 800301a:	4013      	ands	r3, r2
 800301c:	d00a      	beq.n	8003034 <HAL_UART_IRQHandler+0x5e0>
 800301e:	23a0      	movs	r3, #160	; 0xa0
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2240      	movs	r2, #64	; 0x40
 8003026:	4013      	ands	r3, r2
 8003028:	d004      	beq.n	8003034 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	0018      	movs	r0, r3
 800302e:	f000 fd62 	bl	8003af6 <UART_EndTransmit_IT>
    return;
 8003032:	e02c      	b.n	800308e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003034:	23a4      	movs	r3, #164	; 0xa4
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	041b      	lsls	r3, r3, #16
 800303e:	4013      	ands	r3, r2
 8003040:	d00b      	beq.n	800305a <HAL_UART_IRQHandler+0x606>
 8003042:	23a0      	movs	r3, #160	; 0xa0
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	05db      	lsls	r3, r3, #23
 800304c:	4013      	ands	r3, r2
 800304e:	d004      	beq.n	800305a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	0018      	movs	r0, r3
 8003054:	f001 f9ec 	bl	8004430 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003058:	e019      	b.n	800308e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800305a:	23a4      	movs	r3, #164	; 0xa4
 800305c:	18fb      	adds	r3, r7, r3
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	045b      	lsls	r3, r3, #17
 8003064:	4013      	ands	r3, r2
 8003066:	d012      	beq.n	800308e <HAL_UART_IRQHandler+0x63a>
 8003068:	23a0      	movs	r3, #160	; 0xa0
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	da0d      	bge.n	800308e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	0018      	movs	r0, r3
 8003076:	f001 f9d3 	bl	8004420 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800307a:	e008      	b.n	800308e <HAL_UART_IRQHandler+0x63a>
      return;
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	e006      	b.n	800308e <HAL_UART_IRQHandler+0x63a>
    return;
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	e004      	b.n	800308e <HAL_UART_IRQHandler+0x63a>
      return;
 8003084:	46c0      	nop			; (mov r8, r8)
 8003086:	e002      	b.n	800308e <HAL_UART_IRQHandler+0x63a>
      return;
 8003088:	46c0      	nop			; (mov r8, r8)
 800308a:	e000      	b.n	800308e <HAL_UART_IRQHandler+0x63a>
    return;
 800308c:	46c0      	nop			; (mov r8, r8)
  }
}
 800308e:	46bd      	mov	sp, r7
 8003090:	b02a      	add	sp, #168	; 0xa8
 8003092:	bdb0      	pop	{r4, r5, r7, pc}
 8003094:	fffffeff 	.word	0xfffffeff
 8003098:	fffffedf 	.word	0xfffffedf
 800309c:	effffffe 	.word	0xeffffffe

080030a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b002      	add	sp, #8
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030b8:	46c0      	nop			; (mov r8, r8)
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b002      	add	sp, #8
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	000a      	movs	r2, r1
 80030ca:	1cbb      	adds	r3, r7, #2
 80030cc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b002      	add	sp, #8
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030e0:	231a      	movs	r3, #26
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4abc      	ldr	r2, [pc, #752]	; (80033f8 <UART_SetConfig+0x320>)
 8003108:	4013      	ands	r3, r2
 800310a:	0019      	movs	r1, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	430a      	orrs	r2, r1
 8003114:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4ab7      	ldr	r2, [pc, #732]	; (80033fc <UART_SetConfig+0x324>)
 800311e:	4013      	ands	r3, r2
 8003120:	0019      	movs	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	4313      	orrs	r3, r2
 800313c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4aae      	ldr	r2, [pc, #696]	; (8003400 <UART_SetConfig+0x328>)
 8003146:	4013      	ands	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	430a      	orrs	r2, r1
 8003152:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315a:	220f      	movs	r2, #15
 800315c:	4393      	bics	r3, r2
 800315e:	0019      	movs	r1, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4aa4      	ldr	r2, [pc, #656]	; (8003404 <UART_SetConfig+0x32c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d127      	bne.n	80031c6 <UART_SetConfig+0xee>
 8003176:	4ba4      	ldr	r3, [pc, #656]	; (8003408 <UART_SetConfig+0x330>)
 8003178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317a:	2203      	movs	r2, #3
 800317c:	4013      	ands	r3, r2
 800317e:	2b03      	cmp	r3, #3
 8003180:	d017      	beq.n	80031b2 <UART_SetConfig+0xda>
 8003182:	d81b      	bhi.n	80031bc <UART_SetConfig+0xe4>
 8003184:	2b02      	cmp	r3, #2
 8003186:	d00a      	beq.n	800319e <UART_SetConfig+0xc6>
 8003188:	d818      	bhi.n	80031bc <UART_SetConfig+0xe4>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <UART_SetConfig+0xbc>
 800318e:	2b01      	cmp	r3, #1
 8003190:	d00a      	beq.n	80031a8 <UART_SetConfig+0xd0>
 8003192:	e013      	b.n	80031bc <UART_SetConfig+0xe4>
 8003194:	231b      	movs	r3, #27
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
 800319c:	e058      	b.n	8003250 <UART_SetConfig+0x178>
 800319e:	231b      	movs	r3, #27
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	2202      	movs	r2, #2
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	e053      	b.n	8003250 <UART_SetConfig+0x178>
 80031a8:	231b      	movs	r3, #27
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	2204      	movs	r2, #4
 80031ae:	701a      	strb	r2, [r3, #0]
 80031b0:	e04e      	b.n	8003250 <UART_SetConfig+0x178>
 80031b2:	231b      	movs	r3, #27
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	2208      	movs	r2, #8
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e049      	b.n	8003250 <UART_SetConfig+0x178>
 80031bc:	231b      	movs	r3, #27
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	2210      	movs	r2, #16
 80031c2:	701a      	strb	r2, [r3, #0]
 80031c4:	e044      	b.n	8003250 <UART_SetConfig+0x178>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a90      	ldr	r2, [pc, #576]	; (800340c <UART_SetConfig+0x334>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d127      	bne.n	8003220 <UART_SetConfig+0x148>
 80031d0:	4b8d      	ldr	r3, [pc, #564]	; (8003408 <UART_SetConfig+0x330>)
 80031d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d4:	220c      	movs	r2, #12
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b0c      	cmp	r3, #12
 80031da:	d017      	beq.n	800320c <UART_SetConfig+0x134>
 80031dc:	d81b      	bhi.n	8003216 <UART_SetConfig+0x13e>
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d00a      	beq.n	80031f8 <UART_SetConfig+0x120>
 80031e2:	d818      	bhi.n	8003216 <UART_SetConfig+0x13e>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <UART_SetConfig+0x116>
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d00a      	beq.n	8003202 <UART_SetConfig+0x12a>
 80031ec:	e013      	b.n	8003216 <UART_SetConfig+0x13e>
 80031ee:	231b      	movs	r3, #27
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
 80031f6:	e02b      	b.n	8003250 <UART_SetConfig+0x178>
 80031f8:	231b      	movs	r3, #27
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	2202      	movs	r2, #2
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	e026      	b.n	8003250 <UART_SetConfig+0x178>
 8003202:	231b      	movs	r3, #27
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	2204      	movs	r2, #4
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e021      	b.n	8003250 <UART_SetConfig+0x178>
 800320c:	231b      	movs	r3, #27
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	2208      	movs	r2, #8
 8003212:	701a      	strb	r2, [r3, #0]
 8003214:	e01c      	b.n	8003250 <UART_SetConfig+0x178>
 8003216:	231b      	movs	r3, #27
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	2210      	movs	r2, #16
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	e017      	b.n	8003250 <UART_SetConfig+0x178>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a7a      	ldr	r2, [pc, #488]	; (8003410 <UART_SetConfig+0x338>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d104      	bne.n	8003234 <UART_SetConfig+0x15c>
 800322a:	231b      	movs	r3, #27
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	e00d      	b.n	8003250 <UART_SetConfig+0x178>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a76      	ldr	r2, [pc, #472]	; (8003414 <UART_SetConfig+0x33c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d104      	bne.n	8003248 <UART_SetConfig+0x170>
 800323e:	231b      	movs	r3, #27
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	e003      	b.n	8003250 <UART_SetConfig+0x178>
 8003248:	231b      	movs	r3, #27
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	2210      	movs	r2, #16
 800324e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	429a      	cmp	r2, r3
 800325a:	d000      	beq.n	800325e <UART_SetConfig+0x186>
 800325c:	e065      	b.n	800332a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800325e:	231b      	movs	r3, #27
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b08      	cmp	r3, #8
 8003266:	d015      	beq.n	8003294 <UART_SetConfig+0x1bc>
 8003268:	dc18      	bgt.n	800329c <UART_SetConfig+0x1c4>
 800326a:	2b04      	cmp	r3, #4
 800326c:	d00d      	beq.n	800328a <UART_SetConfig+0x1b2>
 800326e:	dc15      	bgt.n	800329c <UART_SetConfig+0x1c4>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <UART_SetConfig+0x1a2>
 8003274:	2b02      	cmp	r3, #2
 8003276:	d005      	beq.n	8003284 <UART_SetConfig+0x1ac>
 8003278:	e010      	b.n	800329c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800327a:	f7fe fe3b 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 800327e:	0003      	movs	r3, r0
 8003280:	617b      	str	r3, [r7, #20]
        break;
 8003282:	e012      	b.n	80032aa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003284:	4b64      	ldr	r3, [pc, #400]	; (8003418 <UART_SetConfig+0x340>)
 8003286:	617b      	str	r3, [r7, #20]
        break;
 8003288:	e00f      	b.n	80032aa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800328a:	f7fe fda7 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 800328e:	0003      	movs	r3, r0
 8003290:	617b      	str	r3, [r7, #20]
        break;
 8003292:	e00a      	b.n	80032aa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	617b      	str	r3, [r7, #20]
        break;
 800329a:	e006      	b.n	80032aa <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032a0:	231a      	movs	r3, #26
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	2201      	movs	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
        break;
 80032a8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d100      	bne.n	80032b2 <UART_SetConfig+0x1da>
 80032b0:	e08d      	b.n	80033ce <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032b6:	4b59      	ldr	r3, [pc, #356]	; (800341c <UART_SetConfig+0x344>)
 80032b8:	0052      	lsls	r2, r2, #1
 80032ba:	5ad3      	ldrh	r3, [r2, r3]
 80032bc:	0019      	movs	r1, r3
 80032be:	6978      	ldr	r0, [r7, #20]
 80032c0:	f7fc ff1e 	bl	8000100 <__udivsi3>
 80032c4:	0003      	movs	r3, r0
 80032c6:	005a      	lsls	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	18d2      	adds	r2, r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	0019      	movs	r1, r3
 80032d6:	0010      	movs	r0, r2
 80032d8:	f7fc ff12 	bl	8000100 <__udivsi3>
 80032dc:	0003      	movs	r3, r0
 80032de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	2b0f      	cmp	r3, #15
 80032e4:	d91c      	bls.n	8003320 <UART_SetConfig+0x248>
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	025b      	lsls	r3, r3, #9
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d217      	bcs.n	8003320 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	200e      	movs	r0, #14
 80032f6:	183b      	adds	r3, r7, r0
 80032f8:	210f      	movs	r1, #15
 80032fa:	438a      	bics	r2, r1
 80032fc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	b29b      	uxth	r3, r3
 8003304:	2207      	movs	r2, #7
 8003306:	4013      	ands	r3, r2
 8003308:	b299      	uxth	r1, r3
 800330a:	183b      	adds	r3, r7, r0
 800330c:	183a      	adds	r2, r7, r0
 800330e:	8812      	ldrh	r2, [r2, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	183a      	adds	r2, r7, r0
 800331a:	8812      	ldrh	r2, [r2, #0]
 800331c:	60da      	str	r2, [r3, #12]
 800331e:	e056      	b.n	80033ce <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003320:	231a      	movs	r3, #26
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
 8003328:	e051      	b.n	80033ce <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800332a:	231b      	movs	r3, #27
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b08      	cmp	r3, #8
 8003332:	d015      	beq.n	8003360 <UART_SetConfig+0x288>
 8003334:	dc18      	bgt.n	8003368 <UART_SetConfig+0x290>
 8003336:	2b04      	cmp	r3, #4
 8003338:	d00d      	beq.n	8003356 <UART_SetConfig+0x27e>
 800333a:	dc15      	bgt.n	8003368 <UART_SetConfig+0x290>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <UART_SetConfig+0x26e>
 8003340:	2b02      	cmp	r3, #2
 8003342:	d005      	beq.n	8003350 <UART_SetConfig+0x278>
 8003344:	e010      	b.n	8003368 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003346:	f7fe fdd5 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 800334a:	0003      	movs	r3, r0
 800334c:	617b      	str	r3, [r7, #20]
        break;
 800334e:	e012      	b.n	8003376 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003350:	4b31      	ldr	r3, [pc, #196]	; (8003418 <UART_SetConfig+0x340>)
 8003352:	617b      	str	r3, [r7, #20]
        break;
 8003354:	e00f      	b.n	8003376 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003356:	f7fe fd41 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 800335a:	0003      	movs	r3, r0
 800335c:	617b      	str	r3, [r7, #20]
        break;
 800335e:	e00a      	b.n	8003376 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	617b      	str	r3, [r7, #20]
        break;
 8003366:	e006      	b.n	8003376 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800336c:	231a      	movs	r3, #26
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	2201      	movs	r2, #1
 8003372:	701a      	strb	r2, [r3, #0]
        break;
 8003374:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d028      	beq.n	80033ce <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003380:	4b26      	ldr	r3, [pc, #152]	; (800341c <UART_SetConfig+0x344>)
 8003382:	0052      	lsls	r2, r2, #1
 8003384:	5ad3      	ldrh	r3, [r2, r3]
 8003386:	0019      	movs	r1, r3
 8003388:	6978      	ldr	r0, [r7, #20]
 800338a:	f7fc feb9 	bl	8000100 <__udivsi3>
 800338e:	0003      	movs	r3, r0
 8003390:	001a      	movs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	085b      	lsrs	r3, r3, #1
 8003398:	18d2      	adds	r2, r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	0019      	movs	r1, r3
 80033a0:	0010      	movs	r0, r2
 80033a2:	f7fc fead 	bl	8000100 <__udivsi3>
 80033a6:	0003      	movs	r3, r0
 80033a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2b0f      	cmp	r3, #15
 80033ae:	d90a      	bls.n	80033c6 <UART_SetConfig+0x2ee>
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	2380      	movs	r3, #128	; 0x80
 80033b4:	025b      	lsls	r3, r3, #9
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d205      	bcs.n	80033c6 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	b29a      	uxth	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60da      	str	r2, [r3, #12]
 80033c4:	e003      	b.n	80033ce <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80033c6:	231a      	movs	r3, #26
 80033c8:	18fb      	adds	r3, r7, r3
 80033ca:	2201      	movs	r2, #1
 80033cc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	226a      	movs	r2, #106	; 0x6a
 80033d2:	2101      	movs	r1, #1
 80033d4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2268      	movs	r2, #104	; 0x68
 80033da:	2101      	movs	r1, #1
 80033dc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80033ea:	231a      	movs	r3, #26
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	781b      	ldrb	r3, [r3, #0]
}
 80033f0:	0018      	movs	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b008      	add	sp, #32
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	cfff69f3 	.word	0xcfff69f3
 80033fc:	ffffcfff 	.word	0xffffcfff
 8003400:	11fff4ff 	.word	0x11fff4ff
 8003404:	40013800 	.word	0x40013800
 8003408:	40021000 	.word	0x40021000
 800340c:	40004400 	.word	0x40004400
 8003410:	40004800 	.word	0x40004800
 8003414:	40004c00 	.word	0x40004c00
 8003418:	00f42400 	.word	0x00f42400
 800341c:	08004744 	.word	0x08004744

08003420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	2201      	movs	r2, #1
 800342e:	4013      	ands	r3, r2
 8003430:	d00b      	beq.n	800344a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4a4a      	ldr	r2, [pc, #296]	; (8003564 <UART_AdvFeatureConfig+0x144>)
 800343a:	4013      	ands	r3, r2
 800343c:	0019      	movs	r1, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	2202      	movs	r2, #2
 8003450:	4013      	ands	r3, r2
 8003452:	d00b      	beq.n	800346c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4a43      	ldr	r2, [pc, #268]	; (8003568 <UART_AdvFeatureConfig+0x148>)
 800345c:	4013      	ands	r3, r2
 800345e:	0019      	movs	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	2204      	movs	r2, #4
 8003472:	4013      	ands	r3, r2
 8003474:	d00b      	beq.n	800348e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4a3b      	ldr	r2, [pc, #236]	; (800356c <UART_AdvFeatureConfig+0x14c>)
 800347e:	4013      	ands	r3, r2
 8003480:	0019      	movs	r1, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	2208      	movs	r2, #8
 8003494:	4013      	ands	r3, r2
 8003496:	d00b      	beq.n	80034b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4a34      	ldr	r2, [pc, #208]	; (8003570 <UART_AdvFeatureConfig+0x150>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	0019      	movs	r1, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	2210      	movs	r2, #16
 80034b6:	4013      	ands	r3, r2
 80034b8:	d00b      	beq.n	80034d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	4a2c      	ldr	r2, [pc, #176]	; (8003574 <UART_AdvFeatureConfig+0x154>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	0019      	movs	r1, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	2220      	movs	r2, #32
 80034d8:	4013      	ands	r3, r2
 80034da:	d00b      	beq.n	80034f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	4a25      	ldr	r2, [pc, #148]	; (8003578 <UART_AdvFeatureConfig+0x158>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	0019      	movs	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	2240      	movs	r2, #64	; 0x40
 80034fa:	4013      	ands	r3, r2
 80034fc:	d01d      	beq.n	800353a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4a1d      	ldr	r2, [pc, #116]	; (800357c <UART_AdvFeatureConfig+0x15c>)
 8003506:	4013      	ands	r3, r2
 8003508:	0019      	movs	r1, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800351a:	2380      	movs	r3, #128	; 0x80
 800351c:	035b      	lsls	r3, r3, #13
 800351e:	429a      	cmp	r2, r3
 8003520:	d10b      	bne.n	800353a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4a15      	ldr	r2, [pc, #84]	; (8003580 <UART_AdvFeatureConfig+0x160>)
 800352a:	4013      	ands	r3, r2
 800352c:	0019      	movs	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353e:	2280      	movs	r2, #128	; 0x80
 8003540:	4013      	ands	r3, r2
 8003542:	d00b      	beq.n	800355c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4a0e      	ldr	r2, [pc, #56]	; (8003584 <UART_AdvFeatureConfig+0x164>)
 800354c:	4013      	ands	r3, r2
 800354e:	0019      	movs	r1, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	605a      	str	r2, [r3, #4]
  }
}
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	b002      	add	sp, #8
 8003562:	bd80      	pop	{r7, pc}
 8003564:	fffdffff 	.word	0xfffdffff
 8003568:	fffeffff 	.word	0xfffeffff
 800356c:	fffbffff 	.word	0xfffbffff
 8003570:	ffff7fff 	.word	0xffff7fff
 8003574:	ffffefff 	.word	0xffffefff
 8003578:	ffffdfff 	.word	0xffffdfff
 800357c:	ffefffff 	.word	0xffefffff
 8003580:	ff9fffff 	.word	0xff9fffff
 8003584:	fff7ffff 	.word	0xfff7ffff

08003588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af02      	add	r7, sp, #8
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2290      	movs	r2, #144	; 0x90
 8003594:	2100      	movs	r1, #0
 8003596:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003598:	f7fd fc62 	bl	8000e60 <HAL_GetTick>
 800359c:	0003      	movs	r3, r0
 800359e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2208      	movs	r2, #8
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d10c      	bne.n	80035c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2280      	movs	r2, #128	; 0x80
 80035b2:	0391      	lsls	r1, r2, #14
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4a1a      	ldr	r2, [pc, #104]	; (8003620 <UART_CheckIdleState+0x98>)
 80035b8:	9200      	str	r2, [sp, #0]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f000 f832 	bl	8003624 <UART_WaitOnFlagUntilTimeout>
 80035c0:	1e03      	subs	r3, r0, #0
 80035c2:	d001      	beq.n	80035c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e026      	b.n	8003616 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2204      	movs	r2, #4
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d10c      	bne.n	80035f0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2280      	movs	r2, #128	; 0x80
 80035da:	03d1      	lsls	r1, r2, #15
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	4a10      	ldr	r2, [pc, #64]	; (8003620 <UART_CheckIdleState+0x98>)
 80035e0:	9200      	str	r2, [sp, #0]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f000 f81e 	bl	8003624 <UART_WaitOnFlagUntilTimeout>
 80035e8:	1e03      	subs	r3, r0, #0
 80035ea:	d001      	beq.n	80035f0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e012      	b.n	8003616 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2288      	movs	r2, #136	; 0x88
 80035f4:	2120      	movs	r1, #32
 80035f6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	228c      	movs	r2, #140	; 0x8c
 80035fc:	2120      	movs	r1, #32
 80035fe:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2284      	movs	r2, #132	; 0x84
 8003610:	2100      	movs	r1, #0
 8003612:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	0018      	movs	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	b004      	add	sp, #16
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	01ffffff 	.word	0x01ffffff

08003624 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b094      	sub	sp, #80	; 0x50
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	1dfb      	adds	r3, r7, #7
 8003632:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003634:	e0a7      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003638:	3301      	adds	r3, #1
 800363a:	d100      	bne.n	800363e <UART_WaitOnFlagUntilTimeout+0x1a>
 800363c:	e0a3      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800363e:	f7fd fc0f 	bl	8000e60 <HAL_GetTick>
 8003642:	0002      	movs	r2, r0
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800364a:	429a      	cmp	r2, r3
 800364c:	d302      	bcc.n	8003654 <UART_WaitOnFlagUntilTimeout+0x30>
 800364e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003650:	2b00      	cmp	r3, #0
 8003652:	d13f      	bne.n	80036d4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003654:	f3ef 8310 	mrs	r3, PRIMASK
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800365c:	647b      	str	r3, [r7, #68]	; 0x44
 800365e:	2301      	movs	r3, #1
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	f383 8810 	msr	PRIMASK, r3
}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	494e      	ldr	r1, [pc, #312]	; (80037b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003676:	400a      	ands	r2, r1
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800367c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	f383 8810 	msr	PRIMASK, r3
}
 8003684:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003686:	f3ef 8310 	mrs	r3, PRIMASK
 800368a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800368c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368e:	643b      	str	r3, [r7, #64]	; 0x40
 8003690:	2301      	movs	r3, #1
 8003692:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003696:	f383 8810 	msr	PRIMASK, r3
}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2101      	movs	r1, #1
 80036a8:	438a      	bics	r2, r1
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b2:	f383 8810 	msr	PRIMASK, r3
}
 80036b6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2288      	movs	r2, #136	; 0x88
 80036bc:	2120      	movs	r1, #32
 80036be:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	228c      	movs	r2, #140	; 0x8c
 80036c4:	2120      	movs	r1, #32
 80036c6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2284      	movs	r2, #132	; 0x84
 80036cc:	2100      	movs	r1, #0
 80036ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e069      	b.n	80037a8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2204      	movs	r2, #4
 80036dc:	4013      	ands	r3, r2
 80036de:	d052      	beq.n	8003786 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69da      	ldr	r2, [r3, #28]
 80036e6:	2380      	movs	r3, #128	; 0x80
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	401a      	ands	r2, r3
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d148      	bne.n	8003786 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2280      	movs	r2, #128	; 0x80
 80036fa:	0112      	lsls	r2, r2, #4
 80036fc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003702:	613b      	str	r3, [r7, #16]
  return(result);
 8003704:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003708:	2301      	movs	r3, #1
 800370a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f383 8810 	msr	PRIMASK, r3
}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4924      	ldr	r1, [pc, #144]	; (80037b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003720:	400a      	ands	r2, r1
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003726:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	f383 8810 	msr	PRIMASK, r3
}
 800372e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003730:	f3ef 8310 	mrs	r3, PRIMASK
 8003734:	61fb      	str	r3, [r7, #28]
  return(result);
 8003736:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003738:	64bb      	str	r3, [r7, #72]	; 0x48
 800373a:	2301      	movs	r3, #1
 800373c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	f383 8810 	msr	PRIMASK, r3
}
 8003744:	46c0      	nop			; (mov r8, r8)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2101      	movs	r1, #1
 8003752:	438a      	bics	r2, r1
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	f383 8810 	msr	PRIMASK, r3
}
 8003760:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2288      	movs	r2, #136	; 0x88
 8003766:	2120      	movs	r1, #32
 8003768:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	228c      	movs	r2, #140	; 0x8c
 800376e:	2120      	movs	r1, #32
 8003770:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2290      	movs	r2, #144	; 0x90
 8003776:	2120      	movs	r1, #32
 8003778:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2284      	movs	r2, #132	; 0x84
 800377e:	2100      	movs	r1, #0
 8003780:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e010      	b.n	80037a8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	4013      	ands	r3, r2
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	425a      	negs	r2, r3
 8003796:	4153      	adcs	r3, r2
 8003798:	b2db      	uxtb	r3, r3
 800379a:	001a      	movs	r2, r3
 800379c:	1dfb      	adds	r3, r7, #7
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d100      	bne.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x182>
 80037a4:	e747      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	0018      	movs	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b014      	add	sp, #80	; 0x50
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	fffffe5f 	.word	0xfffffe5f

080037b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b098      	sub	sp, #96	; 0x60
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	1dbb      	adds	r3, r7, #6
 80037c0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1dba      	adds	r2, r7, #6
 80037cc:	215c      	movs	r1, #92	; 0x5c
 80037ce:	8812      	ldrh	r2, [r2, #0]
 80037d0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	1dba      	adds	r2, r7, #6
 80037d6:	215e      	movs	r1, #94	; 0x5e
 80037d8:	8812      	ldrh	r2, [r2, #0]
 80037da:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	2380      	movs	r3, #128	; 0x80
 80037e8:	015b      	lsls	r3, r3, #5
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d10d      	bne.n	800380a <UART_Start_Receive_IT+0x56>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d104      	bne.n	8003800 <UART_Start_Receive_IT+0x4c>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2260      	movs	r2, #96	; 0x60
 80037fa:	497b      	ldr	r1, [pc, #492]	; (80039e8 <UART_Start_Receive_IT+0x234>)
 80037fc:	5299      	strh	r1, [r3, r2]
 80037fe:	e02e      	b.n	800385e <UART_Start_Receive_IT+0xaa>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2260      	movs	r2, #96	; 0x60
 8003804:	21ff      	movs	r1, #255	; 0xff
 8003806:	5299      	strh	r1, [r3, r2]
 8003808:	e029      	b.n	800385e <UART_Start_Receive_IT+0xaa>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10d      	bne.n	800382e <UART_Start_Receive_IT+0x7a>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d104      	bne.n	8003824 <UART_Start_Receive_IT+0x70>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2260      	movs	r2, #96	; 0x60
 800381e:	21ff      	movs	r1, #255	; 0xff
 8003820:	5299      	strh	r1, [r3, r2]
 8003822:	e01c      	b.n	800385e <UART_Start_Receive_IT+0xaa>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2260      	movs	r2, #96	; 0x60
 8003828:	217f      	movs	r1, #127	; 0x7f
 800382a:	5299      	strh	r1, [r3, r2]
 800382c:	e017      	b.n	800385e <UART_Start_Receive_IT+0xaa>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	2380      	movs	r3, #128	; 0x80
 8003834:	055b      	lsls	r3, r3, #21
 8003836:	429a      	cmp	r2, r3
 8003838:	d10d      	bne.n	8003856 <UART_Start_Receive_IT+0xa2>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d104      	bne.n	800384c <UART_Start_Receive_IT+0x98>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2260      	movs	r2, #96	; 0x60
 8003846:	217f      	movs	r1, #127	; 0x7f
 8003848:	5299      	strh	r1, [r3, r2]
 800384a:	e008      	b.n	800385e <UART_Start_Receive_IT+0xaa>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2260      	movs	r2, #96	; 0x60
 8003850:	213f      	movs	r1, #63	; 0x3f
 8003852:	5299      	strh	r1, [r3, r2]
 8003854:	e003      	b.n	800385e <UART_Start_Receive_IT+0xaa>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2260      	movs	r2, #96	; 0x60
 800385a:	2100      	movs	r1, #0
 800385c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2290      	movs	r2, #144	; 0x90
 8003862:	2100      	movs	r1, #0
 8003864:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	228c      	movs	r2, #140	; 0x8c
 800386a:	2122      	movs	r1, #34	; 0x22
 800386c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386e:	f3ef 8310 	mrs	r3, PRIMASK
 8003872:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003874:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003876:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003878:	2301      	movs	r3, #1
 800387a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800387e:	f383 8810 	msr	PRIMASK, r3
}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2101      	movs	r1, #1
 8003890:	430a      	orrs	r2, r1
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003896:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800389a:	f383 8810 	msr	PRIMASK, r3
}
 800389e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	059b      	lsls	r3, r3, #22
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d150      	bne.n	800394e <UART_Start_Receive_IT+0x19a>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2268      	movs	r2, #104	; 0x68
 80038b0:	5a9b      	ldrh	r3, [r3, r2]
 80038b2:	1dba      	adds	r2, r7, #6
 80038b4:	8812      	ldrh	r2, [r2, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d349      	bcc.n	800394e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	015b      	lsls	r3, r3, #5
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d107      	bne.n	80038d6 <UART_Start_Receive_IT+0x122>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d103      	bne.n	80038d6 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4a46      	ldr	r2, [pc, #280]	; (80039ec <UART_Start_Receive_IT+0x238>)
 80038d2:	675a      	str	r2, [r3, #116]	; 0x74
 80038d4:	e002      	b.n	80038dc <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4a45      	ldr	r2, [pc, #276]	; (80039f0 <UART_Start_Receive_IT+0x23c>)
 80038da:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d019      	beq.n	8003918 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e4:	f3ef 8310 	mrs	r3, PRIMASK
 80038e8:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80038ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80038ee:	2301      	movs	r3, #1
 80038f0:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	f383 8810 	msr	PRIMASK, r3
}
 80038f8:	46c0      	nop			; (mov r8, r8)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2180      	movs	r1, #128	; 0x80
 8003906:	0049      	lsls	r1, r1, #1
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800390e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003912:	f383 8810 	msr	PRIMASK, r3
}
 8003916:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003918:	f3ef 8310 	mrs	r3, PRIMASK
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003920:	657b      	str	r3, [r7, #84]	; 0x54
 8003922:	2301      	movs	r3, #1
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003928:	f383 8810 	msr	PRIMASK, r3
}
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2180      	movs	r1, #128	; 0x80
 800393a:	0549      	lsls	r1, r1, #21
 800393c:	430a      	orrs	r2, r1
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003942:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	f383 8810 	msr	PRIMASK, r3
}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	e047      	b.n	80039de <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	015b      	lsls	r3, r3, #5
 8003956:	429a      	cmp	r2, r3
 8003958:	d107      	bne.n	800396a <UART_Start_Receive_IT+0x1b6>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d103      	bne.n	800396a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4a23      	ldr	r2, [pc, #140]	; (80039f4 <UART_Start_Receive_IT+0x240>)
 8003966:	675a      	str	r2, [r3, #116]	; 0x74
 8003968:	e002      	b.n	8003970 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4a22      	ldr	r2, [pc, #136]	; (80039f8 <UART_Start_Receive_IT+0x244>)
 800396e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d019      	beq.n	80039ac <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003978:	f3ef 8310 	mrs	r3, PRIMASK
 800397c:	61fb      	str	r3, [r7, #28]
  return(result);
 800397e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003980:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003982:	2301      	movs	r3, #1
 8003984:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	f383 8810 	msr	PRIMASK, r3
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2190      	movs	r1, #144	; 0x90
 800399a:	0049      	lsls	r1, r1, #1
 800399c:	430a      	orrs	r2, r1
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	f383 8810 	msr	PRIMASK, r3
}
 80039aa:	e018      	b.n	80039de <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ac:	f3ef 8310 	mrs	r3, PRIMASK
 80039b0:	613b      	str	r3, [r7, #16]
  return(result);
 80039b2:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80039b4:	653b      	str	r3, [r7, #80]	; 0x50
 80039b6:	2301      	movs	r3, #1
 80039b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f383 8810 	msr	PRIMASK, r3
}
 80039c0:	46c0      	nop			; (mov r8, r8)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2120      	movs	r1, #32
 80039ce:	430a      	orrs	r2, r1
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	f383 8810 	msr	PRIMASK, r3
}
 80039dc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	0018      	movs	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b018      	add	sp, #96	; 0x60
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	000001ff 	.word	0x000001ff
 80039ec:	08004125 	.word	0x08004125
 80039f0:	08003e39 	.word	0x08003e39
 80039f4:	08003cc5 	.word	0x08003cc5
 80039f8:	08003b51 	.word	0x08003b51

080039fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08e      	sub	sp, #56	; 0x38
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a04:	f3ef 8310 	mrs	r3, PRIMASK
 8003a08:	617b      	str	r3, [r7, #20]
  return(result);
 8003a0a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a0e:	2301      	movs	r3, #1
 8003a10:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	f383 8810 	msr	PRIMASK, r3
}
 8003a18:	46c0      	nop			; (mov r8, r8)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4926      	ldr	r1, [pc, #152]	; (8003ac0 <UART_EndRxTransfer+0xc4>)
 8003a26:	400a      	ands	r2, r1
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f383 8810 	msr	PRIMASK, r3
}
 8003a34:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a36:	f3ef 8310 	mrs	r3, PRIMASK
 8003a3a:	623b      	str	r3, [r7, #32]
  return(result);
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a3e:	633b      	str	r3, [r7, #48]	; 0x30
 8003a40:	2301      	movs	r3, #1
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	f383 8810 	msr	PRIMASK, r3
}
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	491b      	ldr	r1, [pc, #108]	; (8003ac4 <UART_EndRxTransfer+0xc8>)
 8003a58:	400a      	ands	r2, r1
 8003a5a:	609a      	str	r2, [r3, #8]
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a62:	f383 8810 	msr	PRIMASK, r3
}
 8003a66:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d118      	bne.n	8003aa2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a70:	f3ef 8310 	mrs	r3, PRIMASK
 8003a74:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a76:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f383 8810 	msr	PRIMASK, r3
}
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2110      	movs	r1, #16
 8003a92:	438a      	bics	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f383 8810 	msr	PRIMASK, r3
}
 8003aa0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	228c      	movs	r2, #140	; 0x8c
 8003aa6:	2120      	movs	r1, #32
 8003aa8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b00e      	add	sp, #56	; 0x38
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	fffffedf 	.word	0xfffffedf
 8003ac4:	effffffe 	.word	0xeffffffe

08003ac8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	225e      	movs	r2, #94	; 0x5e
 8003ada:	2100      	movs	r1, #0
 8003adc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2256      	movs	r2, #86	; 0x56
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f7ff fae1 	bl	80030b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b004      	add	sp, #16
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b086      	sub	sp, #24
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003afe:	f3ef 8310 	mrs	r3, PRIMASK
 8003b02:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b04:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	2301      	movs	r3, #1
 8003b0a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f383 8810 	msr	PRIMASK, r3
}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2140      	movs	r1, #64	; 0x40
 8003b20:	438a      	bics	r2, r1
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f383 8810 	msr	PRIMASK, r3
}
 8003b2e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2288      	movs	r2, #136	; 0x88
 8003b34:	2120      	movs	r1, #32
 8003b36:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	0018      	movs	r0, r3
 8003b42:	f7ff faad 	bl	80030a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b006      	add	sp, #24
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b090      	sub	sp, #64	; 0x40
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b58:	203e      	movs	r0, #62	; 0x3e
 8003b5a:	183b      	adds	r3, r7, r0
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	2160      	movs	r1, #96	; 0x60
 8003b60:	5a52      	ldrh	r2, [r2, r1]
 8003b62:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	228c      	movs	r2, #140	; 0x8c
 8003b68:	589b      	ldr	r3, [r3, r2]
 8003b6a:	2b22      	cmp	r3, #34	; 0x22
 8003b6c:	d000      	beq.n	8003b70 <UART_RxISR_8BIT+0x20>
 8003b6e:	e09a      	b.n	8003ca6 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b76:	213c      	movs	r1, #60	; 0x3c
 8003b78:	187b      	adds	r3, r7, r1
 8003b7a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b7c:	187b      	adds	r3, r7, r1
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	183b      	adds	r3, r7, r0
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	b2d9      	uxtb	r1, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	400a      	ands	r2, r1
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	225e      	movs	r2, #94	; 0x5e
 8003ba0:	5a9b      	ldrh	r3, [r3, r2]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b299      	uxth	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	225e      	movs	r2, #94	; 0x5e
 8003bac:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	225e      	movs	r2, #94	; 0x5e
 8003bb2:	5a9b      	ldrh	r3, [r3, r2]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d000      	beq.n	8003bbc <UART_RxISR_8BIT+0x6c>
 8003bba:	e07c      	b.n	8003cb6 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bc2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f383 8810 	msr	PRIMASK, r3
}
 8003bd0:	46c0      	nop			; (mov r8, r8)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4938      	ldr	r1, [pc, #224]	; (8003cc0 <UART_RxISR_8BIT+0x170>)
 8003bde:	400a      	ands	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	f383 8810 	msr	PRIMASK, r3
}
 8003bec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bee:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfe:	f383 8810 	msr	PRIMASK, r3
}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2101      	movs	r1, #1
 8003c10:	438a      	bics	r2, r1
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1a:	f383 8810 	msr	PRIMASK, r3
}
 8003c1e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	228c      	movs	r2, #140	; 0x8c
 8003c24:	2120      	movs	r1, #32
 8003c26:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d12f      	bne.n	8003c9c <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c42:	f3ef 8310 	mrs	r3, PRIMASK
 8003c46:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c48:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c4a:	633b      	str	r3, [r7, #48]	; 0x30
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f383 8810 	msr	PRIMASK, r3
}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2110      	movs	r1, #16
 8003c64:	438a      	bics	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f383 8810 	msr	PRIMASK, r3
}
 8003c72:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	2210      	movs	r2, #16
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b10      	cmp	r3, #16
 8003c80:	d103      	bne.n	8003c8a <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2210      	movs	r2, #16
 8003c88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	225c      	movs	r2, #92	; 0x5c
 8003c8e:	5a9a      	ldrh	r2, [r3, r2]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	0011      	movs	r1, r2
 8003c94:	0018      	movs	r0, r3
 8003c96:	f7ff fa13 	bl	80030c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c9a:	e00c      	b.n	8003cb6 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f7fc fba4 	bl	80003ec <HAL_UART_RxCpltCallback>
}
 8003ca4:	e007      	b.n	8003cb6 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699a      	ldr	r2, [r3, #24]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2108      	movs	r1, #8
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	619a      	str	r2, [r3, #24]
}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b010      	add	sp, #64	; 0x40
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	fffffedf 	.word	0xfffffedf

08003cc4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b090      	sub	sp, #64	; 0x40
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ccc:	203e      	movs	r0, #62	; 0x3e
 8003cce:	183b      	adds	r3, r7, r0
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	2160      	movs	r1, #96	; 0x60
 8003cd4:	5a52      	ldrh	r2, [r2, r1]
 8003cd6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	228c      	movs	r2, #140	; 0x8c
 8003cdc:	589b      	ldr	r3, [r3, r2]
 8003cde:	2b22      	cmp	r3, #34	; 0x22
 8003ce0:	d000      	beq.n	8003ce4 <UART_RxISR_16BIT+0x20>
 8003ce2:	e09a      	b.n	8003e1a <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cea:	213c      	movs	r1, #60	; 0x3c
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf4:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003cf6:	187b      	adds	r3, r7, r1
 8003cf8:	183a      	adds	r2, r7, r0
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	8812      	ldrh	r2, [r2, #0]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d04:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	1c9a      	adds	r2, r3, #2
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	225e      	movs	r2, #94	; 0x5e
 8003d14:	5a9b      	ldrh	r3, [r3, r2]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b299      	uxth	r1, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	225e      	movs	r2, #94	; 0x5e
 8003d20:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	225e      	movs	r2, #94	; 0x5e
 8003d26:	5a9b      	ldrh	r3, [r3, r2]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d000      	beq.n	8003d30 <UART_RxISR_16BIT+0x6c>
 8003d2e:	e07c      	b.n	8003e2a <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d30:	f3ef 8310 	mrs	r3, PRIMASK
 8003d34:	617b      	str	r3, [r7, #20]
  return(result);
 8003d36:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d38:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f383 8810 	msr	PRIMASK, r3
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4938      	ldr	r1, [pc, #224]	; (8003e34 <UART_RxISR_16BIT+0x170>)
 8003d52:	400a      	ands	r2, r1
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f383 8810 	msr	PRIMASK, r3
}
 8003d60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d62:	f3ef 8310 	mrs	r3, PRIMASK
 8003d66:	623b      	str	r3, [r7, #32]
  return(result);
 8003d68:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	f383 8810 	msr	PRIMASK, r3
}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2101      	movs	r1, #1
 8003d84:	438a      	bics	r2, r1
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8e:	f383 8810 	msr	PRIMASK, r3
}
 8003d92:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	228c      	movs	r2, #140	; 0x8c
 8003d98:	2120      	movs	r1, #32
 8003d9a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d12f      	bne.n	8003e10 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db6:	f3ef 8310 	mrs	r3, PRIMASK
 8003dba:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dbc:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f383 8810 	msr	PRIMASK, r3
}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2110      	movs	r1, #16
 8003dd8:	438a      	bics	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f383 8810 	msr	PRIMASK, r3
}
 8003de6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	2210      	movs	r2, #16
 8003df0:	4013      	ands	r3, r2
 8003df2:	2b10      	cmp	r3, #16
 8003df4:	d103      	bne.n	8003dfe <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2210      	movs	r2, #16
 8003dfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	225c      	movs	r2, #92	; 0x5c
 8003e02:	5a9a      	ldrh	r2, [r3, r2]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	0011      	movs	r1, r2
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f7ff f959 	bl	80030c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e0e:	e00c      	b.n	8003e2a <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7fc faea 	bl	80003ec <HAL_UART_RxCpltCallback>
}
 8003e18:	e007      	b.n	8003e2a <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699a      	ldr	r2, [r3, #24]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2108      	movs	r1, #8
 8003e26:	430a      	orrs	r2, r1
 8003e28:	619a      	str	r2, [r3, #24]
}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b010      	add	sp, #64	; 0x40
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	fffffedf 	.word	0xfffffedf

08003e38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b09c      	sub	sp, #112	; 0x70
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003e40:	236a      	movs	r3, #106	; 0x6a
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	2160      	movs	r1, #96	; 0x60
 8003e48:	5a52      	ldrh	r2, [r2, r1]
 8003e4a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	228c      	movs	r2, #140	; 0x8c
 8003e68:	589b      	ldr	r3, [r3, r2]
 8003e6a:	2b22      	cmp	r3, #34	; 0x22
 8003e6c:	d000      	beq.n	8003e70 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003e6e:	e144      	b.n	80040fa <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003e70:	235e      	movs	r3, #94	; 0x5e
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	2168      	movs	r1, #104	; 0x68
 8003e78:	5a52      	ldrh	r2, [r2, r1]
 8003e7a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003e7c:	e0eb      	b.n	8004056 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e84:	215c      	movs	r1, #92	; 0x5c
 8003e86:	187b      	adds	r3, r7, r1
 8003e88:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e8a:	187b      	adds	r3, r7, r1
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	236a      	movs	r3, #106	; 0x6a
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	b2d9      	uxtb	r1, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9c:	400a      	ands	r2, r1
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	225e      	movs	r2, #94	; 0x5e
 8003eb0:	5a9b      	ldrh	r3, [r3, r2]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b299      	uxth	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	225e      	movs	r2, #94	; 0x5e
 8003ebc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec8:	2207      	movs	r2, #7
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d049      	beq.n	8003f62 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d010      	beq.n	8003ef8 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003ed6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ed8:	2380      	movs	r3, #128	; 0x80
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4013      	ands	r3, r2
 8003ede:	d00b      	beq.n	8003ef8 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2290      	movs	r2, #144	; 0x90
 8003eec:	589b      	ldr	r3, [r3, r2]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2190      	movs	r1, #144	; 0x90
 8003ef6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efa:	2202      	movs	r2, #2
 8003efc:	4013      	ands	r3, r2
 8003efe:	d00f      	beq.n	8003f20 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003f00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f02:	2201      	movs	r2, #1
 8003f04:	4013      	ands	r3, r2
 8003f06:	d00b      	beq.n	8003f20 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2290      	movs	r2, #144	; 0x90
 8003f14:	589b      	ldr	r3, [r3, r2]
 8003f16:	2204      	movs	r2, #4
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2190      	movs	r1, #144	; 0x90
 8003f1e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f22:	2204      	movs	r2, #4
 8003f24:	4013      	ands	r3, r2
 8003f26:	d00f      	beq.n	8003f48 <UART_RxISR_8BIT_FIFOEN+0x110>
 8003f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d00b      	beq.n	8003f48 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2204      	movs	r2, #4
 8003f36:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2290      	movs	r2, #144	; 0x90
 8003f3c:	589b      	ldr	r3, [r3, r2]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2190      	movs	r1, #144	; 0x90
 8003f46:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2290      	movs	r2, #144	; 0x90
 8003f4c:	589b      	ldr	r3, [r3, r2]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d007      	beq.n	8003f62 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	0018      	movs	r0, r3
 8003f56:	f7ff f8ab 	bl	80030b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2290      	movs	r2, #144	; 0x90
 8003f5e:	2100      	movs	r1, #0
 8003f60:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	225e      	movs	r2, #94	; 0x5e
 8003f66:	5a9b      	ldrh	r3, [r3, r2]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d173      	bne.n	8004056 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f76:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f78:	2301      	movs	r3, #1
 8003f7a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	f383 8810 	msr	PRIMASK, r3
}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4961      	ldr	r1, [pc, #388]	; (8004114 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8003f90:	400a      	ands	r2, r1
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f96:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f9a:	f383 8810 	msr	PRIMASK, r3
}
 8003f9e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fa8:	657b      	str	r3, [r7, #84]	; 0x54
 8003faa:	2301      	movs	r3, #1
 8003fac:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb0:	f383 8810 	msr	PRIMASK, r3
}
 8003fb4:	46c0      	nop			; (mov r8, r8)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4955      	ldr	r1, [pc, #340]	; (8004118 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8003fc2:	400a      	ands	r2, r1
 8003fc4:	609a      	str	r2, [r3, #8]
 8003fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fcc:	f383 8810 	msr	PRIMASK, r3
}
 8003fd0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	228c      	movs	r2, #140	; 0x8c
 8003fd6:	2120      	movs	r1, #32
 8003fd8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d12f      	bne.n	800404e <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ff4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff8:	623b      	str	r3, [r7, #32]
  return(result);
 8003ffa:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ffc:	653b      	str	r3, [r7, #80]	; 0x50
 8003ffe:	2301      	movs	r3, #1
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	f383 8810 	msr	PRIMASK, r3
}
 8004008:	46c0      	nop			; (mov r8, r8)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2110      	movs	r1, #16
 8004016:	438a      	bics	r2, r1
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800401c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	f383 8810 	msr	PRIMASK, r3
}
 8004024:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	2210      	movs	r2, #16
 800402e:	4013      	ands	r3, r2
 8004030:	2b10      	cmp	r3, #16
 8004032:	d103      	bne.n	800403c <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2210      	movs	r2, #16
 800403a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	225c      	movs	r2, #92	; 0x5c
 8004040:	5a9a      	ldrh	r2, [r3, r2]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	0011      	movs	r1, r2
 8004046:	0018      	movs	r0, r3
 8004048:	f7ff f83a 	bl	80030c0 <HAL_UARTEx_RxEventCallback>
 800404c:	e003      	b.n	8004056 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	0018      	movs	r0, r3
 8004052:	f7fc f9cb 	bl	80003ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004056:	235e      	movs	r3, #94	; 0x5e
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d004      	beq.n	800406a <UART_RxISR_8BIT_FIFOEN+0x232>
 8004060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004062:	2220      	movs	r2, #32
 8004064:	4013      	ands	r3, r2
 8004066:	d000      	beq.n	800406a <UART_RxISR_8BIT_FIFOEN+0x232>
 8004068:	e709      	b.n	8003e7e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800406a:	204e      	movs	r0, #78	; 0x4e
 800406c:	183b      	adds	r3, r7, r0
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	215e      	movs	r1, #94	; 0x5e
 8004072:	5a52      	ldrh	r2, [r2, r1]
 8004074:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004076:	0001      	movs	r1, r0
 8004078:	187b      	adds	r3, r7, r1
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d044      	beq.n	800410a <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2268      	movs	r2, #104	; 0x68
 8004084:	5a9b      	ldrh	r3, [r3, r2]
 8004086:	187a      	adds	r2, r7, r1
 8004088:	8812      	ldrh	r2, [r2, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d23d      	bcs.n	800410a <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800408e:	f3ef 8310 	mrs	r3, PRIMASK
 8004092:	60bb      	str	r3, [r7, #8]
  return(result);
 8004094:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004096:	64bb      	str	r3, [r7, #72]	; 0x48
 8004098:	2301      	movs	r3, #1
 800409a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f383 8810 	msr	PRIMASK, r3
}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	491b      	ldr	r1, [pc, #108]	; (800411c <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80040b0:	400a      	ands	r2, r1
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f383 8810 	msr	PRIMASK, r3
}
 80040be:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a17      	ldr	r2, [pc, #92]	; (8004120 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 80040c4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c6:	f3ef 8310 	mrs	r3, PRIMASK
 80040ca:	617b      	str	r3, [r7, #20]
  return(result);
 80040cc:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80040ce:	647b      	str	r3, [r7, #68]	; 0x44
 80040d0:	2301      	movs	r3, #1
 80040d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f383 8810 	msr	PRIMASK, r3
}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2120      	movs	r1, #32
 80040e8:	430a      	orrs	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f383 8810 	msr	PRIMASK, r3
}
 80040f6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040f8:	e007      	b.n	800410a <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699a      	ldr	r2, [r3, #24]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2108      	movs	r1, #8
 8004106:	430a      	orrs	r2, r1
 8004108:	619a      	str	r2, [r3, #24]
}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	46bd      	mov	sp, r7
 800410e:	b01c      	add	sp, #112	; 0x70
 8004110:	bd80      	pop	{r7, pc}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	fffffeff 	.word	0xfffffeff
 8004118:	effffffe 	.word	0xeffffffe
 800411c:	efffffff 	.word	0xefffffff
 8004120:	08003b51 	.word	0x08003b51

08004124 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b09e      	sub	sp, #120	; 0x78
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800412c:	2372      	movs	r3, #114	; 0x72
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	2160      	movs	r1, #96	; 0x60
 8004134:	5a52      	ldrh	r2, [r2, r1]
 8004136:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	228c      	movs	r2, #140	; 0x8c
 8004154:	589b      	ldr	r3, [r3, r2]
 8004156:	2b22      	cmp	r3, #34	; 0x22
 8004158:	d000      	beq.n	800415c <UART_RxISR_16BIT_FIFOEN+0x38>
 800415a:	e144      	b.n	80043e6 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800415c:	2366      	movs	r3, #102	; 0x66
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	2168      	movs	r1, #104	; 0x68
 8004164:	5a52      	ldrh	r2, [r2, r1]
 8004166:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004168:	e0eb      	b.n	8004342 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004170:	2164      	movs	r1, #100	; 0x64
 8004172:	187b      	adds	r3, r7, r1
 8004174:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417a:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800417c:	187b      	adds	r3, r7, r1
 800417e:	2272      	movs	r2, #114	; 0x72
 8004180:	18ba      	adds	r2, r7, r2
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	8812      	ldrh	r2, [r2, #0]
 8004186:	4013      	ands	r3, r2
 8004188:	b29a      	uxth	r2, r3
 800418a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800418c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004192:	1c9a      	adds	r2, r3, #2
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	225e      	movs	r2, #94	; 0x5e
 800419c:	5a9b      	ldrh	r3, [r3, r2]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b299      	uxth	r1, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	225e      	movs	r2, #94	; 0x5e
 80041a8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80041b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b4:	2207      	movs	r2, #7
 80041b6:	4013      	ands	r3, r2
 80041b8:	d049      	beq.n	800424e <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041bc:	2201      	movs	r2, #1
 80041be:	4013      	ands	r3, r2
 80041c0:	d010      	beq.n	80041e4 <UART_RxISR_16BIT_FIFOEN+0xc0>
 80041c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	4013      	ands	r3, r2
 80041ca:	d00b      	beq.n	80041e4 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2201      	movs	r2, #1
 80041d2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2290      	movs	r2, #144	; 0x90
 80041d8:	589b      	ldr	r3, [r3, r2]
 80041da:	2201      	movs	r2, #1
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2190      	movs	r1, #144	; 0x90
 80041e2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e6:	2202      	movs	r2, #2
 80041e8:	4013      	ands	r3, r2
 80041ea:	d00f      	beq.n	800420c <UART_RxISR_16BIT_FIFOEN+0xe8>
 80041ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041ee:	2201      	movs	r2, #1
 80041f0:	4013      	ands	r3, r2
 80041f2:	d00b      	beq.n	800420c <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2202      	movs	r2, #2
 80041fa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2290      	movs	r2, #144	; 0x90
 8004200:	589b      	ldr	r3, [r3, r2]
 8004202:	2204      	movs	r2, #4
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2190      	movs	r1, #144	; 0x90
 800420a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800420c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800420e:	2204      	movs	r2, #4
 8004210:	4013      	ands	r3, r2
 8004212:	d00f      	beq.n	8004234 <UART_RxISR_16BIT_FIFOEN+0x110>
 8004214:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004216:	2201      	movs	r2, #1
 8004218:	4013      	ands	r3, r2
 800421a:	d00b      	beq.n	8004234 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2204      	movs	r2, #4
 8004222:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2290      	movs	r2, #144	; 0x90
 8004228:	589b      	ldr	r3, [r3, r2]
 800422a:	2202      	movs	r2, #2
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2190      	movs	r1, #144	; 0x90
 8004232:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2290      	movs	r2, #144	; 0x90
 8004238:	589b      	ldr	r3, [r3, r2]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d007      	beq.n	800424e <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	0018      	movs	r0, r3
 8004242:	f7fe ff35 	bl	80030b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2290      	movs	r2, #144	; 0x90
 800424a:	2100      	movs	r1, #0
 800424c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	225e      	movs	r2, #94	; 0x5e
 8004252:	5a9b      	ldrh	r3, [r3, r2]
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d173      	bne.n	8004342 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800425a:	f3ef 8310 	mrs	r3, PRIMASK
 800425e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004262:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004264:	2301      	movs	r3, #1
 8004266:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426a:	f383 8810 	msr	PRIMASK, r3
}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4961      	ldr	r1, [pc, #388]	; (8004400 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800427c:	400a      	ands	r2, r1
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004282:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004286:	f383 8810 	msr	PRIMASK, r3
}
 800428a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800428c:	f3ef 8310 	mrs	r3, PRIMASK
 8004290:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004294:	65bb      	str	r3, [r7, #88]	; 0x58
 8004296:	2301      	movs	r3, #1
 8004298:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800429c:	f383 8810 	msr	PRIMASK, r3
}
 80042a0:	46c0      	nop			; (mov r8, r8)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4955      	ldr	r1, [pc, #340]	; (8004404 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80042ae:	400a      	ands	r2, r1
 80042b0:	609a      	str	r2, [r3, #8]
 80042b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042b4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b8:	f383 8810 	msr	PRIMASK, r3
}
 80042bc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	228c      	movs	r2, #140	; 0x8c
 80042c2:	2120      	movs	r1, #32
 80042c4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d12f      	bne.n	800433a <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042e0:	f3ef 8310 	mrs	r3, PRIMASK
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e8:	657b      	str	r3, [r7, #84]	; 0x54
 80042ea:	2301      	movs	r3, #1
 80042ec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	f383 8810 	msr	PRIMASK, r3
}
 80042f4:	46c0      	nop			; (mov r8, r8)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2110      	movs	r1, #16
 8004302:	438a      	bics	r2, r1
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004308:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	f383 8810 	msr	PRIMASK, r3
}
 8004310:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	2210      	movs	r2, #16
 800431a:	4013      	ands	r3, r2
 800431c:	2b10      	cmp	r3, #16
 800431e:	d103      	bne.n	8004328 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2210      	movs	r2, #16
 8004326:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	225c      	movs	r2, #92	; 0x5c
 800432c:	5a9a      	ldrh	r2, [r3, r2]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	0011      	movs	r1, r2
 8004332:	0018      	movs	r0, r3
 8004334:	f7fe fec4 	bl	80030c0 <HAL_UARTEx_RxEventCallback>
 8004338:	e003      	b.n	8004342 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	0018      	movs	r0, r3
 800433e:	f7fc f855 	bl	80003ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004342:	2366      	movs	r3, #102	; 0x66
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d004      	beq.n	8004356 <UART_RxISR_16BIT_FIFOEN+0x232>
 800434c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800434e:	2220      	movs	r2, #32
 8004350:	4013      	ands	r3, r2
 8004352:	d000      	beq.n	8004356 <UART_RxISR_16BIT_FIFOEN+0x232>
 8004354:	e709      	b.n	800416a <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004356:	2052      	movs	r0, #82	; 0x52
 8004358:	183b      	adds	r3, r7, r0
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	215e      	movs	r1, #94	; 0x5e
 800435e:	5a52      	ldrh	r2, [r2, r1]
 8004360:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004362:	0001      	movs	r1, r0
 8004364:	187b      	adds	r3, r7, r1
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d044      	beq.n	80043f6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2268      	movs	r2, #104	; 0x68
 8004370:	5a9b      	ldrh	r3, [r3, r2]
 8004372:	187a      	adds	r2, r7, r1
 8004374:	8812      	ldrh	r2, [r2, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d23d      	bcs.n	80043f6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800437a:	f3ef 8310 	mrs	r3, PRIMASK
 800437e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004380:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004384:	2301      	movs	r3, #1
 8004386:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f383 8810 	msr	PRIMASK, r3
}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	491b      	ldr	r1, [pc, #108]	; (8004408 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800439c:	400a      	ands	r2, r1
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f383 8810 	msr	PRIMASK, r3
}
 80043aa:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a17      	ldr	r2, [pc, #92]	; (800440c <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80043b0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043b2:	f3ef 8310 	mrs	r3, PRIMASK
 80043b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80043b8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80043ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80043bc:	2301      	movs	r3, #1
 80043be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f383 8810 	msr	PRIMASK, r3
}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2120      	movs	r1, #32
 80043d4:	430a      	orrs	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	f383 8810 	msr	PRIMASK, r3
}
 80043e2:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043e4:	e007      	b.n	80043f6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699a      	ldr	r2, [r3, #24]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2108      	movs	r1, #8
 80043f2:	430a      	orrs	r2, r1
 80043f4:	619a      	str	r2, [r3, #24]
}
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b01e      	add	sp, #120	; 0x78
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	fffffeff 	.word	0xfffffeff
 8004404:	effffffe 	.word	0xeffffffe
 8004408:	efffffff 	.word	0xefffffff
 800440c:	08003cc5 	.word	0x08003cc5

08004410 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004418:	46c0      	nop			; (mov r8, r8)
 800441a:	46bd      	mov	sp, r7
 800441c:	b002      	add	sp, #8
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004428:	46c0      	nop			; (mov r8, r8)
 800442a:	46bd      	mov	sp, r7
 800442c:	b002      	add	sp, #8
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004438:	46c0      	nop			; (mov r8, r8)
 800443a:	46bd      	mov	sp, r7
 800443c:	b002      	add	sp, #8
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2284      	movs	r2, #132	; 0x84
 800444c:	5c9b      	ldrb	r3, [r3, r2]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_UARTEx_DisableFifoMode+0x16>
 8004452:	2302      	movs	r3, #2
 8004454:	e027      	b.n	80044a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2284      	movs	r2, #132	; 0x84
 800445a:	2101      	movs	r1, #1
 800445c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2288      	movs	r2, #136	; 0x88
 8004462:	2124      	movs	r1, #36	; 0x24
 8004464:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2101      	movs	r1, #1
 800447a:	438a      	bics	r2, r1
 800447c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4a0b      	ldr	r2, [pc, #44]	; (80044b0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004482:	4013      	ands	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2288      	movs	r2, #136	; 0x88
 8004498:	2120      	movs	r1, #32
 800449a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2284      	movs	r2, #132	; 0x84
 80044a0:	2100      	movs	r1, #0
 80044a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	0018      	movs	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b004      	add	sp, #16
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	dfffffff 	.word	0xdfffffff

080044b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2284      	movs	r2, #132	; 0x84
 80044c2:	5c9b      	ldrb	r3, [r3, r2]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e02e      	b.n	800452a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2284      	movs	r2, #132	; 0x84
 80044d0:	2101      	movs	r1, #1
 80044d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2288      	movs	r2, #136	; 0x88
 80044d8:	2124      	movs	r1, #36	; 0x24
 80044da:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2101      	movs	r1, #1
 80044f0:	438a      	bics	r2, r1
 80044f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	08d9      	lsrs	r1, r3, #3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	0018      	movs	r0, r3
 800450c:	f000 f854 	bl	80045b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2288      	movs	r2, #136	; 0x88
 800451c:	2120      	movs	r1, #32
 800451e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2284      	movs	r2, #132	; 0x84
 8004524:	2100      	movs	r1, #0
 8004526:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b004      	add	sp, #16
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2284      	movs	r2, #132	; 0x84
 8004542:	5c9b      	ldrb	r3, [r3, r2]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004548:	2302      	movs	r3, #2
 800454a:	e02f      	b.n	80045ac <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2284      	movs	r2, #132	; 0x84
 8004550:	2101      	movs	r1, #1
 8004552:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2288      	movs	r2, #136	; 0x88
 8004558:	2124      	movs	r1, #36	; 0x24
 800455a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2101      	movs	r1, #1
 8004570:	438a      	bics	r2, r1
 8004572:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	4a0e      	ldr	r2, [pc, #56]	; (80045b4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800457c:	4013      	ands	r3, r2
 800457e:	0019      	movs	r1, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	0018      	movs	r0, r3
 800458e:	f000 f813 	bl	80045b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2288      	movs	r2, #136	; 0x88
 800459e:	2120      	movs	r1, #32
 80045a0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2284      	movs	r2, #132	; 0x84
 80045a6:	2100      	movs	r1, #0
 80045a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	0018      	movs	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	b004      	add	sp, #16
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	f1ffffff 	.word	0xf1ffffff

080045b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d108      	bne.n	80045da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	226a      	movs	r2, #106	; 0x6a
 80045cc:	2101      	movs	r1, #1
 80045ce:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2268      	movs	r2, #104	; 0x68
 80045d4:	2101      	movs	r1, #1
 80045d6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045d8:	e043      	b.n	8004662 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80045da:	260f      	movs	r6, #15
 80045dc:	19bb      	adds	r3, r7, r6
 80045de:	2208      	movs	r2, #8
 80045e0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045e2:	200e      	movs	r0, #14
 80045e4:	183b      	adds	r3, r7, r0
 80045e6:	2208      	movs	r2, #8
 80045e8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	0e5b      	lsrs	r3, r3, #25
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	240d      	movs	r4, #13
 80045f6:	193b      	adds	r3, r7, r4
 80045f8:	2107      	movs	r1, #7
 80045fa:	400a      	ands	r2, r1
 80045fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	0f5b      	lsrs	r3, r3, #29
 8004606:	b2da      	uxtb	r2, r3
 8004608:	250c      	movs	r5, #12
 800460a:	197b      	adds	r3, r7, r5
 800460c:	2107      	movs	r1, #7
 800460e:	400a      	ands	r2, r1
 8004610:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004612:	183b      	adds	r3, r7, r0
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	197a      	adds	r2, r7, r5
 8004618:	7812      	ldrb	r2, [r2, #0]
 800461a:	4914      	ldr	r1, [pc, #80]	; (800466c <UARTEx_SetNbDataToProcess+0xb4>)
 800461c:	5c8a      	ldrb	r2, [r1, r2]
 800461e:	435a      	muls	r2, r3
 8004620:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004622:	197b      	adds	r3, r7, r5
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	4a12      	ldr	r2, [pc, #72]	; (8004670 <UARTEx_SetNbDataToProcess+0xb8>)
 8004628:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800462a:	0019      	movs	r1, r3
 800462c:	f7fb fdf2 	bl	8000214 <__divsi3>
 8004630:	0003      	movs	r3, r0
 8004632:	b299      	uxth	r1, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	226a      	movs	r2, #106	; 0x6a
 8004638:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800463a:	19bb      	adds	r3, r7, r6
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	193a      	adds	r2, r7, r4
 8004640:	7812      	ldrb	r2, [r2, #0]
 8004642:	490a      	ldr	r1, [pc, #40]	; (800466c <UARTEx_SetNbDataToProcess+0xb4>)
 8004644:	5c8a      	ldrb	r2, [r1, r2]
 8004646:	435a      	muls	r2, r3
 8004648:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800464a:	193b      	adds	r3, r7, r4
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	4a08      	ldr	r2, [pc, #32]	; (8004670 <UARTEx_SetNbDataToProcess+0xb8>)
 8004650:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004652:	0019      	movs	r1, r3
 8004654:	f7fb fdde 	bl	8000214 <__divsi3>
 8004658:	0003      	movs	r3, r0
 800465a:	b299      	uxth	r1, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2268      	movs	r2, #104	; 0x68
 8004660:	5299      	strh	r1, [r3, r2]
}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	46bd      	mov	sp, r7
 8004666:	b005      	add	sp, #20
 8004668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	0800475c 	.word	0x0800475c
 8004670:	08004764 	.word	0x08004764

08004674 <__libc_init_array>:
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	2600      	movs	r6, #0
 8004678:	4d0c      	ldr	r5, [pc, #48]	; (80046ac <__libc_init_array+0x38>)
 800467a:	4c0d      	ldr	r4, [pc, #52]	; (80046b0 <__libc_init_array+0x3c>)
 800467c:	1b64      	subs	r4, r4, r5
 800467e:	10a4      	asrs	r4, r4, #2
 8004680:	42a6      	cmp	r6, r4
 8004682:	d109      	bne.n	8004698 <__libc_init_array+0x24>
 8004684:	2600      	movs	r6, #0
 8004686:	f000 f821 	bl	80046cc <_init>
 800468a:	4d0a      	ldr	r5, [pc, #40]	; (80046b4 <__libc_init_array+0x40>)
 800468c:	4c0a      	ldr	r4, [pc, #40]	; (80046b8 <__libc_init_array+0x44>)
 800468e:	1b64      	subs	r4, r4, r5
 8004690:	10a4      	asrs	r4, r4, #2
 8004692:	42a6      	cmp	r6, r4
 8004694:	d105      	bne.n	80046a2 <__libc_init_array+0x2e>
 8004696:	bd70      	pop	{r4, r5, r6, pc}
 8004698:	00b3      	lsls	r3, r6, #2
 800469a:	58eb      	ldr	r3, [r5, r3]
 800469c:	4798      	blx	r3
 800469e:	3601      	adds	r6, #1
 80046a0:	e7ee      	b.n	8004680 <__libc_init_array+0xc>
 80046a2:	00b3      	lsls	r3, r6, #2
 80046a4:	58eb      	ldr	r3, [r5, r3]
 80046a6:	4798      	blx	r3
 80046a8:	3601      	adds	r6, #1
 80046aa:	e7f2      	b.n	8004692 <__libc_init_array+0x1e>
 80046ac:	0800476c 	.word	0x0800476c
 80046b0:	0800476c 	.word	0x0800476c
 80046b4:	0800476c 	.word	0x0800476c
 80046b8:	08004770 	.word	0x08004770

080046bc <memset>:
 80046bc:	0003      	movs	r3, r0
 80046be:	1882      	adds	r2, r0, r2
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d100      	bne.n	80046c6 <memset+0xa>
 80046c4:	4770      	bx	lr
 80046c6:	7019      	strb	r1, [r3, #0]
 80046c8:	3301      	adds	r3, #1
 80046ca:	e7f9      	b.n	80046c0 <memset+0x4>

080046cc <_init>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d2:	bc08      	pop	{r3}
 80046d4:	469e      	mov	lr, r3
 80046d6:	4770      	bx	lr

080046d8 <_fini>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046de:	bc08      	pop	{r3}
 80046e0:	469e      	mov	lr, r3
 80046e2:	4770      	bx	lr
