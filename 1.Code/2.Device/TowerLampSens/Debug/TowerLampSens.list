
TowerLampSens.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005298  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005350  08005350  00015350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053d8  080053d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080053d8  080053d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053d8  080053d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053d8  080053d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053dc  080053dc  000153dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  2000000c  080053ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080053ec  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001114a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002221  00000000  00000000  0003117e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  000333a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00034200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166bc  00000000  00000000  00034f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ef1  00000000  00000000  0004b654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e85  00000000  00000000  0005c545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f03ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003434  00000000  00000000  000f041c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005338 	.word	0x08005338

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08005338 	.word	0x08005338

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f2:	f000 fdd9 	bl	8000fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f6:	f000 f8ab 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fa:	f000 f9d1 	bl	80007a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003fe:	f000 f8ef 	bl	80005e0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000402:	f000 f97f 	bl	8000704 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8000406:	f000 f953 	bl	80006b0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 800040a:	4b43      	ldr	r3, [pc, #268]	; (8000518 <main+0x12c>)
 800040c:	0018      	movs	r0, r3
 800040e:	f001 f963 	bl	80016d8 <HAL_ADC_Start>
  HAL_TIM_Base_Start(&htim16);
 8000412:	4b42      	ldr	r3, [pc, #264]	; (800051c <main+0x130>)
 8000414:	0018      	movs	r0, r3
 8000416:	f002 ff45 	bl	80032a4 <HAL_TIM_Base_Start>


  HAL_UART_Receive_IT(&huart1, &rx_dataChar, 1);
 800041a:	4941      	ldr	r1, [pc, #260]	; (8000520 <main+0x134>)
 800041c:	4b41      	ldr	r3, [pc, #260]	; (8000524 <main+0x138>)
 800041e:	2201      	movs	r2, #1
 8000420:	0018      	movs	r0, r3
 8000422:	f003 f8f5 	bl	8003610 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	lampStatus = checkLampStatus();
 8000426:	f000 f9ff 	bl	8000828 <checkLampStatus>
 800042a:	0003      	movs	r3, r0
 800042c:	001a      	movs	r2, r3
 800042e:	4b3e      	ldr	r3, [pc, #248]	; (8000528 <main+0x13c>)
 8000430:	701a      	strb	r2, [r3, #0]
	uint16_t currentCounter = __HAL_TIM_GetCounter(&htim16);
 8000432:	4b3a      	ldr	r3, [pc, #232]	; (800051c <main+0x130>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000438:	1dbb      	adds	r3, r7, #6
 800043a:	801a      	strh	r2, [r3, #0]
	if(lampStatus)
 800043c:	4b3a      	ldr	r3, [pc, #232]	; (8000528 <main+0x13c>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d01e      	beq.n	8000482 <main+0x96>
	{
		if(isLight == 0)
 8000444:	4b39      	ldr	r3, [pc, #228]	; (800052c <main+0x140>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d109      	bne.n	8000460 <main+0x74>
		{
			isLight = lampStatus;
 800044c:	4b36      	ldr	r3, [pc, #216]	; (8000528 <main+0x13c>)
 800044e:	781a      	ldrb	r2, [r3, #0]
 8000450:	4b36      	ldr	r3, [pc, #216]	; (800052c <main+0x140>)
 8000452:	701a      	strb	r2, [r3, #0]
			counter = __HAL_TIM_GetCounter(&htim16);
 8000454:	4b31      	ldr	r3, [pc, #196]	; (800051c <main+0x130>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b34      	ldr	r3, [pc, #208]	; (8000530 <main+0x144>)
 800045e:	801a      	strh	r2, [r3, #0]
		}
		if(currentCounter - counter > BlinkTimerthreshold)
 8000460:	1dbb      	adds	r3, r7, #6
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	4a32      	ldr	r2, [pc, #200]	; (8000530 <main+0x144>)
 8000466:	8812      	ldrh	r2, [r2, #0]
 8000468:	1a9a      	subs	r2, r3, r2
 800046a:	23fa      	movs	r3, #250	; 0xfa
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	429a      	cmp	r2, r3
 8000470:	dd02      	ble.n	8000478 <main+0x8c>
		{
			isBlink = 0;
 8000472:	4b30      	ldr	r3, [pc, #192]	; (8000534 <main+0x148>)
 8000474:	2200      	movs	r2, #0
 8000476:	701a      	strb	r2, [r3, #0]
		}
		whichLight = lampStatus;
 8000478:	4b2b      	ldr	r3, [pc, #172]	; (8000528 <main+0x13c>)
 800047a:	781a      	ldrb	r2, [r3, #0]
 800047c:	4b2e      	ldr	r3, [pc, #184]	; (8000538 <main+0x14c>)
 800047e:	701a      	strb	r2, [r3, #0]
 8000480:	e032      	b.n	80004e8 <main+0xfc>
	}
	else if(lampStatus == 0)
 8000482:	4b29      	ldr	r3, [pc, #164]	; (8000528 <main+0x13c>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d12e      	bne.n	80004e8 <main+0xfc>
	{
		if(currentCounter - counter < BlinkTimerthreshold)
 800048a:	1dbb      	adds	r3, r7, #6
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	4a28      	ldr	r2, [pc, #160]	; (8000530 <main+0x144>)
 8000490:	8812      	ldrh	r2, [r2, #0]
 8000492:	1a9a      	subs	r2, r3, r2
 8000494:	23fa      	movs	r3, #250	; 0xfa
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	429a      	cmp	r2, r3
 800049a:	da22      	bge.n	80004e2 <main+0xf6>
		{
			isBlink = 1;
 800049c:	4b25      	ldr	r3, [pc, #148]	; (8000534 <main+0x148>)
 800049e:	2201      	movs	r2, #1
 80004a0:	701a      	strb	r2, [r3, #0]
			if(isLight == 1) Blink_RedAccumulateTime++;
 80004a2:	4b22      	ldr	r3, [pc, #136]	; (800052c <main+0x140>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d106      	bne.n	80004b8 <main+0xcc>
 80004aa:	4b24      	ldr	r3, [pc, #144]	; (800053c <main+0x150>)
 80004ac:	881b      	ldrh	r3, [r3, #0]
 80004ae:	3301      	adds	r3, #1
 80004b0:	b29a      	uxth	r2, r3
 80004b2:	4b22      	ldr	r3, [pc, #136]	; (800053c <main+0x150>)
 80004b4:	801a      	strh	r2, [r3, #0]
 80004b6:	e014      	b.n	80004e2 <main+0xf6>
			else if(isLight == 2) Blink_YellowAccumulateTime++;
 80004b8:	4b1c      	ldr	r3, [pc, #112]	; (800052c <main+0x140>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b02      	cmp	r3, #2
 80004be:	d106      	bne.n	80004ce <main+0xe2>
 80004c0:	4b1f      	ldr	r3, [pc, #124]	; (8000540 <main+0x154>)
 80004c2:	881b      	ldrh	r3, [r3, #0]
 80004c4:	3301      	adds	r3, #1
 80004c6:	b29a      	uxth	r2, r3
 80004c8:	4b1d      	ldr	r3, [pc, #116]	; (8000540 <main+0x154>)
 80004ca:	801a      	strh	r2, [r3, #0]
 80004cc:	e009      	b.n	80004e2 <main+0xf6>
			else if(isLight == 3) Blink_GreenAccumulateTime++;
 80004ce:	4b17      	ldr	r3, [pc, #92]	; (800052c <main+0x140>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d105      	bne.n	80004e2 <main+0xf6>
 80004d6:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <main+0x158>)
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	3301      	adds	r3, #1
 80004dc:	b29a      	uxth	r2, r3
 80004de:	4b19      	ldr	r3, [pc, #100]	; (8000544 <main+0x158>)
 80004e0:	801a      	strh	r2, [r3, #0]
		}
		isLight = 0;
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <main+0x140>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
	}
	if(rx_flag)
 80004e8:	4b17      	ldr	r3, [pc, #92]	; (8000548 <main+0x15c>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d09a      	beq.n	8000426 <main+0x3a>
	{
		if(CRC_MODBUS(rx_data, 6) && rx_data[0] == MODBUSADD) modbusTransHandle();
 80004f0:	4b16      	ldr	r3, [pc, #88]	; (800054c <main+0x160>)
 80004f2:	2106      	movs	r1, #6
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 faa1 	bl	8000a3c <CRC_MODBUS>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d005      	beq.n	800050a <main+0x11e>
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <main+0x160>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d101      	bne.n	800050a <main+0x11e>
 8000506:	f000 fb83 	bl	8000c10 <modbusTransHandle>
		clearRx();
 800050a:	f000 fa77 	bl	80009fc <clearRx>
		rx_flag = 0;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <main+0x15c>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
  {
 8000514:	e787      	b.n	8000426 <main+0x3a>
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	20000028 	.word	0x20000028
 800051c:	2000008c 	.word	0x2000008c
 8000520:	2000017a 	.word	0x2000017a
 8000524:	200000d8 	.word	0x200000d8
 8000528:	20000171 	.word	0x20000171
 800052c:	2000016d 	.word	0x2000016d
 8000530:	2000016e 	.word	0x2000016e
 8000534:	2000016c 	.word	0x2000016c
 8000538:	20000172 	.word	0x20000172
 800053c:	20000174 	.word	0x20000174
 8000540:	20000176 	.word	0x20000176
 8000544:	20000178 	.word	0x20000178
 8000548:	20000170 	.word	0x20000170
 800054c:	2000017c 	.word	0x2000017c

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b093      	sub	sp, #76	; 0x4c
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	2414      	movs	r4, #20
 8000558:	193b      	adds	r3, r7, r4
 800055a:	0018      	movs	r0, r3
 800055c:	2334      	movs	r3, #52	; 0x34
 800055e:	001a      	movs	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	f004 fee1 	bl	8005328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	0018      	movs	r0, r3
 800056a:	2310      	movs	r3, #16
 800056c:	001a      	movs	r2, r3
 800056e:	2100      	movs	r1, #0
 8000570:	f004 feda 	bl	8005328 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	0018      	movs	r0, r3
 800057a:	f002 f801 	bl	8002580 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057e:	193b      	adds	r3, r7, r4
 8000580:	2202      	movs	r2, #2
 8000582:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	193b      	adds	r3, r7, r4
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	0052      	lsls	r2, r2, #1
 800058a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800058c:	193b      	adds	r3, r7, r4
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	193b      	adds	r3, r7, r4
 8000594:	2240      	movs	r2, #64	; 0x40
 8000596:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000598:	193b      	adds	r3, r7, r4
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	0018      	movs	r0, r3
 80005a2:	f002 f839 	bl	8002618 <HAL_RCC_OscConfig>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005aa:	f000 fb99 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2207      	movs	r2, #7
 80005b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2100      	movs	r1, #0
 80005ca:	0018      	movs	r0, r3
 80005cc:	f002 fb34 	bl	8002c38 <HAL_RCC_ClockConfig>
 80005d0:	1e03      	subs	r3, r0, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005d4:	f000 fb84 	bl	8000ce0 <Error_Handler>
  }
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	b013      	add	sp, #76	; 0x4c
 80005de:	bd90      	pop	{r4, r7, pc}

080005e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	0018      	movs	r0, r3
 80005ea:	230c      	movs	r3, #12
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f004 fe9a 	bl	8005328 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005f4:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <MX_ADC1_Init+0xc4>)
 80005f6:	4a2c      	ldr	r2, [pc, #176]	; (80006a8 <MX_ADC1_Init+0xc8>)
 80005f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005fa:	4b2a      	ldr	r3, [pc, #168]	; (80006a4 <MX_ADC1_Init+0xc4>)
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	05d2      	lsls	r2, r2, #23
 8000600:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000602:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <MX_ADC1_Init+0xc4>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000608:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <MX_ADC1_Init+0xc4>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060e:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <MX_ADC1_Init+0xc4>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000614:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <MX_ADC1_Init+0xc4>)
 8000616:	2204      	movs	r2, #4
 8000618:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800061a:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <MX_ADC1_Init+0xc4>)
 800061c:	2200      	movs	r2, #0
 800061e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_ADC1_Init+0xc4>)
 8000622:	2200      	movs	r2, #0
 8000624:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000626:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MX_ADC1_Init+0xc4>)
 8000628:	2201      	movs	r2, #1
 800062a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800062c:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_ADC1_Init+0xc4>)
 800062e:	2201      	movs	r2, #1
 8000630:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000632:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <MX_ADC1_Init+0xc4>)
 8000634:	2200      	movs	r2, #0
 8000636:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000638:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_ADC1_Init+0xc4>)
 800063a:	2200      	movs	r2, #0
 800063c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063e:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <MX_ADC1_Init+0xc4>)
 8000640:	222c      	movs	r2, #44	; 0x2c
 8000642:	2100      	movs	r1, #0
 8000644:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <MX_ADC1_Init+0xc4>)
 8000648:	2200      	movs	r2, #0
 800064a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_ADC1_Init+0xc4>)
 800064e:	2200      	movs	r2, #0
 8000650:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_ADC1_Init+0xc4>)
 8000654:	2200      	movs	r2, #0
 8000656:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_ADC1_Init+0xc4>)
 800065a:	223c      	movs	r2, #60	; 0x3c
 800065c:	2100      	movs	r1, #0
 800065e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_ADC1_Init+0xc4>)
 8000662:	2200      	movs	r2, #0
 8000664:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_ADC1_Init+0xc4>)
 8000668:	0018      	movs	r0, r3
 800066a:	f000 fe8d 	bl	8001388 <HAL_ADC_Init>
 800066e:	1e03      	subs	r3, r0, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000672:	f000 fb35 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <MX_ADC1_Init+0xcc>)
 800067a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000688:	1d3a      	adds	r2, r7, #4
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_ADC1_Init+0xc4>)
 800068c:	0011      	movs	r1, r2
 800068e:	0018      	movs	r0, r3
 8000690:	f001 f94c 	bl	800192c <HAL_ADC_ConfigChannel>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000698:	f000 fb22 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b004      	add	sp, #16
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000028 	.word	0x20000028
 80006a8:	40012400 	.word	0x40012400
 80006ac:	0c000008 	.word	0x0c000008

080006b0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006b4:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_TIM16_Init+0x48>)
 80006b6:	4a11      	ldr	r2, [pc, #68]	; (80006fc <MX_TIM16_Init+0x4c>)
 80006b8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_TIM16_Init+0x48>)
 80006bc:	22fa      	movs	r2, #250	; 0xfa
 80006be:	0212      	lsls	r2, r2, #8
 80006c0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <MX_TIM16_Init+0x48>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_TIM16_Init+0x48>)
 80006ca:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <MX_TIM16_Init+0x50>)
 80006cc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <MX_TIM16_Init+0x48>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_TIM16_Init+0x48>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_TIM16_Init+0x48>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <MX_TIM16_Init+0x48>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f002 fd86 	bl	80031f4 <HAL_TIM_Base_Init>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80006ec:	f000 faf8 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	2000008c 	.word	0x2000008c
 80006fc:	40014400 	.word	0x40014400
 8000700:	0000ffff 	.word	0x0000ffff

08000704 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_USART1_UART_Init+0x94>)
 800070a:	4a24      	ldr	r2, [pc, #144]	; (800079c <MX_USART1_UART_Init+0x98>)
 800070c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070e:	4b22      	ldr	r3, [pc, #136]	; (8000798 <MX_USART1_UART_Init+0x94>)
 8000710:	22e1      	movs	r2, #225	; 0xe1
 8000712:	0252      	lsls	r2, r2, #9
 8000714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_USART1_UART_Init+0x94>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_USART1_UART_Init+0x94>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_USART1_UART_Init+0x94>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_USART1_UART_Init+0x94>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_USART1_UART_Init+0x94>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_USART1_UART_Init+0x94>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_USART1_UART_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_USART1_UART_Init+0x94>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_USART1_UART_Init+0x94>)
 8000748:	2200      	movs	r2, #0
 800074a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_USART1_UART_Init+0x94>)
 800074e:	0018      	movs	r0, r3
 8000750:	f002 fe6c 	bl	800342c <HAL_UART_Init>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000758:	f000 fac2 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_USART1_UART_Init+0x94>)
 800075e:	2100      	movs	r1, #0
 8000760:	0018      	movs	r0, r3
 8000762:	f004 fcdd 	bl	8005120 <HAL_UARTEx_SetTxFifoThreshold>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800076a:	f000 fab9 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_USART1_UART_Init+0x94>)
 8000770:	2100      	movs	r1, #0
 8000772:	0018      	movs	r0, r3
 8000774:	f004 fd14 	bl	80051a0 <HAL_UARTEx_SetRxFifoThreshold>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800077c:	f000 fab0 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <MX_USART1_UART_Init+0x94>)
 8000782:	0018      	movs	r0, r3
 8000784:	f004 fc92 	bl	80050ac <HAL_UARTEx_DisableFifoMode>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800078c:	f000 faa8 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	200000d8 	.word	0x200000d8
 800079c:	40013800 	.word	0x40013800

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	240c      	movs	r4, #12
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	0018      	movs	r0, r3
 80007ac:	2314      	movs	r3, #20
 80007ae:	001a      	movs	r2, r3
 80007b0:	2100      	movs	r1, #0
 80007b2:	f004 fdb9 	bl	8005328 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_GPIO_Init+0x80>)
 80007b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_GPIO_Init+0x80>)
 80007bc:	2101      	movs	r1, #1
 80007be:	430a      	orrs	r2, r1
 80007c0:	635a      	str	r2, [r3, #52]	; 0x34
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_GPIO_Init+0x80>)
 80007c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007c6:	2201      	movs	r2, #1
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_GPIO_Init+0x80>)
 80007d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_GPIO_Init+0x80>)
 80007d4:	2102      	movs	r1, #2
 80007d6:	430a      	orrs	r2, r1
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_GPIO_Init+0x80>)
 80007dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007de:	2202      	movs	r2, #2
 80007e0:	4013      	ands	r3, r2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_GPIO_Init+0x84>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	2120      	movs	r1, #32
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 fea9 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007f2:	0021      	movs	r1, r4
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2220      	movs	r2, #32
 80007f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2201      	movs	r2, #1
 80007fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080c:	187b      	adds	r3, r7, r1
 800080e:	4a05      	ldr	r2, [pc, #20]	; (8000824 <MX_GPIO_Init+0x84>)
 8000810:	0019      	movs	r1, r3
 8000812:	0010      	movs	r0, r2
 8000814:	f001 fd32 	bl	800227c <HAL_GPIO_Init>

}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b009      	add	sp, #36	; 0x24
 800081e:	bd90      	pop	{r4, r7, pc}
 8000820:	40021000 	.word	0x40021000
 8000824:	50000400 	.word	0x50000400

08000828 <checkLampStatus>:

/* USER CODE BEGIN 4 */
char checkLampStatus(void)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b087      	sub	sp, #28
 800082c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfigPrivate = {0};
 800082e:	2408      	movs	r4, #8
 8000830:	193b      	adds	r3, r7, r4
 8000832:	0018      	movs	r0, r3
 8000834:	230c      	movs	r3, #12
 8000836:	001a      	movs	r2, r3
 8000838:	2100      	movs	r1, #0
 800083a:	f004 fd75 	bl	8005328 <memset>
  uint16_t DCValue[3];

  sConfigPrivate.Channel = ADC_CHANNEL_3;
 800083e:	193b      	adds	r3, r7, r4
 8000840:	4a50      	ldr	r2, [pc, #320]	; (8000984 <checkLampStatus+0x15c>)
 8000842:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 8000844:	193a      	adds	r2, r7, r4
 8000846:	4b50      	ldr	r3, [pc, #320]	; (8000988 <checkLampStatus+0x160>)
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f001 f86e 	bl	800192c <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8000850:	4b4d      	ldr	r3, [pc, #308]	; (8000988 <checkLampStatus+0x160>)
 8000852:	0018      	movs	r0, r3
 8000854:	f000 ff40 	bl	80016d8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1,1000);
 8000858:	23fa      	movs	r3, #250	; 0xfa
 800085a:	009a      	lsls	r2, r3, #2
 800085c:	4b4a      	ldr	r3, [pc, #296]	; (8000988 <checkLampStatus+0x160>)
 800085e:	0011      	movs	r1, r2
 8000860:	0018      	movs	r0, r3
 8000862:	f000 ffc3 	bl	80017ec <HAL_ADC_PollForConversion>
  DCValue[0] = HAL_ADC_GetValue(&hadc1);
 8000866:	4b48      	ldr	r3, [pc, #288]	; (8000988 <checkLampStatus+0x160>)
 8000868:	0018      	movs	r0, r3
 800086a:	f001 f853 	bl	8001914 <HAL_ADC_GetValue>
 800086e:	0003      	movs	r3, r0
 8000870:	b29a      	uxth	r2, r3
 8000872:	003b      	movs	r3, r7
 8000874:	801a      	strh	r2, [r3, #0]
  HAL_ADC_Stop(&hadc1);
 8000876:	4b44      	ldr	r3, [pc, #272]	; (8000988 <checkLampStatus+0x160>)
 8000878:	0018      	movs	r0, r3
 800087a:	f000 ff7b 	bl	8001774 <HAL_ADC_Stop>

  sConfigPrivate.Channel = ADC_CHANNEL_4;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	4a42      	ldr	r2, [pc, #264]	; (800098c <checkLampStatus+0x164>)
 8000882:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 8000884:	193a      	adds	r2, r7, r4
 8000886:	4b40      	ldr	r3, [pc, #256]	; (8000988 <checkLampStatus+0x160>)
 8000888:	0011      	movs	r1, r2
 800088a:	0018      	movs	r0, r3
 800088c:	f001 f84e 	bl	800192c <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8000890:	4b3d      	ldr	r3, [pc, #244]	; (8000988 <checkLampStatus+0x160>)
 8000892:	0018      	movs	r0, r3
 8000894:	f000 ff20 	bl	80016d8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1,1000);
 8000898:	23fa      	movs	r3, #250	; 0xfa
 800089a:	009a      	lsls	r2, r3, #2
 800089c:	4b3a      	ldr	r3, [pc, #232]	; (8000988 <checkLampStatus+0x160>)
 800089e:	0011      	movs	r1, r2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 ffa3 	bl	80017ec <HAL_ADC_PollForConversion>
  DCValue[1] = HAL_ADC_GetValue(&hadc1);
 80008a6:	4b38      	ldr	r3, [pc, #224]	; (8000988 <checkLampStatus+0x160>)
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 f833 	bl	8001914 <HAL_ADC_GetValue>
 80008ae:	0003      	movs	r3, r0
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	003b      	movs	r3, r7
 80008b4:	805a      	strh	r2, [r3, #2]
  HAL_ADC_Stop(&hadc1);
 80008b6:	4b34      	ldr	r3, [pc, #208]	; (8000988 <checkLampStatus+0x160>)
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 ff5b 	bl	8001774 <HAL_ADC_Stop>

  sConfigPrivate.Channel = ADC_CHANNEL_5;
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	4a33      	ldr	r2, [pc, #204]	; (8000990 <checkLampStatus+0x168>)
 80008c2:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80008c4:	193a      	adds	r2, r7, r4
 80008c6:	4b30      	ldr	r3, [pc, #192]	; (8000988 <checkLampStatus+0x160>)
 80008c8:	0011      	movs	r1, r2
 80008ca:	0018      	movs	r0, r3
 80008cc:	f001 f82e 	bl	800192c <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 80008d0:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <checkLampStatus+0x160>)
 80008d2:	0018      	movs	r0, r3
 80008d4:	f000 ff00 	bl	80016d8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1,1000);
 80008d8:	23fa      	movs	r3, #250	; 0xfa
 80008da:	009a      	lsls	r2, r3, #2
 80008dc:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <checkLampStatus+0x160>)
 80008de:	0011      	movs	r1, r2
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 ff83 	bl	80017ec <HAL_ADC_PollForConversion>
  DCValue[2] = HAL_ADC_GetValue(&hadc1);
 80008e6:	4b28      	ldr	r3, [pc, #160]	; (8000988 <checkLampStatus+0x160>)
 80008e8:	0018      	movs	r0, r3
 80008ea:	f001 f813 	bl	8001914 <HAL_ADC_GetValue>
 80008ee:	0003      	movs	r3, r0
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	003b      	movs	r3, r7
 80008f4:	809a      	strh	r2, [r3, #4]
  HAL_ADC_Stop(&hadc1);
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <checkLampStatus+0x160>)
 80008f8:	0018      	movs	r0, r3
 80008fa:	f000 ff3b 	bl	8001774 <HAL_ADC_Stop>

  //check which is highest value
  uint16_t max = 0;
 80008fe:	2316      	movs	r3, #22
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	2200      	movs	r2, #0
 8000904:	801a      	strh	r2, [r3, #0]
  char maxPos = 0;
 8000906:	2315      	movs	r3, #21
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
  for(char i = 0; i < 3; i++)
 800090e:	2314      	movs	r3, #20
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	e01d      	b.n	8000954 <checkLampStatus+0x12c>
  {
    if(DCValue[i] > max)
 8000918:	2014      	movs	r0, #20
 800091a:	183b      	adds	r3, r7, r0
 800091c:	781a      	ldrb	r2, [r3, #0]
 800091e:	003b      	movs	r3, r7
 8000920:	0052      	lsls	r2, r2, #1
 8000922:	5ad3      	ldrh	r3, [r2, r3]
 8000924:	2416      	movs	r4, #22
 8000926:	193a      	adds	r2, r7, r4
 8000928:	8812      	ldrh	r2, [r2, #0]
 800092a:	429a      	cmp	r2, r3
 800092c:	d20c      	bcs.n	8000948 <checkLampStatus+0x120>
    {
      max = DCValue[i];
 800092e:	183b      	adds	r3, r7, r0
 8000930:	7819      	ldrb	r1, [r3, #0]
 8000932:	193b      	adds	r3, r7, r4
 8000934:	003a      	movs	r2, r7
 8000936:	0049      	lsls	r1, r1, #1
 8000938:	5a8a      	ldrh	r2, [r1, r2]
 800093a:	801a      	strh	r2, [r3, #0]
      maxPos = i + 1;
 800093c:	2315      	movs	r3, #21
 800093e:	18fb      	adds	r3, r7, r3
 8000940:	183a      	adds	r2, r7, r0
 8000942:	7812      	ldrb	r2, [r2, #0]
 8000944:	3201      	adds	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
  for(char i = 0; i < 3; i++)
 8000948:	2114      	movs	r1, #20
 800094a:	187b      	adds	r3, r7, r1
 800094c:	781a      	ldrb	r2, [r3, #0]
 800094e:	187b      	adds	r3, r7, r1
 8000950:	3201      	adds	r2, #1
 8000952:	701a      	strb	r2, [r3, #0]
 8000954:	2314      	movs	r3, #20
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b02      	cmp	r3, #2
 800095c:	d9dc      	bls.n	8000918 <checkLampStatus+0xf0>
    }
  }
  //check if that is no light (all off)
  if(max < ADCthreshold) // fix here
 800095e:	2316      	movs	r3, #22
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	881a      	ldrh	r2, [r3, #0]
 8000964:	23fa      	movs	r3, #250	; 0xfa
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	429a      	cmp	r2, r3
 800096a:	d203      	bcs.n	8000974 <checkLampStatus+0x14c>
  {
    maxPos = 0;
 800096c:	2315      	movs	r3, #21
 800096e:	18fb      	adds	r3, r7, r3
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
  }
  return maxPos;
 8000974:	2315      	movs	r3, #21
 8000976:	18fb      	adds	r3, r7, r3
 8000978:	781b      	ldrb	r3, [r3, #0]

}
 800097a:	0018      	movs	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	b007      	add	sp, #28
 8000980:	bd90      	pop	{r4, r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	0c000008 	.word	0x0c000008
 8000988:	20000028 	.word	0x20000028
 800098c:	10000010 	.word	0x10000010
 8000990:	14000020 	.word	0x14000020

08000994 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1){
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a10      	ldr	r2, [pc, #64]	; (80009e4 <HAL_UART_RxCpltCallback+0x50>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d119      	bne.n	80009da <HAL_UART_RxCpltCallback+0x46>
        HAL_UART_Receive_IT(&huart1, &rx_dataChar, 1);
 80009a6:	4910      	ldr	r1, [pc, #64]	; (80009e8 <HAL_UART_RxCpltCallback+0x54>)
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <HAL_UART_RxCpltCallback+0x58>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	0018      	movs	r0, r3
 80009ae:	f002 fe2f 	bl	8003610 <HAL_UART_Receive_IT>
        rx_data[rx_count] = rx_dataChar;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_UART_RxCpltCallback+0x5c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	001a      	movs	r2, r3
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_UART_RxCpltCallback+0x54>)
 80009ba:	7819      	ldrb	r1, [r3, #0]
 80009bc:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <HAL_UART_RxCpltCallback+0x60>)
 80009be:	5499      	strb	r1, [r3, r2]
        rx_count++;
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <HAL_UART_RxCpltCallback+0x5c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	3301      	adds	r3, #1
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_UART_RxCpltCallback+0x5c>)
 80009ca:	701a      	strb	r2, [r3, #0]
        if(rx_count >= 6) rx_flag = 1;
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <HAL_UART_RxCpltCallback+0x5c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b05      	cmp	r3, #5
 80009d2:	d902      	bls.n	80009da <HAL_UART_RxCpltCallback+0x46>
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_UART_RxCpltCallback+0x64>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
    }
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b002      	add	sp, #8
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	40013800 	.word	0x40013800
 80009e8:	2000017a 	.word	0x2000017a
 80009ec:	200000d8 	.word	0x200000d8
 80009f0:	20000190 	.word	0x20000190
 80009f4:	2000017c 	.word	0x2000017c
 80009f8:	20000170 	.word	0x20000170

080009fc <clearRx>:
void clearRx (void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < maxRxSize; i++)
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
 8000a08:	e009      	b.n	8000a1e <clearRx+0x22>
	{
		rx_data[i] = '\0';
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <clearRx+0x38>)
 8000a10:	2100      	movs	r1, #0
 8000a12:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < maxRxSize; i++)
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	3201      	adds	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b13      	cmp	r3, #19
 8000a24:	d9f1      	bls.n	8000a0a <clearRx+0xe>
	}
	rx_count = 0;
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <clearRx+0x3c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b002      	add	sp, #8
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000017c 	.word	0x2000017c
 8000a38:	20000190 	.word	0x20000190

08000a3c <CRC_MODBUS>:
uint8_t CRC_MODBUS(uint8_t *input, uint8_t size)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	000a      	movs	r2, r1
 8000a46:	1cfb      	adds	r3, r7, #3
 8000a48:	701a      	strb	r2, [r3, #0]
  uint16_t check_sum[2];
  uint16_t reg_crc = 0xFFFF;
 8000a4a:	230e      	movs	r3, #14
 8000a4c:	18fb      	adds	r3, r7, r3
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4252      	negs	r2, r2
 8000a52:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < size; i++) {
 8000a54:	230d      	movs	r3, #13
 8000a56:	18fb      	adds	r3, r7, r3
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
 8000a5c:	e062      	b.n	8000b24 <CRC_MODBUS+0xe8>
		reg_crc ^= input[i];
 8000a5e:	230d      	movs	r3, #13
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	18d3      	adds	r3, r2, r3
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b299      	uxth	r1, r3
 8000a6c:	220e      	movs	r2, #14
 8000a6e:	18bb      	adds	r3, r7, r2
 8000a70:	18ba      	adds	r2, r7, r2
 8000a72:	8812      	ldrh	r2, [r2, #0]
 8000a74:	404a      	eors	r2, r1
 8000a76:	801a      	strh	r2, [r3, #0]

		for(uint8_t j = 0; j < 8; j++) {
 8000a78:	230c      	movs	r3, #12
 8000a7a:	18fb      	adds	r3, r7, r3
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
 8000a80:	e01a      	b.n	8000ab8 <CRC_MODBUS+0x7c>
			if((reg_crc & 0x01) == 1) reg_crc = (reg_crc >> 1) ^ 0xA001;
 8000a82:	210e      	movs	r1, #14
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	d008      	beq.n	8000aa0 <CRC_MODBUS+0x64>
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	085b      	lsrs	r3, r3, #1
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	4928      	ldr	r1, [pc, #160]	; (8000b3c <CRC_MODBUS+0x100>)
 8000a9a:	404a      	eors	r2, r1
 8000a9c:	801a      	strh	r2, [r3, #0]
 8000a9e:	e005      	b.n	8000aac <CRC_MODBUS+0x70>
			else reg_crc = reg_crc >> 1;
 8000aa0:	220e      	movs	r2, #14
 8000aa2:	18bb      	adds	r3, r7, r2
 8000aa4:	18ba      	adds	r2, r7, r2
 8000aa6:	8812      	ldrh	r2, [r2, #0]
 8000aa8:	0852      	lsrs	r2, r2, #1
 8000aaa:	801a      	strh	r2, [r3, #0]
		for(uint8_t j = 0; j < 8; j++) {
 8000aac:	210c      	movs	r1, #12
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	781a      	ldrb	r2, [r3, #0]
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
 8000ab8:	230c      	movs	r3, #12
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b07      	cmp	r3, #7
 8000ac0:	d9df      	bls.n	8000a82 <CRC_MODBUS+0x46>
		}

		check_sum[1] = (reg_crc >> 8) &0xFF;
 8000ac2:	200e      	movs	r0, #14
 8000ac4:	183b      	adds	r3, r7, r0
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	2108      	movs	r1, #8
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	805a      	strh	r2, [r3, #2]
		check_sum[0] = reg_crc & 0xFF;
 8000ad2:	183b      	adds	r3, r7, r0
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	22ff      	movs	r2, #255	; 0xff
 8000ad8:	4013      	ands	r3, r2
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	801a      	strh	r2, [r3, #0]

		if(input[i + 1] == check_sum[0] && input[i + 2] == check_sum[1]) return i + 3;
 8000ae0:	200d      	movs	r0, #13
 8000ae2:	183b      	adds	r3, r7, r0
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	18d3      	adds	r3, r2, r3
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d10f      	bne.n	8000b18 <CRC_MODBUS+0xdc>
 8000af8:	183b      	adds	r3, r7, r0
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	3302      	adds	r3, #2
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	18d3      	adds	r3, r2, r3
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	885b      	ldrh	r3, [r3, #2]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d104      	bne.n	8000b18 <CRC_MODBUS+0xdc>
 8000b0e:	183b      	adds	r3, r7, r0
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	3303      	adds	r3, #3
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	e00d      	b.n	8000b34 <CRC_MODBUS+0xf8>
	for(uint8_t i = 0; i < size; i++) {
 8000b18:	210d      	movs	r1, #13
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	781a      	ldrb	r2, [r3, #0]
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	3201      	adds	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
 8000b24:	230d      	movs	r3, #13
 8000b26:	18fa      	adds	r2, r7, r3
 8000b28:	1cfb      	adds	r3, r7, #3
 8000b2a:	7812      	ldrb	r2, [r2, #0]
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d395      	bcc.n	8000a5e <CRC_MODBUS+0x22>
	}
	return 0;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b004      	add	sp, #16
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	ffffa001 	.word	0xffffa001

08000b40 <Calc_CRC16>:
void Calc_CRC16(uint8_t *input, uint16_t size, uint8_t *output)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	230a      	movs	r3, #10
 8000b4c:	18fb      	adds	r3, r7, r3
 8000b4e:	1c0a      	adds	r2, r1, #0
 8000b50:	801a      	strh	r2, [r3, #0]
  uint16_t reg_crc = 0xFFFF;
 8000b52:	2316      	movs	r3, #22
 8000b54:	18fb      	adds	r3, r7, r3
 8000b56:	2201      	movs	r2, #1
 8000b58:	4252      	negs	r2, r2
 8000b5a:	801a      	strh	r2, [r3, #0]

  for(uint16_t i = 0; i < size; i++)
 8000b5c:	2314      	movs	r3, #20
 8000b5e:	18fb      	adds	r3, r7, r3
 8000b60:	2200      	movs	r2, #0
 8000b62:	801a      	strh	r2, [r3, #0]
 8000b64:	e037      	b.n	8000bd6 <Calc_CRC16+0x96>
  {
    reg_crc ^= input[i];
 8000b66:	2314      	movs	r3, #20
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	18d3      	adds	r3, r2, r3
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	b299      	uxth	r1, r3
 8000b74:	2216      	movs	r2, #22
 8000b76:	18bb      	adds	r3, r7, r2
 8000b78:	18ba      	adds	r2, r7, r2
 8000b7a:	8812      	ldrh	r2, [r2, #0]
 8000b7c:	404a      	eors	r2, r1
 8000b7e:	801a      	strh	r2, [r3, #0]
    for(uint8_t j = 0; j < 8; j++)
 8000b80:	2313      	movs	r3, #19
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	e01a      	b.n	8000bc0 <Calc_CRC16+0x80>
    {
      if((reg_crc & 0x01) == 1) reg_crc = (reg_crc >> 1) ^ 0xA001;
 8000b8a:	2116      	movs	r1, #22
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	2201      	movs	r2, #1
 8000b92:	4013      	ands	r3, r2
 8000b94:	d008      	beq.n	8000ba8 <Calc_CRC16+0x68>
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	085b      	lsrs	r3, r3, #1
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	491a      	ldr	r1, [pc, #104]	; (8000c0c <Calc_CRC16+0xcc>)
 8000ba2:	404a      	eors	r2, r1
 8000ba4:	801a      	strh	r2, [r3, #0]
 8000ba6:	e005      	b.n	8000bb4 <Calc_CRC16+0x74>
      else reg_crc = reg_crc >> 1;
 8000ba8:	2216      	movs	r2, #22
 8000baa:	18bb      	adds	r3, r7, r2
 8000bac:	18ba      	adds	r2, r7, r2
 8000bae:	8812      	ldrh	r2, [r2, #0]
 8000bb0:	0852      	lsrs	r2, r2, #1
 8000bb2:	801a      	strh	r2, [r3, #0]
    for(uint8_t j = 0; j < 8; j++)
 8000bb4:	2113      	movs	r1, #19
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	781a      	ldrb	r2, [r3, #0]
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	3201      	adds	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	2313      	movs	r3, #19
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b07      	cmp	r3, #7
 8000bc8:	d9df      	bls.n	8000b8a <Calc_CRC16+0x4a>
  for(uint16_t i = 0; i < size; i++)
 8000bca:	2114      	movs	r1, #20
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	881a      	ldrh	r2, [r3, #0]
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	3201      	adds	r2, #1
 8000bd4:	801a      	strh	r2, [r3, #0]
 8000bd6:	2314      	movs	r3, #20
 8000bd8:	18fa      	adds	r2, r7, r3
 8000bda:	230a      	movs	r3, #10
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	8812      	ldrh	r2, [r2, #0]
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d3bf      	bcc.n	8000b66 <Calc_CRC16+0x26>
    }
  }

  output[1] = (reg_crc >> 8) &0xFF;
 8000be6:	2116      	movs	r1, #22
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	701a      	strb	r2, [r3, #0]
  output[0] = reg_crc & 0xFF;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	701a      	strb	r2, [r3, #0]
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b006      	add	sp, #24
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	ffffa001 	.word	0xffffa001

08000c10 <modbusTransHandle>:

void modbusTransHandle(void){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
	uint8_t CRCbuff[2];

	tx_data[0] = MODBUSADD;
 8000c16:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <modbusTransHandle+0xb0>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x04;
 8000c1c:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <modbusTransHandle+0xb0>)
 8000c1e:	2204      	movs	r2, #4
 8000c20:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x0A;
 8000c22:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <modbusTransHandle+0xb0>)
 8000c24:	220a      	movs	r2, #10
 8000c26:	709a      	strb	r2, [r3, #2]
	tx_data[3] = SensorType;
 8000c28:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <modbusTransHandle+0xb0>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	70da      	strb	r2, [r3, #3]
	tx_data[4] = isBlink;
 8000c2e:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <modbusTransHandle+0xb4>)
 8000c30:	781a      	ldrb	r2, [r3, #0]
 8000c32:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <modbusTransHandle+0xb0>)
 8000c34:	711a      	strb	r2, [r3, #4]
	tx_data[5] = lampStatus;
 8000c36:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <modbusTransHandle+0xb8>)
 8000c38:	781a      	ldrb	r2, [r3, #0]
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <modbusTransHandle+0xb0>)
 8000c3c:	715a      	strb	r2, [r3, #5]
	tx_data[6] = whichLight;
 8000c3e:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <modbusTransHandle+0xbc>)
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <modbusTransHandle+0xb0>)
 8000c44:	719a      	strb	r2, [r3, #6]
	tx_data[7] = Blink_RedAccumulateTime >> 8;
 8000c46:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <modbusTransHandle+0xc0>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	0a1b      	lsrs	r3, r3, #8
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <modbusTransHandle+0xb0>)
 8000c52:	71da      	strb	r2, [r3, #7]
	tx_data[8] = Blink_RedAccumulateTime;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <modbusTransHandle+0xc0>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <modbusTransHandle+0xb0>)
 8000c5c:	721a      	strb	r2, [r3, #8]
	tx_data[9] = Blink_YellowAccumulateTime >> 8;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <modbusTransHandle+0xc4>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	0a1b      	lsrs	r3, r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <modbusTransHandle+0xb0>)
 8000c6a:	725a      	strb	r2, [r3, #9]
	tx_data[10] = Blink_YellowAccumulateTime;
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <modbusTransHandle+0xc4>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <modbusTransHandle+0xb0>)
 8000c74:	729a      	strb	r2, [r3, #10]
	tx_data[11] = Blink_GreenAccumulateTime >> 8;
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <modbusTransHandle+0xc8>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	0a1b      	lsrs	r3, r3, #8
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <modbusTransHandle+0xb0>)
 8000c82:	72da      	strb	r2, [r3, #11]
	tx_data[12] = Blink_GreenAccumulateTime;
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <modbusTransHandle+0xc8>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <modbusTransHandle+0xb0>)
 8000c8c:	731a      	strb	r2, [r3, #12]

	Calc_CRC16(tx_data, 13, CRCbuff);
 8000c8e:	1d3a      	adds	r2, r7, #4
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <modbusTransHandle+0xb0>)
 8000c92:	210d      	movs	r1, #13
 8000c94:	0018      	movs	r0, r3
 8000c96:	f7ff ff53 	bl	8000b40 <Calc_CRC16>
	tx_data[13] = CRCbuff[0];
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	781a      	ldrb	r2, [r3, #0]
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <modbusTransHandle+0xb0>)
 8000ca0:	735a      	strb	r2, [r3, #13]
	tx_data[14] = CRCbuff[1];
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	785a      	ldrb	r2, [r3, #1]
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <modbusTransHandle+0xb0>)
 8000ca8:	739a      	strb	r2, [r3, #14]

	HAL_UART_Transmit(&huart1,&tx_data,sizeof(tx_data), 100);
 8000caa:	4905      	ldr	r1, [pc, #20]	; (8000cc0 <modbusTransHandle+0xb0>)
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <modbusTransHandle+0xcc>)
 8000cae:	2364      	movs	r3, #100	; 0x64
 8000cb0:	220f      	movs	r2, #15
 8000cb2:	f002 fc11 	bl	80034d8 <HAL_UART_Transmit>
}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b002      	add	sp, #8
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	20000194 	.word	0x20000194
 8000cc4:	2000016c 	.word	0x2000016c
 8000cc8:	20000171 	.word	0x20000171
 8000ccc:	20000172 	.word	0x20000172
 8000cd0:	20000174 	.word	0x20000174
 8000cd4:	20000176 	.word	0x20000176
 8000cd8:	20000178 	.word	0x20000178
 8000cdc:	200000d8 	.word	0x200000d8

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <HAL_MspInit+0x44>)
 8000cf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_MspInit+0x44>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	641a      	str	r2, [r3, #64]	; 0x40
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_MspInit+0x44>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	2201      	movs	r2, #1
 8000d04:	4013      	ands	r3, r2
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <HAL_MspInit+0x44>)
 8000d0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_MspInit+0x44>)
 8000d10:	2180      	movs	r1, #128	; 0x80
 8000d12:	0549      	lsls	r1, r1, #21
 8000d14:	430a      	orrs	r2, r1
 8000d16:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_MspInit+0x44>)
 8000d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	055b      	lsls	r3, r3, #21
 8000d20:	4013      	ands	r3, r2
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b002      	add	sp, #8
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	40021000 	.word	0x40021000

08000d34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b091      	sub	sp, #68	; 0x44
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	232c      	movs	r3, #44	; 0x2c
 8000d3e:	18fb      	adds	r3, r7, r3
 8000d40:	0018      	movs	r0, r3
 8000d42:	2314      	movs	r3, #20
 8000d44:	001a      	movs	r2, r3
 8000d46:	2100      	movs	r1, #0
 8000d48:	f004 faee 	bl	8005328 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d4c:	2410      	movs	r4, #16
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	0018      	movs	r0, r3
 8000d52:	231c      	movs	r3, #28
 8000d54:	001a      	movs	r2, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	f004 fae6 	bl	8005328 <memset>
  if(hadc->Instance==ADC1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a20      	ldr	r2, [pc, #128]	; (8000de4 <HAL_ADC_MspInit+0xb0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d139      	bne.n	8000dda <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d66:	193b      	adds	r3, r7, r4
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	01d2      	lsls	r2, r2, #7
 8000d6c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d74:	193b      	adds	r3, r7, r4
 8000d76:	0018      	movs	r0, r3
 8000d78:	f002 f908 	bl	8002f8c <HAL_RCCEx_PeriphCLKConfig>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d80:	f7ff ffae 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <HAL_ADC_MspInit+0xb4>)
 8000d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <HAL_ADC_MspInit+0xb4>)
 8000d8a:	2180      	movs	r1, #128	; 0x80
 8000d8c:	0349      	lsls	r1, r1, #13
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_ADC_MspInit+0xb4>)
 8000d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	035b      	lsls	r3, r3, #13
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_ADC_MspInit+0xb4>)
 8000da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000da4:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <HAL_ADC_MspInit+0xb4>)
 8000da6:	2101      	movs	r1, #1
 8000da8:	430a      	orrs	r2, r1
 8000daa:	635a      	str	r2, [r3, #52]	; 0x34
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_ADC_MspInit+0xb4>)
 8000dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db0:	2201      	movs	r2, #1
 8000db2:	4013      	ands	r3, r2
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8000db8:	212c      	movs	r1, #44	; 0x2c
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	222c      	movs	r2, #44	; 0x2c
 8000dbe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	187a      	adds	r2, r7, r1
 8000dce:	23a0      	movs	r3, #160	; 0xa0
 8000dd0:	05db      	lsls	r3, r3, #23
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f001 fa51 	bl	800227c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b011      	add	sp, #68	; 0x44
 8000de0:	bd90      	pop	{r4, r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	40012400 	.word	0x40012400
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <HAL_TIM_Base_MspInit+0x38>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10d      	bne.n	8000e1a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_TIM_Base_MspInit+0x3c>)
 8000e00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_TIM_Base_MspInit+0x3c>)
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	0289      	lsls	r1, r1, #10
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_TIM_Base_MspInit+0x3c>)
 8000e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	029b      	lsls	r3, r3, #10
 8000e14:	4013      	ands	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b004      	add	sp, #16
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	40014400 	.word	0x40014400
 8000e28:	40021000 	.word	0x40021000

08000e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b091      	sub	sp, #68	; 0x44
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	232c      	movs	r3, #44	; 0x2c
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	0018      	movs	r0, r3
 8000e3a:	2314      	movs	r3, #20
 8000e3c:	001a      	movs	r2, r3
 8000e3e:	2100      	movs	r1, #0
 8000e40:	f004 fa72 	bl	8005328 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e44:	2410      	movs	r4, #16
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	0018      	movs	r0, r3
 8000e4a:	231c      	movs	r3, #28
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f004 fa6a 	bl	8005328 <memset>
  if(huart->Instance==USART1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a27      	ldr	r2, [pc, #156]	; (8000ef8 <HAL_UART_MspInit+0xcc>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d147      	bne.n	8000eee <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e5e:	193b      	adds	r3, r7, r4
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f002 f88d 	bl	8002f8c <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e76:	f7ff ff33 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <HAL_UART_MspInit+0xd0>)
 8000e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <HAL_UART_MspInit+0xd0>)
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	01c9      	lsls	r1, r1, #7
 8000e84:	430a      	orrs	r2, r1
 8000e86:	641a      	str	r2, [r3, #64]	; 0x40
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <HAL_UART_MspInit+0xd0>)
 8000e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	01db      	lsls	r3, r3, #7
 8000e90:	4013      	ands	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_UART_MspInit+0xd0>)
 8000e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_UART_MspInit+0xd0>)
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <HAL_UART_MspInit+0xd0>)
 8000ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000eae:	212c      	movs	r1, #44	; 0x2c
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	22c0      	movs	r2, #192	; 0xc0
 8000eb4:	00d2      	lsls	r2, r2, #3
 8000eb6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2202      	movs	r2, #2
 8000ebc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2201      	movs	r2, #1
 8000ece:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	187a      	adds	r2, r7, r1
 8000ed2:	23a0      	movs	r3, #160	; 0xa0
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	0011      	movs	r1, r2
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f001 f9cf 	bl	800227c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	201b      	movs	r0, #27
 8000ee4:	f001 f8cc 	bl	8002080 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ee8:	201b      	movs	r0, #27
 8000eea:	f001 f8de 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b011      	add	sp, #68	; 0x44
 8000ef4:	bd90      	pop	{r4, r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	40013800 	.word	0x40013800
 8000efc:	40021000 	.word	0x40021000

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <NMI_Handler+0x4>

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 f8aa 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <USART1_IRQHandler+0x14>)
 8000f36:	0018      	movs	r0, r3
 8000f38:	f002 fbc2 	bl	80036c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	200000d8 	.word	0x200000d8

08000f48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f56:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f58:	f7ff fff6 	bl	8000f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f5c:	480c      	ldr	r0, [pc, #48]	; (8000f90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f5e:	490d      	ldr	r1, [pc, #52]	; (8000f94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <LoopForever+0xe>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f74:	4c0a      	ldr	r4, [pc, #40]	; (8000fa0 <LoopForever+0x16>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f82:	f004 f9ad 	bl	80052e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f86:	f7ff fa31 	bl	80003ec <main>

08000f8a <LoopForever>:

LoopForever:
  b LoopForever
 8000f8a:	e7fe      	b.n	8000f8a <LoopForever>
  ldr   r0, =_estack
 8000f8c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f98:	080053e0 	.word	0x080053e0
  ldr r2, =_sbss
 8000f9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fa0:	200001a8 	.word	0x200001a8

08000fa4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC1_IRQHandler>
	...

08000fa8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_Init+0x3c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_Init+0x3c>)
 8000fba:	2180      	movs	r1, #128	; 0x80
 8000fbc:	0049      	lsls	r1, r1, #1
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	f000 f810 	bl	8000fe8 <HAL_InitTick>
 8000fc8:	1e03      	subs	r3, r0, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000fcc:	1dfb      	adds	r3, r7, #7
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	e001      	b.n	8000fd8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fe8a 	bl	8000cec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fd8:	1dfb      	adds	r3, r7, #7
 8000fda:	781b      	ldrb	r3, [r3, #0]
}
 8000fdc:	0018      	movs	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b002      	add	sp, #8
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40022000 	.word	0x40022000

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <HAL_InitTick+0x88>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d02b      	beq.n	8001058 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001000:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <HAL_InitTick+0x8c>)
 8001002:	681c      	ldr	r4, [r3, #0]
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <HAL_InitTick+0x88>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	0019      	movs	r1, r3
 800100a:	23fa      	movs	r3, #250	; 0xfa
 800100c:	0098      	lsls	r0, r3, #2
 800100e:	f7ff f877 	bl	8000100 <__udivsi3>
 8001012:	0003      	movs	r3, r0
 8001014:	0019      	movs	r1, r3
 8001016:	0020      	movs	r0, r4
 8001018:	f7ff f872 	bl	8000100 <__udivsi3>
 800101c:	0003      	movs	r3, r0
 800101e:	0018      	movs	r0, r3
 8001020:	f001 f853 	bl	80020ca <HAL_SYSTICK_Config>
 8001024:	1e03      	subs	r3, r0, #0
 8001026:	d112      	bne.n	800104e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b03      	cmp	r3, #3
 800102c:	d80a      	bhi.n	8001044 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	2301      	movs	r3, #1
 8001032:	425b      	negs	r3, r3
 8001034:	2200      	movs	r2, #0
 8001036:	0018      	movs	r0, r3
 8001038:	f001 f822 	bl	8002080 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_InitTick+0x90>)
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	e00d      	b.n	8001060 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001044:	230f      	movs	r3, #15
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	e008      	b.n	8001060 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800104e:	230f      	movs	r3, #15
 8001050:	18fb      	adds	r3, r7, r3
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
 8001056:	e003      	b.n	8001060 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001058:	230f      	movs	r3, #15
 800105a:	18fb      	adds	r3, r7, r3
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001060:	230f      	movs	r3, #15
 8001062:	18fb      	adds	r3, r7, r3
 8001064:	781b      	ldrb	r3, [r3, #0]
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b005      	add	sp, #20
 800106c:	bd90      	pop	{r4, r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	20000008 	.word	0x20000008
 8001074:	20000000 	.word	0x20000000
 8001078:	20000004 	.word	0x20000004

0800107c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_IncTick+0x1c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	001a      	movs	r2, r3
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_IncTick+0x20>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	18d2      	adds	r2, r2, r3
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <HAL_IncTick+0x20>)
 800108e:	601a      	str	r2, [r3, #0]
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	20000008 	.word	0x20000008
 800109c:	200001a4 	.word	0x200001a4

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b02      	ldr	r3, [pc, #8]	; (80010b0 <HAL_GetTick+0x10>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	200001a4 	.word	0x200001a4

080010b4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80010c4:	401a      	ands	r2, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	431a      	orrs	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	601a      	str	r2, [r3, #0]
}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b002      	add	sp, #8
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	fe3fffff 	.word	0xfe3fffff

080010dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	23e0      	movs	r3, #224	; 0xe0
 80010ea:	045b      	lsls	r3, r3, #17
 80010ec:	4013      	ands	r3, r2
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	2104      	movs	r1, #4
 800110a:	400a      	ands	r2, r1
 800110c:	2107      	movs	r1, #7
 800110e:	4091      	lsls	r1, r2
 8001110:	000a      	movs	r2, r1
 8001112:	43d2      	mvns	r2, r2
 8001114:	401a      	ands	r2, r3
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	2104      	movs	r1, #4
 800111a:	400b      	ands	r3, r1
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4099      	lsls	r1, r3
 8001120:	000b      	movs	r3, r1
 8001122:	431a      	orrs	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b004      	add	sp, #16
 800112e:	bd80      	pop	{r7, pc}

08001130 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	2104      	movs	r1, #4
 8001142:	400a      	ands	r2, r1
 8001144:	2107      	movs	r1, #7
 8001146:	4091      	lsls	r1, r2
 8001148:	000a      	movs	r2, r1
 800114a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	2104      	movs	r1, #4
 8001150:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001152:	40da      	lsrs	r2, r3
 8001154:	0013      	movs	r3, r2
}
 8001156:	0018      	movs	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	b002      	add	sp, #8
 800115c:	bd80      	pop	{r7, pc}

0800115e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	23c0      	movs	r3, #192	; 0xc0
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	4013      	ands	r3, r2
 8001170:	d101      	bne.n	8001176 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001176:	2300      	movs	r3, #0
}
 8001178:	0018      	movs	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	b002      	add	sp, #8
 800117e:	bd80      	pop	{r7, pc}

08001180 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	211f      	movs	r1, #31
 8001194:	400a      	ands	r2, r1
 8001196:	210f      	movs	r1, #15
 8001198:	4091      	lsls	r1, r2
 800119a:	000a      	movs	r2, r1
 800119c:	43d2      	mvns	r2, r2
 800119e:	401a      	ands	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	0e9b      	lsrs	r3, r3, #26
 80011a4:	210f      	movs	r1, #15
 80011a6:	4019      	ands	r1, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	201f      	movs	r0, #31
 80011ac:	4003      	ands	r3, r0
 80011ae:	4099      	lsls	r1, r3
 80011b0:	000b      	movs	r3, r1
 80011b2:	431a      	orrs	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b004      	add	sp, #16
 80011be:	bd80      	pop	{r7, pc}

080011c0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	035b      	lsls	r3, r3, #13
 80011d2:	0b5b      	lsrs	r3, r3, #13
 80011d4:	431a      	orrs	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b002      	add	sp, #8
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	0352      	lsls	r2, r2, #13
 80011f4:	0b52      	lsrs	r2, r2, #13
 80011f6:	43d2      	mvns	r2, r2
 80011f8:	401a      	ands	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	46bd      	mov	sp, r7
 8001202:	b002      	add	sp, #8
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	0212      	lsls	r2, r2, #8
 800121c:	43d2      	mvns	r2, r2
 800121e:	401a      	ands	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	400b      	ands	r3, r1
 8001228:	4904      	ldr	r1, [pc, #16]	; (800123c <LL_ADC_SetChannelSamplingTime+0x34>)
 800122a:	400b      	ands	r3, r1
 800122c:	431a      	orrs	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b004      	add	sp, #16
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	07ffff00 	.word	0x07ffff00

08001240 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	4a05      	ldr	r2, [pc, #20]	; (8001264 <LL_ADC_EnableInternalRegulator+0x24>)
 800124e:	4013      	ands	r3, r2
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	0552      	lsls	r2, r2, #21
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b002      	add	sp, #8
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	6fffffe8 	.word	0x6fffffe8

08001268 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	055b      	lsls	r3, r3, #21
 8001278:	401a      	ands	r2, r3
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	055b      	lsls	r3, r3, #21
 800127e:	429a      	cmp	r2, r3
 8001280:	d101      	bne.n	8001286 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001286:	2300      	movs	r3, #0
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b002      	add	sp, #8
 800128e:	bd80      	pop	{r7, pc}

08001290 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <LL_ADC_Enable+0x20>)
 800129e:	4013      	ands	r3, r2
 80012a0:	2201      	movs	r2, #1
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b002      	add	sp, #8
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	7fffffe8 	.word	0x7fffffe8

080012b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <LL_ADC_Disable+0x20>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	2202      	movs	r2, #2
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b002      	add	sp, #8
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	7fffffe8 	.word	0x7fffffe8

080012d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2201      	movs	r2, #1
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d101      	bne.n	80012f0 <LL_ADC_IsEnabled+0x18>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <LL_ADC_IsEnabled+0x1a>
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	0018      	movs	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b002      	add	sp, #8
 80012f8:	bd80      	pop	{r7, pc}

080012fa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2202      	movs	r2, #2
 8001308:	4013      	ands	r3, r2
 800130a:	2b02      	cmp	r3, #2
 800130c:	d101      	bne.n	8001312 <LL_ADC_IsDisableOngoing+0x18>
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <LL_ADC_IsDisableOngoing+0x1a>
 8001312:	2300      	movs	r3, #0
}
 8001314:	0018      	movs	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	b002      	add	sp, #8
 800131a:	bd80      	pop	{r7, pc}

0800131c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <LL_ADC_REG_StartConversion+0x20>)
 800132a:	4013      	ands	r3, r2
 800132c:	2204      	movs	r2, #4
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b002      	add	sp, #8
 800133a:	bd80      	pop	{r7, pc}
 800133c:	7fffffe8 	.word	0x7fffffe8

08001340 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <LL_ADC_REG_StopConversion+0x20>)
 800134e:	4013      	ands	r3, r2
 8001350:	2210      	movs	r2, #16
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	b002      	add	sp, #8
 800135e:	bd80      	pop	{r7, pc}
 8001360:	7fffffe8 	.word	0x7fffffe8

08001364 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2204      	movs	r2, #4
 8001372:	4013      	ands	r3, r2
 8001374:	2b04      	cmp	r3, #4
 8001376:	d101      	bne.n	800137c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800137c:	2300      	movs	r3, #0
}
 800137e:	0018      	movs	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	b002      	add	sp, #8
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001390:	231f      	movs	r3, #31
 8001392:	18fb      	adds	r3, r7, r3
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e17f      	b.n	80016ae <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10a      	bne.n	80013cc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff fcbb 	bl	8000d34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2254      	movs	r2, #84	; 0x54
 80013c8:	2100      	movs	r1, #0
 80013ca:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	0018      	movs	r0, r3
 80013d2:	f7ff ff49 	bl	8001268 <LL_ADC_IsInternalRegulatorEnabled>
 80013d6:	1e03      	subs	r3, r0, #0
 80013d8:	d115      	bne.n	8001406 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	0018      	movs	r0, r3
 80013e0:	f7ff ff2e 	bl	8001240 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013e4:	4bb4      	ldr	r3, [pc, #720]	; (80016b8 <HAL_ADC_Init+0x330>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	49b4      	ldr	r1, [pc, #720]	; (80016bc <HAL_ADC_Init+0x334>)
 80013ea:	0018      	movs	r0, r3
 80013ec:	f7fe fe88 	bl	8000100 <__udivsi3>
 80013f0:	0003      	movs	r3, r0
 80013f2:	3301      	adds	r3, #1
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013f8:	e002      	b.n	8001400 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f9      	bne.n	80013fa <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	0018      	movs	r0, r3
 800140c:	f7ff ff2c 	bl	8001268 <LL_ADC_IsInternalRegulatorEnabled>
 8001410:	1e03      	subs	r3, r0, #0
 8001412:	d10f      	bne.n	8001434 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	2210      	movs	r2, #16
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001424:	2201      	movs	r2, #1
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800142c:	231f      	movs	r3, #31
 800142e:	18fb      	adds	r3, r7, r3
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	0018      	movs	r0, r3
 800143a:	f7ff ff93 	bl	8001364 <LL_ADC_REG_IsConversionOngoing>
 800143e:	0003      	movs	r3, r0
 8001440:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001446:	2210      	movs	r2, #16
 8001448:	4013      	ands	r3, r2
 800144a:	d000      	beq.n	800144e <HAL_ADC_Init+0xc6>
 800144c:	e122      	b.n	8001694 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d000      	beq.n	8001456 <HAL_ADC_Init+0xce>
 8001454:	e11e      	b.n	8001694 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145a:	4a99      	ldr	r2, [pc, #612]	; (80016c0 <HAL_ADC_Init+0x338>)
 800145c:	4013      	ands	r3, r2
 800145e:	2202      	movs	r2, #2
 8001460:	431a      	orrs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	0018      	movs	r0, r3
 800146c:	f7ff ff34 	bl	80012d8 <LL_ADC_IsEnabled>
 8001470:	1e03      	subs	r3, r0, #0
 8001472:	d000      	beq.n	8001476 <HAL_ADC_Init+0xee>
 8001474:	e0ad      	b.n	80015d2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7e1b      	ldrb	r3, [r3, #24]
 800147e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001480:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	7e5b      	ldrb	r3, [r3, #25]
 8001486:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001488:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	7e9b      	ldrb	r3, [r3, #26]
 800148e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001490:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <HAL_ADC_Init+0x118>
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	015b      	lsls	r3, r3, #5
 800149e:	e000      	b.n	80014a2 <HAL_ADC_Init+0x11a>
 80014a0:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80014a2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80014a8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	da04      	bge.n	80014bc <HAL_ADC_Init+0x134>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	085b      	lsrs	r3, r3, #1
 80014ba:	e001      	b.n	80014c0 <HAL_ADC_Init+0x138>
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80014c0:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	212c      	movs	r1, #44	; 0x2c
 80014c6:	5c5b      	ldrb	r3, [r3, r1]
 80014c8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80014ca:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2220      	movs	r2, #32
 80014d6:	5c9b      	ldrb	r3, [r3, r2]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d115      	bne.n	8001508 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7e9b      	ldrb	r3, [r3, #26]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d105      	bne.n	80014f0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	0252      	lsls	r2, r2, #9
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	e00b      	b.n	8001508 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f4:	2220      	movs	r2, #32
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001500:	2201      	movs	r2, #1
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00a      	beq.n	8001526 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001514:	23e0      	movs	r3, #224	; 0xe0
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800151e:	4313      	orrs	r3, r2
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4a65      	ldr	r2, [pc, #404]	; (80016c4 <HAL_ADC_Init+0x33c>)
 800152e:	4013      	ands	r3, r2
 8001530:	0019      	movs	r1, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	430a      	orrs	r2, r1
 800153a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	0f9b      	lsrs	r3, r3, #30
 8001542:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001548:	4313      	orrs	r3, r2
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	4313      	orrs	r3, r2
 800154e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	223c      	movs	r2, #60	; 0x3c
 8001554:	5c9b      	ldrb	r3, [r3, r2]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d111      	bne.n	800157e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	0f9b      	lsrs	r3, r3, #30
 8001560:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001566:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800156c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001572:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	4313      	orrs	r3, r2
 8001578:	2201      	movs	r2, #1
 800157a:	4313      	orrs	r3, r2
 800157c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	4a50      	ldr	r2, [pc, #320]	; (80016c8 <HAL_ADC_Init+0x340>)
 8001586:	4013      	ands	r3, r2
 8001588:	0019      	movs	r1, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	430a      	orrs	r2, r1
 8001592:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	23c0      	movs	r3, #192	; 0xc0
 800159a:	061b      	lsls	r3, r3, #24
 800159c:	429a      	cmp	r2, r3
 800159e:	d018      	beq.n	80015d2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	05db      	lsls	r3, r3, #23
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d012      	beq.n	80015d2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	061b      	lsls	r3, r3, #24
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d00c      	beq.n	80015d2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80015b8:	4b44      	ldr	r3, [pc, #272]	; (80016cc <HAL_ADC_Init+0x344>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a44      	ldr	r2, [pc, #272]	; (80016d0 <HAL_ADC_Init+0x348>)
 80015be:	4013      	ands	r3, r2
 80015c0:	0019      	movs	r1, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	23f0      	movs	r3, #240	; 0xf0
 80015c8:	039b      	lsls	r3, r3, #14
 80015ca:	401a      	ands	r2, r3
 80015cc:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <HAL_ADC_Init+0x344>)
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6818      	ldr	r0, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015da:	001a      	movs	r2, r3
 80015dc:	2100      	movs	r1, #0
 80015de:	f7ff fd8a 	bl	80010f6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6818      	ldr	r0, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ea:	493a      	ldr	r1, [pc, #232]	; (80016d4 <HAL_ADC_Init+0x34c>)
 80015ec:	001a      	movs	r2, r3
 80015ee:	f7ff fd82 	bl	80010f6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d109      	bne.n	800160e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2110      	movs	r1, #16
 8001606:	4249      	negs	r1, r1
 8001608:	430a      	orrs	r2, r1
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
 800160c:	e018      	b.n	8001640 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691a      	ldr	r2, [r3, #16]
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	039b      	lsls	r3, r3, #14
 8001616:	429a      	cmp	r2, r3
 8001618:	d112      	bne.n	8001640 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	3b01      	subs	r3, #1
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	221c      	movs	r2, #28
 800162a:	4013      	ands	r3, r2
 800162c:	2210      	movs	r2, #16
 800162e:	4252      	negs	r2, r2
 8001630:	409a      	lsls	r2, r3
 8001632:	0011      	movs	r1, r2
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2100      	movs	r1, #0
 8001646:	0018      	movs	r0, r3
 8001648:	f7ff fd72 	bl	8001130 <LL_ADC_GetSamplingTimeCommonChannels>
 800164c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001652:	429a      	cmp	r2, r3
 8001654:	d10b      	bne.n	800166e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001660:	2203      	movs	r2, #3
 8001662:	4393      	bics	r3, r2
 8001664:	2201      	movs	r2, #1
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800166c:	e01c      	b.n	80016a8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001672:	2212      	movs	r2, #18
 8001674:	4393      	bics	r3, r2
 8001676:	2210      	movs	r2, #16
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001682:	2201      	movs	r2, #1
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800168a:	231f      	movs	r3, #31
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001692:	e009      	b.n	80016a8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	2210      	movs	r2, #16
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016a0:	231f      	movs	r3, #31
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80016a8:	231f      	movs	r3, #31
 80016aa:	18fb      	adds	r3, r7, r3
 80016ac:	781b      	ldrb	r3, [r3, #0]
}
 80016ae:	0018      	movs	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b008      	add	sp, #32
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	20000000 	.word	0x20000000
 80016bc:	00030d40 	.word	0x00030d40
 80016c0:	fffffefd 	.word	0xfffffefd
 80016c4:	fffe0201 	.word	0xfffe0201
 80016c8:	1ffffc02 	.word	0x1ffffc02
 80016cc:	40012708 	.word	0x40012708
 80016d0:	ffc3ffff 	.word	0xffc3ffff
 80016d4:	07ffff04 	.word	0x07ffff04

080016d8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff fe3d 	bl	8001364 <LL_ADC_REG_IsConversionOngoing>
 80016ea:	1e03      	subs	r3, r0, #0
 80016ec:	d135      	bne.n	800175a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2254      	movs	r2, #84	; 0x54
 80016f2:	5c9b      	ldrb	r3, [r3, r2]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_ADC_Start+0x24>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e035      	b.n	8001768 <HAL_ADC_Start+0x90>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2254      	movs	r2, #84	; 0x54
 8001700:	2101      	movs	r1, #1
 8001702:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001704:	250f      	movs	r5, #15
 8001706:	197c      	adds	r4, r7, r5
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	0018      	movs	r0, r3
 800170c:	f000 fb28 	bl	8001d60 <ADC_Enable>
 8001710:	0003      	movs	r3, r0
 8001712:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001714:	197b      	adds	r3, r7, r5
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d119      	bne.n	8001750 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001720:	4a13      	ldr	r2, [pc, #76]	; (8001770 <HAL_ADC_Start+0x98>)
 8001722:	4013      	ands	r3, r2
 8001724:	2280      	movs	r2, #128	; 0x80
 8001726:	0052      	lsls	r2, r2, #1
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	221c      	movs	r2, #28
 800173a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2254      	movs	r2, #84	; 0x54
 8001740:	2100      	movs	r1, #0
 8001742:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	0018      	movs	r0, r3
 800174a:	f7ff fde7 	bl	800131c <LL_ADC_REG_StartConversion>
 800174e:	e008      	b.n	8001762 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2254      	movs	r2, #84	; 0x54
 8001754:	2100      	movs	r1, #0
 8001756:	5499      	strb	r1, [r3, r2]
 8001758:	e003      	b.n	8001762 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800175a:	230f      	movs	r3, #15
 800175c:	18fb      	adds	r3, r7, r3
 800175e:	2202      	movs	r2, #2
 8001760:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001762:	230f      	movs	r3, #15
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	781b      	ldrb	r3, [r3, #0]
}
 8001768:	0018      	movs	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	b004      	add	sp, #16
 800176e:	bdb0      	pop	{r4, r5, r7, pc}
 8001770:	fffff0fe 	.word	0xfffff0fe

08001774 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001774:	b5b0      	push	{r4, r5, r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2254      	movs	r2, #84	; 0x54
 8001780:	5c9b      	ldrb	r3, [r3, r2]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_ADC_Stop+0x16>
 8001786:	2302      	movs	r3, #2
 8001788:	e029      	b.n	80017de <HAL_ADC_Stop+0x6a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2254      	movs	r2, #84	; 0x54
 800178e:	2101      	movs	r1, #1
 8001790:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001792:	250f      	movs	r5, #15
 8001794:	197c      	adds	r4, r7, r5
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	0018      	movs	r0, r3
 800179a:	f000 fa9f 	bl	8001cdc <ADC_ConversionStop>
 800179e:	0003      	movs	r3, r0
 80017a0:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80017a2:	197b      	adds	r3, r7, r5
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d112      	bne.n	80017d0 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80017aa:	197c      	adds	r4, r7, r5
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	0018      	movs	r0, r3
 80017b0:	f000 fb5c 	bl	8001e6c <ADC_Disable>
 80017b4:	0003      	movs	r3, r0
 80017b6:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80017b8:	197b      	adds	r3, r7, r5
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c4:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <HAL_ADC_Stop+0x74>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	2201      	movs	r2, #1
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2254      	movs	r2, #84	; 0x54
 80017d4:	2100      	movs	r1, #0
 80017d6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80017d8:	230f      	movs	r3, #15
 80017da:	18fb      	adds	r3, r7, r3
 80017dc:	781b      	ldrb	r3, [r3, #0]
}
 80017de:	0018      	movs	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b004      	add	sp, #16
 80017e4:	bdb0      	pop	{r4, r5, r7, pc}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	fffffefe 	.word	0xfffffefe

080017ec <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d102      	bne.n	8001804 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80017fe:	2308      	movs	r3, #8
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	e00f      	b.n	8001824 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2201      	movs	r2, #1
 800180c:	4013      	ands	r3, r2
 800180e:	d007      	beq.n	8001820 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	2220      	movs	r2, #32
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e072      	b.n	8001906 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001820:	2304      	movs	r3, #4
 8001822:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001824:	f7ff fc3c 	bl	80010a0 <HAL_GetTick>
 8001828:	0003      	movs	r3, r0
 800182a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800182c:	e01f      	b.n	800186e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	d01c      	beq.n	800186e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001834:	f7ff fc34 	bl	80010a0 <HAL_GetTick>
 8001838:	0002      	movs	r2, r0
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d302      	bcc.n	800184a <HAL_ADC_PollForConversion+0x5e>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d111      	bne.n	800186e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	d10b      	bne.n	800186e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	2204      	movs	r2, #4
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2254      	movs	r2, #84	; 0x54
 8001866:	2100      	movs	r1, #0
 8001868:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e04b      	b.n	8001906 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4013      	ands	r3, r2
 8001878:	d0d9      	beq.n	800182e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	0092      	lsls	r2, r2, #2
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0018      	movs	r0, r3
 800188e:	f7ff fc66 	bl	800115e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001892:	1e03      	subs	r3, r0, #0
 8001894:	d02e      	beq.n	80018f4 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7e9b      	ldrb	r3, [r3, #26]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d12a      	bne.n	80018f4 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2208      	movs	r2, #8
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d123      	bne.n	80018f4 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	0018      	movs	r0, r3
 80018b2:	f7ff fd57 	bl	8001364 <LL_ADC_REG_IsConversionOngoing>
 80018b6:	1e03      	subs	r3, r0, #0
 80018b8:	d110      	bne.n	80018dc <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	210c      	movs	r1, #12
 80018c6:	438a      	bics	r2, r1
 80018c8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <HAL_ADC_PollForConversion+0x124>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	2201      	movs	r2, #1
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	659a      	str	r2, [r3, #88]	; 0x58
 80018da:	e00b      	b.n	80018f4 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e0:	2220      	movs	r2, #32
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ec:	2201      	movs	r2, #1
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7e1b      	ldrb	r3, [r3, #24]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d103      	bne.n	8001904 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	220c      	movs	r2, #12
 8001902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b004      	add	sp, #16
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	fffffefe 	.word	0xfffffefe

08001914 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001922:	0018      	movs	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	b002      	add	sp, #8
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001936:	2317      	movs	r3, #23
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2254      	movs	r2, #84	; 0x54
 8001946:	5c9b      	ldrb	r3, [r3, r2]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x24>
 800194c:	2302      	movs	r3, #2
 800194e:	e1c0      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x3a6>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2254      	movs	r2, #84	; 0x54
 8001954:	2101      	movs	r1, #1
 8001956:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	0018      	movs	r0, r3
 800195e:	f7ff fd01 	bl	8001364 <LL_ADC_REG_IsConversionOngoing>
 8001962:	1e03      	subs	r3, r0, #0
 8001964:	d000      	beq.n	8001968 <HAL_ADC_ConfigChannel+0x3c>
 8001966:	e1a3      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d100      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x46>
 8001970:	e143      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	061b      	lsls	r3, r3, #24
 800197a:	429a      	cmp	r2, r3
 800197c:	d004      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001982:	4ac1      	ldr	r2, [pc, #772]	; (8001c88 <HAL_ADC_ConfigChannel+0x35c>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d108      	bne.n	800199a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0019      	movs	r1, r3
 8001992:	0010      	movs	r0, r2
 8001994:	f7ff fc14 	bl	80011c0 <LL_ADC_REG_SetSequencerChAdd>
 8001998:	e0c9      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	211f      	movs	r1, #31
 80019a4:	400b      	ands	r3, r1
 80019a6:	210f      	movs	r1, #15
 80019a8:	4099      	lsls	r1, r3
 80019aa:	000b      	movs	r3, r1
 80019ac:	43db      	mvns	r3, r3
 80019ae:	4013      	ands	r3, r2
 80019b0:	0019      	movs	r1, r3
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	035b      	lsls	r3, r3, #13
 80019b8:	0b5b      	lsrs	r3, r3, #13
 80019ba:	d105      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x9c>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	0e9b      	lsrs	r3, r3, #26
 80019c2:	221f      	movs	r2, #31
 80019c4:	4013      	ands	r3, r2
 80019c6:	e098      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	d000      	beq.n	80019d4 <HAL_ADC_ConfigChannel+0xa8>
 80019d2:	e091      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x1cc>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2202      	movs	r2, #2
 80019da:	4013      	ands	r3, r2
 80019dc:	d000      	beq.n	80019e0 <HAL_ADC_ConfigChannel+0xb4>
 80019de:	e089      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x1c8>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2204      	movs	r2, #4
 80019e6:	4013      	ands	r3, r2
 80019e8:	d000      	beq.n	80019ec <HAL_ADC_ConfigChannel+0xc0>
 80019ea:	e081      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x1c4>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2208      	movs	r2, #8
 80019f2:	4013      	ands	r3, r2
 80019f4:	d000      	beq.n	80019f8 <HAL_ADC_ConfigChannel+0xcc>
 80019f6:	e079      	b.n	8001aec <HAL_ADC_ConfigChannel+0x1c0>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2210      	movs	r2, #16
 80019fe:	4013      	ands	r3, r2
 8001a00:	d000      	beq.n	8001a04 <HAL_ADC_ConfigChannel+0xd8>
 8001a02:	e071      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x1bc>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d000      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0xe4>
 8001a0e:	e069      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x1b8>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2240      	movs	r2, #64	; 0x40
 8001a16:	4013      	ands	r3, r2
 8001a18:	d000      	beq.n	8001a1c <HAL_ADC_ConfigChannel+0xf0>
 8001a1a:	e061      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x1b4>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2280      	movs	r2, #128	; 0x80
 8001a22:	4013      	ands	r3, r2
 8001a24:	d000      	beq.n	8001a28 <HAL_ADC_ConfigChannel+0xfc>
 8001a26:	e059      	b.n	8001adc <HAL_ADC_ConfigChannel+0x1b0>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4013      	ands	r3, r2
 8001a32:	d151      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x1ac>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d149      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1a8>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d141      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x1a4>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	4013      	ands	r3, r2
 8001a56:	d139      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x1a0>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	015b      	lsls	r3, r3, #5
 8001a60:	4013      	ands	r3, r2
 8001a62:	d131      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x19c>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	019b      	lsls	r3, r3, #6
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d129      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x198>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	01db      	lsls	r3, r3, #7
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d121      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x194>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	021b      	lsls	r3, r3, #8
 8001a84:	4013      	ands	r3, r2
 8001a86:	d119      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x190>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	025b      	lsls	r3, r3, #9
 8001a90:	4013      	ands	r3, r2
 8001a92:	d111      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x18c>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	029b      	lsls	r3, r3, #10
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d109      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x188>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	02db      	lsls	r3, r3, #11
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d001      	beq.n	8001ab0 <HAL_ADC_ConfigChannel+0x184>
 8001aac:	2312      	movs	r3, #18
 8001aae:	e024      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	e022      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001ab4:	2311      	movs	r3, #17
 8001ab6:	e020      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001ab8:	2310      	movs	r3, #16
 8001aba:	e01e      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001abc:	230f      	movs	r3, #15
 8001abe:	e01c      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001ac0:	230e      	movs	r3, #14
 8001ac2:	e01a      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001ac4:	230d      	movs	r3, #13
 8001ac6:	e018      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001ac8:	230c      	movs	r3, #12
 8001aca:	e016      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001acc:	230b      	movs	r3, #11
 8001ace:	e014      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	e012      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001ad4:	2309      	movs	r3, #9
 8001ad6:	e010      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001ad8:	2308      	movs	r3, #8
 8001ada:	e00e      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001adc:	2307      	movs	r3, #7
 8001ade:	e00c      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001ae0:	2306      	movs	r3, #6
 8001ae2:	e00a      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001ae4:	2305      	movs	r3, #5
 8001ae6:	e008      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001ae8:	2304      	movs	r3, #4
 8001aea:	e006      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001aec:	2303      	movs	r3, #3
 8001aee:	e004      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e002      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1ce>
 8001af8:	2300      	movs	r3, #0
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	6852      	ldr	r2, [r2, #4]
 8001afe:	201f      	movs	r0, #31
 8001b00:	4002      	ands	r2, r0
 8001b02:	4093      	lsls	r3, r2
 8001b04:	000a      	movs	r2, r1
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d808      	bhi.n	8001b2e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6818      	ldr	r0, [r3, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	001a      	movs	r2, r3
 8001b2a:	f7ff fb29 	bl	8001180 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	6819      	ldr	r1, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	f7ff fb64 	bl	8001208 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	db00      	blt.n	8001b4a <HAL_ADC_ConfigChannel+0x21e>
 8001b48:	e0bc      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b4a:	4b50      	ldr	r3, [pc, #320]	; (8001c8c <HAL_ADC_ConfigChannel+0x360>)
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7ff fac5 	bl	80010dc <LL_ADC_GetCommonPathInternalCh>
 8001b52:	0003      	movs	r3, r0
 8001b54:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a4d      	ldr	r2, [pc, #308]	; (8001c90 <HAL_ADC_ConfigChannel+0x364>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d122      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	041b      	lsls	r3, r3, #16
 8001b66:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b68:	d11d      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	2280      	movs	r2, #128	; 0x80
 8001b6e:	0412      	lsls	r2, r2, #16
 8001b70:	4313      	orrs	r3, r2
 8001b72:	4a46      	ldr	r2, [pc, #280]	; (8001c8c <HAL_ADC_ConfigChannel+0x360>)
 8001b74:	0019      	movs	r1, r3
 8001b76:	0010      	movs	r0, r2
 8001b78:	f7ff fa9c 	bl	80010b4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b7c:	4b45      	ldr	r3, [pc, #276]	; (8001c94 <HAL_ADC_ConfigChannel+0x368>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4945      	ldr	r1, [pc, #276]	; (8001c98 <HAL_ADC_ConfigChannel+0x36c>)
 8001b82:	0018      	movs	r0, r3
 8001b84:	f7fe fabc 	bl	8000100 <__udivsi3>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	0013      	movs	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	189b      	adds	r3, r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b96:	e002      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f9      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ba4:	e08e      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a3c      	ldr	r2, [pc, #240]	; (8001c9c <HAL_ADC_ConfigChannel+0x370>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d10e      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	045b      	lsls	r3, r3, #17
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d109      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	2280      	movs	r2, #128	; 0x80
 8001bbe:	0452      	lsls	r2, r2, #17
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	4a32      	ldr	r2, [pc, #200]	; (8001c8c <HAL_ADC_ConfigChannel+0x360>)
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	0010      	movs	r0, r2
 8001bc8:	f7ff fa74 	bl	80010b4 <LL_ADC_SetCommonPathInternalCh>
 8001bcc:	e07a      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a33      	ldr	r2, [pc, #204]	; (8001ca0 <HAL_ADC_ConfigChannel+0x374>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d000      	beq.n	8001bda <HAL_ADC_ConfigChannel+0x2ae>
 8001bd8:	e074      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	03db      	lsls	r3, r3, #15
 8001be0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001be2:	d000      	beq.n	8001be6 <HAL_ADC_ConfigChannel+0x2ba>
 8001be4:	e06e      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2280      	movs	r2, #128	; 0x80
 8001bea:	03d2      	lsls	r2, r2, #15
 8001bec:	4313      	orrs	r3, r2
 8001bee:	4a27      	ldr	r2, [pc, #156]	; (8001c8c <HAL_ADC_ConfigChannel+0x360>)
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	0010      	movs	r0, r2
 8001bf4:	f7ff fa5e 	bl	80010b4 <LL_ADC_SetCommonPathInternalCh>
 8001bf8:	e064      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	061b      	lsls	r3, r3, #24
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d004      	beq.n	8001c10 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c0a:	4a1f      	ldr	r2, [pc, #124]	; (8001c88 <HAL_ADC_ConfigChannel+0x35c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d107      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	0019      	movs	r1, r3
 8001c1a:	0010      	movs	r0, r2
 8001c1c:	f7ff fae1 	bl	80011e2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	da4d      	bge.n	8001cc4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_ADC_ConfigChannel+0x360>)
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f7ff fa56 	bl	80010dc <LL_ADC_GetCommonPathInternalCh>
 8001c30:	0003      	movs	r3, r0
 8001c32:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a15      	ldr	r2, [pc, #84]	; (8001c90 <HAL_ADC_ConfigChannel+0x364>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d108      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4a18      	ldr	r2, [pc, #96]	; (8001ca4 <HAL_ADC_ConfigChannel+0x378>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	4a11      	ldr	r2, [pc, #68]	; (8001c8c <HAL_ADC_ConfigChannel+0x360>)
 8001c46:	0019      	movs	r1, r3
 8001c48:	0010      	movs	r0, r2
 8001c4a:	f7ff fa33 	bl	80010b4 <LL_ADC_SetCommonPathInternalCh>
 8001c4e:	e039      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a11      	ldr	r2, [pc, #68]	; (8001c9c <HAL_ADC_ConfigChannel+0x370>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d108      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <HAL_ADC_ConfigChannel+0x37c>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_ADC_ConfigChannel+0x360>)
 8001c62:	0019      	movs	r1, r3
 8001c64:	0010      	movs	r0, r2
 8001c66:	f7ff fa25 	bl	80010b4 <LL_ADC_SetCommonPathInternalCh>
 8001c6a:	e02b      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <HAL_ADC_ConfigChannel+0x374>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d126      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <HAL_ADC_ConfigChannel+0x380>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	4a03      	ldr	r2, [pc, #12]	; (8001c8c <HAL_ADC_ConfigChannel+0x360>)
 8001c7e:	0019      	movs	r1, r3
 8001c80:	0010      	movs	r0, r2
 8001c82:	f7ff fa17 	bl	80010b4 <LL_ADC_SetCommonPathInternalCh>
 8001c86:	e01d      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x398>
 8001c88:	80000004 	.word	0x80000004
 8001c8c:	40012708 	.word	0x40012708
 8001c90:	b0001000 	.word	0xb0001000
 8001c94:	20000000 	.word	0x20000000
 8001c98:	00030d40 	.word	0x00030d40
 8001c9c:	b8004000 	.word	0xb8004000
 8001ca0:	b4002000 	.word	0xb4002000
 8001ca4:	ff7fffff 	.word	0xff7fffff
 8001ca8:	feffffff 	.word	0xfeffffff
 8001cac:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cbc:	2317      	movs	r3, #23
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2254      	movs	r2, #84	; 0x54
 8001cc8:	2100      	movs	r1, #0
 8001cca:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001ccc:	2317      	movs	r3, #23
 8001cce:	18fb      	adds	r3, r7, r3
 8001cd0:	781b      	ldrb	r3, [r3, #0]
}
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b006      	add	sp, #24
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)

08001cdc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff fb3b 	bl	8001364 <LL_ADC_REG_IsConversionOngoing>
 8001cee:	1e03      	subs	r3, r0, #0
 8001cf0:	d031      	beq.n	8001d56 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f7ff faff 	bl	80012fa <LL_ADC_IsDisableOngoing>
 8001cfc:	1e03      	subs	r3, r0, #0
 8001cfe:	d104      	bne.n	8001d0a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0018      	movs	r0, r3
 8001d06:	f7ff fb1b 	bl	8001340 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d0a:	f7ff f9c9 	bl	80010a0 <HAL_GetTick>
 8001d0e:	0003      	movs	r3, r0
 8001d10:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001d12:	e01a      	b.n	8001d4a <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001d14:	f7ff f9c4 	bl	80010a0 <HAL_GetTick>
 8001d18:	0002      	movs	r2, r0
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d913      	bls.n	8001d4a <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2204      	movs	r2, #4
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	2210      	movs	r2, #16
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	2201      	movs	r2, #1
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e006      	b.n	8001d58 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2204      	movs	r2, #4
 8001d52:	4013      	ands	r3, r2
 8001d54:	d1de      	bne.n	8001d14 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b004      	add	sp, #16
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	0018      	movs	r0, r3
 8001d72:	f7ff fab1 	bl	80012d8 <LL_ADC_IsEnabled>
 8001d76:	1e03      	subs	r3, r0, #0
 8001d78:	d000      	beq.n	8001d7c <ADC_Enable+0x1c>
 8001d7a:	e069      	b.n	8001e50 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	4a36      	ldr	r2, [pc, #216]	; (8001e5c <ADC_Enable+0xfc>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	d00d      	beq.n	8001da4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	2210      	movs	r2, #16
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d98:	2201      	movs	r2, #1
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e056      	b.n	8001e52 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0018      	movs	r0, r3
 8001daa:	f7ff fa71 	bl	8001290 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001dae:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <ADC_Enable+0x100>)
 8001db0:	0018      	movs	r0, r3
 8001db2:	f7ff f993 	bl	80010dc <LL_ADC_GetCommonPathInternalCh>
 8001db6:	0002      	movs	r2, r0
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	041b      	lsls	r3, r3, #16
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d00f      	beq.n	8001de0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dc0:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <ADC_Enable+0x104>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4928      	ldr	r1, [pc, #160]	; (8001e68 <ADC_Enable+0x108>)
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7fe f99a 	bl	8000100 <__udivsi3>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001dd0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001dd2:	e002      	b.n	8001dda <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f9      	bne.n	8001dd4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7e5b      	ldrb	r3, [r3, #25]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d033      	beq.n	8001e50 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001de8:	f7ff f95a 	bl	80010a0 <HAL_GetTick>
 8001dec:	0003      	movs	r3, r0
 8001dee:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001df0:	e027      	b.n	8001e42 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f7ff fa6e 	bl	80012d8 <LL_ADC_IsEnabled>
 8001dfc:	1e03      	subs	r3, r0, #0
 8001dfe:	d104      	bne.n	8001e0a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	0018      	movs	r0, r3
 8001e06:	f7ff fa43 	bl	8001290 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e0a:	f7ff f949 	bl	80010a0 <HAL_GetTick>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d914      	bls.n	8001e42 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d00d      	beq.n	8001e42 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	2210      	movs	r2, #16
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e36:	2201      	movs	r2, #1
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e007      	b.n	8001e52 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d1d0      	bne.n	8001df2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	0018      	movs	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b004      	add	sp, #16
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	80000017 	.word	0x80000017
 8001e60:	40012708 	.word	0x40012708
 8001e64:	20000000 	.word	0x20000000
 8001e68:	00030d40 	.word	0x00030d40

08001e6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f7ff fa3e 	bl	80012fa <LL_ADC_IsDisableOngoing>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7ff fa26 	bl	80012d8 <LL_ADC_IsEnabled>
 8001e8c:	1e03      	subs	r3, r0, #0
 8001e8e:	d046      	beq.n	8001f1e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d143      	bne.n	8001f1e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2205      	movs	r2, #5
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d10d      	bne.n	8001ec0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f7ff fa03 	bl	80012b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eb6:	f7ff f8f3 	bl	80010a0 <HAL_GetTick>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ebe:	e028      	b.n	8001f12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e021      	b.n	8001f20 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001edc:	f7ff f8e0 	bl	80010a0 <HAL_GetTick>
 8001ee0:	0002      	movs	r2, r0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d913      	bls.n	8001f12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d00d      	beq.n	8001f12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	2210      	movs	r2, #16
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f06:	2201      	movs	r2, #1
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e006      	b.n	8001f20 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d1de      	bne.n	8001edc <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b004      	add	sp, #16
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	0002      	movs	r2, r0
 8001f30:	1dfb      	adds	r3, r7, #7
 8001f32:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f34:	1dfb      	adds	r3, r7, #7
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b7f      	cmp	r3, #127	; 0x7f
 8001f3a:	d809      	bhi.n	8001f50 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3c:	1dfb      	adds	r3, r7, #7
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	001a      	movs	r2, r3
 8001f42:	231f      	movs	r3, #31
 8001f44:	401a      	ands	r2, r3
 8001f46:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_EnableIRQ+0x30>)
 8001f48:	2101      	movs	r1, #1
 8001f4a:	4091      	lsls	r1, r2
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001f50:	46c0      	nop			; (mov r8, r8)
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b002      	add	sp, #8
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	0002      	movs	r2, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	1dfb      	adds	r3, r7, #7
 8001f68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f6a:	1dfb      	adds	r3, r7, #7
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8001f70:	d828      	bhi.n	8001fc4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f72:	4a2f      	ldr	r2, [pc, #188]	; (8002030 <__NVIC_SetPriority+0xd4>)
 8001f74:	1dfb      	adds	r3, r7, #7
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	b25b      	sxtb	r3, r3
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	33c0      	adds	r3, #192	; 0xc0
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	589b      	ldr	r3, [r3, r2]
 8001f82:	1dfa      	adds	r2, r7, #7
 8001f84:	7812      	ldrb	r2, [r2, #0]
 8001f86:	0011      	movs	r1, r2
 8001f88:	2203      	movs	r2, #3
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	00d2      	lsls	r2, r2, #3
 8001f8e:	21ff      	movs	r1, #255	; 0xff
 8001f90:	4091      	lsls	r1, r2
 8001f92:	000a      	movs	r2, r1
 8001f94:	43d2      	mvns	r2, r2
 8001f96:	401a      	ands	r2, r3
 8001f98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	019b      	lsls	r3, r3, #6
 8001f9e:	22ff      	movs	r2, #255	; 0xff
 8001fa0:	401a      	ands	r2, r3
 8001fa2:	1dfb      	adds	r3, r7, #7
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	2303      	movs	r3, #3
 8001faa:	4003      	ands	r3, r0
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fb0:	481f      	ldr	r0, [pc, #124]	; (8002030 <__NVIC_SetPriority+0xd4>)
 8001fb2:	1dfb      	adds	r3, r7, #7
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b25b      	sxtb	r3, r3
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	33c0      	adds	r3, #192	; 0xc0
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fc2:	e031      	b.n	8002028 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fc4:	4a1b      	ldr	r2, [pc, #108]	; (8002034 <__NVIC_SetPriority+0xd8>)
 8001fc6:	1dfb      	adds	r3, r7, #7
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	0019      	movs	r1, r3
 8001fcc:	230f      	movs	r3, #15
 8001fce:	400b      	ands	r3, r1
 8001fd0:	3b08      	subs	r3, #8
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3306      	adds	r3, #6
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	18d3      	adds	r3, r2, r3
 8001fda:	3304      	adds	r3, #4
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	1dfa      	adds	r2, r7, #7
 8001fe0:	7812      	ldrb	r2, [r2, #0]
 8001fe2:	0011      	movs	r1, r2
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	00d2      	lsls	r2, r2, #3
 8001fea:	21ff      	movs	r1, #255	; 0xff
 8001fec:	4091      	lsls	r1, r2
 8001fee:	000a      	movs	r2, r1
 8001ff0:	43d2      	mvns	r2, r2
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	019b      	lsls	r3, r3, #6
 8001ffa:	22ff      	movs	r2, #255	; 0xff
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	1dfb      	adds	r3, r7, #7
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	0018      	movs	r0, r3
 8002004:	2303      	movs	r3, #3
 8002006:	4003      	ands	r3, r0
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800200c:	4809      	ldr	r0, [pc, #36]	; (8002034 <__NVIC_SetPriority+0xd8>)
 800200e:	1dfb      	adds	r3, r7, #7
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	001c      	movs	r4, r3
 8002014:	230f      	movs	r3, #15
 8002016:	4023      	ands	r3, r4
 8002018:	3b08      	subs	r3, #8
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	430a      	orrs	r2, r1
 800201e:	3306      	adds	r3, #6
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	18c3      	adds	r3, r0, r3
 8002024:	3304      	adds	r3, #4
 8002026:	601a      	str	r2, [r3, #0]
}
 8002028:	46c0      	nop			; (mov r8, r8)
 800202a:	46bd      	mov	sp, r7
 800202c:	b003      	add	sp, #12
 800202e:	bd90      	pop	{r4, r7, pc}
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	1e5a      	subs	r2, r3, #1
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	045b      	lsls	r3, r3, #17
 8002048:	429a      	cmp	r2, r3
 800204a:	d301      	bcc.n	8002050 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800204c:	2301      	movs	r3, #1
 800204e:	e010      	b.n	8002072 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <SysTick_Config+0x44>)
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	3a01      	subs	r2, #1
 8002056:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002058:	2301      	movs	r3, #1
 800205a:	425b      	negs	r3, r3
 800205c:	2103      	movs	r1, #3
 800205e:	0018      	movs	r0, r3
 8002060:	f7ff ff7c 	bl	8001f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <SysTick_Config+0x44>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206a:	4b04      	ldr	r3, [pc, #16]	; (800207c <SysTick_Config+0x44>)
 800206c:	2207      	movs	r2, #7
 800206e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002070:	2300      	movs	r3, #0
}
 8002072:	0018      	movs	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	b002      	add	sp, #8
 8002078:	bd80      	pop	{r7, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	e000e010 	.word	0xe000e010

08002080 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	210f      	movs	r1, #15
 800208c:	187b      	adds	r3, r7, r1
 800208e:	1c02      	adds	r2, r0, #0
 8002090:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	187b      	adds	r3, r7, r1
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	b25b      	sxtb	r3, r3
 800209a:	0011      	movs	r1, r2
 800209c:	0018      	movs	r0, r3
 800209e:	f7ff ff5d 	bl	8001f5c <__NVIC_SetPriority>
}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b004      	add	sp, #16
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	0002      	movs	r2, r0
 80020b2:	1dfb      	adds	r3, r7, #7
 80020b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b6:	1dfb      	adds	r3, r7, #7
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	b25b      	sxtb	r3, r3
 80020bc:	0018      	movs	r0, r3
 80020be:	f7ff ff33 	bl	8001f28 <__NVIC_EnableIRQ>
}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b002      	add	sp, #8
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	0018      	movs	r0, r3
 80020d6:	f7ff ffaf 	bl	8002038 <SysTick_Config>
 80020da:	0003      	movs	r3, r0
}
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	b002      	add	sp, #8
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e050      	b.n	8002198 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2225      	movs	r2, #37	; 0x25
 80020fa:	5c9b      	ldrb	r3, [r3, r2]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d008      	beq.n	8002114 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2204      	movs	r2, #4
 8002106:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2224      	movs	r2, #36	; 0x24
 800210c:	2100      	movs	r1, #0
 800210e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e041      	b.n	8002198 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	210e      	movs	r1, #14
 8002120:	438a      	bics	r2, r1
 8002122:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	491c      	ldr	r1, [pc, #112]	; (80021a0 <HAL_DMA_Abort+0xbc>)
 8002130:	400a      	ands	r2, r1
 8002132:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2101      	movs	r1, #1
 8002140:	438a      	bics	r2, r1
 8002142:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002144:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <HAL_DMA_Abort+0xc0>)
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	221c      	movs	r2, #28
 800214e:	4013      	ands	r3, r2
 8002150:	2201      	movs	r2, #1
 8002152:	409a      	lsls	r2, r3
 8002154:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <HAL_DMA_Abort+0xc0>)
 8002156:	430a      	orrs	r2, r1
 8002158:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002162:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00c      	beq.n	8002186 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002176:	490a      	ldr	r1, [pc, #40]	; (80021a0 <HAL_DMA_Abort+0xbc>)
 8002178:	400a      	ands	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002184:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2225      	movs	r2, #37	; 0x25
 800218a:	2101      	movs	r1, #1
 800218c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2224      	movs	r2, #36	; 0x24
 8002192:	2100      	movs	r1, #0
 8002194:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	0018      	movs	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	b002      	add	sp, #8
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	fffffeff 	.word	0xfffffeff
 80021a4:	40020000 	.word	0x40020000

080021a8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b0:	210f      	movs	r1, #15
 80021b2:	187b      	adds	r3, r7, r1
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2225      	movs	r2, #37	; 0x25
 80021bc:	5c9b      	ldrb	r3, [r3, r2]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d006      	beq.n	80021d2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2204      	movs	r2, #4
 80021c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021ca:	187b      	adds	r3, r7, r1
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e049      	b.n	8002266 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	210e      	movs	r1, #14
 80021de:	438a      	bics	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2101      	movs	r1, #1
 80021ee:	438a      	bics	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fc:	491d      	ldr	r1, [pc, #116]	; (8002274 <HAL_DMA_Abort_IT+0xcc>)
 80021fe:	400a      	ands	r2, r1
 8002200:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002202:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <HAL_DMA_Abort_IT+0xd0>)
 8002204:	6859      	ldr	r1, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	221c      	movs	r2, #28
 800220c:	4013      	ands	r3, r2
 800220e:	2201      	movs	r2, #1
 8002210:	409a      	lsls	r2, r3
 8002212:	4b19      	ldr	r3, [pc, #100]	; (8002278 <HAL_DMA_Abort_IT+0xd0>)
 8002214:	430a      	orrs	r2, r1
 8002216:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002220:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00c      	beq.n	8002244 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002234:	490f      	ldr	r1, [pc, #60]	; (8002274 <HAL_DMA_Abort_IT+0xcc>)
 8002236:	400a      	ands	r2, r1
 8002238:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002242:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2225      	movs	r2, #37	; 0x25
 8002248:	2101      	movs	r1, #1
 800224a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2224      	movs	r2, #36	; 0x24
 8002250:	2100      	movs	r1, #0
 8002252:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002258:	2b00      	cmp	r3, #0
 800225a:	d004      	beq.n	8002266 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	0010      	movs	r0, r2
 8002264:	4798      	blx	r3
    }
  }
  return status;
 8002266:	230f      	movs	r3, #15
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	781b      	ldrb	r3, [r3, #0]
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b004      	add	sp, #16
 8002272:	bd80      	pop	{r7, pc}
 8002274:	fffffeff 	.word	0xfffffeff
 8002278:	40020000 	.word	0x40020000

0800227c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228a:	e147      	b.n	800251c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2101      	movs	r1, #1
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	4091      	lsls	r1, r2
 8002296:	000a      	movs	r2, r1
 8002298:	4013      	ands	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d100      	bne.n	80022a4 <HAL_GPIO_Init+0x28>
 80022a2:	e138      	b.n	8002516 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2203      	movs	r2, #3
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d005      	beq.n	80022bc <HAL_GPIO_Init+0x40>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2203      	movs	r2, #3
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d130      	bne.n	800231e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	2203      	movs	r2, #3
 80022c8:	409a      	lsls	r2, r3
 80022ca:	0013      	movs	r3, r2
 80022cc:	43da      	mvns	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	409a      	lsls	r2, r3
 80022de:	0013      	movs	r3, r2
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022f2:	2201      	movs	r2, #1
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	409a      	lsls	r2, r3
 80022f8:	0013      	movs	r3, r2
 80022fa:	43da      	mvns	r2, r3
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	2201      	movs	r2, #1
 800230a:	401a      	ands	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	409a      	lsls	r2, r3
 8002310:	0013      	movs	r3, r2
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2203      	movs	r2, #3
 8002324:	4013      	ands	r3, r2
 8002326:	2b03      	cmp	r3, #3
 8002328:	d017      	beq.n	800235a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	2203      	movs	r2, #3
 8002336:	409a      	lsls	r2, r3
 8002338:	0013      	movs	r3, r2
 800233a:	43da      	mvns	r2, r3
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	409a      	lsls	r2, r3
 800234c:	0013      	movs	r3, r2
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2203      	movs	r2, #3
 8002360:	4013      	ands	r3, r2
 8002362:	2b02      	cmp	r3, #2
 8002364:	d123      	bne.n	80023ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	08da      	lsrs	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3208      	adds	r2, #8
 800236e:	0092      	lsls	r2, r2, #2
 8002370:	58d3      	ldr	r3, [r2, r3]
 8002372:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2207      	movs	r2, #7
 8002378:	4013      	ands	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	220f      	movs	r2, #15
 800237e:	409a      	lsls	r2, r3
 8002380:	0013      	movs	r3, r2
 8002382:	43da      	mvns	r2, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2107      	movs	r1, #7
 8002392:	400b      	ands	r3, r1
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	409a      	lsls	r2, r3
 8002398:	0013      	movs	r3, r2
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	08da      	lsrs	r2, r3, #3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3208      	adds	r2, #8
 80023a8:	0092      	lsls	r2, r2, #2
 80023aa:	6939      	ldr	r1, [r7, #16]
 80023ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	2203      	movs	r2, #3
 80023ba:	409a      	lsls	r2, r3
 80023bc:	0013      	movs	r3, r2
 80023be:	43da      	mvns	r2, r3
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2203      	movs	r2, #3
 80023cc:	401a      	ands	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	409a      	lsls	r2, r3
 80023d4:	0013      	movs	r3, r2
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	23c0      	movs	r3, #192	; 0xc0
 80023e8:	029b      	lsls	r3, r3, #10
 80023ea:	4013      	ands	r3, r2
 80023ec:	d100      	bne.n	80023f0 <HAL_GPIO_Init+0x174>
 80023ee:	e092      	b.n	8002516 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80023f0:	4a50      	ldr	r2, [pc, #320]	; (8002534 <HAL_GPIO_Init+0x2b8>)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	089b      	lsrs	r3, r3, #2
 80023f6:	3318      	adds	r3, #24
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	589b      	ldr	r3, [r3, r2]
 80023fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2203      	movs	r2, #3
 8002402:	4013      	ands	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	220f      	movs	r2, #15
 8002408:	409a      	lsls	r2, r3
 800240a:	0013      	movs	r3, r2
 800240c:	43da      	mvns	r2, r3
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	23a0      	movs	r3, #160	; 0xa0
 8002418:	05db      	lsls	r3, r3, #23
 800241a:	429a      	cmp	r2, r3
 800241c:	d013      	beq.n	8002446 <HAL_GPIO_Init+0x1ca>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a45      	ldr	r2, [pc, #276]	; (8002538 <HAL_GPIO_Init+0x2bc>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00d      	beq.n	8002442 <HAL_GPIO_Init+0x1c6>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a44      	ldr	r2, [pc, #272]	; (800253c <HAL_GPIO_Init+0x2c0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d007      	beq.n	800243e <HAL_GPIO_Init+0x1c2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a43      	ldr	r2, [pc, #268]	; (8002540 <HAL_GPIO_Init+0x2c4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d101      	bne.n	800243a <HAL_GPIO_Init+0x1be>
 8002436:	2303      	movs	r3, #3
 8002438:	e006      	b.n	8002448 <HAL_GPIO_Init+0x1cc>
 800243a:	2305      	movs	r3, #5
 800243c:	e004      	b.n	8002448 <HAL_GPIO_Init+0x1cc>
 800243e:	2302      	movs	r3, #2
 8002440:	e002      	b.n	8002448 <HAL_GPIO_Init+0x1cc>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_GPIO_Init+0x1cc>
 8002446:	2300      	movs	r3, #0
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	2103      	movs	r1, #3
 800244c:	400a      	ands	r2, r1
 800244e:	00d2      	lsls	r2, r2, #3
 8002450:	4093      	lsls	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002458:	4936      	ldr	r1, [pc, #216]	; (8002534 <HAL_GPIO_Init+0x2b8>)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3318      	adds	r3, #24
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002466:	4b33      	ldr	r3, [pc, #204]	; (8002534 <HAL_GPIO_Init+0x2b8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	43da      	mvns	r2, r3
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	035b      	lsls	r3, r3, #13
 800247e:	4013      	ands	r3, r2
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800248a:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <HAL_GPIO_Init+0x2b8>)
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002490:	4b28      	ldr	r3, [pc, #160]	; (8002534 <HAL_GPIO_Init+0x2b8>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	43da      	mvns	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	039b      	lsls	r3, r3, #14
 80024a8:	4013      	ands	r3, r2
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <HAL_GPIO_Init+0x2b8>)
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024ba:	4a1e      	ldr	r2, [pc, #120]	; (8002534 <HAL_GPIO_Init+0x2b8>)
 80024bc:	2384      	movs	r3, #132	; 0x84
 80024be:	58d3      	ldr	r3, [r2, r3]
 80024c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	43da      	mvns	r2, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	029b      	lsls	r3, r3, #10
 80024d4:	4013      	ands	r3, r2
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024e0:	4914      	ldr	r1, [pc, #80]	; (8002534 <HAL_GPIO_Init+0x2b8>)
 80024e2:	2284      	movs	r2, #132	; 0x84
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80024e8:	4a12      	ldr	r2, [pc, #72]	; (8002534 <HAL_GPIO_Init+0x2b8>)
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	58d3      	ldr	r3, [r2, r3]
 80024ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43da      	mvns	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	025b      	lsls	r3, r3, #9
 8002502:	4013      	ands	r3, r2
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800250e:	4909      	ldr	r1, [pc, #36]	; (8002534 <HAL_GPIO_Init+0x2b8>)
 8002510:	2280      	movs	r2, #128	; 0x80
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3301      	adds	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	40da      	lsrs	r2, r3
 8002524:	1e13      	subs	r3, r2, #0
 8002526:	d000      	beq.n	800252a <HAL_GPIO_Init+0x2ae>
 8002528:	e6b0      	b.n	800228c <HAL_GPIO_Init+0x10>
  }
}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	46c0      	nop			; (mov r8, r8)
 800252e:	46bd      	mov	sp, r7
 8002530:	b006      	add	sp, #24
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021800 	.word	0x40021800
 8002538:	50000400 	.word	0x50000400
 800253c:	50000800 	.word	0x50000800
 8002540:	50000c00 	.word	0x50000c00

08002544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	0008      	movs	r0, r1
 800254e:	0011      	movs	r1, r2
 8002550:	1cbb      	adds	r3, r7, #2
 8002552:	1c02      	adds	r2, r0, #0
 8002554:	801a      	strh	r2, [r3, #0]
 8002556:	1c7b      	adds	r3, r7, #1
 8002558:	1c0a      	adds	r2, r1, #0
 800255a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800255c:	1c7b      	adds	r3, r7, #1
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d004      	beq.n	800256e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002564:	1cbb      	adds	r3, r7, #2
 8002566:	881a      	ldrh	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800256c:	e003      	b.n	8002576 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800256e:	1cbb      	adds	r3, r7, #2
 8002570:	881a      	ldrh	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	46bd      	mov	sp, r7
 800257a:	b002      	add	sp, #8
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a19      	ldr	r2, [pc, #100]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800258e:	4013      	ands	r3, r2
 8002590:	0019      	movs	r1, r3
 8002592:	4b17      	ldr	r3, [pc, #92]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	430a      	orrs	r2, r1
 8002598:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d11f      	bne.n	80025e4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80025a4:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	0013      	movs	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	189b      	adds	r3, r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4912      	ldr	r1, [pc, #72]	; (80025fc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80025b2:	0018      	movs	r0, r3
 80025b4:	f7fd fda4 	bl	8000100 <__udivsi3>
 80025b8:	0003      	movs	r3, r0
 80025ba:	3301      	adds	r3, #1
 80025bc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025be:	e008      	b.n	80025d2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	e001      	b.n	80025d2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e009      	b.n	80025e6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025d4:	695a      	ldr	r2, [r3, #20]
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	401a      	ands	r2, r3
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d0ed      	beq.n	80025c0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	0018      	movs	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b004      	add	sp, #16
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	40007000 	.word	0x40007000
 80025f4:	fffff9ff 	.word	0xfffff9ff
 80025f8:	20000000 	.word	0x20000000
 80025fc:	000f4240 	.word	0x000f4240

08002600 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	23e0      	movs	r3, #224	; 0xe0
 800260a:	01db      	lsls	r3, r3, #7
 800260c:	4013      	ands	r3, r2
}
 800260e:	0018      	movs	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000

08002618 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e2f3      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2201      	movs	r2, #1
 8002630:	4013      	ands	r3, r2
 8002632:	d100      	bne.n	8002636 <HAL_RCC_OscConfig+0x1e>
 8002634:	e07c      	b.n	8002730 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002636:	4bc3      	ldr	r3, [pc, #780]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2238      	movs	r2, #56	; 0x38
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002640:	4bc0      	ldr	r3, [pc, #768]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2203      	movs	r2, #3
 8002646:	4013      	ands	r3, r2
 8002648:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	2b10      	cmp	r3, #16
 800264e:	d102      	bne.n	8002656 <HAL_RCC_OscConfig+0x3e>
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2b03      	cmp	r3, #3
 8002654:	d002      	beq.n	800265c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b08      	cmp	r3, #8
 800265a:	d10b      	bne.n	8002674 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	4bb9      	ldr	r3, [pc, #740]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	029b      	lsls	r3, r3, #10
 8002664:	4013      	ands	r3, r2
 8002666:	d062      	beq.n	800272e <HAL_RCC_OscConfig+0x116>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d15e      	bne.n	800272e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e2ce      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	025b      	lsls	r3, r3, #9
 800267c:	429a      	cmp	r2, r3
 800267e:	d107      	bne.n	8002690 <HAL_RCC_OscConfig+0x78>
 8002680:	4bb0      	ldr	r3, [pc, #704]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4baf      	ldr	r3, [pc, #700]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 8002686:	2180      	movs	r1, #128	; 0x80
 8002688:	0249      	lsls	r1, r1, #9
 800268a:	430a      	orrs	r2, r1
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e020      	b.n	80026d2 <HAL_RCC_OscConfig+0xba>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	23a0      	movs	r3, #160	; 0xa0
 8002696:	02db      	lsls	r3, r3, #11
 8002698:	429a      	cmp	r2, r3
 800269a:	d10e      	bne.n	80026ba <HAL_RCC_OscConfig+0xa2>
 800269c:	4ba9      	ldr	r3, [pc, #676]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4ba8      	ldr	r3, [pc, #672]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80026a2:	2180      	movs	r1, #128	; 0x80
 80026a4:	02c9      	lsls	r1, r1, #11
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	4ba6      	ldr	r3, [pc, #664]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4ba5      	ldr	r3, [pc, #660]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80026b0:	2180      	movs	r1, #128	; 0x80
 80026b2:	0249      	lsls	r1, r1, #9
 80026b4:	430a      	orrs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	e00b      	b.n	80026d2 <HAL_RCC_OscConfig+0xba>
 80026ba:	4ba2      	ldr	r3, [pc, #648]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	4ba1      	ldr	r3, [pc, #644]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80026c0:	49a1      	ldr	r1, [pc, #644]	; (8002948 <HAL_RCC_OscConfig+0x330>)
 80026c2:	400a      	ands	r2, r1
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	4b9f      	ldr	r3, [pc, #636]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4b9e      	ldr	r3, [pc, #632]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80026cc:	499f      	ldr	r1, [pc, #636]	; (800294c <HAL_RCC_OscConfig+0x334>)
 80026ce:	400a      	ands	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d014      	beq.n	8002704 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026da:	f7fe fce1 	bl	80010a0 <HAL_GetTick>
 80026de:	0003      	movs	r3, r0
 80026e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e4:	f7fe fcdc 	bl	80010a0 <HAL_GetTick>
 80026e8:	0002      	movs	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	; 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e28d      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f6:	4b93      	ldr	r3, [pc, #588]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	029b      	lsls	r3, r3, #10
 80026fe:	4013      	ands	r3, r2
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0xcc>
 8002702:	e015      	b.n	8002730 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe fccc 	bl	80010a0 <HAL_GetTick>
 8002708:	0003      	movs	r3, r0
 800270a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800270e:	f7fe fcc7 	bl	80010a0 <HAL_GetTick>
 8002712:	0002      	movs	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b64      	cmp	r3, #100	; 0x64
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e278      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002720:	4b88      	ldr	r3, [pc, #544]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	029b      	lsls	r3, r3, #10
 8002728:	4013      	ands	r3, r2
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0xf6>
 800272c:	e000      	b.n	8002730 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2202      	movs	r2, #2
 8002736:	4013      	ands	r3, r2
 8002738:	d100      	bne.n	800273c <HAL_RCC_OscConfig+0x124>
 800273a:	e099      	b.n	8002870 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800273c:	4b81      	ldr	r3, [pc, #516]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2238      	movs	r2, #56	; 0x38
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002746:	4b7f      	ldr	r3, [pc, #508]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2203      	movs	r2, #3
 800274c:	4013      	ands	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2b10      	cmp	r3, #16
 8002754:	d102      	bne.n	800275c <HAL_RCC_OscConfig+0x144>
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d002      	beq.n	8002762 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d135      	bne.n	80027ce <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002762:	4b78      	ldr	r3, [pc, #480]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4013      	ands	r3, r2
 800276c:	d005      	beq.n	800277a <HAL_RCC_OscConfig+0x162>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e24b      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277a:	4b72      	ldr	r3, [pc, #456]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4a74      	ldr	r2, [pc, #464]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002780:	4013      	ands	r3, r2
 8002782:	0019      	movs	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	021a      	lsls	r2, r3, #8
 800278a:	4b6e      	ldr	r3, [pc, #440]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 800278c:	430a      	orrs	r2, r1
 800278e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d112      	bne.n	80027bc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002796:	4b6b      	ldr	r3, [pc, #428]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a6e      	ldr	r2, [pc, #440]	; (8002954 <HAL_RCC_OscConfig+0x33c>)
 800279c:	4013      	ands	r3, r2
 800279e:	0019      	movs	r1, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	4b67      	ldr	r3, [pc, #412]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80027a6:	430a      	orrs	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80027aa:	4b66      	ldr	r3, [pc, #408]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	0adb      	lsrs	r3, r3, #11
 80027b0:	2207      	movs	r2, #7
 80027b2:	4013      	ands	r3, r2
 80027b4:	4a68      	ldr	r2, [pc, #416]	; (8002958 <HAL_RCC_OscConfig+0x340>)
 80027b6:	40da      	lsrs	r2, r3
 80027b8:	4b68      	ldr	r3, [pc, #416]	; (800295c <HAL_RCC_OscConfig+0x344>)
 80027ba:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027bc:	4b68      	ldr	r3, [pc, #416]	; (8002960 <HAL_RCC_OscConfig+0x348>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	0018      	movs	r0, r3
 80027c2:	f7fe fc11 	bl	8000fe8 <HAL_InitTick>
 80027c6:	1e03      	subs	r3, r0, #0
 80027c8:	d051      	beq.n	800286e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e221      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d030      	beq.n	8002838 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027d6:	4b5b      	ldr	r3, [pc, #364]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a5e      	ldr	r2, [pc, #376]	; (8002954 <HAL_RCC_OscConfig+0x33c>)
 80027dc:	4013      	ands	r3, r2
 80027de:	0019      	movs	r1, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	4b57      	ldr	r3, [pc, #348]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80027e6:	430a      	orrs	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80027ea:	4b56      	ldr	r3, [pc, #344]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4b55      	ldr	r3, [pc, #340]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80027f0:	2180      	movs	r1, #128	; 0x80
 80027f2:	0049      	lsls	r1, r1, #1
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe fc52 	bl	80010a0 <HAL_GetTick>
 80027fc:	0003      	movs	r3, r0
 80027fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002802:	f7fe fc4d 	bl	80010a0 <HAL_GetTick>
 8002806:	0002      	movs	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1fe      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002814:	4b4b      	ldr	r3, [pc, #300]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4013      	ands	r3, r2
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002820:	4b48      	ldr	r3, [pc, #288]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	4a4a      	ldr	r2, [pc, #296]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002826:	4013      	ands	r3, r2
 8002828:	0019      	movs	r1, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	021a      	lsls	r2, r3, #8
 8002830:	4b44      	ldr	r3, [pc, #272]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 8002832:	430a      	orrs	r2, r1
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	e01b      	b.n	8002870 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002838:	4b42      	ldr	r3, [pc, #264]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b41      	ldr	r3, [pc, #260]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 800283e:	4949      	ldr	r1, [pc, #292]	; (8002964 <HAL_RCC_OscConfig+0x34c>)
 8002840:	400a      	ands	r2, r1
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7fe fc2c 	bl	80010a0 <HAL_GetTick>
 8002848:	0003      	movs	r3, r0
 800284a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284e:	f7fe fc27 	bl	80010a0 <HAL_GetTick>
 8002852:	0002      	movs	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e1d8      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002860:	4b38      	ldr	r3, [pc, #224]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4013      	ands	r3, r2
 800286a:	d1f0      	bne.n	800284e <HAL_RCC_OscConfig+0x236>
 800286c:	e000      	b.n	8002870 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800286e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2208      	movs	r2, #8
 8002876:	4013      	ands	r3, r2
 8002878:	d047      	beq.n	800290a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800287a:	4b32      	ldr	r3, [pc, #200]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2238      	movs	r2, #56	; 0x38
 8002880:	4013      	ands	r3, r2
 8002882:	2b18      	cmp	r3, #24
 8002884:	d10a      	bne.n	800289c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002886:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 8002888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288a:	2202      	movs	r2, #2
 800288c:	4013      	ands	r3, r2
 800288e:	d03c      	beq.n	800290a <HAL_RCC_OscConfig+0x2f2>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d138      	bne.n	800290a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e1ba      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d019      	beq.n	80028d8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80028a4:	4b27      	ldr	r3, [pc, #156]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80028a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028a8:	4b26      	ldr	r3, [pc, #152]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80028aa:	2101      	movs	r1, #1
 80028ac:	430a      	orrs	r2, r1
 80028ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7fe fbf6 	bl	80010a0 <HAL_GetTick>
 80028b4:	0003      	movs	r3, r0
 80028b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ba:	f7fe fbf1 	bl	80010a0 <HAL_GetTick>
 80028be:	0002      	movs	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e1a2      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80028ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d0:	2202      	movs	r2, #2
 80028d2:	4013      	ands	r3, r2
 80028d4:	d0f1      	beq.n	80028ba <HAL_RCC_OscConfig+0x2a2>
 80028d6:	e018      	b.n	800290a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80028d8:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80028da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028dc:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 80028de:	2101      	movs	r1, #1
 80028e0:	438a      	bics	r2, r1
 80028e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fe fbdc 	bl	80010a0 <HAL_GetTick>
 80028e8:	0003      	movs	r3, r0
 80028ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ee:	f7fe fbd7 	bl	80010a0 <HAL_GetTick>
 80028f2:	0002      	movs	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e188      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002900:	4b10      	ldr	r3, [pc, #64]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 8002902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002904:	2202      	movs	r2, #2
 8002906:	4013      	ands	r3, r2
 8002908:	d1f1      	bne.n	80028ee <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2204      	movs	r2, #4
 8002910:	4013      	ands	r3, r2
 8002912:	d100      	bne.n	8002916 <HAL_RCC_OscConfig+0x2fe>
 8002914:	e0c6      	b.n	8002aa4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002916:	231f      	movs	r3, #31
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2238      	movs	r2, #56	; 0x38
 8002924:	4013      	ands	r3, r2
 8002926:	2b20      	cmp	r3, #32
 8002928:	d11e      	bne.n	8002968 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_RCC_OscConfig+0x32c>)
 800292c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292e:	2202      	movs	r2, #2
 8002930:	4013      	ands	r3, r2
 8002932:	d100      	bne.n	8002936 <HAL_RCC_OscConfig+0x31e>
 8002934:	e0b6      	b.n	8002aa4 <HAL_RCC_OscConfig+0x48c>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d000      	beq.n	8002940 <HAL_RCC_OscConfig+0x328>
 800293e:	e0b1      	b.n	8002aa4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e166      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
 8002944:	40021000 	.word	0x40021000
 8002948:	fffeffff 	.word	0xfffeffff
 800294c:	fffbffff 	.word	0xfffbffff
 8002950:	ffff80ff 	.word	0xffff80ff
 8002954:	ffffc7ff 	.word	0xffffc7ff
 8002958:	00f42400 	.word	0x00f42400
 800295c:	20000000 	.word	0x20000000
 8002960:	20000004 	.word	0x20000004
 8002964:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002968:	4bac      	ldr	r3, [pc, #688]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 800296a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	055b      	lsls	r3, r3, #21
 8002970:	4013      	ands	r3, r2
 8002972:	d101      	bne.n	8002978 <HAL_RCC_OscConfig+0x360>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_RCC_OscConfig+0x362>
 8002978:	2300      	movs	r3, #0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d011      	beq.n	80029a2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800297e:	4ba7      	ldr	r3, [pc, #668]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002982:	4ba6      	ldr	r3, [pc, #664]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002984:	2180      	movs	r1, #128	; 0x80
 8002986:	0549      	lsls	r1, r1, #21
 8002988:	430a      	orrs	r2, r1
 800298a:	63da      	str	r2, [r3, #60]	; 0x3c
 800298c:	4ba3      	ldr	r3, [pc, #652]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 800298e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	055b      	lsls	r3, r3, #21
 8002994:	4013      	ands	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800299a:	231f      	movs	r3, #31
 800299c:	18fb      	adds	r3, r7, r3
 800299e:	2201      	movs	r2, #1
 80029a0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a2:	4b9f      	ldr	r3, [pc, #636]	; (8002c20 <HAL_RCC_OscConfig+0x608>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	2380      	movs	r3, #128	; 0x80
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4013      	ands	r3, r2
 80029ac:	d11a      	bne.n	80029e4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ae:	4b9c      	ldr	r3, [pc, #624]	; (8002c20 <HAL_RCC_OscConfig+0x608>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4b9b      	ldr	r3, [pc, #620]	; (8002c20 <HAL_RCC_OscConfig+0x608>)
 80029b4:	2180      	movs	r1, #128	; 0x80
 80029b6:	0049      	lsls	r1, r1, #1
 80029b8:	430a      	orrs	r2, r1
 80029ba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80029bc:	f7fe fb70 	bl	80010a0 <HAL_GetTick>
 80029c0:	0003      	movs	r3, r0
 80029c2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c6:	f7fe fb6b 	bl	80010a0 <HAL_GetTick>
 80029ca:	0002      	movs	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e11c      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d8:	4b91      	ldr	r3, [pc, #580]	; (8002c20 <HAL_RCC_OscConfig+0x608>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4013      	ands	r3, r2
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d106      	bne.n	80029fa <HAL_RCC_OscConfig+0x3e2>
 80029ec:	4b8b      	ldr	r3, [pc, #556]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 80029ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029f0:	4b8a      	ldr	r3, [pc, #552]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	430a      	orrs	r2, r1
 80029f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80029f8:	e01c      	b.n	8002a34 <HAL_RCC_OscConfig+0x41c>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b05      	cmp	r3, #5
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x404>
 8002a02:	4b86      	ldr	r3, [pc, #536]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002a04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a06:	4b85      	ldr	r3, [pc, #532]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002a08:	2104      	movs	r1, #4
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a0e:	4b83      	ldr	r3, [pc, #524]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002a10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a12:	4b82      	ldr	r3, [pc, #520]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002a14:	2101      	movs	r1, #1
 8002a16:	430a      	orrs	r2, r1
 8002a18:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCC_OscConfig+0x41c>
 8002a1c:	4b7f      	ldr	r3, [pc, #508]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002a1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a20:	4b7e      	ldr	r3, [pc, #504]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002a22:	2101      	movs	r1, #1
 8002a24:	438a      	bics	r2, r1
 8002a26:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a28:	4b7c      	ldr	r3, [pc, #496]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002a2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a2c:	4b7b      	ldr	r3, [pc, #492]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002a2e:	2104      	movs	r1, #4
 8002a30:	438a      	bics	r2, r1
 8002a32:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d014      	beq.n	8002a66 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fb30 	bl	80010a0 <HAL_GetTick>
 8002a40:	0003      	movs	r3, r0
 8002a42:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a44:	e009      	b.n	8002a5a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7fe fb2b 	bl	80010a0 <HAL_GetTick>
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	4a74      	ldr	r2, [pc, #464]	; (8002c24 <HAL_RCC_OscConfig+0x60c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e0db      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a5a:	4b70      	ldr	r3, [pc, #448]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5e:	2202      	movs	r2, #2
 8002a60:	4013      	ands	r3, r2
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x42e>
 8002a64:	e013      	b.n	8002a8e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a66:	f7fe fb1b 	bl	80010a0 <HAL_GetTick>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a6e:	e009      	b.n	8002a84 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a70:	f7fe fb16 	bl	80010a0 <HAL_GetTick>
 8002a74:	0002      	movs	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	4a6a      	ldr	r2, [pc, #424]	; (8002c24 <HAL_RCC_OscConfig+0x60c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e0c6      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a84:	4b65      	ldr	r3, [pc, #404]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a88:	2202      	movs	r2, #2
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a8e:	231f      	movs	r3, #31
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d105      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a98:	4b60      	ldr	r3, [pc, #384]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a9c:	4b5f      	ldr	r3, [pc, #380]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002a9e:	4962      	ldr	r1, [pc, #392]	; (8002c28 <HAL_RCC_OscConfig+0x610>)
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d100      	bne.n	8002aae <HAL_RCC_OscConfig+0x496>
 8002aac:	e0b0      	b.n	8002c10 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aae:	4b5b      	ldr	r3, [pc, #364]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2238      	movs	r2, #56	; 0x38
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d100      	bne.n	8002abc <HAL_RCC_OscConfig+0x4a4>
 8002aba:	e078      	b.n	8002bae <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d153      	bne.n	8002b6c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac4:	4b55      	ldr	r3, [pc, #340]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b54      	ldr	r3, [pc, #336]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002aca:	4958      	ldr	r1, [pc, #352]	; (8002c2c <HAL_RCC_OscConfig+0x614>)
 8002acc:	400a      	ands	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fae6 	bl	80010a0 <HAL_GetTick>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ada:	f7fe fae1 	bl	80010a0 <HAL_GetTick>
 8002ade:	0002      	movs	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e092      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aec:	4b4b      	ldr	r3, [pc, #300]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	049b      	lsls	r3, r3, #18
 8002af4:	4013      	ands	r3, r2
 8002af6:	d1f0      	bne.n	8002ada <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002af8:	4b48      	ldr	r3, [pc, #288]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4a4c      	ldr	r2, [pc, #304]	; (8002c30 <HAL_RCC_OscConfig+0x618>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	0019      	movs	r1, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1a      	ldr	r2, [r3, #32]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	4b3e      	ldr	r3, [pc, #248]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002b22:	430a      	orrs	r2, r1
 8002b24:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b26:	4b3d      	ldr	r3, [pc, #244]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	4b3c      	ldr	r3, [pc, #240]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002b2c:	2180      	movs	r1, #128	; 0x80
 8002b2e:	0449      	lsls	r1, r1, #17
 8002b30:	430a      	orrs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002b34:	4b39      	ldr	r3, [pc, #228]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	4b38      	ldr	r3, [pc, #224]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002b3a:	2180      	movs	r1, #128	; 0x80
 8002b3c:	0549      	lsls	r1, r1, #21
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b42:	f7fe faad 	bl	80010a0 <HAL_GetTick>
 8002b46:	0003      	movs	r3, r0
 8002b48:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe faa8 	bl	80010a0 <HAL_GetTick>
 8002b50:	0002      	movs	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e059      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5e:	4b2f      	ldr	r3, [pc, #188]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	2380      	movs	r3, #128	; 0x80
 8002b64:	049b      	lsls	r3, r3, #18
 8002b66:	4013      	ands	r3, r2
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x534>
 8002b6a:	e051      	b.n	8002c10 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6c:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002b72:	492e      	ldr	r1, [pc, #184]	; (8002c2c <HAL_RCC_OscConfig+0x614>)
 8002b74:	400a      	ands	r2, r1
 8002b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe fa92 	bl	80010a0 <HAL_GetTick>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b82:	f7fe fa8d 	bl	80010a0 <HAL_GetTick>
 8002b86:	0002      	movs	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e03e      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b94:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	049b      	lsls	r3, r3, #18
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d1f0      	bne.n	8002b82 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002ba0:	4b1e      	ldr	r3, [pc, #120]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002ba6:	4923      	ldr	r1, [pc, #140]	; (8002c34 <HAL_RCC_OscConfig+0x61c>)
 8002ba8:	400a      	ands	r2, r1
 8002baa:	60da      	str	r2, [r3, #12]
 8002bac:	e030      	b.n	8002c10 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e02b      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002bba:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <HAL_RCC_OscConfig+0x604>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d11e      	bne.n	8002c0c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2270      	movs	r2, #112	; 0x70
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d117      	bne.n	8002c0c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	23fe      	movs	r3, #254	; 0xfe
 8002be0:	01db      	lsls	r3, r3, #7
 8002be2:	401a      	ands	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d10e      	bne.n	8002c0c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	23f8      	movs	r3, #248	; 0xf8
 8002bf2:	039b      	lsls	r3, r3, #14
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d106      	bne.n	8002c0c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	0f5b      	lsrs	r3, r3, #29
 8002c02:	075a      	lsls	r2, r3, #29
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	0018      	movs	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b008      	add	sp, #32
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40007000 	.word	0x40007000
 8002c24:	00001388 	.word	0x00001388
 8002c28:	efffffff 	.word	0xefffffff
 8002c2c:	feffffff 	.word	0xfeffffff
 8002c30:	1fc1808c 	.word	0x1fc1808c
 8002c34:	effefffc 	.word	0xeffefffc

08002c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0e9      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b76      	ldr	r3, [pc, #472]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2207      	movs	r2, #7
 8002c52:	4013      	ands	r3, r2
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d91e      	bls.n	8002c98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b73      	ldr	r3, [pc, #460]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2207      	movs	r2, #7
 8002c60:	4393      	bics	r3, r2
 8002c62:	0019      	movs	r1, r3
 8002c64:	4b70      	ldr	r3, [pc, #448]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c6c:	f7fe fa18 	bl	80010a0 <HAL_GetTick>
 8002c70:	0003      	movs	r3, r0
 8002c72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c74:	e009      	b.n	8002c8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c76:	f7fe fa13 	bl	80010a0 <HAL_GetTick>
 8002c7a:	0002      	movs	r2, r0
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	4a6a      	ldr	r2, [pc, #424]	; (8002e2c <HAL_RCC_ClockConfig+0x1f4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e0ca      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c8a:	4b67      	ldr	r3, [pc, #412]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2207      	movs	r2, #7
 8002c90:	4013      	ands	r3, r2
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d1ee      	bne.n	8002c76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d015      	beq.n	8002cce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d006      	beq.n	8002cba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002cac:	4b60      	ldr	r3, [pc, #384]	; (8002e30 <HAL_RCC_ClockConfig+0x1f8>)
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	4b5f      	ldr	r3, [pc, #380]	; (8002e30 <HAL_RCC_ClockConfig+0x1f8>)
 8002cb2:	21e0      	movs	r1, #224	; 0xe0
 8002cb4:	01c9      	lsls	r1, r1, #7
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cba:	4b5d      	ldr	r3, [pc, #372]	; (8002e30 <HAL_RCC_ClockConfig+0x1f8>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	4a5d      	ldr	r2, [pc, #372]	; (8002e34 <HAL_RCC_ClockConfig+0x1fc>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	4b59      	ldr	r3, [pc, #356]	; (8002e30 <HAL_RCC_ClockConfig+0x1f8>)
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d057      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ce0:	4b53      	ldr	r3, [pc, #332]	; (8002e30 <HAL_RCC_ClockConfig+0x1f8>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	029b      	lsls	r3, r3, #10
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d12b      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e097      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf8:	4b4d      	ldr	r3, [pc, #308]	; (8002e30 <HAL_RCC_ClockConfig+0x1f8>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	049b      	lsls	r3, r3, #18
 8002d00:	4013      	ands	r3, r2
 8002d02:	d11f      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e08b      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d10:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <HAL_RCC_ClockConfig+0x1f8>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d113      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e07f      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d28:	4b41      	ldr	r3, [pc, #260]	; (8002e30 <HAL_RCC_ClockConfig+0x1f8>)
 8002d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d108      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e074      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d36:	4b3e      	ldr	r3, [pc, #248]	; (8002e30 <HAL_RCC_ClockConfig+0x1f8>)
 8002d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e06d      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d44:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <HAL_RCC_ClockConfig+0x1f8>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2207      	movs	r2, #7
 8002d4a:	4393      	bics	r3, r2
 8002d4c:	0019      	movs	r1, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	4b37      	ldr	r3, [pc, #220]	; (8002e30 <HAL_RCC_ClockConfig+0x1f8>)
 8002d54:	430a      	orrs	r2, r1
 8002d56:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d58:	f7fe f9a2 	bl	80010a0 <HAL_GetTick>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d60:	e009      	b.n	8002d76 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d62:	f7fe f99d 	bl	80010a0 <HAL_GetTick>
 8002d66:	0002      	movs	r2, r0
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	4a2f      	ldr	r2, [pc, #188]	; (8002e2c <HAL_RCC_ClockConfig+0x1f4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e054      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d76:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <HAL_RCC_ClockConfig+0x1f8>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2238      	movs	r2, #56	; 0x38
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d1ec      	bne.n	8002d62 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d88:	4b27      	ldr	r3, [pc, #156]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	4013      	ands	r3, r2
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d21e      	bcs.n	8002dd4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d96:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2207      	movs	r2, #7
 8002d9c:	4393      	bics	r3, r2
 8002d9e:	0019      	movs	r1, r3
 8002da0:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002da8:	f7fe f97a 	bl	80010a0 <HAL_GetTick>
 8002dac:	0003      	movs	r3, r0
 8002dae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002db0:	e009      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db2:	f7fe f975 	bl	80010a0 <HAL_GetTick>
 8002db6:	0002      	movs	r2, r0
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	4a1b      	ldr	r2, [pc, #108]	; (8002e2c <HAL_RCC_ClockConfig+0x1f4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e02c      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002dc6:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2207      	movs	r2, #7
 8002dcc:	4013      	ands	r3, r2
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d1ee      	bne.n	8002db2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2204      	movs	r2, #4
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d009      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <HAL_RCC_ClockConfig+0x1f8>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <HAL_RCC_ClockConfig+0x200>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	0019      	movs	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <HAL_RCC_ClockConfig+0x1f8>)
 8002dee:	430a      	orrs	r2, r1
 8002df0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002df2:	f000 f829 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8002df6:	0001      	movs	r1, r0
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <HAL_RCC_ClockConfig+0x1f8>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	0a1b      	lsrs	r3, r3, #8
 8002dfe:	220f      	movs	r2, #15
 8002e00:	401a      	ands	r2, r3
 8002e02:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <HAL_RCC_ClockConfig+0x204>)
 8002e04:	0092      	lsls	r2, r2, #2
 8002e06:	58d3      	ldr	r3, [r2, r3]
 8002e08:	221f      	movs	r2, #31
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	000a      	movs	r2, r1
 8002e0e:	40da      	lsrs	r2, r3
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_RCC_ClockConfig+0x208>)
 8002e12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_ClockConfig+0x20c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f7fe f8e5 	bl	8000fe8 <HAL_InitTick>
 8002e1e:	0003      	movs	r3, r0
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b004      	add	sp, #16
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40022000 	.word	0x40022000
 8002e2c:	00001388 	.word	0x00001388
 8002e30:	40021000 	.word	0x40021000
 8002e34:	fffff0ff 	.word	0xfffff0ff
 8002e38:	ffff8fff 	.word	0xffff8fff
 8002e3c:	08005350 	.word	0x08005350
 8002e40:	20000000 	.word	0x20000000
 8002e44:	20000004 	.word	0x20000004

08002e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e4e:	4b3c      	ldr	r3, [pc, #240]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2238      	movs	r2, #56	; 0x38
 8002e54:	4013      	ands	r3, r2
 8002e56:	d10f      	bne.n	8002e78 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002e58:	4b39      	ldr	r3, [pc, #228]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0adb      	lsrs	r3, r3, #11
 8002e5e:	2207      	movs	r2, #7
 8002e60:	4013      	ands	r3, r2
 8002e62:	2201      	movs	r2, #1
 8002e64:	409a      	lsls	r2, r3
 8002e66:	0013      	movs	r3, r2
 8002e68:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e6a:	6839      	ldr	r1, [r7, #0]
 8002e6c:	4835      	ldr	r0, [pc, #212]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e6e:	f7fd f947 	bl	8000100 <__udivsi3>
 8002e72:	0003      	movs	r3, r0
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	e05d      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e78:	4b31      	ldr	r3, [pc, #196]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2238      	movs	r2, #56	; 0x38
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d102      	bne.n	8002e8a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e84:	4b30      	ldr	r3, [pc, #192]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	e054      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e8a:	4b2d      	ldr	r3, [pc, #180]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2238      	movs	r2, #56	; 0x38
 8002e90:	4013      	ands	r3, r2
 8002e92:	2b10      	cmp	r3, #16
 8002e94:	d138      	bne.n	8002f08 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002e96:	4b2a      	ldr	r3, [pc, #168]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ea0:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	2207      	movs	r2, #7
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	3301      	adds	r3, #1
 8002eac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d10d      	bne.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	4824      	ldr	r0, [pc, #144]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x100>)
 8002eb8:	f7fd f922 	bl	8000100 <__udivsi3>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	0a1b      	lsrs	r3, r3, #8
 8002ec6:	227f      	movs	r2, #127	; 0x7f
 8002ec8:	4013      	ands	r3, r2
 8002eca:	434b      	muls	r3, r1
 8002ecc:	617b      	str	r3, [r7, #20]
        break;
 8002ece:	e00d      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	481c      	ldr	r0, [pc, #112]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ed4:	f7fd f914 	bl	8000100 <__udivsi3>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	0019      	movs	r1, r3
 8002edc:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	227f      	movs	r2, #127	; 0x7f
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	434b      	muls	r3, r1
 8002ee8:	617b      	str	r3, [r7, #20]
        break;
 8002eea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002eec:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	0f5b      	lsrs	r3, r3, #29
 8002ef2:	2207      	movs	r2, #7
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	6978      	ldr	r0, [r7, #20]
 8002efe:	f7fd f8ff 	bl	8000100 <__udivsi3>
 8002f02:	0003      	movs	r3, r0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	e015      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f08:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2238      	movs	r2, #56	; 0x38
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b20      	cmp	r3, #32
 8002f12:	d103      	bne.n	8002f1c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f1c:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2238      	movs	r2, #56	; 0x38
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b18      	cmp	r3, #24
 8002f26:	d103      	bne.n	8002f30 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002f28:	23fa      	movs	r3, #250	; 0xfa
 8002f2a:	01db      	lsls	r3, r3, #7
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	e001      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f34:	693b      	ldr	r3, [r7, #16]
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b006      	add	sp, #24
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	40021000 	.word	0x40021000
 8002f44:	00f42400 	.word	0x00f42400
 8002f48:	007a1200 	.word	0x007a1200

08002f4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f50:	4b02      	ldr	r3, [pc, #8]	; (8002f5c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f52:	681b      	ldr	r3, [r3, #0]
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	20000000 	.word	0x20000000

08002f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f60:	b5b0      	push	{r4, r5, r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002f64:	f7ff fff2 	bl	8002f4c <HAL_RCC_GetHCLKFreq>
 8002f68:	0004      	movs	r4, r0
 8002f6a:	f7ff fb49 	bl	8002600 <LL_RCC_GetAPB1Prescaler>
 8002f6e:	0003      	movs	r3, r0
 8002f70:	0b1a      	lsrs	r2, r3, #12
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f74:	0092      	lsls	r2, r2, #2
 8002f76:	58d3      	ldr	r3, [r2, r3]
 8002f78:	221f      	movs	r2, #31
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	40dc      	lsrs	r4, r3
 8002f7e:	0023      	movs	r3, r4
}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bdb0      	pop	{r4, r5, r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	08005390 	.word	0x08005390

08002f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002f94:	2313      	movs	r3, #19
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f9c:	2312      	movs	r3, #18
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	029b      	lsls	r3, r3, #10
 8002fac:	4013      	ands	r3, r2
 8002fae:	d100      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002fb0:	e0a3      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb2:	2011      	movs	r0, #17
 8002fb4:	183b      	adds	r3, r7, r0
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fba:	4b86      	ldr	r3, [pc, #536]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	055b      	lsls	r3, r3, #21
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d110      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	4b83      	ldr	r3, [pc, #524]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fca:	4b82      	ldr	r3, [pc, #520]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fcc:	2180      	movs	r1, #128	; 0x80
 8002fce:	0549      	lsls	r1, r1, #21
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fd4:	4b7f      	ldr	r3, [pc, #508]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	055b      	lsls	r3, r3, #21
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe2:	183b      	adds	r3, r7, r0
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe8:	4b7b      	ldr	r3, [pc, #492]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b7a      	ldr	r3, [pc, #488]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002fee:	2180      	movs	r1, #128	; 0x80
 8002ff0:	0049      	lsls	r1, r1, #1
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ff6:	f7fe f853 	bl	80010a0 <HAL_GetTick>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ffe:	e00b      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003000:	f7fe f84e 	bl	80010a0 <HAL_GetTick>
 8003004:	0002      	movs	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d904      	bls.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800300e:	2313      	movs	r3, #19
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	2203      	movs	r2, #3
 8003014:	701a      	strb	r2, [r3, #0]
        break;
 8003016:	e005      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003018:	4b6f      	ldr	r3, [pc, #444]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4013      	ands	r3, r2
 8003022:	d0ed      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003024:	2313      	movs	r3, #19
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d154      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800302e:	4b69      	ldr	r3, [pc, #420]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003030:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003032:	23c0      	movs	r3, #192	; 0xc0
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4013      	ands	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d019      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	429a      	cmp	r2, r3
 8003048:	d014      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800304a:	4b62      	ldr	r3, [pc, #392]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800304c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304e:	4a63      	ldr	r2, [pc, #396]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003050:	4013      	ands	r3, r2
 8003052:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003054:	4b5f      	ldr	r3, [pc, #380]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003056:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003058:	4b5e      	ldr	r3, [pc, #376]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800305a:	2180      	movs	r1, #128	; 0x80
 800305c:	0249      	lsls	r1, r1, #9
 800305e:	430a      	orrs	r2, r1
 8003060:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003062:	4b5c      	ldr	r3, [pc, #368]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003064:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003066:	4b5b      	ldr	r3, [pc, #364]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003068:	495d      	ldr	r1, [pc, #372]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800306a:	400a      	ands	r2, r1
 800306c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800306e:	4b59      	ldr	r3, [pc, #356]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2201      	movs	r2, #1
 8003078:	4013      	ands	r3, r2
 800307a:	d016      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fe f810 	bl	80010a0 <HAL_GetTick>
 8003080:	0003      	movs	r3, r0
 8003082:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003084:	e00c      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003086:	f7fe f80b 	bl	80010a0 <HAL_GetTick>
 800308a:	0002      	movs	r2, r0
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	4a54      	ldr	r2, [pc, #336]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d904      	bls.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003096:	2313      	movs	r3, #19
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	2203      	movs	r2, #3
 800309c:	701a      	strb	r2, [r3, #0]
            break;
 800309e:	e004      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a0:	4b4c      	ldr	r3, [pc, #304]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a4:	2202      	movs	r2, #2
 80030a6:	4013      	ands	r3, r2
 80030a8:	d0ed      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80030aa:	2313      	movs	r3, #19
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10a      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030b4:	4b47      	ldr	r3, [pc, #284]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	4a48      	ldr	r2, [pc, #288]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	0019      	movs	r1, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699a      	ldr	r2, [r3, #24]
 80030c2:	4b44      	ldr	r3, [pc, #272]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030c4:	430a      	orrs	r2, r1
 80030c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80030c8:	e00c      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030ca:	2312      	movs	r3, #18
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	2213      	movs	r2, #19
 80030d0:	18ba      	adds	r2, r7, r2
 80030d2:	7812      	ldrb	r2, [r2, #0]
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	e005      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d8:	2312      	movs	r3, #18
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	2213      	movs	r2, #19
 80030de:	18ba      	adds	r2, r7, r2
 80030e0:	7812      	ldrb	r2, [r2, #0]
 80030e2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030e4:	2311      	movs	r3, #17
 80030e6:	18fb      	adds	r3, r7, r3
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d105      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ee:	4b39      	ldr	r3, [pc, #228]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030f2:	4b38      	ldr	r3, [pc, #224]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030f4:	493c      	ldr	r1, [pc, #240]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80030f6:	400a      	ands	r2, r1
 80030f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2201      	movs	r2, #1
 8003100:	4013      	ands	r3, r2
 8003102:	d009      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003104:	4b33      	ldr	r3, [pc, #204]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003108:	2203      	movs	r2, #3
 800310a:	4393      	bics	r3, r2
 800310c:	0019      	movs	r1, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003114:	430a      	orrs	r2, r1
 8003116:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2202      	movs	r2, #2
 800311e:	4013      	ands	r3, r2
 8003120:	d009      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003122:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003126:	220c      	movs	r2, #12
 8003128:	4393      	bics	r3, r2
 800312a:	0019      	movs	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	4b28      	ldr	r3, [pc, #160]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003132:	430a      	orrs	r2, r1
 8003134:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2220      	movs	r2, #32
 800313c:	4013      	ands	r3, r2
 800313e:	d009      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003140:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003144:	4a29      	ldr	r2, [pc, #164]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003146:	4013      	ands	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003150:	430a      	orrs	r2, r1
 8003152:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	2380      	movs	r3, #128	; 0x80
 800315a:	01db      	lsls	r3, r3, #7
 800315c:	4013      	ands	r3, r2
 800315e:	d015      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003160:	4b1c      	ldr	r3, [pc, #112]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	0899      	lsrs	r1, r3, #2
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695a      	ldr	r2, [r3, #20]
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800316e:	430a      	orrs	r2, r1
 8003170:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	05db      	lsls	r3, r3, #23
 800317a:	429a      	cmp	r2, r3
 800317c:	d106      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003184:	2180      	movs	r1, #128	; 0x80
 8003186:	0249      	lsls	r1, r1, #9
 8003188:	430a      	orrs	r2, r1
 800318a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	4013      	ands	r3, r2
 8003196:	d016      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003198:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	4a14      	ldr	r2, [pc, #80]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800319e:	4013      	ands	r3, r2
 80031a0:	0019      	movs	r1, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031a8:	430a      	orrs	r2, r1
 80031aa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	01db      	lsls	r3, r3, #7
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d106      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031be:	2180      	movs	r1, #128	; 0x80
 80031c0:	0249      	lsls	r1, r1, #9
 80031c2:	430a      	orrs	r2, r1
 80031c4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80031c6:	2312      	movs	r3, #18
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	781b      	ldrb	r3, [r3, #0]
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b006      	add	sp, #24
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40007000 	.word	0x40007000
 80031dc:	fffffcff 	.word	0xfffffcff
 80031e0:	fffeffff 	.word	0xfffeffff
 80031e4:	00001388 	.word	0x00001388
 80031e8:	efffffff 	.word	0xefffffff
 80031ec:	ffffcfff 	.word	0xffffcfff
 80031f0:	ffff3fff 	.word	0xffff3fff

080031f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e04a      	b.n	800329c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	223d      	movs	r2, #61	; 0x3d
 800320a:	5c9b      	ldrb	r3, [r3, r2]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d107      	bne.n	8003222 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	223c      	movs	r2, #60	; 0x3c
 8003216:	2100      	movs	r1, #0
 8003218:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	0018      	movs	r0, r3
 800321e:	f7fd fde5 	bl	8000dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	223d      	movs	r2, #61	; 0x3d
 8003226:	2102      	movs	r1, #2
 8003228:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3304      	adds	r3, #4
 8003232:	0019      	movs	r1, r3
 8003234:	0010      	movs	r0, r2
 8003236:	f000 f883 	bl	8003340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2248      	movs	r2, #72	; 0x48
 800323e:	2101      	movs	r1, #1
 8003240:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	223e      	movs	r2, #62	; 0x3e
 8003246:	2101      	movs	r1, #1
 8003248:	5499      	strb	r1, [r3, r2]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	223f      	movs	r2, #63	; 0x3f
 800324e:	2101      	movs	r1, #1
 8003250:	5499      	strb	r1, [r3, r2]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2240      	movs	r2, #64	; 0x40
 8003256:	2101      	movs	r1, #1
 8003258:	5499      	strb	r1, [r3, r2]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2241      	movs	r2, #65	; 0x41
 800325e:	2101      	movs	r1, #1
 8003260:	5499      	strb	r1, [r3, r2]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2242      	movs	r2, #66	; 0x42
 8003266:	2101      	movs	r1, #1
 8003268:	5499      	strb	r1, [r3, r2]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2243      	movs	r2, #67	; 0x43
 800326e:	2101      	movs	r1, #1
 8003270:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2244      	movs	r2, #68	; 0x44
 8003276:	2101      	movs	r1, #1
 8003278:	5499      	strb	r1, [r3, r2]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2245      	movs	r2, #69	; 0x45
 800327e:	2101      	movs	r1, #1
 8003280:	5499      	strb	r1, [r3, r2]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2246      	movs	r2, #70	; 0x46
 8003286:	2101      	movs	r1, #1
 8003288:	5499      	strb	r1, [r3, r2]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2247      	movs	r2, #71	; 0x47
 800328e:	2101      	movs	r1, #1
 8003290:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	223d      	movs	r2, #61	; 0x3d
 8003296:	2101      	movs	r1, #1
 8003298:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	0018      	movs	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	b002      	add	sp, #8
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	223d      	movs	r2, #61	; 0x3d
 80032b0:	5c9b      	ldrb	r3, [r3, r2]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d001      	beq.n	80032bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e034      	b.n	8003326 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	223d      	movs	r2, #61	; 0x3d
 80032c0:	2102      	movs	r1, #2
 80032c2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a19      	ldr	r2, [pc, #100]	; (8003330 <HAL_TIM_Base_Start+0x8c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_TIM_Base_Start+0x3e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a18      	ldr	r2, [pc, #96]	; (8003334 <HAL_TIM_Base_Start+0x90>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d004      	beq.n	80032e2 <HAL_TIM_Base_Start+0x3e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a16      	ldr	r2, [pc, #88]	; (8003338 <HAL_TIM_Base_Start+0x94>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d116      	bne.n	8003310 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	4a14      	ldr	r2, [pc, #80]	; (800333c <HAL_TIM_Base_Start+0x98>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b06      	cmp	r3, #6
 80032f2:	d016      	beq.n	8003322 <HAL_TIM_Base_Start+0x7e>
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	025b      	lsls	r3, r3, #9
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d011      	beq.n	8003322 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2101      	movs	r1, #1
 800330a:	430a      	orrs	r2, r1
 800330c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330e:	e008      	b.n	8003322 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2101      	movs	r1, #1
 800331c:	430a      	orrs	r2, r1
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e000      	b.n	8003324 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003322:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b004      	add	sp, #16
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40000400 	.word	0x40000400
 8003338:	40014000 	.word	0x40014000
 800333c:	00010007 	.word	0x00010007

08003340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a2f      	ldr	r2, [pc, #188]	; (8003410 <TIM_Base_SetConfig+0xd0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <TIM_Base_SetConfig+0x20>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a2e      	ldr	r2, [pc, #184]	; (8003414 <TIM_Base_SetConfig+0xd4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d108      	bne.n	8003372 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2270      	movs	r2, #112	; 0x70
 8003364:	4393      	bics	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a26      	ldr	r2, [pc, #152]	; (8003410 <TIM_Base_SetConfig+0xd0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <TIM_Base_SetConfig+0x62>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a25      	ldr	r2, [pc, #148]	; (8003414 <TIM_Base_SetConfig+0xd4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00f      	beq.n	80033a2 <TIM_Base_SetConfig+0x62>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a24      	ldr	r2, [pc, #144]	; (8003418 <TIM_Base_SetConfig+0xd8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00b      	beq.n	80033a2 <TIM_Base_SetConfig+0x62>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a23      	ldr	r2, [pc, #140]	; (800341c <TIM_Base_SetConfig+0xdc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d007      	beq.n	80033a2 <TIM_Base_SetConfig+0x62>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a22      	ldr	r2, [pc, #136]	; (8003420 <TIM_Base_SetConfig+0xe0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d003      	beq.n	80033a2 <TIM_Base_SetConfig+0x62>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a21      	ldr	r2, [pc, #132]	; (8003424 <TIM_Base_SetConfig+0xe4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d108      	bne.n	80033b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a20      	ldr	r2, [pc, #128]	; (8003428 <TIM_Base_SetConfig+0xe8>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2280      	movs	r2, #128	; 0x80
 80033b8:	4393      	bics	r3, r2
 80033ba:	001a      	movs	r2, r3
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a0c      	ldr	r2, [pc, #48]	; (8003410 <TIM_Base_SetConfig+0xd0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00b      	beq.n	80033fa <TIM_Base_SetConfig+0xba>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a0d      	ldr	r2, [pc, #52]	; (800341c <TIM_Base_SetConfig+0xdc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <TIM_Base_SetConfig+0xba>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a0c      	ldr	r2, [pc, #48]	; (8003420 <TIM_Base_SetConfig+0xe0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d003      	beq.n	80033fa <TIM_Base_SetConfig+0xba>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a0b      	ldr	r2, [pc, #44]	; (8003424 <TIM_Base_SetConfig+0xe4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d103      	bne.n	8003402 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	615a      	str	r2, [r3, #20]
}
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	b004      	add	sp, #16
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40000400 	.word	0x40000400
 8003418:	40002000 	.word	0x40002000
 800341c:	40014000 	.word	0x40014000
 8003420:	40014400 	.word	0x40014400
 8003424:	40014800 	.word	0x40014800
 8003428:	fffffcff 	.word	0xfffffcff

0800342c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e046      	b.n	80034cc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2288      	movs	r2, #136	; 0x88
 8003442:	589b      	ldr	r3, [r3, r2]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d107      	bne.n	8003458 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2284      	movs	r2, #132	; 0x84
 800344c:	2100      	movs	r1, #0
 800344e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	0018      	movs	r0, r3
 8003454:	f7fd fcea 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2288      	movs	r2, #136	; 0x88
 800345c:	2124      	movs	r1, #36	; 0x24
 800345e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2101      	movs	r1, #1
 800346c:	438a      	bics	r2, r1
 800346e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	0018      	movs	r0, r3
 8003474:	f000 fc66 	bl	8003d44 <UART_SetConfig>
 8003478:	0003      	movs	r3, r0
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e024      	b.n	80034cc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	0018      	movs	r0, r3
 800348e:	f000 fdfd 	bl	800408c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	490d      	ldr	r1, [pc, #52]	; (80034d4 <HAL_UART_Init+0xa8>)
 800349e:	400a      	ands	r2, r1
 80034a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	212a      	movs	r1, #42	; 0x2a
 80034ae:	438a      	bics	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2101      	movs	r1, #1
 80034be:	430a      	orrs	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	0018      	movs	r0, r3
 80034c6:	f000 fe95 	bl	80041f4 <UART_CheckIdleState>
 80034ca:	0003      	movs	r3, r0
}
 80034cc:	0018      	movs	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b002      	add	sp, #8
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	ffffb7ff 	.word	0xffffb7ff

080034d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	; 0x28
 80034dc:	af02      	add	r7, sp, #8
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	1dbb      	adds	r3, r7, #6
 80034e6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2288      	movs	r2, #136	; 0x88
 80034ec:	589b      	ldr	r3, [r3, r2]
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d000      	beq.n	80034f4 <HAL_UART_Transmit+0x1c>
 80034f2:	e088      	b.n	8003606 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_UART_Transmit+0x2a>
 80034fa:	1dbb      	adds	r3, r7, #6
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e080      	b.n	8003608 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	2380      	movs	r3, #128	; 0x80
 800350c:	015b      	lsls	r3, r3, #5
 800350e:	429a      	cmp	r2, r3
 8003510:	d109      	bne.n	8003526 <HAL_UART_Transmit+0x4e>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d105      	bne.n	8003526 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2201      	movs	r2, #1
 800351e:	4013      	ands	r3, r2
 8003520:	d001      	beq.n	8003526 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e070      	b.n	8003608 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2290      	movs	r2, #144	; 0x90
 800352a:	2100      	movs	r1, #0
 800352c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2288      	movs	r2, #136	; 0x88
 8003532:	2121      	movs	r1, #33	; 0x21
 8003534:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003536:	f7fd fdb3 	bl	80010a0 <HAL_GetTick>
 800353a:	0003      	movs	r3, r0
 800353c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1dba      	adds	r2, r7, #6
 8003542:	2154      	movs	r1, #84	; 0x54
 8003544:	8812      	ldrh	r2, [r2, #0]
 8003546:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	1dba      	adds	r2, r7, #6
 800354c:	2156      	movs	r1, #86	; 0x56
 800354e:	8812      	ldrh	r2, [r2, #0]
 8003550:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	015b      	lsls	r3, r3, #5
 800355a:	429a      	cmp	r2, r3
 800355c:	d108      	bne.n	8003570 <HAL_UART_Transmit+0x98>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d104      	bne.n	8003570 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	e003      	b.n	8003578 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003574:	2300      	movs	r3, #0
 8003576:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003578:	e02c      	b.n	80035d4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	0013      	movs	r3, r2
 8003584:	2200      	movs	r2, #0
 8003586:	2180      	movs	r1, #128	; 0x80
 8003588:	f000 fe82 	bl	8004290 <UART_WaitOnFlagUntilTimeout>
 800358c:	1e03      	subs	r3, r0, #0
 800358e:	d001      	beq.n	8003594 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e039      	b.n	8003608 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10b      	bne.n	80035b2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	001a      	movs	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	05d2      	lsls	r2, r2, #23
 80035a6:	0dd2      	lsrs	r2, r2, #23
 80035a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	3302      	adds	r3, #2
 80035ae:	61bb      	str	r3, [r7, #24]
 80035b0:	e007      	b.n	80035c2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	3301      	adds	r3, #1
 80035c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2256      	movs	r2, #86	; 0x56
 80035c6:	5a9b      	ldrh	r3, [r3, r2]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b299      	uxth	r1, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2256      	movs	r2, #86	; 0x56
 80035d2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2256      	movs	r2, #86	; 0x56
 80035d8:	5a9b      	ldrh	r3, [r3, r2]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1cc      	bne.n	800357a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	0013      	movs	r3, r2
 80035ea:	2200      	movs	r2, #0
 80035ec:	2140      	movs	r1, #64	; 0x40
 80035ee:	f000 fe4f 	bl	8004290 <UART_WaitOnFlagUntilTimeout>
 80035f2:	1e03      	subs	r3, r0, #0
 80035f4:	d001      	beq.n	80035fa <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e006      	b.n	8003608 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2288      	movs	r2, #136	; 0x88
 80035fe:	2120      	movs	r1, #32
 8003600:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	e000      	b.n	8003608 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003606:	2302      	movs	r3, #2
  }
}
 8003608:	0018      	movs	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	b008      	add	sp, #32
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	1dbb      	adds	r3, r7, #6
 800361c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	228c      	movs	r2, #140	; 0x8c
 8003622:	589b      	ldr	r3, [r3, r2]
 8003624:	2b20      	cmp	r3, #32
 8003626:	d145      	bne.n	80036b4 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_UART_Receive_IT+0x26>
 800362e:	1dbb      	adds	r3, r7, #6
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e03d      	b.n	80036b6 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	2380      	movs	r3, #128	; 0x80
 8003640:	015b      	lsls	r3, r3, #5
 8003642:	429a      	cmp	r2, r3
 8003644:	d109      	bne.n	800365a <HAL_UART_Receive_IT+0x4a>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d105      	bne.n	800365a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2201      	movs	r2, #1
 8003652:	4013      	ands	r3, r2
 8003654:	d001      	beq.n	800365a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e02d      	b.n	80036b6 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	041b      	lsls	r3, r3, #16
 800366a:	4013      	ands	r3, r2
 800366c:	d019      	beq.n	80036a2 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800366e:	f3ef 8310 	mrs	r3, PRIMASK
 8003672:	613b      	str	r3, [r7, #16]
  return(result);
 8003674:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003676:	61fb      	str	r3, [r7, #28]
 8003678:	2301      	movs	r3, #1
 800367a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f383 8810 	msr	PRIMASK, r3
}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2180      	movs	r1, #128	; 0x80
 8003690:	04c9      	lsls	r1, r1, #19
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f383 8810 	msr	PRIMASK, r3
}
 80036a0:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	881a      	ldrh	r2, [r3, #0]
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	0018      	movs	r0, r3
 80036ac:	f000 feb8 	bl	8004420 <UART_Start_Receive_IT>
 80036b0:	0003      	movs	r3, r0
 80036b2:	e000      	b.n	80036b6 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80036b4:	2302      	movs	r3, #2
  }
}
 80036b6:	0018      	movs	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b008      	add	sp, #32
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036c0:	b5b0      	push	{r4, r5, r7, lr}
 80036c2:	b0aa      	sub	sp, #168	; 0xa8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	22a4      	movs	r2, #164	; 0xa4
 80036d0:	18b9      	adds	r1, r7, r2
 80036d2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	20a0      	movs	r0, #160	; 0xa0
 80036dc:	1839      	adds	r1, r7, r0
 80036de:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	249c      	movs	r4, #156	; 0x9c
 80036e8:	1939      	adds	r1, r7, r4
 80036ea:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036ec:	0011      	movs	r1, r2
 80036ee:	18bb      	adds	r3, r7, r2
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4aa2      	ldr	r2, [pc, #648]	; (800397c <HAL_UART_IRQHandler+0x2bc>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	2298      	movs	r2, #152	; 0x98
 80036f8:	18bd      	adds	r5, r7, r2
 80036fa:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80036fc:	18bb      	adds	r3, r7, r2
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d11a      	bne.n	800373a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003704:	187b      	adds	r3, r7, r1
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2220      	movs	r2, #32
 800370a:	4013      	ands	r3, r2
 800370c:	d015      	beq.n	800373a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800370e:	183b      	adds	r3, r7, r0
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2220      	movs	r2, #32
 8003714:	4013      	ands	r3, r2
 8003716:	d105      	bne.n	8003724 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003718:	193b      	adds	r3, r7, r4
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	055b      	lsls	r3, r3, #21
 8003720:	4013      	ands	r3, r2
 8003722:	d00a      	beq.n	800373a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003728:	2b00      	cmp	r3, #0
 800372a:	d100      	bne.n	800372e <HAL_UART_IRQHandler+0x6e>
 800372c:	e2dc      	b.n	8003ce8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	0010      	movs	r0, r2
 8003736:	4798      	blx	r3
      }
      return;
 8003738:	e2d6      	b.n	8003ce8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800373a:	2398      	movs	r3, #152	; 0x98
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d100      	bne.n	8003746 <HAL_UART_IRQHandler+0x86>
 8003744:	e122      	b.n	800398c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003746:	239c      	movs	r3, #156	; 0x9c
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a8c      	ldr	r2, [pc, #560]	; (8003980 <HAL_UART_IRQHandler+0x2c0>)
 800374e:	4013      	ands	r3, r2
 8003750:	d106      	bne.n	8003760 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003752:	23a0      	movs	r3, #160	; 0xa0
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a8a      	ldr	r2, [pc, #552]	; (8003984 <HAL_UART_IRQHandler+0x2c4>)
 800375a:	4013      	ands	r3, r2
 800375c:	d100      	bne.n	8003760 <HAL_UART_IRQHandler+0xa0>
 800375e:	e115      	b.n	800398c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003760:	23a4      	movs	r3, #164	; 0xa4
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2201      	movs	r2, #1
 8003768:	4013      	ands	r3, r2
 800376a:	d012      	beq.n	8003792 <HAL_UART_IRQHandler+0xd2>
 800376c:	23a0      	movs	r3, #160	; 0xa0
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4013      	ands	r3, r2
 8003778:	d00b      	beq.n	8003792 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2201      	movs	r2, #1
 8003780:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2290      	movs	r2, #144	; 0x90
 8003786:	589b      	ldr	r3, [r3, r2]
 8003788:	2201      	movs	r2, #1
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2190      	movs	r1, #144	; 0x90
 8003790:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003792:	23a4      	movs	r3, #164	; 0xa4
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2202      	movs	r2, #2
 800379a:	4013      	ands	r3, r2
 800379c:	d011      	beq.n	80037c2 <HAL_UART_IRQHandler+0x102>
 800379e:	239c      	movs	r3, #156	; 0x9c
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2201      	movs	r2, #1
 80037a6:	4013      	ands	r3, r2
 80037a8:	d00b      	beq.n	80037c2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2202      	movs	r2, #2
 80037b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2290      	movs	r2, #144	; 0x90
 80037b6:	589b      	ldr	r3, [r3, r2]
 80037b8:	2204      	movs	r2, #4
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2190      	movs	r1, #144	; 0x90
 80037c0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037c2:	23a4      	movs	r3, #164	; 0xa4
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2204      	movs	r2, #4
 80037ca:	4013      	ands	r3, r2
 80037cc:	d011      	beq.n	80037f2 <HAL_UART_IRQHandler+0x132>
 80037ce:	239c      	movs	r3, #156	; 0x9c
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2201      	movs	r2, #1
 80037d6:	4013      	ands	r3, r2
 80037d8:	d00b      	beq.n	80037f2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2204      	movs	r2, #4
 80037e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2290      	movs	r2, #144	; 0x90
 80037e6:	589b      	ldr	r3, [r3, r2]
 80037e8:	2202      	movs	r2, #2
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2190      	movs	r1, #144	; 0x90
 80037f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037f2:	23a4      	movs	r3, #164	; 0xa4
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2208      	movs	r2, #8
 80037fa:	4013      	ands	r3, r2
 80037fc:	d017      	beq.n	800382e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80037fe:	23a0      	movs	r3, #160	; 0xa0
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2220      	movs	r2, #32
 8003806:	4013      	ands	r3, r2
 8003808:	d105      	bne.n	8003816 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800380a:	239c      	movs	r3, #156	; 0x9c
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a5b      	ldr	r2, [pc, #364]	; (8003980 <HAL_UART_IRQHandler+0x2c0>)
 8003812:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003814:	d00b      	beq.n	800382e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2208      	movs	r2, #8
 800381c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2290      	movs	r2, #144	; 0x90
 8003822:	589b      	ldr	r3, [r3, r2]
 8003824:	2208      	movs	r2, #8
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2190      	movs	r1, #144	; 0x90
 800382c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800382e:	23a4      	movs	r3, #164	; 0xa4
 8003830:	18fb      	adds	r3, r7, r3
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	4013      	ands	r3, r2
 800383a:	d013      	beq.n	8003864 <HAL_UART_IRQHandler+0x1a4>
 800383c:	23a0      	movs	r3, #160	; 0xa0
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	04db      	lsls	r3, r3, #19
 8003846:	4013      	ands	r3, r2
 8003848:	d00c      	beq.n	8003864 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2280      	movs	r2, #128	; 0x80
 8003850:	0112      	lsls	r2, r2, #4
 8003852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2290      	movs	r2, #144	; 0x90
 8003858:	589b      	ldr	r3, [r3, r2]
 800385a:	2220      	movs	r2, #32
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2190      	movs	r1, #144	; 0x90
 8003862:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2290      	movs	r2, #144	; 0x90
 8003868:	589b      	ldr	r3, [r3, r2]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d100      	bne.n	8003870 <HAL_UART_IRQHandler+0x1b0>
 800386e:	e23d      	b.n	8003cec <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003870:	23a4      	movs	r3, #164	; 0xa4
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2220      	movs	r2, #32
 8003878:	4013      	ands	r3, r2
 800387a:	d015      	beq.n	80038a8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800387c:	23a0      	movs	r3, #160	; 0xa0
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2220      	movs	r2, #32
 8003884:	4013      	ands	r3, r2
 8003886:	d106      	bne.n	8003896 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003888:	239c      	movs	r3, #156	; 0x9c
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	055b      	lsls	r3, r3, #21
 8003892:	4013      	ands	r3, r2
 8003894:	d008      	beq.n	80038a8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389a:	2b00      	cmp	r3, #0
 800389c:	d004      	beq.n	80038a8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	0010      	movs	r0, r2
 80038a6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2290      	movs	r2, #144	; 0x90
 80038ac:	589b      	ldr	r3, [r3, r2]
 80038ae:	2194      	movs	r1, #148	; 0x94
 80038b0:	187a      	adds	r2, r7, r1
 80038b2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2240      	movs	r2, #64	; 0x40
 80038bc:	4013      	ands	r3, r2
 80038be:	2b40      	cmp	r3, #64	; 0x40
 80038c0:	d004      	beq.n	80038cc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038c2:	187b      	adds	r3, r7, r1
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2228      	movs	r2, #40	; 0x28
 80038c8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038ca:	d04c      	beq.n	8003966 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	0018      	movs	r0, r3
 80038d0:	f000 feca 	bl	8004668 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2240      	movs	r2, #64	; 0x40
 80038dc:	4013      	ands	r3, r2
 80038de:	2b40      	cmp	r3, #64	; 0x40
 80038e0:	d13c      	bne.n	800395c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e2:	f3ef 8310 	mrs	r3, PRIMASK
 80038e6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80038e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ea:	2090      	movs	r0, #144	; 0x90
 80038ec:	183a      	adds	r2, r7, r0
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	2301      	movs	r3, #1
 80038f2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038f6:	f383 8810 	msr	PRIMASK, r3
}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2140      	movs	r1, #64	; 0x40
 8003908:	438a      	bics	r2, r1
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	183b      	adds	r3, r7, r0
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003914:	f383 8810 	msr	PRIMASK, r3
}
 8003918:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2280      	movs	r2, #128	; 0x80
 800391e:	589b      	ldr	r3, [r3, r2]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d016      	beq.n	8003952 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2280      	movs	r2, #128	; 0x80
 8003928:	589b      	ldr	r3, [r3, r2]
 800392a:	4a17      	ldr	r2, [pc, #92]	; (8003988 <HAL_UART_IRQHandler+0x2c8>)
 800392c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2280      	movs	r2, #128	; 0x80
 8003932:	589b      	ldr	r3, [r3, r2]
 8003934:	0018      	movs	r0, r3
 8003936:	f7fe fc37 	bl	80021a8 <HAL_DMA_Abort_IT>
 800393a:	1e03      	subs	r3, r0, #0
 800393c:	d01c      	beq.n	8003978 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	589b      	ldr	r3, [r3, r2]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	2180      	movs	r1, #128	; 0x80
 800394a:	5852      	ldr	r2, [r2, r1]
 800394c:	0010      	movs	r0, r2
 800394e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003950:	e012      	b.n	8003978 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	0018      	movs	r0, r3
 8003956:	f000 f9e1 	bl	8003d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800395a:	e00d      	b.n	8003978 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	0018      	movs	r0, r3
 8003960:	f000 f9dc 	bl	8003d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003964:	e008      	b.n	8003978 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	0018      	movs	r0, r3
 800396a:	f000 f9d7 	bl	8003d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2290      	movs	r2, #144	; 0x90
 8003972:	2100      	movs	r1, #0
 8003974:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003976:	e1b9      	b.n	8003cec <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003978:	46c0      	nop			; (mov r8, r8)
    return;
 800397a:	e1b7      	b.n	8003cec <HAL_UART_IRQHandler+0x62c>
 800397c:	0000080f 	.word	0x0000080f
 8003980:	10000001 	.word	0x10000001
 8003984:	04000120 	.word	0x04000120
 8003988:	08004735 	.word	0x08004735

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003990:	2b01      	cmp	r3, #1
 8003992:	d000      	beq.n	8003996 <HAL_UART_IRQHandler+0x2d6>
 8003994:	e13e      	b.n	8003c14 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003996:	23a4      	movs	r3, #164	; 0xa4
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2210      	movs	r2, #16
 800399e:	4013      	ands	r3, r2
 80039a0:	d100      	bne.n	80039a4 <HAL_UART_IRQHandler+0x2e4>
 80039a2:	e137      	b.n	8003c14 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80039a4:	23a0      	movs	r3, #160	; 0xa0
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2210      	movs	r2, #16
 80039ac:	4013      	ands	r3, r2
 80039ae:	d100      	bne.n	80039b2 <HAL_UART_IRQHandler+0x2f2>
 80039b0:	e130      	b.n	8003c14 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2210      	movs	r2, #16
 80039b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2240      	movs	r2, #64	; 0x40
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d000      	beq.n	80039ca <HAL_UART_IRQHandler+0x30a>
 80039c8:	e0a4      	b.n	8003b14 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2280      	movs	r2, #128	; 0x80
 80039ce:	589b      	ldr	r3, [r3, r2]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	217e      	movs	r1, #126	; 0x7e
 80039d6:	187b      	adds	r3, r7, r1
 80039d8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80039da:	187b      	adds	r3, r7, r1
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d100      	bne.n	80039e4 <HAL_UART_IRQHandler+0x324>
 80039e2:	e185      	b.n	8003cf0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	225c      	movs	r2, #92	; 0x5c
 80039e8:	5a9b      	ldrh	r3, [r3, r2]
 80039ea:	187a      	adds	r2, r7, r1
 80039ec:	8812      	ldrh	r2, [r2, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d300      	bcc.n	80039f4 <HAL_UART_IRQHandler+0x334>
 80039f2:	e17d      	b.n	8003cf0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	187a      	adds	r2, r7, r1
 80039f8:	215e      	movs	r1, #94	; 0x5e
 80039fa:	8812      	ldrh	r2, [r2, #0]
 80039fc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2280      	movs	r2, #128	; 0x80
 8003a02:	589b      	ldr	r3, [r3, r2]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d170      	bne.n	8003af0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a12:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a16:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a18:	2301      	movs	r3, #1
 8003a1a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a1e:	f383 8810 	msr	PRIMASK, r3
}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	49b4      	ldr	r1, [pc, #720]	; (8003d00 <HAL_UART_IRQHandler+0x640>)
 8003a30:	400a      	ands	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a36:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3a:	f383 8810 	msr	PRIMASK, r3
}
 8003a3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a40:	f3ef 8310 	mrs	r3, PRIMASK
 8003a44:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a48:	677b      	str	r3, [r7, #116]	; 0x74
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a50:	f383 8810 	msr	PRIMASK, r3
}
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2101      	movs	r1, #1
 8003a62:	438a      	bics	r2, r1
 8003a64:	609a      	str	r2, [r3, #8]
 8003a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a68:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a6c:	f383 8810 	msr	PRIMASK, r3
}
 8003a70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a72:	f3ef 8310 	mrs	r3, PRIMASK
 8003a76:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7a:	673b      	str	r3, [r7, #112]	; 0x70
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a82:	f383 8810 	msr	PRIMASK, r3
}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2140      	movs	r1, #64	; 0x40
 8003a94:	438a      	bics	r2, r1
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a9a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a9e:	f383 8810 	msr	PRIMASK, r3
}
 8003aa2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	228c      	movs	r2, #140	; 0x8c
 8003aa8:	2120      	movs	r1, #32
 8003aaa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003abc:	2301      	movs	r3, #1
 8003abe:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ac2:	f383 8810 	msr	PRIMASK, r3
}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2110      	movs	r1, #16
 8003ad4:	438a      	bics	r2, r1
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ada:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ade:	f383 8810 	msr	PRIMASK, r3
}
 8003ae2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2280      	movs	r2, #128	; 0x80
 8003ae8:	589b      	ldr	r3, [r3, r2]
 8003aea:	0018      	movs	r0, r3
 8003aec:	f7fe fafa 	bl	80020e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	225c      	movs	r2, #92	; 0x5c
 8003afa:	5a9a      	ldrh	r2, [r3, r2]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	215e      	movs	r1, #94	; 0x5e
 8003b00:	5a5b      	ldrh	r3, [r3, r1]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	0011      	movs	r1, r2
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f000 f90d 	bl	8003d2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b12:	e0ed      	b.n	8003cf0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	225c      	movs	r2, #92	; 0x5c
 8003b18:	5a99      	ldrh	r1, [r3, r2]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	225e      	movs	r2, #94	; 0x5e
 8003b1e:	5a9b      	ldrh	r3, [r3, r2]
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	208e      	movs	r0, #142	; 0x8e
 8003b24:	183b      	adds	r3, r7, r0
 8003b26:	1a8a      	subs	r2, r1, r2
 8003b28:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	225e      	movs	r2, #94	; 0x5e
 8003b2e:	5a9b      	ldrh	r3, [r3, r2]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d100      	bne.n	8003b38 <HAL_UART_IRQHandler+0x478>
 8003b36:	e0dd      	b.n	8003cf4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003b38:	183b      	adds	r3, r7, r0
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d100      	bne.n	8003b42 <HAL_UART_IRQHandler+0x482>
 8003b40:	e0d8      	b.n	8003cf4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b42:	f3ef 8310 	mrs	r3, PRIMASK
 8003b46:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b48:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b4a:	2488      	movs	r4, #136	; 0x88
 8003b4c:	193a      	adds	r2, r7, r4
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	2301      	movs	r3, #1
 8003b52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f383 8810 	msr	PRIMASK, r3
}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4967      	ldr	r1, [pc, #412]	; (8003d04 <HAL_UART_IRQHandler+0x644>)
 8003b68:	400a      	ands	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	193b      	adds	r3, r7, r4
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f383 8810 	msr	PRIMASK, r3
}
 8003b78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b80:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b82:	2484      	movs	r4, #132	; 0x84
 8003b84:	193a      	adds	r2, r7, r4
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	2301      	movs	r3, #1
 8003b8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f383 8810 	msr	PRIMASK, r3
}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	495a      	ldr	r1, [pc, #360]	; (8003d08 <HAL_UART_IRQHandler+0x648>)
 8003ba0:	400a      	ands	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	193b      	adds	r3, r7, r4
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	f383 8810 	msr	PRIMASK, r3
}
 8003bb0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	228c      	movs	r2, #140	; 0x8c
 8003bb6:	2120      	movs	r1, #32
 8003bb8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bce:	2480      	movs	r4, #128	; 0x80
 8003bd0:	193a      	adds	r2, r7, r4
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bda:	f383 8810 	msr	PRIMASK, r3
}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2110      	movs	r1, #16
 8003bec:	438a      	bics	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	193b      	adds	r3, r7, r4
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	f383 8810 	msr	PRIMASK, r3
}
 8003bfc:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2202      	movs	r2, #2
 8003c02:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c04:	183b      	adds	r3, r7, r0
 8003c06:	881a      	ldrh	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	0011      	movs	r1, r2
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f000 f88d 	bl	8003d2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c12:	e06f      	b.n	8003cf4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c14:	23a4      	movs	r3, #164	; 0xa4
 8003c16:	18fb      	adds	r3, r7, r3
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	2380      	movs	r3, #128	; 0x80
 8003c1c:	035b      	lsls	r3, r3, #13
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d010      	beq.n	8003c44 <HAL_UART_IRQHandler+0x584>
 8003c22:	239c      	movs	r3, #156	; 0x9c
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	03db      	lsls	r3, r3, #15
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d009      	beq.n	8003c44 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2280      	movs	r2, #128	; 0x80
 8003c36:	0352      	lsls	r2, r2, #13
 8003c38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f001 fa1d 	bl	800507c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c42:	e05a      	b.n	8003cfa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003c44:	23a4      	movs	r3, #164	; 0xa4
 8003c46:	18fb      	adds	r3, r7, r3
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2280      	movs	r2, #128	; 0x80
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d016      	beq.n	8003c7e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003c50:	23a0      	movs	r3, #160	; 0xa0
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2280      	movs	r2, #128	; 0x80
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d106      	bne.n	8003c6a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003c5c:	239c      	movs	r3, #156	; 0x9c
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	2380      	movs	r3, #128	; 0x80
 8003c64:	041b      	lsls	r3, r3, #16
 8003c66:	4013      	ands	r3, r2
 8003c68:	d009      	beq.n	8003c7e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d042      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	0010      	movs	r0, r2
 8003c7a:	4798      	blx	r3
    }
    return;
 8003c7c:	e03c      	b.n	8003cf8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c7e:	23a4      	movs	r3, #164	; 0xa4
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2240      	movs	r2, #64	; 0x40
 8003c86:	4013      	ands	r3, r2
 8003c88:	d00a      	beq.n	8003ca0 <HAL_UART_IRQHandler+0x5e0>
 8003c8a:	23a0      	movs	r3, #160	; 0xa0
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2240      	movs	r2, #64	; 0x40
 8003c92:	4013      	ands	r3, r2
 8003c94:	d004      	beq.n	8003ca0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f000 fd62 	bl	8004762 <UART_EndTransmit_IT>
    return;
 8003c9e:	e02c      	b.n	8003cfa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003ca0:	23a4      	movs	r3, #164	; 0xa4
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	2380      	movs	r3, #128	; 0x80
 8003ca8:	041b      	lsls	r3, r3, #16
 8003caa:	4013      	ands	r3, r2
 8003cac:	d00b      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x606>
 8003cae:	23a0      	movs	r3, #160	; 0xa0
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	05db      	lsls	r3, r3, #23
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d004      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f001 f9ec 	bl	800509c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cc4:	e019      	b.n	8003cfa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003cc6:	23a4      	movs	r3, #164	; 0xa4
 8003cc8:	18fb      	adds	r3, r7, r3
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	2380      	movs	r3, #128	; 0x80
 8003cce:	045b      	lsls	r3, r3, #17
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d012      	beq.n	8003cfa <HAL_UART_IRQHandler+0x63a>
 8003cd4:	23a0      	movs	r3, #160	; 0xa0
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	da0d      	bge.n	8003cfa <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f001 f9d3 	bl	800508c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ce6:	e008      	b.n	8003cfa <HAL_UART_IRQHandler+0x63a>
      return;
 8003ce8:	46c0      	nop			; (mov r8, r8)
 8003cea:	e006      	b.n	8003cfa <HAL_UART_IRQHandler+0x63a>
    return;
 8003cec:	46c0      	nop			; (mov r8, r8)
 8003cee:	e004      	b.n	8003cfa <HAL_UART_IRQHandler+0x63a>
      return;
 8003cf0:	46c0      	nop			; (mov r8, r8)
 8003cf2:	e002      	b.n	8003cfa <HAL_UART_IRQHandler+0x63a>
      return;
 8003cf4:	46c0      	nop			; (mov r8, r8)
 8003cf6:	e000      	b.n	8003cfa <HAL_UART_IRQHandler+0x63a>
    return;
 8003cf8:	46c0      	nop			; (mov r8, r8)
  }
}
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b02a      	add	sp, #168	; 0xa8
 8003cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8003d00:	fffffeff 	.word	0xfffffeff
 8003d04:	fffffedf 	.word	0xfffffedf
 8003d08:	effffffe 	.word	0xeffffffe

08003d0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b002      	add	sp, #8
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d24:	46c0      	nop			; (mov r8, r8)
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b002      	add	sp, #8
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	000a      	movs	r2, r1
 8003d36:	1cbb      	adds	r3, r7, #2
 8003d38:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b002      	add	sp, #8
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d4c:	231a      	movs	r3, #26
 8003d4e:	18fb      	adds	r3, r7, r3
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4abc      	ldr	r2, [pc, #752]	; (8004064 <UART_SetConfig+0x320>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	0019      	movs	r1, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	4ab7      	ldr	r2, [pc, #732]	; (8004068 <UART_SetConfig+0x324>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4aae      	ldr	r2, [pc, #696]	; (800406c <UART_SetConfig+0x328>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	0019      	movs	r1, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	220f      	movs	r2, #15
 8003dc8:	4393      	bics	r3, r2
 8003dca:	0019      	movs	r1, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4aa4      	ldr	r2, [pc, #656]	; (8004070 <UART_SetConfig+0x32c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d127      	bne.n	8003e32 <UART_SetConfig+0xee>
 8003de2:	4ba4      	ldr	r3, [pc, #656]	; (8004074 <UART_SetConfig+0x330>)
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	2203      	movs	r2, #3
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d017      	beq.n	8003e1e <UART_SetConfig+0xda>
 8003dee:	d81b      	bhi.n	8003e28 <UART_SetConfig+0xe4>
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d00a      	beq.n	8003e0a <UART_SetConfig+0xc6>
 8003df4:	d818      	bhi.n	8003e28 <UART_SetConfig+0xe4>
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <UART_SetConfig+0xbc>
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d00a      	beq.n	8003e14 <UART_SetConfig+0xd0>
 8003dfe:	e013      	b.n	8003e28 <UART_SetConfig+0xe4>
 8003e00:	231b      	movs	r3, #27
 8003e02:	18fb      	adds	r3, r7, r3
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]
 8003e08:	e058      	b.n	8003ebc <UART_SetConfig+0x178>
 8003e0a:	231b      	movs	r3, #27
 8003e0c:	18fb      	adds	r3, r7, r3
 8003e0e:	2202      	movs	r2, #2
 8003e10:	701a      	strb	r2, [r3, #0]
 8003e12:	e053      	b.n	8003ebc <UART_SetConfig+0x178>
 8003e14:	231b      	movs	r3, #27
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	2204      	movs	r2, #4
 8003e1a:	701a      	strb	r2, [r3, #0]
 8003e1c:	e04e      	b.n	8003ebc <UART_SetConfig+0x178>
 8003e1e:	231b      	movs	r3, #27
 8003e20:	18fb      	adds	r3, r7, r3
 8003e22:	2208      	movs	r2, #8
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	e049      	b.n	8003ebc <UART_SetConfig+0x178>
 8003e28:	231b      	movs	r3, #27
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2210      	movs	r2, #16
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e044      	b.n	8003ebc <UART_SetConfig+0x178>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a90      	ldr	r2, [pc, #576]	; (8004078 <UART_SetConfig+0x334>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d127      	bne.n	8003e8c <UART_SetConfig+0x148>
 8003e3c:	4b8d      	ldr	r3, [pc, #564]	; (8004074 <UART_SetConfig+0x330>)
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e40:	220c      	movs	r2, #12
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b0c      	cmp	r3, #12
 8003e46:	d017      	beq.n	8003e78 <UART_SetConfig+0x134>
 8003e48:	d81b      	bhi.n	8003e82 <UART_SetConfig+0x13e>
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d00a      	beq.n	8003e64 <UART_SetConfig+0x120>
 8003e4e:	d818      	bhi.n	8003e82 <UART_SetConfig+0x13e>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <UART_SetConfig+0x116>
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d00a      	beq.n	8003e6e <UART_SetConfig+0x12a>
 8003e58:	e013      	b.n	8003e82 <UART_SetConfig+0x13e>
 8003e5a:	231b      	movs	r3, #27
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]
 8003e62:	e02b      	b.n	8003ebc <UART_SetConfig+0x178>
 8003e64:	231b      	movs	r3, #27
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	2202      	movs	r2, #2
 8003e6a:	701a      	strb	r2, [r3, #0]
 8003e6c:	e026      	b.n	8003ebc <UART_SetConfig+0x178>
 8003e6e:	231b      	movs	r3, #27
 8003e70:	18fb      	adds	r3, r7, r3
 8003e72:	2204      	movs	r2, #4
 8003e74:	701a      	strb	r2, [r3, #0]
 8003e76:	e021      	b.n	8003ebc <UART_SetConfig+0x178>
 8003e78:	231b      	movs	r3, #27
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e01c      	b.n	8003ebc <UART_SetConfig+0x178>
 8003e82:	231b      	movs	r3, #27
 8003e84:	18fb      	adds	r3, r7, r3
 8003e86:	2210      	movs	r2, #16
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	e017      	b.n	8003ebc <UART_SetConfig+0x178>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a7a      	ldr	r2, [pc, #488]	; (800407c <UART_SetConfig+0x338>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d104      	bne.n	8003ea0 <UART_SetConfig+0x15c>
 8003e96:	231b      	movs	r3, #27
 8003e98:	18fb      	adds	r3, r7, r3
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	e00d      	b.n	8003ebc <UART_SetConfig+0x178>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a76      	ldr	r2, [pc, #472]	; (8004080 <UART_SetConfig+0x33c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d104      	bne.n	8003eb4 <UART_SetConfig+0x170>
 8003eaa:	231b      	movs	r3, #27
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	e003      	b.n	8003ebc <UART_SetConfig+0x178>
 8003eb4:	231b      	movs	r3, #27
 8003eb6:	18fb      	adds	r3, r7, r3
 8003eb8:	2210      	movs	r2, #16
 8003eba:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d000      	beq.n	8003eca <UART_SetConfig+0x186>
 8003ec8:	e065      	b.n	8003f96 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8003eca:	231b      	movs	r3, #27
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d015      	beq.n	8003f00 <UART_SetConfig+0x1bc>
 8003ed4:	dc18      	bgt.n	8003f08 <UART_SetConfig+0x1c4>
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d00d      	beq.n	8003ef6 <UART_SetConfig+0x1b2>
 8003eda:	dc15      	bgt.n	8003f08 <UART_SetConfig+0x1c4>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <UART_SetConfig+0x1a2>
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d005      	beq.n	8003ef0 <UART_SetConfig+0x1ac>
 8003ee4:	e010      	b.n	8003f08 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee6:	f7ff f83b 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
 8003eea:	0003      	movs	r3, r0
 8003eec:	617b      	str	r3, [r7, #20]
        break;
 8003eee:	e012      	b.n	8003f16 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ef0:	4b64      	ldr	r3, [pc, #400]	; (8004084 <UART_SetConfig+0x340>)
 8003ef2:	617b      	str	r3, [r7, #20]
        break;
 8003ef4:	e00f      	b.n	8003f16 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ef6:	f7fe ffa7 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8003efa:	0003      	movs	r3, r0
 8003efc:	617b      	str	r3, [r7, #20]
        break;
 8003efe:	e00a      	b.n	8003f16 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f00:	2380      	movs	r3, #128	; 0x80
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	617b      	str	r3, [r7, #20]
        break;
 8003f06:	e006      	b.n	8003f16 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f0c:	231a      	movs	r3, #26
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	2201      	movs	r2, #1
 8003f12:	701a      	strb	r2, [r3, #0]
        break;
 8003f14:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d100      	bne.n	8003f1e <UART_SetConfig+0x1da>
 8003f1c:	e08d      	b.n	800403a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f22:	4b59      	ldr	r3, [pc, #356]	; (8004088 <UART_SetConfig+0x344>)
 8003f24:	0052      	lsls	r2, r2, #1
 8003f26:	5ad3      	ldrh	r3, [r2, r3]
 8003f28:	0019      	movs	r1, r3
 8003f2a:	6978      	ldr	r0, [r7, #20]
 8003f2c:	f7fc f8e8 	bl	8000100 <__udivsi3>
 8003f30:	0003      	movs	r3, r0
 8003f32:	005a      	lsls	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	085b      	lsrs	r3, r3, #1
 8003f3a:	18d2      	adds	r2, r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	0019      	movs	r1, r3
 8003f42:	0010      	movs	r0, r2
 8003f44:	f7fc f8dc 	bl	8000100 <__udivsi3>
 8003f48:	0003      	movs	r3, r0
 8003f4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	2b0f      	cmp	r3, #15
 8003f50:	d91c      	bls.n	8003f8c <UART_SetConfig+0x248>
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	2380      	movs	r3, #128	; 0x80
 8003f56:	025b      	lsls	r3, r3, #9
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d217      	bcs.n	8003f8c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	200e      	movs	r0, #14
 8003f62:	183b      	adds	r3, r7, r0
 8003f64:	210f      	movs	r1, #15
 8003f66:	438a      	bics	r2, r1
 8003f68:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	085b      	lsrs	r3, r3, #1
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2207      	movs	r2, #7
 8003f72:	4013      	ands	r3, r2
 8003f74:	b299      	uxth	r1, r3
 8003f76:	183b      	adds	r3, r7, r0
 8003f78:	183a      	adds	r2, r7, r0
 8003f7a:	8812      	ldrh	r2, [r2, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	183a      	adds	r2, r7, r0
 8003f86:	8812      	ldrh	r2, [r2, #0]
 8003f88:	60da      	str	r2, [r3, #12]
 8003f8a:	e056      	b.n	800403a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003f8c:	231a      	movs	r3, #26
 8003f8e:	18fb      	adds	r3, r7, r3
 8003f90:	2201      	movs	r2, #1
 8003f92:	701a      	strb	r2, [r3, #0]
 8003f94:	e051      	b.n	800403a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f96:	231b      	movs	r3, #27
 8003f98:	18fb      	adds	r3, r7, r3
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d015      	beq.n	8003fcc <UART_SetConfig+0x288>
 8003fa0:	dc18      	bgt.n	8003fd4 <UART_SetConfig+0x290>
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d00d      	beq.n	8003fc2 <UART_SetConfig+0x27e>
 8003fa6:	dc15      	bgt.n	8003fd4 <UART_SetConfig+0x290>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <UART_SetConfig+0x26e>
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d005      	beq.n	8003fbc <UART_SetConfig+0x278>
 8003fb0:	e010      	b.n	8003fd4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb2:	f7fe ffd5 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	617b      	str	r3, [r7, #20]
        break;
 8003fba:	e012      	b.n	8003fe2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fbc:	4b31      	ldr	r3, [pc, #196]	; (8004084 <UART_SetConfig+0x340>)
 8003fbe:	617b      	str	r3, [r7, #20]
        break;
 8003fc0:	e00f      	b.n	8003fe2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fc2:	f7fe ff41 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8003fc6:	0003      	movs	r3, r0
 8003fc8:	617b      	str	r3, [r7, #20]
        break;
 8003fca:	e00a      	b.n	8003fe2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	617b      	str	r3, [r7, #20]
        break;
 8003fd2:	e006      	b.n	8003fe2 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003fd8:	231a      	movs	r3, #26
 8003fda:	18fb      	adds	r3, r7, r3
 8003fdc:	2201      	movs	r2, #1
 8003fde:	701a      	strb	r2, [r3, #0]
        break;
 8003fe0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d028      	beq.n	800403a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fec:	4b26      	ldr	r3, [pc, #152]	; (8004088 <UART_SetConfig+0x344>)
 8003fee:	0052      	lsls	r2, r2, #1
 8003ff0:	5ad3      	ldrh	r3, [r2, r3]
 8003ff2:	0019      	movs	r1, r3
 8003ff4:	6978      	ldr	r0, [r7, #20]
 8003ff6:	f7fc f883 	bl	8000100 <__udivsi3>
 8003ffa:	0003      	movs	r3, r0
 8003ffc:	001a      	movs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	18d2      	adds	r2, r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	0019      	movs	r1, r3
 800400c:	0010      	movs	r0, r2
 800400e:	f7fc f877 	bl	8000100 <__udivsi3>
 8004012:	0003      	movs	r3, r0
 8004014:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	2b0f      	cmp	r3, #15
 800401a:	d90a      	bls.n	8004032 <UART_SetConfig+0x2ee>
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	2380      	movs	r3, #128	; 0x80
 8004020:	025b      	lsls	r3, r3, #9
 8004022:	429a      	cmp	r2, r3
 8004024:	d205      	bcs.n	8004032 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	b29a      	uxth	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60da      	str	r2, [r3, #12]
 8004030:	e003      	b.n	800403a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004032:	231a      	movs	r3, #26
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	2201      	movs	r2, #1
 8004038:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	226a      	movs	r2, #106	; 0x6a
 800403e:	2101      	movs	r1, #1
 8004040:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2268      	movs	r2, #104	; 0x68
 8004046:	2101      	movs	r1, #1
 8004048:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004056:	231a      	movs	r3, #26
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	781b      	ldrb	r3, [r3, #0]
}
 800405c:	0018      	movs	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	b008      	add	sp, #32
 8004062:	bd80      	pop	{r7, pc}
 8004064:	cfff69f3 	.word	0xcfff69f3
 8004068:	ffffcfff 	.word	0xffffcfff
 800406c:	11fff4ff 	.word	0x11fff4ff
 8004070:	40013800 	.word	0x40013800
 8004074:	40021000 	.word	0x40021000
 8004078:	40004400 	.word	0x40004400
 800407c:	40004800 	.word	0x40004800
 8004080:	40004c00 	.word	0x40004c00
 8004084:	00f42400 	.word	0x00f42400
 8004088:	080053b0 	.word	0x080053b0

0800408c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	2201      	movs	r2, #1
 800409a:	4013      	ands	r3, r2
 800409c:	d00b      	beq.n	80040b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4a4a      	ldr	r2, [pc, #296]	; (80041d0 <UART_AdvFeatureConfig+0x144>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	0019      	movs	r1, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	2202      	movs	r2, #2
 80040bc:	4013      	ands	r3, r2
 80040be:	d00b      	beq.n	80040d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4a43      	ldr	r2, [pc, #268]	; (80041d4 <UART_AdvFeatureConfig+0x148>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	0019      	movs	r1, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040dc:	2204      	movs	r2, #4
 80040de:	4013      	ands	r3, r2
 80040e0:	d00b      	beq.n	80040fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	4a3b      	ldr	r2, [pc, #236]	; (80041d8 <UART_AdvFeatureConfig+0x14c>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	0019      	movs	r1, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	2208      	movs	r2, #8
 8004100:	4013      	ands	r3, r2
 8004102:	d00b      	beq.n	800411c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4a34      	ldr	r2, [pc, #208]	; (80041dc <UART_AdvFeatureConfig+0x150>)
 800410c:	4013      	ands	r3, r2
 800410e:	0019      	movs	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004120:	2210      	movs	r2, #16
 8004122:	4013      	ands	r3, r2
 8004124:	d00b      	beq.n	800413e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	4a2c      	ldr	r2, [pc, #176]	; (80041e0 <UART_AdvFeatureConfig+0x154>)
 800412e:	4013      	ands	r3, r2
 8004130:	0019      	movs	r1, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	2220      	movs	r2, #32
 8004144:	4013      	ands	r3, r2
 8004146:	d00b      	beq.n	8004160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	4a25      	ldr	r2, [pc, #148]	; (80041e4 <UART_AdvFeatureConfig+0x158>)
 8004150:	4013      	ands	r3, r2
 8004152:	0019      	movs	r1, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004164:	2240      	movs	r2, #64	; 0x40
 8004166:	4013      	ands	r3, r2
 8004168:	d01d      	beq.n	80041a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	4a1d      	ldr	r2, [pc, #116]	; (80041e8 <UART_AdvFeatureConfig+0x15c>)
 8004172:	4013      	ands	r3, r2
 8004174:	0019      	movs	r1, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004186:	2380      	movs	r3, #128	; 0x80
 8004188:	035b      	lsls	r3, r3, #13
 800418a:	429a      	cmp	r2, r3
 800418c:	d10b      	bne.n	80041a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	4a15      	ldr	r2, [pc, #84]	; (80041ec <UART_AdvFeatureConfig+0x160>)
 8004196:	4013      	ands	r3, r2
 8004198:	0019      	movs	r1, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	2280      	movs	r2, #128	; 0x80
 80041ac:	4013      	ands	r3, r2
 80041ae:	d00b      	beq.n	80041c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4a0e      	ldr	r2, [pc, #56]	; (80041f0 <UART_AdvFeatureConfig+0x164>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	0019      	movs	r1, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]
  }
}
 80041c8:	46c0      	nop			; (mov r8, r8)
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b002      	add	sp, #8
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	fffdffff 	.word	0xfffdffff
 80041d4:	fffeffff 	.word	0xfffeffff
 80041d8:	fffbffff 	.word	0xfffbffff
 80041dc:	ffff7fff 	.word	0xffff7fff
 80041e0:	ffffefff 	.word	0xffffefff
 80041e4:	ffffdfff 	.word	0xffffdfff
 80041e8:	ffefffff 	.word	0xffefffff
 80041ec:	ff9fffff 	.word	0xff9fffff
 80041f0:	fff7ffff 	.word	0xfff7ffff

080041f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2290      	movs	r2, #144	; 0x90
 8004200:	2100      	movs	r1, #0
 8004202:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004204:	f7fc ff4c 	bl	80010a0 <HAL_GetTick>
 8004208:	0003      	movs	r3, r0
 800420a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2208      	movs	r2, #8
 8004214:	4013      	ands	r3, r2
 8004216:	2b08      	cmp	r3, #8
 8004218:	d10c      	bne.n	8004234 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2280      	movs	r2, #128	; 0x80
 800421e:	0391      	lsls	r1, r2, #14
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	4a1a      	ldr	r2, [pc, #104]	; (800428c <UART_CheckIdleState+0x98>)
 8004224:	9200      	str	r2, [sp, #0]
 8004226:	2200      	movs	r2, #0
 8004228:	f000 f832 	bl	8004290 <UART_WaitOnFlagUntilTimeout>
 800422c:	1e03      	subs	r3, r0, #0
 800422e:	d001      	beq.n	8004234 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e026      	b.n	8004282 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2204      	movs	r2, #4
 800423c:	4013      	ands	r3, r2
 800423e:	2b04      	cmp	r3, #4
 8004240:	d10c      	bne.n	800425c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2280      	movs	r2, #128	; 0x80
 8004246:	03d1      	lsls	r1, r2, #15
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4a10      	ldr	r2, [pc, #64]	; (800428c <UART_CheckIdleState+0x98>)
 800424c:	9200      	str	r2, [sp, #0]
 800424e:	2200      	movs	r2, #0
 8004250:	f000 f81e 	bl	8004290 <UART_WaitOnFlagUntilTimeout>
 8004254:	1e03      	subs	r3, r0, #0
 8004256:	d001      	beq.n	800425c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e012      	b.n	8004282 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2288      	movs	r2, #136	; 0x88
 8004260:	2120      	movs	r1, #32
 8004262:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	228c      	movs	r2, #140	; 0x8c
 8004268:	2120      	movs	r1, #32
 800426a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2284      	movs	r2, #132	; 0x84
 800427c:	2100      	movs	r1, #0
 800427e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	0018      	movs	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	b004      	add	sp, #16
 8004288:	bd80      	pop	{r7, pc}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	01ffffff 	.word	0x01ffffff

08004290 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b094      	sub	sp, #80	; 0x50
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	1dfb      	adds	r3, r7, #7
 800429e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042a0:	e0a7      	b.n	80043f2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042a4:	3301      	adds	r3, #1
 80042a6:	d100      	bne.n	80042aa <UART_WaitOnFlagUntilTimeout+0x1a>
 80042a8:	e0a3      	b.n	80043f2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042aa:	f7fc fef9 	bl	80010a0 <HAL_GetTick>
 80042ae:	0002      	movs	r2, r0
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d302      	bcc.n	80042c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80042ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d13f      	bne.n	8004340 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c0:	f3ef 8310 	mrs	r3, PRIMASK
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80042c8:	647b      	str	r3, [r7, #68]	; 0x44
 80042ca:	2301      	movs	r3, #1
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d0:	f383 8810 	msr	PRIMASK, r3
}
 80042d4:	46c0      	nop			; (mov r8, r8)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	494e      	ldr	r1, [pc, #312]	; (800441c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80042e2:	400a      	ands	r2, r1
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	f383 8810 	msr	PRIMASK, r3
}
 80042f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f2:	f3ef 8310 	mrs	r3, PRIMASK
 80042f6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80042f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fa:	643b      	str	r3, [r7, #64]	; 0x40
 80042fc:	2301      	movs	r3, #1
 80042fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004302:	f383 8810 	msr	PRIMASK, r3
}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2101      	movs	r1, #1
 8004314:	438a      	bics	r2, r1
 8004316:	609a      	str	r2, [r3, #8]
 8004318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800431a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800431e:	f383 8810 	msr	PRIMASK, r3
}
 8004322:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2288      	movs	r2, #136	; 0x88
 8004328:	2120      	movs	r1, #32
 800432a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	228c      	movs	r2, #140	; 0x8c
 8004330:	2120      	movs	r1, #32
 8004332:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2284      	movs	r2, #132	; 0x84
 8004338:	2100      	movs	r1, #0
 800433a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e069      	b.n	8004414 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2204      	movs	r2, #4
 8004348:	4013      	ands	r3, r2
 800434a:	d052      	beq.n	80043f2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69da      	ldr	r2, [r3, #28]
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	401a      	ands	r2, r3
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	429a      	cmp	r2, r3
 800435e:	d148      	bne.n	80043f2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2280      	movs	r2, #128	; 0x80
 8004366:	0112      	lsls	r2, r2, #4
 8004368:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800436a:	f3ef 8310 	mrs	r3, PRIMASK
 800436e:	613b      	str	r3, [r7, #16]
  return(result);
 8004370:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004374:	2301      	movs	r3, #1
 8004376:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f383 8810 	msr	PRIMASK, r3
}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4924      	ldr	r1, [pc, #144]	; (800441c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800438c:	400a      	ands	r2, r1
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004392:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f383 8810 	msr	PRIMASK, r3
}
 800439a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800439c:	f3ef 8310 	mrs	r3, PRIMASK
 80043a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80043a2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80043a6:	2301      	movs	r3, #1
 80043a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	f383 8810 	msr	PRIMASK, r3
}
 80043b0:	46c0      	nop			; (mov r8, r8)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2101      	movs	r1, #1
 80043be:	438a      	bics	r2, r1
 80043c0:	609a      	str	r2, [r3, #8]
 80043c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	f383 8810 	msr	PRIMASK, r3
}
 80043cc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2288      	movs	r2, #136	; 0x88
 80043d2:	2120      	movs	r1, #32
 80043d4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	228c      	movs	r2, #140	; 0x8c
 80043da:	2120      	movs	r1, #32
 80043dc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2290      	movs	r2, #144	; 0x90
 80043e2:	2120      	movs	r1, #32
 80043e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2284      	movs	r2, #132	; 0x84
 80043ea:	2100      	movs	r1, #0
 80043ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e010      	b.n	8004414 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	4013      	ands	r3, r2
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	425a      	negs	r2, r3
 8004402:	4153      	adcs	r3, r2
 8004404:	b2db      	uxtb	r3, r3
 8004406:	001a      	movs	r2, r3
 8004408:	1dfb      	adds	r3, r7, #7
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d100      	bne.n	8004412 <UART_WaitOnFlagUntilTimeout+0x182>
 8004410:	e747      	b.n	80042a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	0018      	movs	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	b014      	add	sp, #80	; 0x50
 800441a:	bd80      	pop	{r7, pc}
 800441c:	fffffe5f 	.word	0xfffffe5f

08004420 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b098      	sub	sp, #96	; 0x60
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	1dbb      	adds	r3, r7, #6
 800442c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1dba      	adds	r2, r7, #6
 8004438:	215c      	movs	r1, #92	; 0x5c
 800443a:	8812      	ldrh	r2, [r2, #0]
 800443c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1dba      	adds	r2, r7, #6
 8004442:	215e      	movs	r1, #94	; 0x5e
 8004444:	8812      	ldrh	r2, [r2, #0]
 8004446:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	015b      	lsls	r3, r3, #5
 8004456:	429a      	cmp	r2, r3
 8004458:	d10d      	bne.n	8004476 <UART_Start_Receive_IT+0x56>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d104      	bne.n	800446c <UART_Start_Receive_IT+0x4c>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2260      	movs	r2, #96	; 0x60
 8004466:	497b      	ldr	r1, [pc, #492]	; (8004654 <UART_Start_Receive_IT+0x234>)
 8004468:	5299      	strh	r1, [r3, r2]
 800446a:	e02e      	b.n	80044ca <UART_Start_Receive_IT+0xaa>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2260      	movs	r2, #96	; 0x60
 8004470:	21ff      	movs	r1, #255	; 0xff
 8004472:	5299      	strh	r1, [r3, r2]
 8004474:	e029      	b.n	80044ca <UART_Start_Receive_IT+0xaa>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10d      	bne.n	800449a <UART_Start_Receive_IT+0x7a>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d104      	bne.n	8004490 <UART_Start_Receive_IT+0x70>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2260      	movs	r2, #96	; 0x60
 800448a:	21ff      	movs	r1, #255	; 0xff
 800448c:	5299      	strh	r1, [r3, r2]
 800448e:	e01c      	b.n	80044ca <UART_Start_Receive_IT+0xaa>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2260      	movs	r2, #96	; 0x60
 8004494:	217f      	movs	r1, #127	; 0x7f
 8004496:	5299      	strh	r1, [r3, r2]
 8004498:	e017      	b.n	80044ca <UART_Start_Receive_IT+0xaa>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	2380      	movs	r3, #128	; 0x80
 80044a0:	055b      	lsls	r3, r3, #21
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d10d      	bne.n	80044c2 <UART_Start_Receive_IT+0xa2>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d104      	bne.n	80044b8 <UART_Start_Receive_IT+0x98>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2260      	movs	r2, #96	; 0x60
 80044b2:	217f      	movs	r1, #127	; 0x7f
 80044b4:	5299      	strh	r1, [r3, r2]
 80044b6:	e008      	b.n	80044ca <UART_Start_Receive_IT+0xaa>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2260      	movs	r2, #96	; 0x60
 80044bc:	213f      	movs	r1, #63	; 0x3f
 80044be:	5299      	strh	r1, [r3, r2]
 80044c0:	e003      	b.n	80044ca <UART_Start_Receive_IT+0xaa>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2260      	movs	r2, #96	; 0x60
 80044c6:	2100      	movs	r1, #0
 80044c8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2290      	movs	r2, #144	; 0x90
 80044ce:	2100      	movs	r1, #0
 80044d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	228c      	movs	r2, #140	; 0x8c
 80044d6:	2122      	movs	r1, #34	; 0x22
 80044d8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044da:	f3ef 8310 	mrs	r3, PRIMASK
 80044de:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80044e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044e4:	2301      	movs	r3, #1
 80044e6:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ea:	f383 8810 	msr	PRIMASK, r3
}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2101      	movs	r1, #1
 80044fc:	430a      	orrs	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]
 8004500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004502:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004506:	f383 8810 	msr	PRIMASK, r3
}
 800450a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004510:	2380      	movs	r3, #128	; 0x80
 8004512:	059b      	lsls	r3, r3, #22
 8004514:	429a      	cmp	r2, r3
 8004516:	d150      	bne.n	80045ba <UART_Start_Receive_IT+0x19a>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2268      	movs	r2, #104	; 0x68
 800451c:	5a9b      	ldrh	r3, [r3, r2]
 800451e:	1dba      	adds	r2, r7, #6
 8004520:	8812      	ldrh	r2, [r2, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d349      	bcc.n	80045ba <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	015b      	lsls	r3, r3, #5
 800452e:	429a      	cmp	r2, r3
 8004530:	d107      	bne.n	8004542 <UART_Start_Receive_IT+0x122>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d103      	bne.n	8004542 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4a46      	ldr	r2, [pc, #280]	; (8004658 <UART_Start_Receive_IT+0x238>)
 800453e:	675a      	str	r2, [r3, #116]	; 0x74
 8004540:	e002      	b.n	8004548 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4a45      	ldr	r2, [pc, #276]	; (800465c <UART_Start_Receive_IT+0x23c>)
 8004546:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d019      	beq.n	8004584 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004550:	f3ef 8310 	mrs	r3, PRIMASK
 8004554:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004558:	65bb      	str	r3, [r7, #88]	; 0x58
 800455a:	2301      	movs	r3, #1
 800455c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004560:	f383 8810 	msr	PRIMASK, r3
}
 8004564:	46c0      	nop			; (mov r8, r8)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2180      	movs	r1, #128	; 0x80
 8004572:	0049      	lsls	r1, r1, #1
 8004574:	430a      	orrs	r2, r1
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800457a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457e:	f383 8810 	msr	PRIMASK, r3
}
 8004582:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004584:	f3ef 8310 	mrs	r3, PRIMASK
 8004588:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800458c:	657b      	str	r3, [r7, #84]	; 0x54
 800458e:	2301      	movs	r3, #1
 8004590:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004594:	f383 8810 	msr	PRIMASK, r3
}
 8004598:	46c0      	nop			; (mov r8, r8)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2180      	movs	r1, #128	; 0x80
 80045a6:	0549      	lsls	r1, r1, #21
 80045a8:	430a      	orrs	r2, r1
 80045aa:	609a      	str	r2, [r3, #8]
 80045ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ae:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b2:	f383 8810 	msr	PRIMASK, r3
}
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	e047      	b.n	800464a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	2380      	movs	r3, #128	; 0x80
 80045c0:	015b      	lsls	r3, r3, #5
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d107      	bne.n	80045d6 <UART_Start_Receive_IT+0x1b6>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d103      	bne.n	80045d6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4a23      	ldr	r2, [pc, #140]	; (8004660 <UART_Start_Receive_IT+0x240>)
 80045d2:	675a      	str	r2, [r3, #116]	; 0x74
 80045d4:	e002      	b.n	80045dc <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4a22      	ldr	r2, [pc, #136]	; (8004664 <UART_Start_Receive_IT+0x244>)
 80045da:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d019      	beq.n	8004618 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045e4:	f3ef 8310 	mrs	r3, PRIMASK
 80045e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80045ea:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80045ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ee:	2301      	movs	r3, #1
 80045f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	f383 8810 	msr	PRIMASK, r3
}
 80045f8:	46c0      	nop			; (mov r8, r8)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2190      	movs	r1, #144	; 0x90
 8004606:	0049      	lsls	r1, r1, #1
 8004608:	430a      	orrs	r2, r1
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	f383 8810 	msr	PRIMASK, r3
}
 8004616:	e018      	b.n	800464a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004618:	f3ef 8310 	mrs	r3, PRIMASK
 800461c:	613b      	str	r3, [r7, #16]
  return(result);
 800461e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004620:	653b      	str	r3, [r7, #80]	; 0x50
 8004622:	2301      	movs	r3, #1
 8004624:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f383 8810 	msr	PRIMASK, r3
}
 800462c:	46c0      	nop			; (mov r8, r8)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2120      	movs	r1, #32
 800463a:	430a      	orrs	r2, r1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004640:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	f383 8810 	msr	PRIMASK, r3
}
 8004648:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	0018      	movs	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	b018      	add	sp, #96	; 0x60
 8004652:	bd80      	pop	{r7, pc}
 8004654:	000001ff 	.word	0x000001ff
 8004658:	08004d91 	.word	0x08004d91
 800465c:	08004aa5 	.word	0x08004aa5
 8004660:	08004931 	.word	0x08004931
 8004664:	080047bd 	.word	0x080047bd

08004668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08e      	sub	sp, #56	; 0x38
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004670:	f3ef 8310 	mrs	r3, PRIMASK
 8004674:	617b      	str	r3, [r7, #20]
  return(result);
 8004676:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004678:	637b      	str	r3, [r7, #52]	; 0x34
 800467a:	2301      	movs	r3, #1
 800467c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	f383 8810 	msr	PRIMASK, r3
}
 8004684:	46c0      	nop			; (mov r8, r8)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4926      	ldr	r1, [pc, #152]	; (800472c <UART_EndRxTransfer+0xc4>)
 8004692:	400a      	ands	r2, r1
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004698:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f383 8810 	msr	PRIMASK, r3
}
 80046a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a2:	f3ef 8310 	mrs	r3, PRIMASK
 80046a6:	623b      	str	r3, [r7, #32]
  return(result);
 80046a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046aa:	633b      	str	r3, [r7, #48]	; 0x30
 80046ac:	2301      	movs	r3, #1
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	f383 8810 	msr	PRIMASK, r3
}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	491b      	ldr	r1, [pc, #108]	; (8004730 <UART_EndRxTransfer+0xc8>)
 80046c4:	400a      	ands	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]
 80046c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	f383 8810 	msr	PRIMASK, r3
}
 80046d2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d118      	bne.n	800470e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046dc:	f3ef 8310 	mrs	r3, PRIMASK
 80046e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80046e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e6:	2301      	movs	r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f383 8810 	msr	PRIMASK, r3
}
 80046f0:	46c0      	nop			; (mov r8, r8)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2110      	movs	r1, #16
 80046fe:	438a      	bics	r2, r1
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004704:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f383 8810 	msr	PRIMASK, r3
}
 800470c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	228c      	movs	r2, #140	; 0x8c
 8004712:	2120      	movs	r1, #32
 8004714:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	46bd      	mov	sp, r7
 8004726:	b00e      	add	sp, #56	; 0x38
 8004728:	bd80      	pop	{r7, pc}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	fffffedf 	.word	0xfffffedf
 8004730:	effffffe 	.word	0xeffffffe

08004734 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	225e      	movs	r2, #94	; 0x5e
 8004746:	2100      	movs	r1, #0
 8004748:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2256      	movs	r2, #86	; 0x56
 800474e:	2100      	movs	r1, #0
 8004750:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	0018      	movs	r0, r3
 8004756:	f7ff fae1 	bl	8003d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	46bd      	mov	sp, r7
 800475e:	b004      	add	sp, #16
 8004760:	bd80      	pop	{r7, pc}

08004762 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b086      	sub	sp, #24
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800476a:	f3ef 8310 	mrs	r3, PRIMASK
 800476e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004770:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	2301      	movs	r3, #1
 8004776:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f383 8810 	msr	PRIMASK, r3
}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2140      	movs	r1, #64	; 0x40
 800478c:	438a      	bics	r2, r1
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f383 8810 	msr	PRIMASK, r3
}
 800479a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2288      	movs	r2, #136	; 0x88
 80047a0:	2120      	movs	r1, #32
 80047a2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f7ff faad 	bl	8003d0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b006      	add	sp, #24
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b090      	sub	sp, #64	; 0x40
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80047c4:	203e      	movs	r0, #62	; 0x3e
 80047c6:	183b      	adds	r3, r7, r0
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	2160      	movs	r1, #96	; 0x60
 80047cc:	5a52      	ldrh	r2, [r2, r1]
 80047ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	228c      	movs	r2, #140	; 0x8c
 80047d4:	589b      	ldr	r3, [r3, r2]
 80047d6:	2b22      	cmp	r3, #34	; 0x22
 80047d8:	d000      	beq.n	80047dc <UART_RxISR_8BIT+0x20>
 80047da:	e09a      	b.n	8004912 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047e2:	213c      	movs	r1, #60	; 0x3c
 80047e4:	187b      	adds	r3, r7, r1
 80047e6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80047e8:	187b      	adds	r3, r7, r1
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	183b      	adds	r3, r7, r0
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b2d9      	uxtb	r1, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f8:	400a      	ands	r2, r1
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	225e      	movs	r2, #94	; 0x5e
 800480c:	5a9b      	ldrh	r3, [r3, r2]
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b299      	uxth	r1, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	225e      	movs	r2, #94	; 0x5e
 8004818:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	225e      	movs	r2, #94	; 0x5e
 800481e:	5a9b      	ldrh	r3, [r3, r2]
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d000      	beq.n	8004828 <UART_RxISR_8BIT+0x6c>
 8004826:	e07c      	b.n	8004922 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004828:	f3ef 8310 	mrs	r3, PRIMASK
 800482c:	61bb      	str	r3, [r7, #24]
  return(result);
 800482e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004830:	63bb      	str	r3, [r7, #56]	; 0x38
 8004832:	2301      	movs	r3, #1
 8004834:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	f383 8810 	msr	PRIMASK, r3
}
 800483c:	46c0      	nop			; (mov r8, r8)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4938      	ldr	r1, [pc, #224]	; (800492c <UART_RxISR_8BIT+0x170>)
 800484a:	400a      	ands	r2, r1
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004850:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	f383 8810 	msr	PRIMASK, r3
}
 8004858:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800485a:	f3ef 8310 	mrs	r3, PRIMASK
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004862:	637b      	str	r3, [r7, #52]	; 0x34
 8004864:	2301      	movs	r3, #1
 8004866:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	f383 8810 	msr	PRIMASK, r3
}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2101      	movs	r1, #1
 800487c:	438a      	bics	r2, r1
 800487e:	609a      	str	r2, [r3, #8]
 8004880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004886:	f383 8810 	msr	PRIMASK, r3
}
 800488a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	228c      	movs	r2, #140	; 0x8c
 8004890:	2120      	movs	r1, #32
 8004892:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d12f      	bne.n	8004908 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ae:	f3ef 8310 	mrs	r3, PRIMASK
 80048b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80048b4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b6:	633b      	str	r3, [r7, #48]	; 0x30
 80048b8:	2301      	movs	r3, #1
 80048ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f383 8810 	msr	PRIMASK, r3
}
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2110      	movs	r1, #16
 80048d0:	438a      	bics	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f383 8810 	msr	PRIMASK, r3
}
 80048de:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	2210      	movs	r2, #16
 80048e8:	4013      	ands	r3, r2
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d103      	bne.n	80048f6 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2210      	movs	r2, #16
 80048f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	225c      	movs	r2, #92	; 0x5c
 80048fa:	5a9a      	ldrh	r2, [r3, r2]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	0011      	movs	r1, r2
 8004900:	0018      	movs	r0, r3
 8004902:	f7ff fa13 	bl	8003d2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004906:	e00c      	b.n	8004922 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	0018      	movs	r0, r3
 800490c:	f7fc f842 	bl	8000994 <HAL_UART_RxCpltCallback>
}
 8004910:	e007      	b.n	8004922 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699a      	ldr	r2, [r3, #24]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2108      	movs	r1, #8
 800491e:	430a      	orrs	r2, r1
 8004920:	619a      	str	r2, [r3, #24]
}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	46bd      	mov	sp, r7
 8004926:	b010      	add	sp, #64	; 0x40
 8004928:	bd80      	pop	{r7, pc}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	fffffedf 	.word	0xfffffedf

08004930 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b090      	sub	sp, #64	; 0x40
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004938:	203e      	movs	r0, #62	; 0x3e
 800493a:	183b      	adds	r3, r7, r0
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	2160      	movs	r1, #96	; 0x60
 8004940:	5a52      	ldrh	r2, [r2, r1]
 8004942:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	228c      	movs	r2, #140	; 0x8c
 8004948:	589b      	ldr	r3, [r3, r2]
 800494a:	2b22      	cmp	r3, #34	; 0x22
 800494c:	d000      	beq.n	8004950 <UART_RxISR_16BIT+0x20>
 800494e:	e09a      	b.n	8004a86 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004956:	213c      	movs	r1, #60	; 0x3c
 8004958:	187b      	adds	r3, r7, r1
 800495a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004960:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004962:	187b      	adds	r3, r7, r1
 8004964:	183a      	adds	r2, r7, r0
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	8812      	ldrh	r2, [r2, #0]
 800496a:	4013      	ands	r3, r2
 800496c:	b29a      	uxth	r2, r3
 800496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004970:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004976:	1c9a      	adds	r2, r3, #2
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	225e      	movs	r2, #94	; 0x5e
 8004980:	5a9b      	ldrh	r3, [r3, r2]
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b299      	uxth	r1, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	225e      	movs	r2, #94	; 0x5e
 800498c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	225e      	movs	r2, #94	; 0x5e
 8004992:	5a9b      	ldrh	r3, [r3, r2]
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d000      	beq.n	800499c <UART_RxISR_16BIT+0x6c>
 800499a:	e07c      	b.n	8004a96 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800499c:	f3ef 8310 	mrs	r3, PRIMASK
 80049a0:	617b      	str	r3, [r7, #20]
  return(result);
 80049a2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049a4:	637b      	str	r3, [r7, #52]	; 0x34
 80049a6:	2301      	movs	r3, #1
 80049a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	f383 8810 	msr	PRIMASK, r3
}
 80049b0:	46c0      	nop			; (mov r8, r8)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4938      	ldr	r1, [pc, #224]	; (8004aa0 <UART_RxISR_16BIT+0x170>)
 80049be:	400a      	ands	r2, r1
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	f383 8810 	msr	PRIMASK, r3
}
 80049cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ce:	f3ef 8310 	mrs	r3, PRIMASK
 80049d2:	623b      	str	r3, [r7, #32]
  return(result);
 80049d4:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d6:	633b      	str	r3, [r7, #48]	; 0x30
 80049d8:	2301      	movs	r3, #1
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	f383 8810 	msr	PRIMASK, r3
}
 80049e2:	46c0      	nop			; (mov r8, r8)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2101      	movs	r1, #1
 80049f0:	438a      	bics	r2, r1
 80049f2:	609a      	str	r2, [r3, #8]
 80049f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	f383 8810 	msr	PRIMASK, r3
}
 80049fe:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	228c      	movs	r2, #140	; 0x8c
 8004a04:	2120      	movs	r1, #32
 8004a06:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d12f      	bne.n	8004a7c <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a22:	f3ef 8310 	mrs	r3, PRIMASK
 8004a26:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a28:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f383 8810 	msr	PRIMASK, r3
}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2110      	movs	r1, #16
 8004a44:	438a      	bics	r2, r1
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f383 8810 	msr	PRIMASK, r3
}
 8004a52:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	2210      	movs	r2, #16
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2b10      	cmp	r3, #16
 8004a60:	d103      	bne.n	8004a6a <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2210      	movs	r2, #16
 8004a68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	225c      	movs	r2, #92	; 0x5c
 8004a6e:	5a9a      	ldrh	r2, [r3, r2]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	0011      	movs	r1, r2
 8004a74:	0018      	movs	r0, r3
 8004a76:	f7ff f959 	bl	8003d2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a7a:	e00c      	b.n	8004a96 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f7fb ff88 	bl	8000994 <HAL_UART_RxCpltCallback>
}
 8004a84:	e007      	b.n	8004a96 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	699a      	ldr	r2, [r3, #24]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2108      	movs	r1, #8
 8004a92:	430a      	orrs	r2, r1
 8004a94:	619a      	str	r2, [r3, #24]
}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	b010      	add	sp, #64	; 0x40
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	fffffedf 	.word	0xfffffedf

08004aa4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b09c      	sub	sp, #112	; 0x70
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004aac:	236a      	movs	r3, #106	; 0x6a
 8004aae:	18fb      	adds	r3, r7, r3
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	2160      	movs	r1, #96	; 0x60
 8004ab4:	5a52      	ldrh	r2, [r2, r1]
 8004ab6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	228c      	movs	r2, #140	; 0x8c
 8004ad4:	589b      	ldr	r3, [r3, r2]
 8004ad6:	2b22      	cmp	r3, #34	; 0x22
 8004ad8:	d000      	beq.n	8004adc <UART_RxISR_8BIT_FIFOEN+0x38>
 8004ada:	e144      	b.n	8004d66 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004adc:	235e      	movs	r3, #94	; 0x5e
 8004ade:	18fb      	adds	r3, r7, r3
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	2168      	movs	r1, #104	; 0x68
 8004ae4:	5a52      	ldrh	r2, [r2, r1]
 8004ae6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004ae8:	e0eb      	b.n	8004cc2 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004af0:	215c      	movs	r1, #92	; 0x5c
 8004af2:	187b      	adds	r3, r7, r1
 8004af4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004af6:	187b      	adds	r3, r7, r1
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	236a      	movs	r3, #106	; 0x6a
 8004afe:	18fb      	adds	r3, r7, r3
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b2d9      	uxtb	r1, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b08:	400a      	ands	r2, r1
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	225e      	movs	r2, #94	; 0x5e
 8004b1c:	5a9b      	ldrh	r3, [r3, r2]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b299      	uxth	r1, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	225e      	movs	r2, #94	; 0x5e
 8004b28:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b34:	2207      	movs	r2, #7
 8004b36:	4013      	ands	r3, r2
 8004b38:	d049      	beq.n	8004bce <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d010      	beq.n	8004b64 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004b42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b44:	2380      	movs	r3, #128	; 0x80
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d00b      	beq.n	8004b64 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2201      	movs	r2, #1
 8004b52:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2290      	movs	r2, #144	; 0x90
 8004b58:	589b      	ldr	r3, [r3, r2]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2190      	movs	r1, #144	; 0x90
 8004b62:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b66:	2202      	movs	r2, #2
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d00f      	beq.n	8004b8c <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004b6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b6e:	2201      	movs	r2, #1
 8004b70:	4013      	ands	r3, r2
 8004b72:	d00b      	beq.n	8004b8c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2290      	movs	r2, #144	; 0x90
 8004b80:	589b      	ldr	r3, [r3, r2]
 8004b82:	2204      	movs	r2, #4
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2190      	movs	r1, #144	; 0x90
 8004b8a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8e:	2204      	movs	r2, #4
 8004b90:	4013      	ands	r3, r2
 8004b92:	d00f      	beq.n	8004bb4 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004b94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b96:	2201      	movs	r2, #1
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d00b      	beq.n	8004bb4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2290      	movs	r2, #144	; 0x90
 8004ba8:	589b      	ldr	r3, [r3, r2]
 8004baa:	2202      	movs	r2, #2
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2190      	movs	r1, #144	; 0x90
 8004bb2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2290      	movs	r2, #144	; 0x90
 8004bb8:	589b      	ldr	r3, [r3, r2]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d007      	beq.n	8004bce <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f7ff f8ab 	bl	8003d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2290      	movs	r2, #144	; 0x90
 8004bca:	2100      	movs	r1, #0
 8004bcc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	225e      	movs	r2, #94	; 0x5e
 8004bd2:	5a9b      	ldrh	r3, [r3, r2]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d173      	bne.n	8004cc2 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bda:	f3ef 8310 	mrs	r3, PRIMASK
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004be2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004be4:	2301      	movs	r3, #1
 8004be6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bea:	f383 8810 	msr	PRIMASK, r3
}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4961      	ldr	r1, [pc, #388]	; (8004d80 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8004bfc:	400a      	ands	r2, r1
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c02:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c06:	f383 8810 	msr	PRIMASK, r3
}
 8004c0a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c10:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c14:	657b      	str	r3, [r7, #84]	; 0x54
 8004c16:	2301      	movs	r3, #1
 8004c18:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c1c:	f383 8810 	msr	PRIMASK, r3
}
 8004c20:	46c0      	nop			; (mov r8, r8)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4955      	ldr	r1, [pc, #340]	; (8004d84 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8004c2e:	400a      	ands	r2, r1
 8004c30:	609a      	str	r2, [r3, #8]
 8004c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c34:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c38:	f383 8810 	msr	PRIMASK, r3
}
 8004c3c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	228c      	movs	r2, #140	; 0x8c
 8004c42:	2120      	movs	r1, #32
 8004c44:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d12f      	bne.n	8004cba <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c60:	f3ef 8310 	mrs	r3, PRIMASK
 8004c64:	623b      	str	r3, [r7, #32]
  return(result);
 8004c66:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c68:	653b      	str	r3, [r7, #80]	; 0x50
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	f383 8810 	msr	PRIMASK, r3
}
 8004c74:	46c0      	nop			; (mov r8, r8)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2110      	movs	r1, #16
 8004c82:	438a      	bics	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c88:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8c:	f383 8810 	msr	PRIMASK, r3
}
 8004c90:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	2210      	movs	r2, #16
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d103      	bne.n	8004ca8 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	225c      	movs	r2, #92	; 0x5c
 8004cac:	5a9a      	ldrh	r2, [r3, r2]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	0011      	movs	r1, r2
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	f7ff f83a 	bl	8003d2c <HAL_UARTEx_RxEventCallback>
 8004cb8:	e003      	b.n	8004cc2 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f7fb fe69 	bl	8000994 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004cc2:	235e      	movs	r3, #94	; 0x5e
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <UART_RxISR_8BIT_FIFOEN+0x232>
 8004ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cce:	2220      	movs	r2, #32
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d000      	beq.n	8004cd6 <UART_RxISR_8BIT_FIFOEN+0x232>
 8004cd4:	e709      	b.n	8004aea <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004cd6:	204e      	movs	r0, #78	; 0x4e
 8004cd8:	183b      	adds	r3, r7, r0
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	215e      	movs	r1, #94	; 0x5e
 8004cde:	5a52      	ldrh	r2, [r2, r1]
 8004ce0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004ce2:	0001      	movs	r1, r0
 8004ce4:	187b      	adds	r3, r7, r1
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d044      	beq.n	8004d76 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2268      	movs	r2, #104	; 0x68
 8004cf0:	5a9b      	ldrh	r3, [r3, r2]
 8004cf2:	187a      	adds	r2, r7, r1
 8004cf4:	8812      	ldrh	r2, [r2, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d23d      	bcs.n	8004d76 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8004cfe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d00:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004d02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d04:	2301      	movs	r3, #1
 8004d06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f383 8810 	msr	PRIMASK, r3
}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	491b      	ldr	r1, [pc, #108]	; (8004d88 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8004d1c:	400a      	ands	r2, r1
 8004d1e:	609a      	str	r2, [r3, #8]
 8004d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f383 8810 	msr	PRIMASK, r3
}
 8004d2a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a17      	ldr	r2, [pc, #92]	; (8004d8c <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8004d30:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d32:	f3ef 8310 	mrs	r3, PRIMASK
 8004d36:	617b      	str	r3, [r7, #20]
  return(result);
 8004d38:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f383 8810 	msr	PRIMASK, r3
}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2120      	movs	r1, #32
 8004d54:	430a      	orrs	r2, r1
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f383 8810 	msr	PRIMASK, r3
}
 8004d62:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d64:	e007      	b.n	8004d76 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699a      	ldr	r2, [r3, #24]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2108      	movs	r1, #8
 8004d72:	430a      	orrs	r2, r1
 8004d74:	619a      	str	r2, [r3, #24]
}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b01c      	add	sp, #112	; 0x70
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	fffffeff 	.word	0xfffffeff
 8004d84:	effffffe 	.word	0xeffffffe
 8004d88:	efffffff 	.word	0xefffffff
 8004d8c:	080047bd 	.word	0x080047bd

08004d90 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b09e      	sub	sp, #120	; 0x78
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004d98:	2372      	movs	r3, #114	; 0x72
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	2160      	movs	r1, #96	; 0x60
 8004da0:	5a52      	ldrh	r2, [r2, r1]
 8004da2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	228c      	movs	r2, #140	; 0x8c
 8004dc0:	589b      	ldr	r3, [r3, r2]
 8004dc2:	2b22      	cmp	r3, #34	; 0x22
 8004dc4:	d000      	beq.n	8004dc8 <UART_RxISR_16BIT_FIFOEN+0x38>
 8004dc6:	e144      	b.n	8005052 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004dc8:	2366      	movs	r3, #102	; 0x66
 8004dca:	18fb      	adds	r3, r7, r3
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	2168      	movs	r1, #104	; 0x68
 8004dd0:	5a52      	ldrh	r2, [r2, r1]
 8004dd2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004dd4:	e0eb      	b.n	8004fae <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ddc:	2164      	movs	r1, #100	; 0x64
 8004dde:	187b      	adds	r3, r7, r1
 8004de0:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de6:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8004de8:	187b      	adds	r3, r7, r1
 8004dea:	2272      	movs	r2, #114	; 0x72
 8004dec:	18ba      	adds	r2, r7, r2
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	8812      	ldrh	r2, [r2, #0]
 8004df2:	4013      	ands	r3, r2
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004df8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfe:	1c9a      	adds	r2, r3, #2
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	225e      	movs	r2, #94	; 0x5e
 8004e08:	5a9b      	ldrh	r3, [r3, r2]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b299      	uxth	r1, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	225e      	movs	r2, #94	; 0x5e
 8004e14:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e20:	2207      	movs	r2, #7
 8004e22:	4013      	ands	r3, r2
 8004e24:	d049      	beq.n	8004eba <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e28:	2201      	movs	r2, #1
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	d010      	beq.n	8004e50 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8004e2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e30:	2380      	movs	r3, #128	; 0x80
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	4013      	ands	r3, r2
 8004e36:	d00b      	beq.n	8004e50 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2290      	movs	r2, #144	; 0x90
 8004e44:	589b      	ldr	r3, [r3, r2]
 8004e46:	2201      	movs	r2, #1
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2190      	movs	r1, #144	; 0x90
 8004e4e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e52:	2202      	movs	r2, #2
 8004e54:	4013      	ands	r3, r2
 8004e56:	d00f      	beq.n	8004e78 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8004e58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d00b      	beq.n	8004e78 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2202      	movs	r2, #2
 8004e66:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2290      	movs	r2, #144	; 0x90
 8004e6c:	589b      	ldr	r3, [r3, r2]
 8004e6e:	2204      	movs	r2, #4
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2190      	movs	r1, #144	; 0x90
 8004e76:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e7a:	2204      	movs	r2, #4
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	d00f      	beq.n	8004ea0 <UART_RxISR_16BIT_FIFOEN+0x110>
 8004e80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e82:	2201      	movs	r2, #1
 8004e84:	4013      	ands	r3, r2
 8004e86:	d00b      	beq.n	8004ea0 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2204      	movs	r2, #4
 8004e8e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2290      	movs	r2, #144	; 0x90
 8004e94:	589b      	ldr	r3, [r3, r2]
 8004e96:	2202      	movs	r2, #2
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2190      	movs	r1, #144	; 0x90
 8004e9e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2290      	movs	r2, #144	; 0x90
 8004ea4:	589b      	ldr	r3, [r3, r2]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d007      	beq.n	8004eba <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	0018      	movs	r0, r3
 8004eae:	f7fe ff35 	bl	8003d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2290      	movs	r2, #144	; 0x90
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	225e      	movs	r2, #94	; 0x5e
 8004ebe:	5a9b      	ldrh	r3, [r3, r2]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d173      	bne.n	8004fae <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ece:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed6:	f383 8810 	msr	PRIMASK, r3
}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4961      	ldr	r1, [pc, #388]	; (800506c <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8004ee8:	400a      	ands	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef2:	f383 8810 	msr	PRIMASK, r3
}
 8004ef6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8004efc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f00:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f02:	2301      	movs	r3, #1
 8004f04:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f08:	f383 8810 	msr	PRIMASK, r3
}
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4955      	ldr	r1, [pc, #340]	; (8005070 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8004f1a:	400a      	ands	r2, r1
 8004f1c:	609a      	str	r2, [r3, #8]
 8004f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f20:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f24:	f383 8810 	msr	PRIMASK, r3
}
 8004f28:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	228c      	movs	r2, #140	; 0x8c
 8004f2e:	2120      	movs	r1, #32
 8004f30:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d12f      	bne.n	8004fa6 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f54:	657b      	str	r3, [r7, #84]	; 0x54
 8004f56:	2301      	movs	r3, #1
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	f383 8810 	msr	PRIMASK, r3
}
 8004f60:	46c0      	nop			; (mov r8, r8)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2110      	movs	r1, #16
 8004f6e:	438a      	bics	r2, r1
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f78:	f383 8810 	msr	PRIMASK, r3
}
 8004f7c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	2210      	movs	r2, #16
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d103      	bne.n	8004f94 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2210      	movs	r2, #16
 8004f92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	225c      	movs	r2, #92	; 0x5c
 8004f98:	5a9a      	ldrh	r2, [r3, r2]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	0011      	movs	r1, r2
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f7fe fec4 	bl	8003d2c <HAL_UARTEx_RxEventCallback>
 8004fa4:	e003      	b.n	8004fae <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f7fb fcf3 	bl	8000994 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004fae:	2366      	movs	r3, #102	; 0x66
 8004fb0:	18fb      	adds	r3, r7, r3
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d004      	beq.n	8004fc2 <UART_RxISR_16BIT_FIFOEN+0x232>
 8004fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fba:	2220      	movs	r2, #32
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	d000      	beq.n	8004fc2 <UART_RxISR_16BIT_FIFOEN+0x232>
 8004fc0:	e709      	b.n	8004dd6 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004fc2:	2052      	movs	r0, #82	; 0x52
 8004fc4:	183b      	adds	r3, r7, r0
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	215e      	movs	r1, #94	; 0x5e
 8004fca:	5a52      	ldrh	r2, [r2, r1]
 8004fcc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004fce:	0001      	movs	r1, r0
 8004fd0:	187b      	adds	r3, r7, r1
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d044      	beq.n	8005062 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2268      	movs	r2, #104	; 0x68
 8004fdc:	5a9b      	ldrh	r3, [r3, r2]
 8004fde:	187a      	adds	r2, r7, r1
 8004fe0:	8812      	ldrh	r2, [r2, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d23d      	bcs.n	8005062 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8004fea:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fec:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f383 8810 	msr	PRIMASK, r3
}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	491b      	ldr	r1, [pc, #108]	; (8005074 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8005008:	400a      	ands	r2, r1
 800500a:	609a      	str	r2, [r3, #8]
 800500c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800500e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f383 8810 	msr	PRIMASK, r3
}
 8005016:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a17      	ldr	r2, [pc, #92]	; (8005078 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800501c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800501e:	f3ef 8310 	mrs	r3, PRIMASK
 8005022:	61bb      	str	r3, [r7, #24]
  return(result);
 8005024:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005026:	64bb      	str	r3, [r7, #72]	; 0x48
 8005028:	2301      	movs	r3, #1
 800502a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f383 8810 	msr	PRIMASK, r3
}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2120      	movs	r1, #32
 8005040:	430a      	orrs	r2, r1
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005046:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	f383 8810 	msr	PRIMASK, r3
}
 800504e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005050:	e007      	b.n	8005062 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699a      	ldr	r2, [r3, #24]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2108      	movs	r1, #8
 800505e:	430a      	orrs	r2, r1
 8005060:	619a      	str	r2, [r3, #24]
}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	46bd      	mov	sp, r7
 8005066:	b01e      	add	sp, #120	; 0x78
 8005068:	bd80      	pop	{r7, pc}
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	fffffeff 	.word	0xfffffeff
 8005070:	effffffe 	.word	0xeffffffe
 8005074:	efffffff 	.word	0xefffffff
 8005078:	08004931 	.word	0x08004931

0800507c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005084:	46c0      	nop			; (mov r8, r8)
 8005086:	46bd      	mov	sp, r7
 8005088:	b002      	add	sp, #8
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005094:	46c0      	nop			; (mov r8, r8)
 8005096:	46bd      	mov	sp, r7
 8005098:	b002      	add	sp, #8
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80050a4:	46c0      	nop			; (mov r8, r8)
 80050a6:	46bd      	mov	sp, r7
 80050a8:	b002      	add	sp, #8
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2284      	movs	r2, #132	; 0x84
 80050b8:	5c9b      	ldrb	r3, [r3, r2]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80050be:	2302      	movs	r3, #2
 80050c0:	e027      	b.n	8005112 <HAL_UARTEx_DisableFifoMode+0x66>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2284      	movs	r2, #132	; 0x84
 80050c6:	2101      	movs	r1, #1
 80050c8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2288      	movs	r2, #136	; 0x88
 80050ce:	2124      	movs	r1, #36	; 0x24
 80050d0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2101      	movs	r1, #1
 80050e6:	438a      	bics	r2, r1
 80050e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4a0b      	ldr	r2, [pc, #44]	; (800511c <HAL_UARTEx_DisableFifoMode+0x70>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2288      	movs	r2, #136	; 0x88
 8005104:	2120      	movs	r1, #32
 8005106:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2284      	movs	r2, #132	; 0x84
 800510c:	2100      	movs	r1, #0
 800510e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	0018      	movs	r0, r3
 8005114:	46bd      	mov	sp, r7
 8005116:	b004      	add	sp, #16
 8005118:	bd80      	pop	{r7, pc}
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	dfffffff 	.word	0xdfffffff

08005120 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2284      	movs	r2, #132	; 0x84
 800512e:	5c9b      	ldrb	r3, [r3, r2]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005134:	2302      	movs	r3, #2
 8005136:	e02e      	b.n	8005196 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2284      	movs	r2, #132	; 0x84
 800513c:	2101      	movs	r1, #1
 800513e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2288      	movs	r2, #136	; 0x88
 8005144:	2124      	movs	r1, #36	; 0x24
 8005146:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2101      	movs	r1, #1
 800515c:	438a      	bics	r2, r1
 800515e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	08d9      	lsrs	r1, r3, #3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	0018      	movs	r0, r3
 8005178:	f000 f854 	bl	8005224 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2288      	movs	r2, #136	; 0x88
 8005188:	2120      	movs	r1, #32
 800518a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2284      	movs	r2, #132	; 0x84
 8005190:	2100      	movs	r1, #0
 8005192:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	0018      	movs	r0, r3
 8005198:	46bd      	mov	sp, r7
 800519a:	b004      	add	sp, #16
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2284      	movs	r2, #132	; 0x84
 80051ae:	5c9b      	ldrb	r3, [r3, r2]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e02f      	b.n	8005218 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2284      	movs	r2, #132	; 0x84
 80051bc:	2101      	movs	r1, #1
 80051be:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2288      	movs	r2, #136	; 0x88
 80051c4:	2124      	movs	r1, #36	; 0x24
 80051c6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2101      	movs	r1, #1
 80051dc:	438a      	bics	r2, r1
 80051de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	4a0e      	ldr	r2, [pc, #56]	; (8005220 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	0019      	movs	r1, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	0018      	movs	r0, r3
 80051fa:	f000 f813 	bl	8005224 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2288      	movs	r2, #136	; 0x88
 800520a:	2120      	movs	r1, #32
 800520c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2284      	movs	r2, #132	; 0x84
 8005212:	2100      	movs	r1, #0
 8005214:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	0018      	movs	r0, r3
 800521a:	46bd      	mov	sp, r7
 800521c:	b004      	add	sp, #16
 800521e:	bd80      	pop	{r7, pc}
 8005220:	f1ffffff 	.word	0xf1ffffff

08005224 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005230:	2b00      	cmp	r3, #0
 8005232:	d108      	bne.n	8005246 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	226a      	movs	r2, #106	; 0x6a
 8005238:	2101      	movs	r1, #1
 800523a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2268      	movs	r2, #104	; 0x68
 8005240:	2101      	movs	r1, #1
 8005242:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005244:	e043      	b.n	80052ce <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005246:	260f      	movs	r6, #15
 8005248:	19bb      	adds	r3, r7, r6
 800524a:	2208      	movs	r2, #8
 800524c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800524e:	200e      	movs	r0, #14
 8005250:	183b      	adds	r3, r7, r0
 8005252:	2208      	movs	r2, #8
 8005254:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	0e5b      	lsrs	r3, r3, #25
 800525e:	b2da      	uxtb	r2, r3
 8005260:	240d      	movs	r4, #13
 8005262:	193b      	adds	r3, r7, r4
 8005264:	2107      	movs	r1, #7
 8005266:	400a      	ands	r2, r1
 8005268:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	0f5b      	lsrs	r3, r3, #29
 8005272:	b2da      	uxtb	r2, r3
 8005274:	250c      	movs	r5, #12
 8005276:	197b      	adds	r3, r7, r5
 8005278:	2107      	movs	r1, #7
 800527a:	400a      	ands	r2, r1
 800527c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800527e:	183b      	adds	r3, r7, r0
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	197a      	adds	r2, r7, r5
 8005284:	7812      	ldrb	r2, [r2, #0]
 8005286:	4914      	ldr	r1, [pc, #80]	; (80052d8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005288:	5c8a      	ldrb	r2, [r1, r2]
 800528a:	435a      	muls	r2, r3
 800528c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800528e:	197b      	adds	r3, r7, r5
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	4a12      	ldr	r2, [pc, #72]	; (80052dc <UARTEx_SetNbDataToProcess+0xb8>)
 8005294:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005296:	0019      	movs	r1, r3
 8005298:	f7fa ffbc 	bl	8000214 <__divsi3>
 800529c:	0003      	movs	r3, r0
 800529e:	b299      	uxth	r1, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	226a      	movs	r2, #106	; 0x6a
 80052a4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052a6:	19bb      	adds	r3, r7, r6
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	193a      	adds	r2, r7, r4
 80052ac:	7812      	ldrb	r2, [r2, #0]
 80052ae:	490a      	ldr	r1, [pc, #40]	; (80052d8 <UARTEx_SetNbDataToProcess+0xb4>)
 80052b0:	5c8a      	ldrb	r2, [r1, r2]
 80052b2:	435a      	muls	r2, r3
 80052b4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80052b6:	193b      	adds	r3, r7, r4
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	4a08      	ldr	r2, [pc, #32]	; (80052dc <UARTEx_SetNbDataToProcess+0xb8>)
 80052bc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052be:	0019      	movs	r1, r3
 80052c0:	f7fa ffa8 	bl	8000214 <__divsi3>
 80052c4:	0003      	movs	r3, r0
 80052c6:	b299      	uxth	r1, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2268      	movs	r2, #104	; 0x68
 80052cc:	5299      	strh	r1, [r3, r2]
}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	46bd      	mov	sp, r7
 80052d2:	b005      	add	sp, #20
 80052d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	080053c8 	.word	0x080053c8
 80052dc:	080053d0 	.word	0x080053d0

080052e0 <__libc_init_array>:
 80052e0:	b570      	push	{r4, r5, r6, lr}
 80052e2:	2600      	movs	r6, #0
 80052e4:	4d0c      	ldr	r5, [pc, #48]	; (8005318 <__libc_init_array+0x38>)
 80052e6:	4c0d      	ldr	r4, [pc, #52]	; (800531c <__libc_init_array+0x3c>)
 80052e8:	1b64      	subs	r4, r4, r5
 80052ea:	10a4      	asrs	r4, r4, #2
 80052ec:	42a6      	cmp	r6, r4
 80052ee:	d109      	bne.n	8005304 <__libc_init_array+0x24>
 80052f0:	2600      	movs	r6, #0
 80052f2:	f000 f821 	bl	8005338 <_init>
 80052f6:	4d0a      	ldr	r5, [pc, #40]	; (8005320 <__libc_init_array+0x40>)
 80052f8:	4c0a      	ldr	r4, [pc, #40]	; (8005324 <__libc_init_array+0x44>)
 80052fa:	1b64      	subs	r4, r4, r5
 80052fc:	10a4      	asrs	r4, r4, #2
 80052fe:	42a6      	cmp	r6, r4
 8005300:	d105      	bne.n	800530e <__libc_init_array+0x2e>
 8005302:	bd70      	pop	{r4, r5, r6, pc}
 8005304:	00b3      	lsls	r3, r6, #2
 8005306:	58eb      	ldr	r3, [r5, r3]
 8005308:	4798      	blx	r3
 800530a:	3601      	adds	r6, #1
 800530c:	e7ee      	b.n	80052ec <__libc_init_array+0xc>
 800530e:	00b3      	lsls	r3, r6, #2
 8005310:	58eb      	ldr	r3, [r5, r3]
 8005312:	4798      	blx	r3
 8005314:	3601      	adds	r6, #1
 8005316:	e7f2      	b.n	80052fe <__libc_init_array+0x1e>
 8005318:	080053d8 	.word	0x080053d8
 800531c:	080053d8 	.word	0x080053d8
 8005320:	080053d8 	.word	0x080053d8
 8005324:	080053dc 	.word	0x080053dc

08005328 <memset>:
 8005328:	0003      	movs	r3, r0
 800532a:	1882      	adds	r2, r0, r2
 800532c:	4293      	cmp	r3, r2
 800532e:	d100      	bne.n	8005332 <memset+0xa>
 8005330:	4770      	bx	lr
 8005332:	7019      	strb	r1, [r3, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	e7f9      	b.n	800532c <memset+0x4>

08005338 <_init>:
 8005338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533e:	bc08      	pop	{r3}
 8005340:	469e      	mov	lr, r3
 8005342:	4770      	bx	lr

08005344 <_fini>:
 8005344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534a:	bc08      	pop	{r3}
 800534c:	469e      	mov	lr, r3
 800534e:	4770      	bx	lr
