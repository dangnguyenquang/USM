
InputDevice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004628  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080046e0  080046e0  000146e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004768  08004768  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004768  08004768  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004768  08004768  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004768  08004768  00014768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  0800477c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  0800477c  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ebe  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000222d  00000000  00000000  00030ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00033120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  00033f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016209  00000000  00000000  00034c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d9a  00000000  00000000  0004ae41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e507  00000000  00000000  0005bbdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea0e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003268  00000000  00000000  000ea134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080046c8 	.word	0x080046c8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080046c8 	.word	0x080046c8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  if(huart->Instance == USART1)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a14      	ldr	r2, [pc, #80]	; (800044c <HAL_UART_RxCpltCallback+0x60>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d121      	bne.n	8000442 <HAL_UART_RxCpltCallback+0x56>
  {
    if(buffComming == 0)
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <HAL_UART_RxCpltCallback+0x64>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d106      	bne.n	8000414 <HAL_UART_RxCpltCallback+0x28>
    {
    	buffComming = 1;
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <HAL_UART_RxCpltCallback+0x64>)
 8000408:	2201      	movs	r2, #1
 800040a:	701a      	strb	r2, [r3, #0]
    	HAL_TIM_Base_Start(&htim3);
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <HAL_UART_RxCpltCallback+0x68>)
 800040e:	0018      	movs	r0, r3
 8000410:	f001 ff10 	bl	8002234 <HAL_TIM_Base_Start>
    }

    HAL_UART_Receive_IT(&huart1, &rx_dataChar, 1);
 8000414:	4910      	ldr	r1, [pc, #64]	; (8000458 <HAL_UART_RxCpltCallback+0x6c>)
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <HAL_UART_RxCpltCallback+0x70>)
 8000418:	2201      	movs	r2, #1
 800041a:	0018      	movs	r0, r3
 800041c:	f002 fac0 	bl	80029a0 <HAL_UART_Receive_IT>
    rx_data[rx_count] = rx_dataChar;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <HAL_UART_RxCpltCallback+0x74>)
 8000422:	881b      	ldrh	r3, [r3, #0]
 8000424:	001a      	movs	r2, r3
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_UART_RxCpltCallback+0x6c>)
 8000428:	7819      	ldrb	r1, [r3, #0]
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <HAL_UART_RxCpltCallback+0x78>)
 800042c:	5499      	strb	r1, [r3, r2]
    rx_count++;
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <HAL_UART_RxCpltCallback+0x74>)
 8000430:	881b      	ldrh	r3, [r3, #0]
 8000432:	3301      	adds	r3, #1
 8000434:	b29a      	uxth	r2, r3
 8000436:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <HAL_UART_RxCpltCallback+0x74>)
 8000438:	801a      	strh	r2, [r3, #0]
    __HAL_TIM_SET_COUNTER(&htim3,0);
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <HAL_UART_RxCpltCallback+0x68>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2200      	movs	r2, #0
 8000440:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	b002      	add	sp, #8
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	40013800 	.word	0x40013800
 8000450:	20000108 	.word	0x20000108
 8000454:	20000028 	.word	0x20000028
 8000458:	20000172 	.word	0x20000172
 800045c:	20000074 	.word	0x20000074
 8000460:	20000174 	.word	0x20000174
 8000464:	2000010c 	.word	0x2000010c

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046e:	f000 fc79 	bl	8000d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000472:	f000 f8a1 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000476:	f000 f98b 	bl	8000790 <MX_GPIO_Init>
  MX_TIM3_Init();
 800047a:	f000 f8e5 	bl	8000648 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800047e:	f000 f939 	bl	80006f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000482:	4b45      	ldr	r3, [pc, #276]	; (8000598 <main+0x130>)
 8000484:	0018      	movs	r0, r3
 8000486:	f001 fed5 	bl	8002234 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart1, &rx_dataChar, 1);
 800048a:	4944      	ldr	r1, [pc, #272]	; (800059c <main+0x134>)
 800048c:	4b44      	ldr	r3, [pc, #272]	; (80005a0 <main+0x138>)
 800048e:	2201      	movs	r2, #1
 8000490:	0018      	movs	r0, r3
 8000492:	f002 fa85 	bl	80029a0 <HAL_UART_Receive_IT>
  uint8_t preset_sensor_1 = 0;
 8000496:	1dfb      	adds	r3, r7, #7
 8000498:	2200      	movs	r2, #0
 800049a:	701a      	strb	r2, [r3, #0]
  uint8_t preset_sensor_2 = 0;
 800049c:	1dbb      	adds	r3, r7, #6
 800049e:	2200      	movs	r2, #0
 80004a0:	701a      	strb	r2, [r3, #0]
  uint8_t preset_sensor_3 = 0;
 80004a2:	1d7b      	adds	r3, r7, #5
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Dem san pham
    if(HAL_GPIO_ReadPin(Input_Sensor_01_GPIO_Port, Input_Sensor_01_Pin) == GPIO_PIN_RESET)
 80004a8:	23a0      	movs	r3, #160	; 0xa0
 80004aa:	05db      	lsls	r3, r3, #23
 80004ac:	2108      	movs	r1, #8
 80004ae:	0018      	movs	r0, r3
 80004b0:	f001 f810 	bl	80014d4 <HAL_GPIO_ReadPin>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d10d      	bne.n	80004d4 <main+0x6c>
    {
      HAL_Delay(delayReduceNoise);
 80004b8:	200a      	movs	r0, #10
 80004ba:	f000 fcd9 	bl	8000e70 <HAL_Delay>
      if(HAL_GPIO_ReadPin(Input_Sensor_01_GPIO_Port, Input_Sensor_01_Pin) == GPIO_PIN_RESET) preset_sensor_1 = 1;
 80004be:	23a0      	movs	r3, #160	; 0xa0
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	2108      	movs	r1, #8
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 f805 	bl	80014d4 <HAL_GPIO_ReadPin>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d102      	bne.n	80004d4 <main+0x6c>
 80004ce:	1dfb      	adds	r3, r7, #7
 80004d0:	2201      	movs	r2, #1
 80004d2:	701a      	strb	r2, [r3, #0]
    }
    if((HAL_GPIO_ReadPin(Input_Sensor_01_GPIO_Port, Input_Sensor_01_Pin) == GPIO_PIN_SET) && (preset_sensor_1 == 1))
 80004d4:	23a0      	movs	r3, #160	; 0xa0
 80004d6:	05db      	lsls	r3, r3, #23
 80004d8:	2108      	movs	r1, #8
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fffa 	bl	80014d4 <HAL_GPIO_ReadPin>
 80004e0:	0003      	movs	r3, r0
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d118      	bne.n	8000518 <main+0xb0>
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d114      	bne.n	8000518 <main+0xb0>
    {
      HAL_Delay(delayReduceNoise);
 80004ee:	200a      	movs	r0, #10
 80004f0:	f000 fcbe 	bl	8000e70 <HAL_Delay>
      if(HAL_GPIO_ReadPin(Input_Sensor_01_GPIO_Port, Input_Sensor_01_Pin) == GPIO_PIN_SET)
 80004f4:	23a0      	movs	r3, #160	; 0xa0
 80004f6:	05db      	lsls	r3, r3, #23
 80004f8:	2108      	movs	r1, #8
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 ffea 	bl	80014d4 <HAL_GPIO_ReadPin>
 8000500:	0003      	movs	r3, r0
 8000502:	2b01      	cmp	r3, #1
 8000504:	d108      	bne.n	8000518 <main+0xb0>
      {
        preset_sensor_1 = 0;
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
        countingStatusInput1++;
 800050c:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <main+0x13c>)
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	b29a      	uxth	r2, r3
 8000514:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <main+0x13c>)
 8000516:	801a      	strh	r2, [r3, #0]
      }
    }

    if(HAL_GPIO_ReadPin(Input_Sensor_02_GPIO_Port, Input_Sensor_02_Pin) == GPIO_PIN_RESET)
 8000518:	23a0      	movs	r3, #160	; 0xa0
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	2104      	movs	r1, #4
 800051e:	0018      	movs	r0, r3
 8000520:	f000 ffd8 	bl	80014d4 <HAL_GPIO_ReadPin>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d10e      	bne.n	8000546 <main+0xde>
    {
    	HAL_Delay(delayReduceNoise);
 8000528:	200a      	movs	r0, #10
 800052a:	f000 fca1 	bl	8000e70 <HAL_Delay>
    	if(HAL_GPIO_ReadPin(Input_Sensor_02_GPIO_Port, Input_Sensor_02_Pin) == GPIO_PIN_RESET) countingStatusInput2 = 1;
 800052e:	23a0      	movs	r3, #160	; 0xa0
 8000530:	05db      	lsls	r3, r3, #23
 8000532:	2104      	movs	r1, #4
 8000534:	0018      	movs	r0, r3
 8000536:	f000 ffcd 	bl	80014d4 <HAL_GPIO_ReadPin>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d106      	bne.n	800054c <main+0xe4>
 800053e:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <main+0x140>)
 8000540:	2201      	movs	r2, #1
 8000542:	801a      	strh	r2, [r3, #0]
 8000544:	e002      	b.n	800054c <main+0xe4>
    }
    else countingStatusInput2 = 0;
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <main+0x140>)
 8000548:	2200      	movs	r2, #0
 800054a:	801a      	strh	r2, [r3, #0]




	// nhan uart
    if(__HAL_TIM_GetCounter(&htim3) > 5)
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <main+0x130>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000552:	2b05      	cmp	r3, #5
 8000554:	d9a8      	bls.n	80004a8 <main+0x40>
    {
      __HAL_TIM_SET_COUNTER(&htim3,0);
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <main+0x130>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	; 0x24
      HAL_TIM_Base_Stop(&htim3);
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <main+0x130>)
 8000560:	0018      	movs	r0, r3
 8000562:	f001 feb5 	bl	80022d0 <HAL_TIM_Base_Stop>
      buffComming = 0;
 8000566:	4b11      	ldr	r3, [pc, #68]	; (80005ac <main+0x144>)
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]
      if(CRC_MODBUS(rx_data, rx_count) && rx_data[0]== address) ModbusTransHandle();
 800056c:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <main+0x148>)
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <main+0x14c>)
 8000574:	0011      	movs	r1, r2
 8000576:	0018      	movs	r0, r3
 8000578:	f000 f9ee 	bl	8000958 <CRC_MODBUS>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d005      	beq.n	800058c <main+0x124>
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <main+0x14c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b02      	cmp	r3, #2
 8000586:	d101      	bne.n	800058c <main+0x124>
 8000588:	f000 fa66 	bl	8000a58 <ModbusTransHandle>
      clearUart(rx_data, uartBytes);
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <main+0x14c>)
 800058e:	2132      	movs	r1, #50	; 0x32
 8000590:	0018      	movs	r0, r3
 8000592:	f000 f949 	bl	8000828 <clearUart>
    if(HAL_GPIO_ReadPin(Input_Sensor_01_GPIO_Port, Input_Sensor_01_Pin) == GPIO_PIN_RESET)
 8000596:	e787      	b.n	80004a8 <main+0x40>
 8000598:	20000028 	.word	0x20000028
 800059c:	20000172 	.word	0x20000172
 80005a0:	20000074 	.word	0x20000074
 80005a4:	20000176 	.word	0x20000176
 80005a8:	20000178 	.word	0x20000178
 80005ac:	20000108 	.word	0x20000108
 80005b0:	20000174 	.word	0x20000174
 80005b4:	2000010c 	.word	0x2000010c

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b093      	sub	sp, #76	; 0x4c
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	2414      	movs	r4, #20
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	0018      	movs	r0, r3
 80005c4:	2334      	movs	r3, #52	; 0x34
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f004 f875 	bl	80046b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	0018      	movs	r0, r3
 80005d2:	2310      	movs	r3, #16
 80005d4:	001a      	movs	r2, r3
 80005d6:	2100      	movs	r1, #0
 80005d8:	f004 f86e 	bl	80046b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 ff95 	bl	8001510 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	2202      	movs	r2, #2
 80005ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	0052      	lsls	r2, r2, #1
 80005f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	2240      	movs	r2, #64	; 0x40
 80005fe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000600:	193b      	adds	r3, r7, r4
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	193b      	adds	r3, r7, r4
 8000608:	0018      	movs	r0, r3
 800060a:	f000 ffcd 	bl	80015a8 <HAL_RCC_OscConfig>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000612:	f000 fa79 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2207      	movs	r2, #7
 800061a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2100      	movs	r1, #0
 8000632:	0018      	movs	r0, r3
 8000634:	f001 fac8 	bl	8001bc8 <HAL_RCC_ClockConfig>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800063c:	f000 fa64 	bl	8000b08 <Error_Handler>
  }
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	b013      	add	sp, #76	; 0x4c
 8000646:	bd90      	pop	{r4, r7, pc}

08000648 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064e:	2310      	movs	r3, #16
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	0018      	movs	r0, r3
 8000654:	2310      	movs	r3, #16
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f004 f82d 	bl	80046b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	0018      	movs	r0, r3
 8000662:	230c      	movs	r3, #12
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f004 f826 	bl	80046b8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_TIM3_Init+0xa0>)
 800066e:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <MX_TIM3_Init+0xa4>)
 8000670:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000;
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <MX_TIM3_Init+0xa0>)
 8000674:	22fa      	movs	r2, #250	; 0xfa
 8000676:	0192      	lsls	r2, r2, #6
 8000678:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_TIM3_Init+0xa0>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <MX_TIM3_Init+0xa0>)
 8000682:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <MX_TIM3_Init+0xa8>)
 8000684:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_TIM3_Init+0xa0>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_TIM3_Init+0xa0>)
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_TIM3_Init+0xa0>)
 8000694:	0018      	movs	r0, r3
 8000696:	f001 fd75 	bl	8002184 <HAL_TIM_Base_Init>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800069e:	f000 fa33 	bl	8000b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a2:	2110      	movs	r1, #16
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2280      	movs	r2, #128	; 0x80
 80006a8:	0152      	lsls	r2, r2, #5
 80006aa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006ac:	187a      	adds	r2, r7, r1
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_TIM3_Init+0xa0>)
 80006b0:	0011      	movs	r1, r2
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 fe32 	bl	800231c <HAL_TIM_ConfigClockSource>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80006bc:	f000 fa24 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006cc:	1d3a      	adds	r2, r7, #4
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_TIM3_Init+0xa0>)
 80006d0:	0011      	movs	r1, r2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f002 f80a 	bl	80026ec <HAL_TIMEx_MasterConfigSynchronization>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80006dc:	f000 fa14 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b008      	add	sp, #32
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000028 	.word	0x20000028
 80006ec:	40000400 	.word	0x40000400
 80006f0:	0000ffff 	.word	0x0000ffff

080006f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f8:	4b23      	ldr	r3, [pc, #140]	; (8000788 <MX_USART1_UART_Init+0x94>)
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <MX_USART1_UART_Init+0x98>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006fe:	4b22      	ldr	r3, [pc, #136]	; (8000788 <MX_USART1_UART_Init+0x94>)
 8000700:	22e1      	movs	r2, #225	; 0xe1
 8000702:	0252      	lsls	r2, r2, #9
 8000704:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <MX_USART1_UART_Init+0x94>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_USART1_UART_Init+0x94>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <MX_USART1_UART_Init+0x94>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_USART1_UART_Init+0x94>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_USART1_UART_Init+0x94>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_USART1_UART_Init+0x94>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MX_USART1_UART_Init+0x94>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_USART1_UART_Init+0x94>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_USART1_UART_Init+0x94>)
 8000738:	2200      	movs	r2, #0
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_USART1_UART_Init+0x94>)
 800073e:	0018      	movs	r0, r3
 8000740:	f002 f83c 	bl	80027bc <HAL_UART_Init>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000748:	f000 f9de 	bl	8000b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART1_UART_Init+0x94>)
 800074e:	2100      	movs	r1, #0
 8000750:	0018      	movs	r0, r3
 8000752:	f003 fead 	bl	80044b0 <HAL_UARTEx_SetTxFifoThreshold>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800075a:	f000 f9d5 	bl	8000b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MX_USART1_UART_Init+0x94>)
 8000760:	2100      	movs	r1, #0
 8000762:	0018      	movs	r0, r3
 8000764:	f003 fee4 	bl	8004530 <HAL_UARTEx_SetRxFifoThreshold>
 8000768:	1e03      	subs	r3, r0, #0
 800076a:	d001      	beq.n	8000770 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800076c:	f000 f9cc 	bl	8000b08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <MX_USART1_UART_Init+0x94>)
 8000772:	0018      	movs	r0, r3
 8000774:	f003 fe62 	bl	800443c <HAL_UARTEx_DisableFifoMode>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800077c:	f000 f9c4 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	20000074 	.word	0x20000074
 800078c:	40013800 	.word	0x40013800

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	240c      	movs	r4, #12
 8000798:	193b      	adds	r3, r7, r4
 800079a:	0018      	movs	r0, r3
 800079c:	2314      	movs	r3, #20
 800079e:	001a      	movs	r2, r3
 80007a0:	2100      	movs	r1, #0
 80007a2:	f003 ff89 	bl	80046b8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <MX_GPIO_Init+0x90>)
 80007a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007aa:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <MX_GPIO_Init+0x90>)
 80007ac:	2101      	movs	r1, #1
 80007ae:	430a      	orrs	r2, r1
 80007b0:	635a      	str	r2, [r3, #52]	; 0x34
 80007b2:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <MX_GPIO_Init+0x90>)
 80007b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007b6:	2201      	movs	r2, #1
 80007b8:	4013      	ands	r3, r2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_GPIO_Init+0x90>)
 80007c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_GPIO_Init+0x90>)
 80007c4:	2102      	movs	r1, #2
 80007c6:	430a      	orrs	r2, r1
 80007c8:	635a      	str	r2, [r3, #52]	; 0x34
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_GPIO_Init+0x90>)
 80007cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ce:	2202      	movs	r2, #2
 80007d0:	4013      	ands	r3, r2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : Input_Sensor_02_Pin Input_Sensor_01_Pin */
  GPIO_InitStruct.Pin = Input_Sensor_02_Pin|Input_Sensor_01_Pin;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	220c      	movs	r2, #12
 80007da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	2201      	movs	r2, #1
 80007e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	193a      	adds	r2, r7, r4
 80007ea:	23a0      	movs	r3, #160	; 0xa0
 80007ec:	05db      	lsls	r3, r3, #23
 80007ee:	0011      	movs	r1, r2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 fd0b 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : Input_Sensor_03_Pin */
  GPIO_InitStruct.Pin = Input_Sensor_03_Pin;
 80007f6:	0021      	movs	r1, r4
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	01d2      	lsls	r2, r2, #7
 80007fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2201      	movs	r2, #1
 800080a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Input_Sensor_03_GPIO_Port, &GPIO_InitStruct);
 800080c:	187b      	adds	r3, r7, r1
 800080e:	4a05      	ldr	r2, [pc, #20]	; (8000824 <MX_GPIO_Init+0x94>)
 8000810:	0019      	movs	r1, r3
 8000812:	0010      	movs	r0, r2
 8000814:	f000 fcfa 	bl	800120c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b009      	add	sp, #36	; 0x24
 800081e:	bd90      	pop	{r4, r7, pc}
 8000820:	40021000 	.word	0x40021000
 8000824:	50000400 	.word	0x50000400

08000828 <clearUart>:

/* USER CODE BEGIN 4 */
void clearUart(uint8_t *ptrBuffer, uint16_t sizeBuffer)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	000a      	movs	r2, r1
 8000832:	1cbb      	adds	r3, r7, #2
 8000834:	801a      	strh	r2, [r3, #0]
  if(ptrBuffer == &rx_data[0]) rx_count = 0;
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <clearUart+0x58>)
 800083a:	429a      	cmp	r2, r3
 800083c:	d102      	bne.n	8000844 <clearUart+0x1c>
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <clearUart+0x5c>)
 8000840:	2200      	movs	r2, #0
 8000842:	801a      	strh	r2, [r3, #0]

	for(uint16_t i = 0; i < sizeBuffer; i++) ptrBuffer[i] = '\0';
 8000844:	230e      	movs	r3, #14
 8000846:	18fb      	adds	r3, r7, r3
 8000848:	2200      	movs	r2, #0
 800084a:	801a      	strh	r2, [r3, #0]
 800084c:	e00b      	b.n	8000866 <clearUart+0x3e>
 800084e:	210e      	movs	r1, #14
 8000850:	187b      	adds	r3, r7, r1
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	18d3      	adds	r3, r2, r3
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
 800085c:	187b      	adds	r3, r7, r1
 800085e:	881a      	ldrh	r2, [r3, #0]
 8000860:	187b      	adds	r3, r7, r1
 8000862:	3201      	adds	r2, #1
 8000864:	801a      	strh	r2, [r3, #0]
 8000866:	230e      	movs	r3, #14
 8000868:	18fa      	adds	r2, r7, r3
 800086a:	1cbb      	adds	r3, r7, #2
 800086c:	8812      	ldrh	r2, [r2, #0]
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	429a      	cmp	r2, r3
 8000872:	d3ec      	bcc.n	800084e <clearUart+0x26>
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b004      	add	sp, #16
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	2000010c 	.word	0x2000010c
 8000884:	20000174 	.word	0x20000174

08000888 <Calc_CRC16>:
  }
  *buff_1_len = *buff_1_len + buff_2_len;
}

void Calc_CRC16(uint8_t *input, uint16_t size, uint8_t *output)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	607a      	str	r2, [r7, #4]
 8000892:	230a      	movs	r3, #10
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	1c0a      	adds	r2, r1, #0
 8000898:	801a      	strh	r2, [r3, #0]
  uint16_t reg_crc = 0xFFFF;
 800089a:	2316      	movs	r3, #22
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	2201      	movs	r2, #1
 80008a0:	4252      	negs	r2, r2
 80008a2:	801a      	strh	r2, [r3, #0]

  for(uint16_t i = 0; i < size; i++)
 80008a4:	2314      	movs	r3, #20
 80008a6:	18fb      	adds	r3, r7, r3
 80008a8:	2200      	movs	r2, #0
 80008aa:	801a      	strh	r2, [r3, #0]
 80008ac:	e037      	b.n	800091e <Calc_CRC16+0x96>
  {
    reg_crc ^= input[i];
 80008ae:	2314      	movs	r3, #20
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	18d3      	adds	r3, r2, r3
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b299      	uxth	r1, r3
 80008bc:	2216      	movs	r2, #22
 80008be:	18bb      	adds	r3, r7, r2
 80008c0:	18ba      	adds	r2, r7, r2
 80008c2:	8812      	ldrh	r2, [r2, #0]
 80008c4:	404a      	eors	r2, r1
 80008c6:	801a      	strh	r2, [r3, #0]
    for(uint8_t j = 0; j < 8; j++)
 80008c8:	2313      	movs	r3, #19
 80008ca:	18fb      	adds	r3, r7, r3
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
 80008d0:	e01a      	b.n	8000908 <Calc_CRC16+0x80>
    {
      if((reg_crc & 0x01) == 1) reg_crc = (reg_crc >> 1) ^ 0xA001;
 80008d2:	2116      	movs	r1, #22
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	2201      	movs	r2, #1
 80008da:	4013      	ands	r3, r2
 80008dc:	d008      	beq.n	80008f0 <Calc_CRC16+0x68>
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	085b      	lsrs	r3, r3, #1
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	491a      	ldr	r1, [pc, #104]	; (8000954 <Calc_CRC16+0xcc>)
 80008ea:	404a      	eors	r2, r1
 80008ec:	801a      	strh	r2, [r3, #0]
 80008ee:	e005      	b.n	80008fc <Calc_CRC16+0x74>
      else reg_crc = reg_crc >> 1;
 80008f0:	2216      	movs	r2, #22
 80008f2:	18bb      	adds	r3, r7, r2
 80008f4:	18ba      	adds	r2, r7, r2
 80008f6:	8812      	ldrh	r2, [r2, #0]
 80008f8:	0852      	lsrs	r2, r2, #1
 80008fa:	801a      	strh	r2, [r3, #0]
    for(uint8_t j = 0; j < 8; j++)
 80008fc:	2113      	movs	r1, #19
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	781a      	ldrb	r2, [r3, #0]
 8000902:	187b      	adds	r3, r7, r1
 8000904:	3201      	adds	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	2313      	movs	r3, #19
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b07      	cmp	r3, #7
 8000910:	d9df      	bls.n	80008d2 <Calc_CRC16+0x4a>
  for(uint16_t i = 0; i < size; i++)
 8000912:	2114      	movs	r1, #20
 8000914:	187b      	adds	r3, r7, r1
 8000916:	881a      	ldrh	r2, [r3, #0]
 8000918:	187b      	adds	r3, r7, r1
 800091a:	3201      	adds	r2, #1
 800091c:	801a      	strh	r2, [r3, #0]
 800091e:	2314      	movs	r3, #20
 8000920:	18fa      	adds	r2, r7, r3
 8000922:	230a      	movs	r3, #10
 8000924:	18fb      	adds	r3, r7, r3
 8000926:	8812      	ldrh	r2, [r2, #0]
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	429a      	cmp	r2, r3
 800092c:	d3bf      	bcc.n	80008ae <Calc_CRC16+0x26>
    }
  }

  output[1] = (reg_crc >> 8) & 0xFF;
 800092e:	2116      	movs	r1, #22
 8000930:	187b      	adds	r3, r7, r1
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	0a1b      	lsrs	r3, r3, #8
 8000936:	b29a      	uxth	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3301      	adds	r3, #1
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	701a      	strb	r2, [r3, #0]
  output[0] = reg_crc & 0xFF;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	b2da      	uxtb	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	701a      	strb	r2, [r3, #0]
}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b006      	add	sp, #24
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	ffffa001 	.word	0xffffa001

08000958 <CRC_MODBUS>:

uint8_t CRC_MODBUS(uint8_t *input, uint8_t size)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	000a      	movs	r2, r1
 8000962:	1cfb      	adds	r3, r7, #3
 8000964:	701a      	strb	r2, [r3, #0]
  uint16_t check_sum[2];
  uint16_t reg_crc = 0xFFFF;
 8000966:	230e      	movs	r3, #14
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	2201      	movs	r2, #1
 800096c:	4252      	negs	r2, r2
 800096e:	801a      	strh	r2, [r3, #0]

  for(uint8_t i = 0; i < size - 2; i++) { //tru 2 bytes CRC cuoi
 8000970:	230d      	movs	r3, #13
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
 8000978:	e046      	b.n	8000a08 <CRC_MODBUS+0xb0>
    reg_crc ^= input[i];
 800097a:	230d      	movs	r3, #13
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	18d3      	adds	r3, r2, r3
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b299      	uxth	r1, r3
 8000988:	220e      	movs	r2, #14
 800098a:	18bb      	adds	r3, r7, r2
 800098c:	18ba      	adds	r2, r7, r2
 800098e:	8812      	ldrh	r2, [r2, #0]
 8000990:	404a      	eors	r2, r1
 8000992:	801a      	strh	r2, [r3, #0]

    for(uint8_t j = 0; j < 8; j++) {
 8000994:	230c      	movs	r3, #12
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
 800099c:	e01a      	b.n	80009d4 <CRC_MODBUS+0x7c>
      if((reg_crc & 0x01) == 1) reg_crc = (reg_crc >> 1) ^ 0xA001;
 800099e:	210e      	movs	r1, #14
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	2201      	movs	r2, #1
 80009a6:	4013      	ands	r3, r2
 80009a8:	d008      	beq.n	80009bc <CRC_MODBUS+0x64>
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	085b      	lsrs	r3, r3, #1
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	4927      	ldr	r1, [pc, #156]	; (8000a54 <CRC_MODBUS+0xfc>)
 80009b6:	404a      	eors	r2, r1
 80009b8:	801a      	strh	r2, [r3, #0]
 80009ba:	e005      	b.n	80009c8 <CRC_MODBUS+0x70>
      else reg_crc = reg_crc >> 1;
 80009bc:	220e      	movs	r2, #14
 80009be:	18bb      	adds	r3, r7, r2
 80009c0:	18ba      	adds	r2, r7, r2
 80009c2:	8812      	ldrh	r2, [r2, #0]
 80009c4:	0852      	lsrs	r2, r2, #1
 80009c6:	801a      	strh	r2, [r3, #0]
    for(uint8_t j = 0; j < 8; j++) {
 80009c8:	210c      	movs	r1, #12
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	3201      	adds	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
 80009d4:	230c      	movs	r3, #12
 80009d6:	18fb      	adds	r3, r7, r3
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b07      	cmp	r3, #7
 80009dc:	d9df      	bls.n	800099e <CRC_MODBUS+0x46>
    }

    check_sum[1] = (reg_crc >> 8) &0xFF;
 80009de:	210e      	movs	r1, #14
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	2008      	movs	r0, #8
 80009ea:	183b      	adds	r3, r7, r0
 80009ec:	805a      	strh	r2, [r3, #2]
    check_sum[0] = reg_crc & 0xFF;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	22ff      	movs	r2, #255	; 0xff
 80009f4:	4013      	ands	r3, r2
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	183b      	adds	r3, r7, r0
 80009fa:	801a      	strh	r2, [r3, #0]
  for(uint8_t i = 0; i < size - 2; i++) { //tru 2 bytes CRC cuoi
 80009fc:	210d      	movs	r1, #13
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	3201      	adds	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
 8000a08:	230d      	movs	r3, #13
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	1cfb      	adds	r3, r7, #3
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	3b02      	subs	r3, #2
 8000a14:	429a      	cmp	r2, r3
 8000a16:	dbb0      	blt.n	800097a <CRC_MODBUS+0x22>
    //debug = check_sum[0];
  }

  if(input[size-2] == check_sum[0] && input[size-1] == check_sum[1]) return 1;
 8000a18:	1cfb      	adds	r3, r7, #3
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	3b02      	subs	r3, #2
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	18d3      	adds	r3, r2, r3
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	2108      	movs	r1, #8
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d10c      	bne.n	8000a4a <CRC_MODBUS+0xf2>
 8000a30:	1cfb      	adds	r3, r7, #3
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	3b01      	subs	r3, #1
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	18d3      	adds	r3, r2, r3
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	885b      	ldrh	r3, [r3, #2]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d101      	bne.n	8000a4a <CRC_MODBUS+0xf2>
 8000a46:	2301      	movs	r3, #1
 8000a48:	e000      	b.n	8000a4c <CRC_MODBUS+0xf4>
  else return 0;
 8000a4a:	2300      	movs	r3, #0
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b004      	add	sp, #16
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	ffffa001 	.word	0xffffa001

08000a58 <ModbusTransHandle>:

void ModbusTransHandle(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  tx_data[0] = address;
 8000a5c:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <ModbusTransHandle+0x98>)
 8000a5e:	2202      	movs	r2, #2
 8000a60:	701a      	strb	r2, [r3, #0]
  tx_data[1] = function;
 8000a62:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <ModbusTransHandle+0x98>)
 8000a64:	2204      	movs	r2, #4
 8000a66:	705a      	strb	r2, [r3, #1]
  tx_data[2] = amongBytes;
 8000a68:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <ModbusTransHandle+0x98>)
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	709a      	strb	r2, [r3, #2]
  tx_data[3] = countingStatusInput1 >> 8;
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <ModbusTransHandle+0x9c>)
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	0a1b      	lsrs	r3, r3, #8
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <ModbusTransHandle+0x98>)
 8000a7a:	70da      	strb	r2, [r3, #3]
  tx_data[4] = countingStatusInput1;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <ModbusTransHandle+0x9c>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <ModbusTransHandle+0x98>)
 8000a84:	711a      	strb	r2, [r3, #4]
  tx_data[5] = countingStatusInput2 >> 8;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <ModbusTransHandle+0xa0>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	0a1b      	lsrs	r3, r3, #8
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <ModbusTransHandle+0x98>)
 8000a92:	715a      	strb	r2, [r3, #5]
  tx_data[6] = countingStatusInput2;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <ModbusTransHandle+0xa0>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <ModbusTransHandle+0x98>)
 8000a9c:	719a      	strb	r2, [r3, #6]
  tx_data[7] = countingStatusInput3 >> 8;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <ModbusTransHandle+0xa4>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	0a1b      	lsrs	r3, r3, #8
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <ModbusTransHandle+0x98>)
 8000aaa:	71da      	strb	r2, [r3, #7]
  tx_data[8] = countingStatusInput3;
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <ModbusTransHandle+0xa4>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <ModbusTransHandle+0x98>)
 8000ab4:	721a      	strb	r2, [r3, #8]

  Calc_CRC16(tx_data, 9, checkSumCRC);
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <ModbusTransHandle+0xa8>)
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <ModbusTransHandle+0x98>)
 8000aba:	2109      	movs	r1, #9
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff fee3 	bl	8000888 <Calc_CRC16>

  tx_data[9] = checkSumCRC[0];
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <ModbusTransHandle+0xa8>)
 8000ac4:	781a      	ldrb	r2, [r3, #0]
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <ModbusTransHandle+0x98>)
 8000ac8:	725a      	strb	r2, [r3, #9]
  tx_data[10] = checkSumCRC[1];
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <ModbusTransHandle+0xa8>)
 8000acc:	785a      	ldrb	r2, [r3, #1]
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <ModbusTransHandle+0x98>)
 8000ad0:	729a      	strb	r2, [r3, #10]
  HAL_UART_Transmit(&huart1, tx_data, 11, 1000);
 8000ad2:	23fa      	movs	r3, #250	; 0xfa
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	4906      	ldr	r1, [pc, #24]	; (8000af0 <ModbusTransHandle+0x98>)
 8000ad8:	480a      	ldr	r0, [pc, #40]	; (8000b04 <ModbusTransHandle+0xac>)
 8000ada:	220b      	movs	r2, #11
 8000adc:	f001 fec4 	bl	8002868 <HAL_UART_Transmit>

  clearUart(tx_data, uartBytes);
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <ModbusTransHandle+0x98>)
 8000ae2:	2132      	movs	r1, #50	; 0x32
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f7ff fe9f 	bl	8000828 <clearUart>
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000140 	.word	0x20000140
 8000af4:	20000176 	.word	0x20000176
 8000af8:	20000178 	.word	0x20000178
 8000afc:	2000017a 	.word	0x2000017a
 8000b00:	2000017c 	.word	0x2000017c
 8000b04:	20000074 	.word	0x20000074

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <Error_Handler+0x8>
	...

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <HAL_MspInit+0x44>)
 8000b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_MspInit+0x44>)
 8000b20:	2101      	movs	r1, #1
 8000b22:	430a      	orrs	r2, r1
 8000b24:	641a      	str	r2, [r3, #64]	; 0x40
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <HAL_MspInit+0x44>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_MspInit+0x44>)
 8000b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_MspInit+0x44>)
 8000b38:	2180      	movs	r1, #128	; 0x80
 8000b3a:	0549      	lsls	r1, r1, #21
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_MspInit+0x44>)
 8000b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	055b      	lsls	r3, r3, #21
 8000b48:	4013      	ands	r3, r2
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b002      	add	sp, #8
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	40021000 	.word	0x40021000

08000b5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a09      	ldr	r2, [pc, #36]	; (8000b90 <HAL_TIM_Base_MspInit+0x34>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d10b      	bne.n	8000b86 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_TIM_Base_MspInit+0x38>)
 8000b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_TIM_Base_MspInit+0x38>)
 8000b74:	2102      	movs	r1, #2
 8000b76:	430a      	orrs	r2, r1
 8000b78:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_TIM_Base_MspInit+0x38>)
 8000b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b7e:	2202      	movs	r2, #2
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b004      	add	sp, #16
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	40000400 	.word	0x40000400
 8000b94:	40021000 	.word	0x40021000

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b091      	sub	sp, #68	; 0x44
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	232c      	movs	r3, #44	; 0x2c
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	2314      	movs	r3, #20
 8000ba8:	001a      	movs	r2, r3
 8000baa:	2100      	movs	r1, #0
 8000bac:	f003 fd84 	bl	80046b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb0:	2410      	movs	r4, #16
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	231c      	movs	r3, #28
 8000bb8:	001a      	movs	r2, r3
 8000bba:	2100      	movs	r1, #0
 8000bbc:	f003 fd7c 	bl	80046b8 <memset>
  if(huart->Instance==USART1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a3a      	ldr	r2, [pc, #232]	; (8000cb0 <HAL_UART_MspInit+0x118>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d16e      	bne.n	8000ca8 <HAL_UART_MspInit+0x110>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	2201      	movs	r2, #1
 8000bce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000bd0:	193b      	adds	r3, r7, r4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd6:	193b      	adds	r3, r7, r4
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f001 f99f 	bl	8001f1c <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	1e03      	subs	r3, r0, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000be2:	f7ff ff91 	bl	8000b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000be6:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <HAL_UART_MspInit+0x11c>)
 8000be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bea:	4b32      	ldr	r3, [pc, #200]	; (8000cb4 <HAL_UART_MspInit+0x11c>)
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	01c9      	lsls	r1, r1, #7
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	641a      	str	r2, [r3, #64]	; 0x40
 8000bf4:	4b2f      	ldr	r3, [pc, #188]	; (8000cb4 <HAL_UART_MspInit+0x11c>)
 8000bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	01db      	lsls	r3, r3, #7
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <HAL_UART_MspInit+0x11c>)
 8000c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c06:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <HAL_UART_MspInit+0x11c>)
 8000c08:	2101      	movs	r1, #1
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c0e:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <HAL_UART_MspInit+0x11c>)
 8000c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c12:	2201      	movs	r2, #1
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS485_Tx_Pin;
 8000c1a:	212c      	movs	r1, #44	; 0x2c
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	0092      	lsls	r2, r2, #2
 8000c22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	000c      	movs	r4, r1
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	2202      	movs	r2, #2
 8000c2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	2201      	movs	r2, #1
 8000c30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	2203      	movs	r2, #3
 8000c36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RS485_Tx_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	193a      	adds	r2, r7, r4
 8000c40:	23a0      	movs	r3, #160	; 0xa0
 8000c42:	05db      	lsls	r3, r3, #23
 8000c44:	0011      	movs	r1, r2
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 fae0 	bl	800120c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_Rx_Pin;
 8000c4c:	0021      	movs	r1, r4
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	00d2      	lsls	r2, r2, #3
 8000c54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2202      	movs	r2, #2
 8000c5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2202      	movs	r2, #2
 8000c60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2203      	movs	r2, #3
 8000c66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RS485_Rx_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	187a      	adds	r2, r7, r1
 8000c70:	23a0      	movs	r3, #160	; 0xa0
 8000c72:	05db      	lsls	r3, r3, #23
 8000c74:	0011      	movs	r1, r2
 8000c76:	0018      	movs	r0, r3
 8000c78:	f000 fac8 	bl	800120c <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA9);
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_UART_MspInit+0x120>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <HAL_UART_MspInit+0x120>)
 8000c82:	2180      	movs	r1, #128	; 0x80
 8000c84:	03c9      	lsls	r1, r1, #15
 8000c86:	430a      	orrs	r2, r1
 8000c88:	601a      	str	r2, [r3, #0]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA10);
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_UART_MspInit+0x120>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <HAL_UART_MspInit+0x120>)
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	0409      	lsls	r1, r1, #16
 8000c94:	430a      	orrs	r2, r1
 8000c96:	601a      	str	r2, [r3, #0]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	201b      	movs	r0, #27
 8000c9e:	f000 f9b7 	bl	8001010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ca2:	201b      	movs	r0, #27
 8000ca4:	f000 f9c9 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b011      	add	sp, #68	; 0x44
 8000cae:	bd90      	pop	{r4, r7, pc}
 8000cb0:	40013800 	.word	0x40013800
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40010000 	.word	0x40010000

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce0:	f000 f8aa 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <USART1_IRQHandler+0x14>)
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f001 feac 	bl	8002a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	20000074 	.word	0x20000074

08000d04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d14:	f7ff fff6 	bl	8000d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1a:	490d      	ldr	r1, [pc, #52]	; (8000d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <LoopForever+0xe>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d30:	4c0a      	ldr	r4, [pc, #40]	; (8000d5c <LoopForever+0x16>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d3e:	f003 fc97 	bl	8004670 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d42:	f7ff fb91 	bl	8000468 <main>

08000d46 <LoopForever>:

LoopForever:
  b LoopForever
 8000d46:	e7fe      	b.n	8000d46 <LoopForever>
  ldr   r0, =_estack
 8000d48:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d54:	08004770 	.word	0x08004770
  ldr r2, =_sbss
 8000d58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d5c:	20000184 	.word	0x20000184

08000d60 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC1_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_Init+0x3c>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_Init+0x3c>)
 8000d76:	2180      	movs	r1, #128	; 0x80
 8000d78:	0049      	lsls	r1, r1, #1
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d7e:	2003      	movs	r0, #3
 8000d80:	f000 f810 	bl	8000da4 <HAL_InitTick>
 8000d84:	1e03      	subs	r3, r0, #0
 8000d86:	d003      	beq.n	8000d90 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d88:	1dfb      	adds	r3, r7, #7
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
 8000d8e:	e001      	b.n	8000d94 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff fec0 	bl	8000b14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	781b      	ldrb	r3, [r3, #0]
}
 8000d98:	0018      	movs	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b002      	add	sp, #8
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40022000 	.word	0x40022000

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dac:	230f      	movs	r3, #15
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_InitTick+0x88>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d02b      	beq.n	8000e14 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <HAL_InitTick+0x8c>)
 8000dbe:	681c      	ldr	r4, [r3, #0]
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_InitTick+0x88>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	0019      	movs	r1, r3
 8000dc6:	23fa      	movs	r3, #250	; 0xfa
 8000dc8:	0098      	lsls	r0, r3, #2
 8000dca:	f7ff f999 	bl	8000100 <__udivsi3>
 8000dce:	0003      	movs	r3, r0
 8000dd0:	0019      	movs	r1, r3
 8000dd2:	0020      	movs	r0, r4
 8000dd4:	f7ff f994 	bl	8000100 <__udivsi3>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f000 f93d 	bl	800105a <HAL_SYSTICK_Config>
 8000de0:	1e03      	subs	r3, r0, #0
 8000de2:	d112      	bne.n	8000e0a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d80a      	bhi.n	8000e00 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	2301      	movs	r3, #1
 8000dee:	425b      	negs	r3, r3
 8000df0:	2200      	movs	r2, #0
 8000df2:	0018      	movs	r0, r3
 8000df4:	f000 f90c 	bl	8001010 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_InitTick+0x90>)
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	e00d      	b.n	8000e1c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e00:	230f      	movs	r3, #15
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
 8000e08:	e008      	b.n	8000e1c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e0a:	230f      	movs	r3, #15
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
 8000e12:	e003      	b.n	8000e1c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e14:	230f      	movs	r3, #15
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	2201      	movs	r2, #1
 8000e1a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	781b      	ldrb	r3, [r3, #0]
}
 8000e22:	0018      	movs	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b005      	add	sp, #20
 8000e28:	bd90      	pop	{r4, r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000004 	.word	0x20000004

08000e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x1c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	001a      	movs	r2, r3
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_IncTick+0x20>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	18d2      	adds	r2, r2, r3
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_IncTick+0x20>)
 8000e4a:	601a      	str	r2, [r3, #0]
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000180 	.word	0x20000180

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b02      	ldr	r3, [pc, #8]	; (8000e6c <HAL_GetTick+0x10>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	20000180 	.word	0x20000180

08000e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff fff0 	bl	8000e5c <HAL_GetTick>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	3301      	adds	r3, #1
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_Delay+0x44>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	001a      	movs	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	189b      	adds	r3, r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	f7ff ffe0 	bl	8000e5c <HAL_GetTick>
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b004      	add	sp, #16
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	20000008 	.word	0x20000008

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	1dfb      	adds	r3, r7, #7
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eca:	d809      	bhi.n	8000ee0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	231f      	movs	r3, #31
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__NVIC_EnableIRQ+0x30>)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4091      	lsls	r1, r2
 8000edc:	000a      	movs	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b002      	add	sp, #8
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b7f      	cmp	r3, #127	; 0x7f
 8000f00:	d828      	bhi.n	8000f54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f02:	4a2f      	ldr	r2, [pc, #188]	; (8000fc0 <__NVIC_SetPriority+0xd4>)
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	33c0      	adds	r3, #192	; 0xc0
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	589b      	ldr	r3, [r3, r2]
 8000f12:	1dfa      	adds	r2, r7, #7
 8000f14:	7812      	ldrb	r2, [r2, #0]
 8000f16:	0011      	movs	r1, r2
 8000f18:	2203      	movs	r2, #3
 8000f1a:	400a      	ands	r2, r1
 8000f1c:	00d2      	lsls	r2, r2, #3
 8000f1e:	21ff      	movs	r1, #255	; 0xff
 8000f20:	4091      	lsls	r1, r2
 8000f22:	000a      	movs	r2, r1
 8000f24:	43d2      	mvns	r2, r2
 8000f26:	401a      	ands	r2, r3
 8000f28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	019b      	lsls	r3, r3, #6
 8000f2e:	22ff      	movs	r2, #255	; 0xff
 8000f30:	401a      	ands	r2, r3
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	0018      	movs	r0, r3
 8000f38:	2303      	movs	r3, #3
 8000f3a:	4003      	ands	r3, r0
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f40:	481f      	ldr	r0, [pc, #124]	; (8000fc0 <__NVIC_SetPriority+0xd4>)
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	33c0      	adds	r3, #192	; 0xc0
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f52:	e031      	b.n	8000fb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f54:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <__NVIC_SetPriority+0xd8>)
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	400b      	ands	r3, r1
 8000f60:	3b08      	subs	r3, #8
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	3306      	adds	r3, #6
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	18d3      	adds	r3, r2, r3
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	1dfa      	adds	r2, r7, #7
 8000f70:	7812      	ldrb	r2, [r2, #0]
 8000f72:	0011      	movs	r1, r2
 8000f74:	2203      	movs	r2, #3
 8000f76:	400a      	ands	r2, r1
 8000f78:	00d2      	lsls	r2, r2, #3
 8000f7a:	21ff      	movs	r1, #255	; 0xff
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	000a      	movs	r2, r1
 8000f80:	43d2      	mvns	r2, r2
 8000f82:	401a      	ands	r2, r3
 8000f84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	019b      	lsls	r3, r3, #6
 8000f8a:	22ff      	movs	r2, #255	; 0xff
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	0018      	movs	r0, r3
 8000f94:	2303      	movs	r3, #3
 8000f96:	4003      	ands	r3, r0
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f9c:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <__NVIC_SetPriority+0xd8>)
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	001c      	movs	r4, r3
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	4023      	ands	r3, r4
 8000fa8:	3b08      	subs	r3, #8
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	430a      	orrs	r2, r1
 8000fae:	3306      	adds	r3, #6
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	18c3      	adds	r3, r0, r3
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	601a      	str	r2, [r3, #0]
}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b003      	add	sp, #12
 8000fbe:	bd90      	pop	{r4, r7, pc}
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	1e5a      	subs	r2, r3, #1
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	045b      	lsls	r3, r3, #17
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d301      	bcc.n	8000fe0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e010      	b.n	8001002 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <SysTick_Config+0x44>)
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	3a01      	subs	r2, #1
 8000fe6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe8:	2301      	movs	r3, #1
 8000fea:	425b      	negs	r3, r3
 8000fec:	2103      	movs	r1, #3
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f7ff ff7c 	bl	8000eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x44>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x44>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	210f      	movs	r1, #15
 800101c:	187b      	adds	r3, r7, r1
 800101e:	1c02      	adds	r2, r0, #0
 8001020:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	187b      	adds	r3, r7, r1
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b25b      	sxtb	r3, r3
 800102a:	0011      	movs	r1, r2
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff ff5d 	bl	8000eec <__NVIC_SetPriority>
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	b004      	add	sp, #16
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	0002      	movs	r2, r0
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b25b      	sxtb	r3, r3
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff ff33 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b002      	add	sp, #8
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ffaf 	bl	8000fc8 <SysTick_Config>
 800106a:	0003      	movs	r3, r0
}
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e050      	b.n	8001128 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2225      	movs	r2, #37	; 0x25
 800108a:	5c9b      	ldrb	r3, [r3, r2]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d008      	beq.n	80010a4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2204      	movs	r2, #4
 8001096:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2224      	movs	r2, #36	; 0x24
 800109c:	2100      	movs	r1, #0
 800109e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e041      	b.n	8001128 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	210e      	movs	r1, #14
 80010b0:	438a      	bics	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	491c      	ldr	r1, [pc, #112]	; (8001130 <HAL_DMA_Abort+0xbc>)
 80010c0:	400a      	ands	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2101      	movs	r1, #1
 80010d0:	438a      	bics	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_DMA_Abort+0xc0>)
 80010d6:	6859      	ldr	r1, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	221c      	movs	r2, #28
 80010de:	4013      	ands	r3, r2
 80010e0:	2201      	movs	r2, #1
 80010e2:	409a      	lsls	r2, r3
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <HAL_DMA_Abort+0xc0>)
 80010e6:	430a      	orrs	r2, r1
 80010e8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80010f2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00c      	beq.n	8001116 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001106:	490a      	ldr	r1, [pc, #40]	; (8001130 <HAL_DMA_Abort+0xbc>)
 8001108:	400a      	ands	r2, r1
 800110a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001114:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2225      	movs	r2, #37	; 0x25
 800111a:	2101      	movs	r1, #1
 800111c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2224      	movs	r2, #36	; 0x24
 8001122:	2100      	movs	r1, #0
 8001124:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	0018      	movs	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	b002      	add	sp, #8
 800112e:	bd80      	pop	{r7, pc}
 8001130:	fffffeff 	.word	0xfffffeff
 8001134:	40020000 	.word	0x40020000

08001138 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001140:	210f      	movs	r1, #15
 8001142:	187b      	adds	r3, r7, r1
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2225      	movs	r2, #37	; 0x25
 800114c:	5c9b      	ldrb	r3, [r3, r2]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d006      	beq.n	8001162 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2204      	movs	r2, #4
 8001158:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800115a:	187b      	adds	r3, r7, r1
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	e049      	b.n	80011f6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	210e      	movs	r1, #14
 800116e:	438a      	bics	r2, r1
 8001170:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2101      	movs	r1, #1
 800117e:	438a      	bics	r2, r1
 8001180:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	491d      	ldr	r1, [pc, #116]	; (8001204 <HAL_DMA_Abort_IT+0xcc>)
 800118e:	400a      	ands	r2, r1
 8001190:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HAL_DMA_Abort_IT+0xd0>)
 8001194:	6859      	ldr	r1, [r3, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	221c      	movs	r2, #28
 800119c:	4013      	ands	r3, r2
 800119e:	2201      	movs	r2, #1
 80011a0:	409a      	lsls	r2, r3
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_DMA_Abort_IT+0xd0>)
 80011a4:	430a      	orrs	r2, r1
 80011a6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80011b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00c      	beq.n	80011d4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011c4:	490f      	ldr	r1, [pc, #60]	; (8001204 <HAL_DMA_Abort_IT+0xcc>)
 80011c6:	400a      	ands	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80011d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2225      	movs	r2, #37	; 0x25
 80011d8:	2101      	movs	r1, #1
 80011da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2224      	movs	r2, #36	; 0x24
 80011e0:	2100      	movs	r1, #0
 80011e2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d004      	beq.n	80011f6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	0010      	movs	r0, r2
 80011f4:	4798      	blx	r3
    }
  }
  return status;
 80011f6:	230f      	movs	r3, #15
 80011f8:	18fb      	adds	r3, r7, r3
 80011fa:	781b      	ldrb	r3, [r3, #0]
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	b004      	add	sp, #16
 8001202:	bd80      	pop	{r7, pc}
 8001204:	fffffeff 	.word	0xfffffeff
 8001208:	40020000 	.word	0x40020000

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121a:	e147      	b.n	80014ac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2101      	movs	r1, #1
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4091      	lsls	r1, r2
 8001226:	000a      	movs	r2, r1
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d100      	bne.n	8001234 <HAL_GPIO_Init+0x28>
 8001232:	e138      	b.n	80014a6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2203      	movs	r2, #3
 800123a:	4013      	ands	r3, r2
 800123c:	2b01      	cmp	r3, #1
 800123e:	d005      	beq.n	800124c <HAL_GPIO_Init+0x40>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2203      	movs	r2, #3
 8001246:	4013      	ands	r3, r2
 8001248:	2b02      	cmp	r3, #2
 800124a:	d130      	bne.n	80012ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	409a      	lsls	r2, r3
 800125a:	0013      	movs	r3, r2
 800125c:	43da      	mvns	r2, r3
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	409a      	lsls	r2, r3
 800126e:	0013      	movs	r3, r2
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001282:	2201      	movs	r2, #1
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	43da      	mvns	r2, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	2201      	movs	r2, #1
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2203      	movs	r2, #3
 80012b4:	4013      	ands	r3, r2
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d017      	beq.n	80012ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	409a      	lsls	r2, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	43da      	mvns	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	409a      	lsls	r2, r3
 80012dc:	0013      	movs	r3, r2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2203      	movs	r2, #3
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d123      	bne.n	800133e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	08da      	lsrs	r2, r3, #3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3208      	adds	r2, #8
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	58d3      	ldr	r3, [r2, r3]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	2207      	movs	r2, #7
 8001308:	4013      	ands	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	43da      	mvns	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	691a      	ldr	r2, [r3, #16]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2107      	movs	r1, #7
 8001322:	400b      	ands	r3, r1
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	08da      	lsrs	r2, r3, #3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3208      	adds	r2, #8
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	6939      	ldr	r1, [r7, #16]
 800133c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	43da      	mvns	r2, r3
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2203      	movs	r2, #3
 800135c:	401a      	ands	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	23c0      	movs	r3, #192	; 0xc0
 8001378:	029b      	lsls	r3, r3, #10
 800137a:	4013      	ands	r3, r2
 800137c:	d100      	bne.n	8001380 <HAL_GPIO_Init+0x174>
 800137e:	e092      	b.n	80014a6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001380:	4a50      	ldr	r2, [pc, #320]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3318      	adds	r3, #24
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	589b      	ldr	r3, [r3, r2]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2203      	movs	r2, #3
 8001392:	4013      	ands	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	220f      	movs	r2, #15
 8001398:	409a      	lsls	r2, r3
 800139a:	0013      	movs	r3, r2
 800139c:	43da      	mvns	r2, r3
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	23a0      	movs	r3, #160	; 0xa0
 80013a8:	05db      	lsls	r3, r3, #23
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d013      	beq.n	80013d6 <HAL_GPIO_Init+0x1ca>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a45      	ldr	r2, [pc, #276]	; (80014c8 <HAL_GPIO_Init+0x2bc>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d00d      	beq.n	80013d2 <HAL_GPIO_Init+0x1c6>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a44      	ldr	r2, [pc, #272]	; (80014cc <HAL_GPIO_Init+0x2c0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d007      	beq.n	80013ce <HAL_GPIO_Init+0x1c2>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a43      	ldr	r2, [pc, #268]	; (80014d0 <HAL_GPIO_Init+0x2c4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d101      	bne.n	80013ca <HAL_GPIO_Init+0x1be>
 80013c6:	2303      	movs	r3, #3
 80013c8:	e006      	b.n	80013d8 <HAL_GPIO_Init+0x1cc>
 80013ca:	2305      	movs	r3, #5
 80013cc:	e004      	b.n	80013d8 <HAL_GPIO_Init+0x1cc>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e002      	b.n	80013d8 <HAL_GPIO_Init+0x1cc>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <HAL_GPIO_Init+0x1cc>
 80013d6:	2300      	movs	r3, #0
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	2103      	movs	r1, #3
 80013dc:	400a      	ands	r2, r1
 80013de:	00d2      	lsls	r2, r2, #3
 80013e0:	4093      	lsls	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80013e8:	4936      	ldr	r1, [pc, #216]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3318      	adds	r3, #24
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	43da      	mvns	r2, r3
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	035b      	lsls	r3, r3, #13
 800140e:	4013      	ands	r3, r2
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800141a:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43da      	mvns	r2, r3
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	039b      	lsls	r3, r3, #14
 8001438:	4013      	ands	r3, r2
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800144a:	4a1e      	ldr	r2, [pc, #120]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 800144c:	2384      	movs	r3, #132	; 0x84
 800144e:	58d3      	ldr	r3, [r2, r3]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43da      	mvns	r2, r3
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	029b      	lsls	r3, r3, #10
 8001464:	4013      	ands	r3, r2
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001470:	4914      	ldr	r1, [pc, #80]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 8001472:	2284      	movs	r2, #132	; 0x84
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001478:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	58d3      	ldr	r3, [r2, r3]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	43da      	mvns	r2, r3
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	4013      	ands	r3, r2
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800149e:	4909      	ldr	r1, [pc, #36]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	40da      	lsrs	r2, r3
 80014b4:	1e13      	subs	r3, r2, #0
 80014b6:	d000      	beq.n	80014ba <HAL_GPIO_Init+0x2ae>
 80014b8:	e6b0      	b.n	800121c <HAL_GPIO_Init+0x10>
  }
}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b006      	add	sp, #24
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021800 	.word	0x40021800
 80014c8:	50000400 	.word	0x50000400
 80014cc:	50000800 	.word	0x50000800
 80014d0:	50000c00 	.word	0x50000c00

080014d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	000a      	movs	r2, r1
 80014de:	1cbb      	adds	r3, r7, #2
 80014e0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	1cba      	adds	r2, r7, #2
 80014e8:	8812      	ldrh	r2, [r2, #0]
 80014ea:	4013      	ands	r3, r2
 80014ec:	d004      	beq.n	80014f8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80014ee:	230f      	movs	r3, #15
 80014f0:	18fb      	adds	r3, r7, r3
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	e003      	b.n	8001500 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014f8:	230f      	movs	r3, #15
 80014fa:	18fb      	adds	r3, r7, r3
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001500:	230f      	movs	r3, #15
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	781b      	ldrb	r3, [r3, #0]
}
 8001506:	0018      	movs	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	b004      	add	sp, #16
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a19      	ldr	r2, [pc, #100]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800151e:	4013      	ands	r3, r2
 8001520:	0019      	movs	r1, r3
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	429a      	cmp	r2, r3
 8001532:	d11f      	bne.n	8001574 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	0013      	movs	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	189b      	adds	r3, r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4912      	ldr	r1, [pc, #72]	; (800158c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001542:	0018      	movs	r0, r3
 8001544:	f7fe fddc 	bl	8000100 <__udivsi3>
 8001548:	0003      	movs	r3, r0
 800154a:	3301      	adds	r3, #1
 800154c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800154e:	e008      	b.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3b01      	subs	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	e001      	b.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e009      	b.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001564:	695a      	ldr	r2, [r3, #20]
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	401a      	ands	r2, r3
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	429a      	cmp	r2, r3
 8001572:	d0ed      	beq.n	8001550 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	0018      	movs	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	b004      	add	sp, #16
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	40007000 	.word	0x40007000
 8001584:	fffff9ff 	.word	0xfffff9ff
 8001588:	20000000 	.word	0x20000000
 800158c:	000f4240 	.word	0x000f4240

08001590 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	23e0      	movs	r3, #224	; 0xe0
 800159a:	01db      	lsls	r3, r3, #7
 800159c:	4013      	ands	r3, r2
}
 800159e:	0018      	movs	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40021000 	.word	0x40021000

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e2f3      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2201      	movs	r2, #1
 80015c0:	4013      	ands	r3, r2
 80015c2:	d100      	bne.n	80015c6 <HAL_RCC_OscConfig+0x1e>
 80015c4:	e07c      	b.n	80016c0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015c6:	4bc3      	ldr	r3, [pc, #780]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2238      	movs	r2, #56	; 0x38
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d0:	4bc0      	ldr	r3, [pc, #768]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2203      	movs	r2, #3
 80015d6:	4013      	ands	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b10      	cmp	r3, #16
 80015de:	d102      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3e>
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d002      	beq.n	80015ec <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d10b      	bne.n	8001604 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	4bb9      	ldr	r3, [pc, #740]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	029b      	lsls	r3, r3, #10
 80015f4:	4013      	ands	r3, r2
 80015f6:	d062      	beq.n	80016be <HAL_RCC_OscConfig+0x116>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d15e      	bne.n	80016be <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e2ce      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	025b      	lsls	r3, r3, #9
 800160c:	429a      	cmp	r2, r3
 800160e:	d107      	bne.n	8001620 <HAL_RCC_OscConfig+0x78>
 8001610:	4bb0      	ldr	r3, [pc, #704]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4baf      	ldr	r3, [pc, #700]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	0249      	lsls	r1, r1, #9
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e020      	b.n	8001662 <HAL_RCC_OscConfig+0xba>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	23a0      	movs	r3, #160	; 0xa0
 8001626:	02db      	lsls	r3, r3, #11
 8001628:	429a      	cmp	r2, r3
 800162a:	d10e      	bne.n	800164a <HAL_RCC_OscConfig+0xa2>
 800162c:	4ba9      	ldr	r3, [pc, #676]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4ba8      	ldr	r3, [pc, #672]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001632:	2180      	movs	r1, #128	; 0x80
 8001634:	02c9      	lsls	r1, r1, #11
 8001636:	430a      	orrs	r2, r1
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	4ba6      	ldr	r3, [pc, #664]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4ba5      	ldr	r3, [pc, #660]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	0249      	lsls	r1, r1, #9
 8001644:	430a      	orrs	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e00b      	b.n	8001662 <HAL_RCC_OscConfig+0xba>
 800164a:	4ba2      	ldr	r3, [pc, #648]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4ba1      	ldr	r3, [pc, #644]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001650:	49a1      	ldr	r1, [pc, #644]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 8001652:	400a      	ands	r2, r1
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	4b9f      	ldr	r3, [pc, #636]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b9e      	ldr	r3, [pc, #632]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800165c:	499f      	ldr	r1, [pc, #636]	; (80018dc <HAL_RCC_OscConfig+0x334>)
 800165e:	400a      	ands	r2, r1
 8001660:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d014      	beq.n	8001694 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166a:	f7ff fbf7 	bl	8000e5c <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff fbf2 	bl	8000e5c <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e28d      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001686:	4b93      	ldr	r3, [pc, #588]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	029b      	lsls	r3, r3, #10
 800168e:	4013      	ands	r3, r2
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0xcc>
 8001692:	e015      	b.n	80016c0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff fbe2 	bl	8000e5c <HAL_GetTick>
 8001698:	0003      	movs	r3, r0
 800169a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800169e:	f7ff fbdd 	bl	8000e5c <HAL_GetTick>
 80016a2:	0002      	movs	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b64      	cmp	r3, #100	; 0x64
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e278      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016b0:	4b88      	ldr	r3, [pc, #544]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	029b      	lsls	r3, r3, #10
 80016b8:	4013      	ands	r3, r2
 80016ba:	d1f0      	bne.n	800169e <HAL_RCC_OscConfig+0xf6>
 80016bc:	e000      	b.n	80016c0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2202      	movs	r2, #2
 80016c6:	4013      	ands	r3, r2
 80016c8:	d100      	bne.n	80016cc <HAL_RCC_OscConfig+0x124>
 80016ca:	e099      	b.n	8001800 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016cc:	4b81      	ldr	r3, [pc, #516]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2238      	movs	r2, #56	; 0x38
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016d6:	4b7f      	ldr	r3, [pc, #508]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2203      	movs	r2, #3
 80016dc:	4013      	ands	r3, r2
 80016de:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2b10      	cmp	r3, #16
 80016e4:	d102      	bne.n	80016ec <HAL_RCC_OscConfig+0x144>
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d002      	beq.n	80016f2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d135      	bne.n	800175e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f2:	4b78      	ldr	r3, [pc, #480]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4013      	ands	r3, r2
 80016fc:	d005      	beq.n	800170a <HAL_RCC_OscConfig+0x162>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e24b      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	4b72      	ldr	r3, [pc, #456]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	4a74      	ldr	r2, [pc, #464]	; (80018e0 <HAL_RCC_OscConfig+0x338>)
 8001710:	4013      	ands	r3, r2
 8001712:	0019      	movs	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	021a      	lsls	r2, r3, #8
 800171a:	4b6e      	ldr	r3, [pc, #440]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800171c:	430a      	orrs	r2, r1
 800171e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d112      	bne.n	800174c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001726:	4b6b      	ldr	r3, [pc, #428]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a6e      	ldr	r2, [pc, #440]	; (80018e4 <HAL_RCC_OscConfig+0x33c>)
 800172c:	4013      	ands	r3, r2
 800172e:	0019      	movs	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	4b67      	ldr	r3, [pc, #412]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800173a:	4b66      	ldr	r3, [pc, #408]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	0adb      	lsrs	r3, r3, #11
 8001740:	2207      	movs	r2, #7
 8001742:	4013      	ands	r3, r2
 8001744:	4a68      	ldr	r2, [pc, #416]	; (80018e8 <HAL_RCC_OscConfig+0x340>)
 8001746:	40da      	lsrs	r2, r3
 8001748:	4b68      	ldr	r3, [pc, #416]	; (80018ec <HAL_RCC_OscConfig+0x344>)
 800174a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x348>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0018      	movs	r0, r3
 8001752:	f7ff fb27 	bl	8000da4 <HAL_InitTick>
 8001756:	1e03      	subs	r3, r0, #0
 8001758:	d051      	beq.n	80017fe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e221      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d030      	beq.n	80017c8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001766:	4b5b      	ldr	r3, [pc, #364]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a5e      	ldr	r2, [pc, #376]	; (80018e4 <HAL_RCC_OscConfig+0x33c>)
 800176c:	4013      	ands	r3, r2
 800176e:	0019      	movs	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691a      	ldr	r2, [r3, #16]
 8001774:	4b57      	ldr	r3, [pc, #348]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001776:	430a      	orrs	r2, r1
 8001778:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800177a:	4b56      	ldr	r3, [pc, #344]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b55      	ldr	r3, [pc, #340]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001780:	2180      	movs	r1, #128	; 0x80
 8001782:	0049      	lsls	r1, r1, #1
 8001784:	430a      	orrs	r2, r1
 8001786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff fb68 	bl	8000e5c <HAL_GetTick>
 800178c:	0003      	movs	r3, r0
 800178e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001792:	f7ff fb63 	bl	8000e5c <HAL_GetTick>
 8001796:	0002      	movs	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e1fe      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a4:	4b4b      	ldr	r3, [pc, #300]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4013      	ands	r3, r2
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b0:	4b48      	ldr	r3, [pc, #288]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4a4a      	ldr	r2, [pc, #296]	; (80018e0 <HAL_RCC_OscConfig+0x338>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	0019      	movs	r1, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	021a      	lsls	r2, r3, #8
 80017c0:	4b44      	ldr	r3, [pc, #272]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80017c2:	430a      	orrs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	e01b      	b.n	8001800 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80017c8:	4b42      	ldr	r3, [pc, #264]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80017ce:	4949      	ldr	r1, [pc, #292]	; (80018f4 <HAL_RCC_OscConfig+0x34c>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb42 	bl	8000e5c <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017de:	f7ff fb3d 	bl	8000e5c <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e1d8      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f0:	4b38      	ldr	r3, [pc, #224]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4013      	ands	r3, r2
 80017fa:	d1f0      	bne.n	80017de <HAL_RCC_OscConfig+0x236>
 80017fc:	e000      	b.n	8001800 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2208      	movs	r2, #8
 8001806:	4013      	ands	r3, r2
 8001808:	d047      	beq.n	800189a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800180a:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2238      	movs	r2, #56	; 0x38
 8001810:	4013      	ands	r3, r2
 8001812:	2b18      	cmp	r3, #24
 8001814:	d10a      	bne.n	800182c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001816:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181a:	2202      	movs	r2, #2
 800181c:	4013      	ands	r3, r2
 800181e:	d03c      	beq.n	800189a <HAL_RCC_OscConfig+0x2f2>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d138      	bne.n	800189a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e1ba      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d019      	beq.n	8001868 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001834:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001836:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001838:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800183a:	2101      	movs	r1, #1
 800183c:	430a      	orrs	r2, r1
 800183e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7ff fb0c 	bl	8000e5c <HAL_GetTick>
 8001844:	0003      	movs	r3, r0
 8001846:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184a:	f7ff fb07 	bl	8000e5c <HAL_GetTick>
 800184e:	0002      	movs	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e1a2      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800185e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001860:	2202      	movs	r2, #2
 8001862:	4013      	ands	r3, r2
 8001864:	d0f1      	beq.n	800184a <HAL_RCC_OscConfig+0x2a2>
 8001866:	e018      	b.n	800189a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800186a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800186e:	2101      	movs	r1, #1
 8001870:	438a      	bics	r2, r1
 8001872:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff faf2 	bl	8000e5c <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187e:	f7ff faed 	bl	8000e5c <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e188      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001894:	2202      	movs	r2, #2
 8001896:	4013      	ands	r3, r2
 8001898:	d1f1      	bne.n	800187e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2204      	movs	r2, #4
 80018a0:	4013      	ands	r3, r2
 80018a2:	d100      	bne.n	80018a6 <HAL_RCC_OscConfig+0x2fe>
 80018a4:	e0c6      	b.n	8001a34 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a6:	231f      	movs	r3, #31
 80018a8:	18fb      	adds	r3, r7, r3
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2238      	movs	r2, #56	; 0x38
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b20      	cmp	r3, #32
 80018b8:	d11e      	bne.n	80018f8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80018bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018be:	2202      	movs	r2, #2
 80018c0:	4013      	ands	r3, r2
 80018c2:	d100      	bne.n	80018c6 <HAL_RCC_OscConfig+0x31e>
 80018c4:	e0b6      	b.n	8001a34 <HAL_RCC_OscConfig+0x48c>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d000      	beq.n	80018d0 <HAL_RCC_OscConfig+0x328>
 80018ce:	e0b1      	b.n	8001a34 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e166      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
 80018d4:	40021000 	.word	0x40021000
 80018d8:	fffeffff 	.word	0xfffeffff
 80018dc:	fffbffff 	.word	0xfffbffff
 80018e0:	ffff80ff 	.word	0xffff80ff
 80018e4:	ffffc7ff 	.word	0xffffc7ff
 80018e8:	00f42400 	.word	0x00f42400
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000004 	.word	0x20000004
 80018f4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018f8:	4bac      	ldr	r3, [pc, #688]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 80018fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	055b      	lsls	r3, r3, #21
 8001900:	4013      	ands	r3, r2
 8001902:	d101      	bne.n	8001908 <HAL_RCC_OscConfig+0x360>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x362>
 8001908:	2300      	movs	r3, #0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d011      	beq.n	8001932 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	4ba7      	ldr	r3, [pc, #668]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001912:	4ba6      	ldr	r3, [pc, #664]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	0549      	lsls	r1, r1, #21
 8001918:	430a      	orrs	r2, r1
 800191a:	63da      	str	r2, [r3, #60]	; 0x3c
 800191c:	4ba3      	ldr	r3, [pc, #652]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 800191e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	055b      	lsls	r3, r3, #21
 8001924:	4013      	ands	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800192a:	231f      	movs	r3, #31
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001932:	4b9f      	ldr	r3, [pc, #636]	; (8001bb0 <HAL_RCC_OscConfig+0x608>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4013      	ands	r3, r2
 800193c:	d11a      	bne.n	8001974 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800193e:	4b9c      	ldr	r3, [pc, #624]	; (8001bb0 <HAL_RCC_OscConfig+0x608>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b9b      	ldr	r3, [pc, #620]	; (8001bb0 <HAL_RCC_OscConfig+0x608>)
 8001944:	2180      	movs	r1, #128	; 0x80
 8001946:	0049      	lsls	r1, r1, #1
 8001948:	430a      	orrs	r2, r1
 800194a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800194c:	f7ff fa86 	bl	8000e5c <HAL_GetTick>
 8001950:	0003      	movs	r3, r0
 8001952:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001956:	f7ff fa81 	bl	8000e5c <HAL_GetTick>
 800195a:	0002      	movs	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e11c      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001968:	4b91      	ldr	r3, [pc, #580]	; (8001bb0 <HAL_RCC_OscConfig+0x608>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4013      	ands	r3, r2
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x3e2>
 800197c:	4b8b      	ldr	r3, [pc, #556]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 800197e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001980:	4b8a      	ldr	r3, [pc, #552]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001982:	2101      	movs	r1, #1
 8001984:	430a      	orrs	r2, r1
 8001986:	65da      	str	r2, [r3, #92]	; 0x5c
 8001988:	e01c      	b.n	80019c4 <HAL_RCC_OscConfig+0x41c>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b05      	cmp	r3, #5
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x404>
 8001992:	4b86      	ldr	r3, [pc, #536]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001994:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001996:	4b85      	ldr	r3, [pc, #532]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001998:	2104      	movs	r1, #4
 800199a:	430a      	orrs	r2, r1
 800199c:	65da      	str	r2, [r3, #92]	; 0x5c
 800199e:	4b83      	ldr	r3, [pc, #524]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 80019a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019a2:	4b82      	ldr	r3, [pc, #520]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 80019a4:	2101      	movs	r1, #1
 80019a6:	430a      	orrs	r2, r1
 80019a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80019aa:	e00b      	b.n	80019c4 <HAL_RCC_OscConfig+0x41c>
 80019ac:	4b7f      	ldr	r3, [pc, #508]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 80019ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019b0:	4b7e      	ldr	r3, [pc, #504]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	438a      	bics	r2, r1
 80019b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80019b8:	4b7c      	ldr	r3, [pc, #496]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 80019ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019bc:	4b7b      	ldr	r3, [pc, #492]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 80019be:	2104      	movs	r1, #4
 80019c0:	438a      	bics	r2, r1
 80019c2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d014      	beq.n	80019f6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff fa46 	bl	8000e5c <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d4:	e009      	b.n	80019ea <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d6:	f7ff fa41 	bl	8000e5c <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	4a74      	ldr	r2, [pc, #464]	; (8001bb4 <HAL_RCC_OscConfig+0x60c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e0db      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ea:	4b70      	ldr	r3, [pc, #448]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 80019ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ee:	2202      	movs	r2, #2
 80019f0:	4013      	ands	r3, r2
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x42e>
 80019f4:	e013      	b.n	8001a1e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f6:	f7ff fa31 	bl	8000e5c <HAL_GetTick>
 80019fa:	0003      	movs	r3, r0
 80019fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019fe:	e009      	b.n	8001a14 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a00:	f7ff fa2c 	bl	8000e5c <HAL_GetTick>
 8001a04:	0002      	movs	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	4a6a      	ldr	r2, [pc, #424]	; (8001bb4 <HAL_RCC_OscConfig+0x60c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e0c6      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a14:	4b65      	ldr	r3, [pc, #404]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a18:	2202      	movs	r2, #2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a1e:	231f      	movs	r3, #31
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d105      	bne.n	8001a34 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a28:	4b60      	ldr	r3, [pc, #384]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a2c:	4b5f      	ldr	r3, [pc, #380]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001a2e:	4962      	ldr	r1, [pc, #392]	; (8001bb8 <HAL_RCC_OscConfig+0x610>)
 8001a30:	400a      	ands	r2, r1
 8001a32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d100      	bne.n	8001a3e <HAL_RCC_OscConfig+0x496>
 8001a3c:	e0b0      	b.n	8001ba0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a3e:	4b5b      	ldr	r3, [pc, #364]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2238      	movs	r2, #56	; 0x38
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d100      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4a4>
 8001a4a:	e078      	b.n	8001b3e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d153      	bne.n	8001afc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a54:	4b55      	ldr	r3, [pc, #340]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b54      	ldr	r3, [pc, #336]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001a5a:	4958      	ldr	r1, [pc, #352]	; (8001bbc <HAL_RCC_OscConfig+0x614>)
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff f9fc 	bl	8000e5c <HAL_GetTick>
 8001a64:	0003      	movs	r3, r0
 8001a66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6a:	f7ff f9f7 	bl	8000e5c <HAL_GetTick>
 8001a6e:	0002      	movs	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e092      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7c:	4b4b      	ldr	r3, [pc, #300]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	049b      	lsls	r3, r3, #18
 8001a84:	4013      	ands	r3, r2
 8001a86:	d1f0      	bne.n	8001a6a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a88:	4b48      	ldr	r3, [pc, #288]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a4c      	ldr	r2, [pc, #304]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	0019      	movs	r1, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1a      	ldr	r2, [r3, #32]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	4b3e      	ldr	r3, [pc, #248]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b3c      	ldr	r3, [pc, #240]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001abc:	2180      	movs	r1, #128	; 0x80
 8001abe:	0449      	lsls	r1, r1, #17
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ac4:	4b39      	ldr	r3, [pc, #228]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	4b38      	ldr	r3, [pc, #224]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	0549      	lsls	r1, r1, #21
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad2:	f7ff f9c3 	bl	8000e5c <HAL_GetTick>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff f9be 	bl	8000e5c <HAL_GetTick>
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e059      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aee:	4b2f      	ldr	r3, [pc, #188]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	049b      	lsls	r3, r3, #18
 8001af6:	4013      	ands	r3, r2
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x534>
 8001afa:	e051      	b.n	8001ba0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afc:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001b02:	492e      	ldr	r1, [pc, #184]	; (8001bbc <HAL_RCC_OscConfig+0x614>)
 8001b04:	400a      	ands	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff f9a8 	bl	8000e5c <HAL_GetTick>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b12:	f7ff f9a3 	bl	8000e5c <HAL_GetTick>
 8001b16:	0002      	movs	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e03e      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b24:	4b21      	ldr	r3, [pc, #132]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	049b      	lsls	r3, r3, #18
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d1f0      	bne.n	8001b12 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001b30:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001b36:	4923      	ldr	r1, [pc, #140]	; (8001bc4 <HAL_RCC_OscConfig+0x61c>)
 8001b38:	400a      	ands	r2, r1
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	e030      	b.n	8001ba0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e02b      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_RCC_OscConfig+0x604>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2203      	movs	r2, #3
 8001b54:	401a      	ands	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d11e      	bne.n	8001b9c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	2270      	movs	r2, #112	; 0x70
 8001b62:	401a      	ands	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d117      	bne.n	8001b9c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	23fe      	movs	r3, #254	; 0xfe
 8001b70:	01db      	lsls	r3, r3, #7
 8001b72:	401a      	ands	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d10e      	bne.n	8001b9c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	23f8      	movs	r3, #248	; 0xf8
 8001b82:	039b      	lsls	r3, r3, #14
 8001b84:	401a      	ands	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d106      	bne.n	8001b9c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	0f5b      	lsrs	r3, r3, #29
 8001b92:	075a      	lsls	r2, r3, #29
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b008      	add	sp, #32
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40007000 	.word	0x40007000
 8001bb4:	00001388 	.word	0x00001388
 8001bb8:	efffffff 	.word	0xefffffff
 8001bbc:	feffffff 	.word	0xfeffffff
 8001bc0:	1fc1808c 	.word	0x1fc1808c
 8001bc4:	effefffc 	.word	0xeffefffc

08001bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0e9      	b.n	8001db0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b76      	ldr	r3, [pc, #472]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2207      	movs	r2, #7
 8001be2:	4013      	ands	r3, r2
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d91e      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b73      	ldr	r3, [pc, #460]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2207      	movs	r2, #7
 8001bf0:	4393      	bics	r3, r2
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	4b70      	ldr	r3, [pc, #448]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bfc:	f7ff f92e 	bl	8000e5c <HAL_GetTick>
 8001c00:	0003      	movs	r3, r0
 8001c02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c04:	e009      	b.n	8001c1a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c06:	f7ff f929 	bl	8000e5c <HAL_GetTick>
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	4a6a      	ldr	r2, [pc, #424]	; (8001dbc <HAL_RCC_ClockConfig+0x1f4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e0ca      	b.n	8001db0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c1a:	4b67      	ldr	r3, [pc, #412]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2207      	movs	r2, #7
 8001c20:	4013      	ands	r3, r2
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d1ee      	bne.n	8001c06 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d015      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2204      	movs	r2, #4
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d006      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c3c:	4b60      	ldr	r3, [pc, #384]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4b5f      	ldr	r3, [pc, #380]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c42:	21e0      	movs	r1, #224	; 0xe0
 8001c44:	01c9      	lsls	r1, r1, #7
 8001c46:	430a      	orrs	r2, r1
 8001c48:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4a:	4b5d      	ldr	r3, [pc, #372]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	4a5d      	ldr	r2, [pc, #372]	; (8001dc4 <HAL_RCC_ClockConfig+0x1fc>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	0019      	movs	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	4b59      	ldr	r3, [pc, #356]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2201      	movs	r2, #1
 8001c64:	4013      	ands	r3, r2
 8001c66:	d057      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d107      	bne.n	8001c80 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c70:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	029b      	lsls	r3, r3, #10
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d12b      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e097      	b.n	8001db0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d107      	bne.n	8001c98 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c88:	4b4d      	ldr	r3, [pc, #308]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	049b      	lsls	r3, r3, #18
 8001c90:	4013      	ands	r3, r2
 8001c92:	d11f      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e08b      	b.n	8001db0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d107      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca0:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d113      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e07f      	b.n	8001db0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cb8:	4b41      	ldr	r3, [pc, #260]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d108      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e074      	b.n	8001db0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cc6:	4b3e      	ldr	r3, [pc, #248]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cca:	2202      	movs	r2, #2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e06d      	b.n	8001db0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cd4:	4b3a      	ldr	r3, [pc, #232]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2207      	movs	r2, #7
 8001cda:	4393      	bics	r3, r2
 8001cdc:	0019      	movs	r1, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4b37      	ldr	r3, [pc, #220]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ce8:	f7ff f8b8 	bl	8000e5c <HAL_GetTick>
 8001cec:	0003      	movs	r3, r0
 8001cee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf0:	e009      	b.n	8001d06 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf2:	f7ff f8b3 	bl	8000e5c <HAL_GetTick>
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	4a2f      	ldr	r2, [pc, #188]	; (8001dbc <HAL_RCC_ClockConfig+0x1f4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e054      	b.n	8001db0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	4b2e      	ldr	r3, [pc, #184]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2238      	movs	r2, #56	; 0x38
 8001d0c:	401a      	ands	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d1ec      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d18:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	4013      	ands	r3, r2
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d21e      	bcs.n	8001d64 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	4393      	bics	r3, r2
 8001d2e:	0019      	movs	r1, r3
 8001d30:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d38:	f7ff f890 	bl	8000e5c <HAL_GetTick>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d40:	e009      	b.n	8001d56 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d42:	f7ff f88b 	bl	8000e5c <HAL_GetTick>
 8001d46:	0002      	movs	r2, r0
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	4a1b      	ldr	r2, [pc, #108]	; (8001dbc <HAL_RCC_ClockConfig+0x1f4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e02c      	b.n	8001db0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d1ee      	bne.n	8001d42 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2204      	movs	r2, #4
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d6e:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <HAL_RCC_ClockConfig+0x200>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	0019      	movs	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d82:	f000 f829 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001d86:	0001      	movs	r1, r0
 8001d88:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	220f      	movs	r2, #15
 8001d90:	401a      	ands	r2, r3
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <HAL_RCC_ClockConfig+0x204>)
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	58d3      	ldr	r3, [r2, r3]
 8001d98:	221f      	movs	r2, #31
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	000a      	movs	r2, r1
 8001d9e:	40da      	lsrs	r2, r3
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_ClockConfig+0x208>)
 8001da2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_ClockConfig+0x20c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0018      	movs	r0, r3
 8001daa:	f7fe fffb 	bl	8000da4 <HAL_InitTick>
 8001dae:	0003      	movs	r3, r0
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b004      	add	sp, #16
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40022000 	.word	0x40022000
 8001dbc:	00001388 	.word	0x00001388
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	fffff0ff 	.word	0xfffff0ff
 8001dc8:	ffff8fff 	.word	0xffff8fff
 8001dcc:	080046e0 	.word	0x080046e0
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dde:	4b3c      	ldr	r3, [pc, #240]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2238      	movs	r2, #56	; 0x38
 8001de4:	4013      	ands	r3, r2
 8001de6:	d10f      	bne.n	8001e08 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001de8:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	0adb      	lsrs	r3, r3, #11
 8001dee:	2207      	movs	r2, #7
 8001df0:	4013      	ands	r3, r2
 8001df2:	2201      	movs	r2, #1
 8001df4:	409a      	lsls	r2, r3
 8001df6:	0013      	movs	r3, r2
 8001df8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001dfa:	6839      	ldr	r1, [r7, #0]
 8001dfc:	4835      	ldr	r0, [pc, #212]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001dfe:	f7fe f97f 	bl	8000100 <__udivsi3>
 8001e02:	0003      	movs	r3, r0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	e05d      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e08:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2238      	movs	r2, #56	; 0x38
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d102      	bne.n	8001e1a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e14:	4b30      	ldr	r3, [pc, #192]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	e054      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2238      	movs	r2, #56	; 0x38
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b10      	cmp	r3, #16
 8001e24:	d138      	bne.n	8001e98 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e26:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	2207      	movs	r2, #7
 8001e38:	4013      	ands	r3, r2
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d10d      	bne.n	8001e60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	4824      	ldr	r0, [pc, #144]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e48:	f7fe f95a 	bl	8000100 <__udivsi3>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	0019      	movs	r1, r3
 8001e50:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	227f      	movs	r2, #127	; 0x7f
 8001e58:	4013      	ands	r3, r2
 8001e5a:	434b      	muls	r3, r1
 8001e5c:	617b      	str	r3, [r7, #20]
        break;
 8001e5e:	e00d      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	481c      	ldr	r0, [pc, #112]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e64:	f7fe f94c 	bl	8000100 <__udivsi3>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	227f      	movs	r2, #127	; 0x7f
 8001e74:	4013      	ands	r3, r2
 8001e76:	434b      	muls	r3, r1
 8001e78:	617b      	str	r3, [r7, #20]
        break;
 8001e7a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	0f5b      	lsrs	r3, r3, #29
 8001e82:	2207      	movs	r2, #7
 8001e84:	4013      	ands	r3, r2
 8001e86:	3301      	adds	r3, #1
 8001e88:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	6978      	ldr	r0, [r7, #20]
 8001e8e:	f7fe f937 	bl	8000100 <__udivsi3>
 8001e92:	0003      	movs	r3, r0
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	e015      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e98:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2238      	movs	r2, #56	; 0x38
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	d103      	bne.n	8001eac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	e00b      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2238      	movs	r2, #56	; 0x38
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b18      	cmp	r3, #24
 8001eb6:	d103      	bne.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001eb8:	23fa      	movs	r3, #250	; 0xfa
 8001eba:	01db      	lsls	r3, r3, #7
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	e001      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ec4:	693b      	ldr	r3, [r7, #16]
}
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b006      	add	sp, #24
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	00f42400 	.word	0x00f42400
 8001ed8:	007a1200 	.word	0x007a1200

08001edc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee0:	4b02      	ldr	r3, [pc, #8]	; (8001eec <HAL_RCC_GetHCLKFreq+0x10>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	20000000 	.word	0x20000000

08001ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef0:	b5b0      	push	{r4, r5, r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ef4:	f7ff fff2 	bl	8001edc <HAL_RCC_GetHCLKFreq>
 8001ef8:	0004      	movs	r4, r0
 8001efa:	f7ff fb49 	bl	8001590 <LL_RCC_GetAPB1Prescaler>
 8001efe:	0003      	movs	r3, r0
 8001f00:	0b1a      	lsrs	r2, r3, #12
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	58d3      	ldr	r3, [r2, r3]
 8001f08:	221f      	movs	r2, #31
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	40dc      	lsrs	r4, r3
 8001f0e:	0023      	movs	r3, r4
}
 8001f10:	0018      	movs	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bdb0      	pop	{r4, r5, r7, pc}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	08004720 	.word	0x08004720

08001f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f24:	2313      	movs	r3, #19
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f2c:	2312      	movs	r3, #18
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	029b      	lsls	r3, r3, #10
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d100      	bne.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001f40:	e0a3      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f42:	2011      	movs	r0, #17
 8001f44:	183b      	adds	r3, r7, r0
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4a:	4b86      	ldr	r3, [pc, #536]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	055b      	lsls	r3, r3, #21
 8001f52:	4013      	ands	r3, r2
 8001f54:	d110      	bne.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	4b83      	ldr	r3, [pc, #524]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f5a:	4b82      	ldr	r3, [pc, #520]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f5c:	2180      	movs	r1, #128	; 0x80
 8001f5e:	0549      	lsls	r1, r1, #21
 8001f60:	430a      	orrs	r2, r1
 8001f62:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f64:	4b7f      	ldr	r3, [pc, #508]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	055b      	lsls	r3, r3, #21
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f72:	183b      	adds	r3, r7, r0
 8001f74:	2201      	movs	r2, #1
 8001f76:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f78:	4b7b      	ldr	r3, [pc, #492]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b7a      	ldr	r3, [pc, #488]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f7e:	2180      	movs	r1, #128	; 0x80
 8001f80:	0049      	lsls	r1, r1, #1
 8001f82:	430a      	orrs	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f86:	f7fe ff69 	bl	8000e5c <HAL_GetTick>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f8e:	e00b      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f90:	f7fe ff64 	bl	8000e5c <HAL_GetTick>
 8001f94:	0002      	movs	r2, r0
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d904      	bls.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001f9e:	2313      	movs	r3, #19
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	701a      	strb	r2, [r3, #0]
        break;
 8001fa6:	e005      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fa8:	4b6f      	ldr	r3, [pc, #444]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d0ed      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001fb4:	2313      	movs	r3, #19
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d154      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fbe:	4b69      	ldr	r3, [pc, #420]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fc2:	23c0      	movs	r3, #192	; 0xc0
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d019      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d014      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fda:	4b62      	ldr	r3, [pc, #392]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fde:	4a63      	ldr	r2, [pc, #396]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fe4:	4b5f      	ldr	r3, [pc, #380]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fe6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fe8:	4b5e      	ldr	r3, [pc, #376]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fea:	2180      	movs	r1, #128	; 0x80
 8001fec:	0249      	lsls	r1, r1, #9
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ff2:	4b5c      	ldr	r3, [pc, #368]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ff4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ff6:	4b5b      	ldr	r3, [pc, #364]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ff8:	495d      	ldr	r1, [pc, #372]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001ffa:	400a      	ands	r2, r1
 8001ffc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ffe:	4b59      	ldr	r3, [pc, #356]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2201      	movs	r2, #1
 8002008:	4013      	ands	r3, r2
 800200a:	d016      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7fe ff26 	bl	8000e5c <HAL_GetTick>
 8002010:	0003      	movs	r3, r0
 8002012:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002014:	e00c      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7fe ff21 	bl	8000e5c <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	4a54      	ldr	r2, [pc, #336]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d904      	bls.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002026:	2313      	movs	r3, #19
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	2203      	movs	r2, #3
 800202c:	701a      	strb	r2, [r3, #0]
            break;
 800202e:	e004      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002030:	4b4c      	ldr	r3, [pc, #304]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002034:	2202      	movs	r2, #2
 8002036:	4013      	ands	r3, r2
 8002038:	d0ed      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800203a:	2313      	movs	r3, #19
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10a      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002044:	4b47      	ldr	r3, [pc, #284]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	4a48      	ldr	r2, [pc, #288]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800204a:	4013      	ands	r3, r2
 800204c:	0019      	movs	r1, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	4b44      	ldr	r3, [pc, #272]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002054:	430a      	orrs	r2, r1
 8002056:	65da      	str	r2, [r3, #92]	; 0x5c
 8002058:	e00c      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800205a:	2312      	movs	r3, #18
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	2213      	movs	r2, #19
 8002060:	18ba      	adds	r2, r7, r2
 8002062:	7812      	ldrb	r2, [r2, #0]
 8002064:	701a      	strb	r2, [r3, #0]
 8002066:	e005      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002068:	2312      	movs	r3, #18
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2213      	movs	r2, #19
 800206e:	18ba      	adds	r2, r7, r2
 8002070:	7812      	ldrb	r2, [r2, #0]
 8002072:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002074:	2311      	movs	r3, #17
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d105      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207e:	4b39      	ldr	r3, [pc, #228]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002080:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002082:	4b38      	ldr	r3, [pc, #224]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002084:	493c      	ldr	r1, [pc, #240]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002086:	400a      	ands	r2, r1
 8002088:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2201      	movs	r2, #1
 8002090:	4013      	ands	r3, r2
 8002092:	d009      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002094:	4b33      	ldr	r3, [pc, #204]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002098:	2203      	movs	r2, #3
 800209a:	4393      	bics	r3, r2
 800209c:	0019      	movs	r1, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	4b30      	ldr	r3, [pc, #192]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020a4:	430a      	orrs	r2, r1
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2202      	movs	r2, #2
 80020ae:	4013      	ands	r3, r2
 80020b0:	d009      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020b2:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b6:	220c      	movs	r2, #12
 80020b8:	4393      	bics	r3, r2
 80020ba:	0019      	movs	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	4b28      	ldr	r3, [pc, #160]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020c2:	430a      	orrs	r2, r1
 80020c4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2220      	movs	r2, #32
 80020cc:	4013      	ands	r3, r2
 80020ce:	d009      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020d0:	4b24      	ldr	r3, [pc, #144]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d4:	4a29      	ldr	r2, [pc, #164]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020e0:	430a      	orrs	r2, r1
 80020e2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	01db      	lsls	r3, r3, #7
 80020ec:	4013      	ands	r3, r2
 80020ee:	d015      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	0899      	lsrs	r1, r3, #2
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020fe:	430a      	orrs	r2, r1
 8002100:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	05db      	lsls	r3, r3, #23
 800210a:	429a      	cmp	r2, r3
 800210c:	d106      	bne.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	0249      	lsls	r1, r1, #9
 8002118:	430a      	orrs	r2, r1
 800211a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	4013      	ands	r3, r2
 8002126:	d016      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	4a14      	ldr	r2, [pc, #80]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800212e:	4013      	ands	r3, r2
 8002130:	0019      	movs	r1, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002138:	430a      	orrs	r2, r1
 800213a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	01db      	lsls	r3, r3, #7
 8002144:	429a      	cmp	r2, r3
 8002146:	d106      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800214e:	2180      	movs	r1, #128	; 0x80
 8002150:	0249      	lsls	r1, r1, #9
 8002152:	430a      	orrs	r2, r1
 8002154:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002156:	2312      	movs	r3, #18
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	781b      	ldrb	r3, [r3, #0]
}
 800215c:	0018      	movs	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	b006      	add	sp, #24
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	40007000 	.word	0x40007000
 800216c:	fffffcff 	.word	0xfffffcff
 8002170:	fffeffff 	.word	0xfffeffff
 8002174:	00001388 	.word	0x00001388
 8002178:	efffffff 	.word	0xefffffff
 800217c:	ffffcfff 	.word	0xffffcfff
 8002180:	ffff3fff 	.word	0xffff3fff

08002184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e04a      	b.n	800222c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	223d      	movs	r2, #61	; 0x3d
 800219a:	5c9b      	ldrb	r3, [r3, r2]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d107      	bne.n	80021b2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	223c      	movs	r2, #60	; 0x3c
 80021a6:	2100      	movs	r1, #0
 80021a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	0018      	movs	r0, r3
 80021ae:	f7fe fcd5 	bl	8000b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	223d      	movs	r2, #61	; 0x3d
 80021b6:	2102      	movs	r1, #2
 80021b8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3304      	adds	r3, #4
 80021c2:	0019      	movs	r1, r3
 80021c4:	0010      	movs	r0, r2
 80021c6:	f000 f97f 	bl	80024c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2248      	movs	r2, #72	; 0x48
 80021ce:	2101      	movs	r1, #1
 80021d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	223e      	movs	r2, #62	; 0x3e
 80021d6:	2101      	movs	r1, #1
 80021d8:	5499      	strb	r1, [r3, r2]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	223f      	movs	r2, #63	; 0x3f
 80021de:	2101      	movs	r1, #1
 80021e0:	5499      	strb	r1, [r3, r2]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2240      	movs	r2, #64	; 0x40
 80021e6:	2101      	movs	r1, #1
 80021e8:	5499      	strb	r1, [r3, r2]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2241      	movs	r2, #65	; 0x41
 80021ee:	2101      	movs	r1, #1
 80021f0:	5499      	strb	r1, [r3, r2]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2242      	movs	r2, #66	; 0x42
 80021f6:	2101      	movs	r1, #1
 80021f8:	5499      	strb	r1, [r3, r2]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2243      	movs	r2, #67	; 0x43
 80021fe:	2101      	movs	r1, #1
 8002200:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2244      	movs	r2, #68	; 0x44
 8002206:	2101      	movs	r1, #1
 8002208:	5499      	strb	r1, [r3, r2]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2245      	movs	r2, #69	; 0x45
 800220e:	2101      	movs	r1, #1
 8002210:	5499      	strb	r1, [r3, r2]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2246      	movs	r2, #70	; 0x46
 8002216:	2101      	movs	r1, #1
 8002218:	5499      	strb	r1, [r3, r2]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2247      	movs	r2, #71	; 0x47
 800221e:	2101      	movs	r1, #1
 8002220:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	223d      	movs	r2, #61	; 0x3d
 8002226:	2101      	movs	r1, #1
 8002228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	223d      	movs	r2, #61	; 0x3d
 8002240:	5c9b      	ldrb	r3, [r3, r2]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d001      	beq.n	800224c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e034      	b.n	80022b6 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	223d      	movs	r2, #61	; 0x3d
 8002250:	2102      	movs	r1, #2
 8002252:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a19      	ldr	r2, [pc, #100]	; (80022c0 <HAL_TIM_Base_Start+0x8c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d009      	beq.n	8002272 <HAL_TIM_Base_Start+0x3e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a18      	ldr	r2, [pc, #96]	; (80022c4 <HAL_TIM_Base_Start+0x90>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d004      	beq.n	8002272 <HAL_TIM_Base_Start+0x3e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <HAL_TIM_Base_Start+0x94>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d116      	bne.n	80022a0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	4a14      	ldr	r2, [pc, #80]	; (80022cc <HAL_TIM_Base_Start+0x98>)
 800227a:	4013      	ands	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b06      	cmp	r3, #6
 8002282:	d016      	beq.n	80022b2 <HAL_TIM_Base_Start+0x7e>
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	025b      	lsls	r3, r3, #9
 800228a:	429a      	cmp	r2, r3
 800228c:	d011      	beq.n	80022b2 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2101      	movs	r1, #1
 800229a:	430a      	orrs	r2, r1
 800229c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800229e:	e008      	b.n	80022b2 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2101      	movs	r1, #1
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	e000      	b.n	80022b4 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	0018      	movs	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b004      	add	sp, #16
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	40012c00 	.word	0x40012c00
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40014000 	.word	0x40014000
 80022cc:	00010007 	.word	0x00010007

080022d0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4a0d      	ldr	r2, [pc, #52]	; (8002314 <HAL_TIM_Base_Stop+0x44>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	d10d      	bne.n	8002300 <HAL_TIM_Base_Stop+0x30>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <HAL_TIM_Base_Stop+0x48>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	d107      	bne.n	8002300 <HAL_TIM_Base_Stop+0x30>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2101      	movs	r1, #1
 80022fc:	438a      	bics	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	223d      	movs	r2, #61	; 0x3d
 8002304:	2101      	movs	r1, #1
 8002306:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	0018      	movs	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	b002      	add	sp, #8
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	00001111 	.word	0x00001111
 8002318:	00000444 	.word	0x00000444

0800231c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002326:	230f      	movs	r3, #15
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	223c      	movs	r2, #60	; 0x3c
 8002332:	5c9b      	ldrb	r3, [r3, r2]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_TIM_ConfigClockSource+0x20>
 8002338:	2302      	movs	r3, #2
 800233a:	e0bc      	b.n	80024b6 <HAL_TIM_ConfigClockSource+0x19a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	223c      	movs	r2, #60	; 0x3c
 8002340:	2101      	movs	r1, #1
 8002342:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	223d      	movs	r2, #61	; 0x3d
 8002348:	2102      	movs	r1, #2
 800234a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4a5a      	ldr	r2, [pc, #360]	; (80024c0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002358:	4013      	ands	r3, r2
 800235a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4a59      	ldr	r2, [pc, #356]	; (80024c4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002360:	4013      	ands	r3, r2
 8002362:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2280      	movs	r2, #128	; 0x80
 8002372:	0192      	lsls	r2, r2, #6
 8002374:	4293      	cmp	r3, r2
 8002376:	d040      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0xde>
 8002378:	2280      	movs	r2, #128	; 0x80
 800237a:	0192      	lsls	r2, r2, #6
 800237c:	4293      	cmp	r3, r2
 800237e:	d900      	bls.n	8002382 <HAL_TIM_ConfigClockSource+0x66>
 8002380:	e088      	b.n	8002494 <HAL_TIM_ConfigClockSource+0x178>
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	0152      	lsls	r2, r2, #5
 8002386:	4293      	cmp	r3, r2
 8002388:	d100      	bne.n	800238c <HAL_TIM_ConfigClockSource+0x70>
 800238a:	e088      	b.n	800249e <HAL_TIM_ConfigClockSource+0x182>
 800238c:	2280      	movs	r2, #128	; 0x80
 800238e:	0152      	lsls	r2, r2, #5
 8002390:	4293      	cmp	r3, r2
 8002392:	d900      	bls.n	8002396 <HAL_TIM_ConfigClockSource+0x7a>
 8002394:	e07e      	b.n	8002494 <HAL_TIM_ConfigClockSource+0x178>
 8002396:	2b70      	cmp	r3, #112	; 0x70
 8002398:	d018      	beq.n	80023cc <HAL_TIM_ConfigClockSource+0xb0>
 800239a:	d900      	bls.n	800239e <HAL_TIM_ConfigClockSource+0x82>
 800239c:	e07a      	b.n	8002494 <HAL_TIM_ConfigClockSource+0x178>
 800239e:	2b60      	cmp	r3, #96	; 0x60
 80023a0:	d04f      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x126>
 80023a2:	d900      	bls.n	80023a6 <HAL_TIM_ConfigClockSource+0x8a>
 80023a4:	e076      	b.n	8002494 <HAL_TIM_ConfigClockSource+0x178>
 80023a6:	2b50      	cmp	r3, #80	; 0x50
 80023a8:	d03b      	beq.n	8002422 <HAL_TIM_ConfigClockSource+0x106>
 80023aa:	d900      	bls.n	80023ae <HAL_TIM_ConfigClockSource+0x92>
 80023ac:	e072      	b.n	8002494 <HAL_TIM_ConfigClockSource+0x178>
 80023ae:	2b40      	cmp	r3, #64	; 0x40
 80023b0:	d057      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0x146>
 80023b2:	d900      	bls.n	80023b6 <HAL_TIM_ConfigClockSource+0x9a>
 80023b4:	e06e      	b.n	8002494 <HAL_TIM_ConfigClockSource+0x178>
 80023b6:	2b30      	cmp	r3, #48	; 0x30
 80023b8:	d063      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x166>
 80023ba:	d86b      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x178>
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d060      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x166>
 80023c0:	d868      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x178>
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d05d      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x166>
 80023c6:	2b10      	cmp	r3, #16
 80023c8:	d05b      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x166>
 80023ca:	e063      	b.n	8002494 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6899      	ldr	r1, [r3, #8]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f000 f966 	bl	80026ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2277      	movs	r2, #119	; 0x77
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	609a      	str	r2, [r3, #8]
      break;
 80023f8:	e052      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6899      	ldr	r1, [r3, #8]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f000 f94f 	bl	80026ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2180      	movs	r1, #128	; 0x80
 800241a:	01c9      	lsls	r1, r1, #7
 800241c:	430a      	orrs	r2, r1
 800241e:	609a      	str	r2, [r3, #8]
      break;
 8002420:	e03e      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6859      	ldr	r1, [r3, #4]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	001a      	movs	r2, r3
 8002430:	f000 f8c0 	bl	80025b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2150      	movs	r1, #80	; 0x50
 800243a:	0018      	movs	r0, r3
 800243c:	f000 f91a 	bl	8002674 <TIM_ITRx_SetConfig>
      break;
 8002440:	e02e      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6859      	ldr	r1, [r3, #4]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	001a      	movs	r2, r3
 8002450:	f000 f8de 	bl	8002610 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2160      	movs	r1, #96	; 0x60
 800245a:	0018      	movs	r0, r3
 800245c:	f000 f90a 	bl	8002674 <TIM_ITRx_SetConfig>
      break;
 8002460:	e01e      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6859      	ldr	r1, [r3, #4]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	001a      	movs	r2, r3
 8002470:	f000 f8a0 	bl	80025b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2140      	movs	r1, #64	; 0x40
 800247a:	0018      	movs	r0, r3
 800247c:	f000 f8fa 	bl	8002674 <TIM_ITRx_SetConfig>
      break;
 8002480:	e00e      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0019      	movs	r1, r3
 800248c:	0010      	movs	r0, r2
 800248e:	f000 f8f1 	bl	8002674 <TIM_ITRx_SetConfig>
      break;
 8002492:	e005      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002494:	230f      	movs	r3, #15
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
      break;
 800249c:	e000      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800249e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	223d      	movs	r2, #61	; 0x3d
 80024a4:	2101      	movs	r1, #1
 80024a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	223c      	movs	r2, #60	; 0x3c
 80024ac:	2100      	movs	r1, #0
 80024ae:	5499      	strb	r1, [r3, r2]

  return status;
 80024b0:	230f      	movs	r3, #15
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	781b      	ldrb	r3, [r3, #0]
}
 80024b6:	0018      	movs	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b004      	add	sp, #16
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	ffceff88 	.word	0xffceff88
 80024c4:	ffff00ff 	.word	0xffff00ff

080024c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a2f      	ldr	r2, [pc, #188]	; (8002598 <TIM_Base_SetConfig+0xd0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d003      	beq.n	80024e8 <TIM_Base_SetConfig+0x20>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a2e      	ldr	r2, [pc, #184]	; (800259c <TIM_Base_SetConfig+0xd4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d108      	bne.n	80024fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2270      	movs	r2, #112	; 0x70
 80024ec:	4393      	bics	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a26      	ldr	r2, [pc, #152]	; (8002598 <TIM_Base_SetConfig+0xd0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d013      	beq.n	800252a <TIM_Base_SetConfig+0x62>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a25      	ldr	r2, [pc, #148]	; (800259c <TIM_Base_SetConfig+0xd4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00f      	beq.n	800252a <TIM_Base_SetConfig+0x62>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a24      	ldr	r2, [pc, #144]	; (80025a0 <TIM_Base_SetConfig+0xd8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00b      	beq.n	800252a <TIM_Base_SetConfig+0x62>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <TIM_Base_SetConfig+0xdc>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d007      	beq.n	800252a <TIM_Base_SetConfig+0x62>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a22      	ldr	r2, [pc, #136]	; (80025a8 <TIM_Base_SetConfig+0xe0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d003      	beq.n	800252a <TIM_Base_SetConfig+0x62>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a21      	ldr	r2, [pc, #132]	; (80025ac <TIM_Base_SetConfig+0xe4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d108      	bne.n	800253c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4a20      	ldr	r2, [pc, #128]	; (80025b0 <TIM_Base_SetConfig+0xe8>)
 800252e:	4013      	ands	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2280      	movs	r2, #128	; 0x80
 8002540:	4393      	bics	r3, r2
 8002542:	001a      	movs	r2, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a0c      	ldr	r2, [pc, #48]	; (8002598 <TIM_Base_SetConfig+0xd0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00b      	beq.n	8002582 <TIM_Base_SetConfig+0xba>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <TIM_Base_SetConfig+0xdc>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d007      	beq.n	8002582 <TIM_Base_SetConfig+0xba>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a0c      	ldr	r2, [pc, #48]	; (80025a8 <TIM_Base_SetConfig+0xe0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d003      	beq.n	8002582 <TIM_Base_SetConfig+0xba>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a0b      	ldr	r2, [pc, #44]	; (80025ac <TIM_Base_SetConfig+0xe4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d103      	bne.n	800258a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	615a      	str	r2, [r3, #20]
}
 8002590:	46c0      	nop			; (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	b004      	add	sp, #16
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40012c00 	.word	0x40012c00
 800259c:	40000400 	.word	0x40000400
 80025a0:	40002000 	.word	0x40002000
 80025a4:	40014000 	.word	0x40014000
 80025a8:	40014400 	.word	0x40014400
 80025ac:	40014800 	.word	0x40014800
 80025b0:	fffffcff 	.word	0xfffffcff

080025b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	2201      	movs	r2, #1
 80025cc:	4393      	bics	r3, r2
 80025ce:	001a      	movs	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	22f0      	movs	r2, #240	; 0xf0
 80025de:	4393      	bics	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	220a      	movs	r2, #10
 80025f0:	4393      	bics	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	621a      	str	r2, [r3, #32]
}
 8002608:	46c0      	nop			; (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	b006      	add	sp, #24
 800260e:	bd80      	pop	{r7, pc}

08002610 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	2210      	movs	r2, #16
 8002622:	4393      	bics	r3, r2
 8002624:	001a      	movs	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <TIM_TI2_ConfigInputStage+0x60>)
 800263a:	4013      	ands	r3, r2
 800263c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	031b      	lsls	r3, r3, #12
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	22a0      	movs	r2, #160	; 0xa0
 800264c:	4393      	bics	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	621a      	str	r2, [r3, #32]
}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	46bd      	mov	sp, r7
 800266a:	b006      	add	sp, #24
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	ffff0fff 	.word	0xffff0fff

08002674 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4a08      	ldr	r2, [pc, #32]	; (80026a8 <TIM_ITRx_SetConfig+0x34>)
 8002688:	4013      	ands	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4313      	orrs	r3, r2
 8002692:	2207      	movs	r2, #7
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	609a      	str	r2, [r3, #8]
}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b004      	add	sp, #16
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	ffcfff8f 	.word	0xffcfff8f

080026ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	4a09      	ldr	r2, [pc, #36]	; (80026e8 <TIM_ETR_SetConfig+0x3c>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	021a      	lsls	r2, r3, #8
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	609a      	str	r2, [r3, #8]
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b006      	add	sp, #24
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	ffff00ff 	.word	0xffff00ff

080026ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	223c      	movs	r2, #60	; 0x3c
 80026fa:	5c9b      	ldrb	r3, [r3, r2]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002700:	2302      	movs	r3, #2
 8002702:	e04f      	b.n	80027a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	223c      	movs	r2, #60	; 0x3c
 8002708:	2101      	movs	r1, #1
 800270a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	223d      	movs	r2, #61	; 0x3d
 8002710:	2102      	movs	r1, #2
 8002712:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a20      	ldr	r2, [pc, #128]	; (80027ac <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d108      	bne.n	8002740 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4a1f      	ldr	r2, [pc, #124]	; (80027b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002732:	4013      	ands	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2270      	movs	r2, #112	; 0x70
 8002744:	4393      	bics	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a13      	ldr	r2, [pc, #76]	; (80027ac <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d009      	beq.n	8002778 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d004      	beq.n	8002778 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a11      	ldr	r2, [pc, #68]	; (80027b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d10c      	bne.n	8002792 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2280      	movs	r2, #128	; 0x80
 800277c:	4393      	bics	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	4313      	orrs	r3, r2
 8002788:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	223d      	movs	r2, #61	; 0x3d
 8002796:	2101      	movs	r1, #1
 8002798:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	223c      	movs	r2, #60	; 0x3c
 800279e:	2100      	movs	r1, #0
 80027a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	0018      	movs	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b004      	add	sp, #16
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	ff0fffff 	.word	0xff0fffff
 80027b4:	40000400 	.word	0x40000400
 80027b8:	40014000 	.word	0x40014000

080027bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e046      	b.n	800285c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2288      	movs	r2, #136	; 0x88
 80027d2:	589b      	ldr	r3, [r3, r2]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d107      	bne.n	80027e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2284      	movs	r2, #132	; 0x84
 80027dc:	2100      	movs	r1, #0
 80027de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	0018      	movs	r0, r3
 80027e4:	f7fe f9d8 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2288      	movs	r2, #136	; 0x88
 80027ec:	2124      	movs	r1, #36	; 0x24
 80027ee:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2101      	movs	r1, #1
 80027fc:	438a      	bics	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	0018      	movs	r0, r3
 8002804:	f000 fc66 	bl	80030d4 <UART_SetConfig>
 8002808:	0003      	movs	r3, r0
 800280a:	2b01      	cmp	r3, #1
 800280c:	d101      	bne.n	8002812 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e024      	b.n	800285c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	0018      	movs	r0, r3
 800281e:	f000 fdfd 	bl	800341c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	490d      	ldr	r1, [pc, #52]	; (8002864 <HAL_UART_Init+0xa8>)
 800282e:	400a      	ands	r2, r1
 8002830:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	212a      	movs	r1, #42	; 0x2a
 800283e:	438a      	bics	r2, r1
 8002840:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2101      	movs	r1, #1
 800284e:	430a      	orrs	r2, r1
 8002850:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	0018      	movs	r0, r3
 8002856:	f000 fe95 	bl	8003584 <UART_CheckIdleState>
 800285a:	0003      	movs	r3, r0
}
 800285c:	0018      	movs	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	b002      	add	sp, #8
 8002862:	bd80      	pop	{r7, pc}
 8002864:	ffffb7ff 	.word	0xffffb7ff

08002868 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	1dbb      	adds	r3, r7, #6
 8002876:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2288      	movs	r2, #136	; 0x88
 800287c:	589b      	ldr	r3, [r3, r2]
 800287e:	2b20      	cmp	r3, #32
 8002880:	d000      	beq.n	8002884 <HAL_UART_Transmit+0x1c>
 8002882:	e088      	b.n	8002996 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_UART_Transmit+0x2a>
 800288a:	1dbb      	adds	r3, r7, #6
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e080      	b.n	8002998 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	015b      	lsls	r3, r3, #5
 800289e:	429a      	cmp	r2, r3
 80028a0:	d109      	bne.n	80028b6 <HAL_UART_Transmit+0x4e>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d105      	bne.n	80028b6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2201      	movs	r2, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	d001      	beq.n	80028b6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e070      	b.n	8002998 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2290      	movs	r2, #144	; 0x90
 80028ba:	2100      	movs	r1, #0
 80028bc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2288      	movs	r2, #136	; 0x88
 80028c2:	2121      	movs	r1, #33	; 0x21
 80028c4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028c6:	f7fe fac9 	bl	8000e5c <HAL_GetTick>
 80028ca:	0003      	movs	r3, r0
 80028cc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1dba      	adds	r2, r7, #6
 80028d2:	2154      	movs	r1, #84	; 0x54
 80028d4:	8812      	ldrh	r2, [r2, #0]
 80028d6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1dba      	adds	r2, r7, #6
 80028dc:	2156      	movs	r1, #86	; 0x56
 80028de:	8812      	ldrh	r2, [r2, #0]
 80028e0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	015b      	lsls	r3, r3, #5
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d108      	bne.n	8002900 <HAL_UART_Transmit+0x98>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d104      	bne.n	8002900 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	e003      	b.n	8002908 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002908:	e02c      	b.n	8002964 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	0013      	movs	r3, r2
 8002914:	2200      	movs	r2, #0
 8002916:	2180      	movs	r1, #128	; 0x80
 8002918:	f000 fe82 	bl	8003620 <UART_WaitOnFlagUntilTimeout>
 800291c:	1e03      	subs	r3, r0, #0
 800291e:	d001      	beq.n	8002924 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e039      	b.n	8002998 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10b      	bne.n	8002942 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	001a      	movs	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	05d2      	lsls	r2, r2, #23
 8002936:	0dd2      	lsrs	r2, r2, #23
 8002938:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	3302      	adds	r3, #2
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	e007      	b.n	8002952 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	3301      	adds	r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2256      	movs	r2, #86	; 0x56
 8002956:	5a9b      	ldrh	r3, [r3, r2]
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b299      	uxth	r1, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2256      	movs	r2, #86	; 0x56
 8002962:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2256      	movs	r2, #86	; 0x56
 8002968:	5a9b      	ldrh	r3, [r3, r2]
 800296a:	b29b      	uxth	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1cc      	bne.n	800290a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	0013      	movs	r3, r2
 800297a:	2200      	movs	r2, #0
 800297c:	2140      	movs	r1, #64	; 0x40
 800297e:	f000 fe4f 	bl	8003620 <UART_WaitOnFlagUntilTimeout>
 8002982:	1e03      	subs	r3, r0, #0
 8002984:	d001      	beq.n	800298a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e006      	b.n	8002998 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2288      	movs	r2, #136	; 0x88
 800298e:	2120      	movs	r1, #32
 8002990:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	e000      	b.n	8002998 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002996:	2302      	movs	r3, #2
  }
}
 8002998:	0018      	movs	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	b008      	add	sp, #32
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	1dbb      	adds	r3, r7, #6
 80029ac:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	228c      	movs	r2, #140	; 0x8c
 80029b2:	589b      	ldr	r3, [r3, r2]
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d145      	bne.n	8002a44 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_UART_Receive_IT+0x26>
 80029be:	1dbb      	adds	r3, r7, #6
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e03d      	b.n	8002a46 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	015b      	lsls	r3, r3, #5
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d109      	bne.n	80029ea <HAL_UART_Receive_IT+0x4a>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d105      	bne.n	80029ea <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2201      	movs	r2, #1
 80029e2:	4013      	ands	r3, r2
 80029e4:	d001      	beq.n	80029ea <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e02d      	b.n	8002a46 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	041b      	lsls	r3, r3, #16
 80029fa:	4013      	ands	r3, r2
 80029fc:	d019      	beq.n	8002a32 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002a02:	613b      	str	r3, [r7, #16]
  return(result);
 8002a04:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a06:	61fb      	str	r3, [r7, #28]
 8002a08:	2301      	movs	r3, #1
 8002a0a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f383 8810 	msr	PRIMASK, r3
}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2180      	movs	r1, #128	; 0x80
 8002a20:	04c9      	lsls	r1, r1, #19
 8002a22:	430a      	orrs	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	f383 8810 	msr	PRIMASK, r3
}
 8002a30:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a32:	1dbb      	adds	r3, r7, #6
 8002a34:	881a      	ldrh	r2, [r3, #0]
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 feb8 	bl	80037b0 <UART_Start_Receive_IT>
 8002a40:	0003      	movs	r3, r0
 8002a42:	e000      	b.n	8002a46 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
  }
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b008      	add	sp, #32
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a50:	b5b0      	push	{r4, r5, r7, lr}
 8002a52:	b0aa      	sub	sp, #168	; 0xa8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	22a4      	movs	r2, #164	; 0xa4
 8002a60:	18b9      	adds	r1, r7, r2
 8002a62:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	20a0      	movs	r0, #160	; 0xa0
 8002a6c:	1839      	adds	r1, r7, r0
 8002a6e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	249c      	movs	r4, #156	; 0x9c
 8002a78:	1939      	adds	r1, r7, r4
 8002a7a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a7c:	0011      	movs	r1, r2
 8002a7e:	18bb      	adds	r3, r7, r2
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4aa2      	ldr	r2, [pc, #648]	; (8002d0c <HAL_UART_IRQHandler+0x2bc>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	2298      	movs	r2, #152	; 0x98
 8002a88:	18bd      	adds	r5, r7, r2
 8002a8a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002a8c:	18bb      	adds	r3, r7, r2
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d11a      	bne.n	8002aca <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d015      	beq.n	8002aca <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a9e:	183b      	adds	r3, r7, r0
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d105      	bne.n	8002ab4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002aa8:	193b      	adds	r3, r7, r4
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	055b      	lsls	r3, r3, #21
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d00a      	beq.n	8002aca <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d100      	bne.n	8002abe <HAL_UART_IRQHandler+0x6e>
 8002abc:	e2dc      	b.n	8003078 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	0010      	movs	r0, r2
 8002ac6:	4798      	blx	r3
      }
      return;
 8002ac8:	e2d6      	b.n	8003078 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002aca:	2398      	movs	r3, #152	; 0x98
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d100      	bne.n	8002ad6 <HAL_UART_IRQHandler+0x86>
 8002ad4:	e122      	b.n	8002d1c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002ad6:	239c      	movs	r3, #156	; 0x9c
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a8c      	ldr	r2, [pc, #560]	; (8002d10 <HAL_UART_IRQHandler+0x2c0>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d106      	bne.n	8002af0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ae2:	23a0      	movs	r3, #160	; 0xa0
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a8a      	ldr	r2, [pc, #552]	; (8002d14 <HAL_UART_IRQHandler+0x2c4>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	d100      	bne.n	8002af0 <HAL_UART_IRQHandler+0xa0>
 8002aee:	e115      	b.n	8002d1c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002af0:	23a4      	movs	r3, #164	; 0xa4
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2201      	movs	r2, #1
 8002af8:	4013      	ands	r3, r2
 8002afa:	d012      	beq.n	8002b22 <HAL_UART_IRQHandler+0xd2>
 8002afc:	23a0      	movs	r3, #160	; 0xa0
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4013      	ands	r3, r2
 8002b08:	d00b      	beq.n	8002b22 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2290      	movs	r2, #144	; 0x90
 8002b16:	589b      	ldr	r3, [r3, r2]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2190      	movs	r1, #144	; 0x90
 8002b20:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b22:	23a4      	movs	r3, #164	; 0xa4
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d011      	beq.n	8002b52 <HAL_UART_IRQHandler+0x102>
 8002b2e:	239c      	movs	r3, #156	; 0x9c
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2201      	movs	r2, #1
 8002b36:	4013      	ands	r3, r2
 8002b38:	d00b      	beq.n	8002b52 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2290      	movs	r2, #144	; 0x90
 8002b46:	589b      	ldr	r3, [r3, r2]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2190      	movs	r1, #144	; 0x90
 8002b50:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b52:	23a4      	movs	r3, #164	; 0xa4
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2204      	movs	r2, #4
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d011      	beq.n	8002b82 <HAL_UART_IRQHandler+0x132>
 8002b5e:	239c      	movs	r3, #156	; 0x9c
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2201      	movs	r2, #1
 8002b66:	4013      	ands	r3, r2
 8002b68:	d00b      	beq.n	8002b82 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2204      	movs	r2, #4
 8002b70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2290      	movs	r2, #144	; 0x90
 8002b76:	589b      	ldr	r3, [r3, r2]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2190      	movs	r1, #144	; 0x90
 8002b80:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b82:	23a4      	movs	r3, #164	; 0xa4
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2208      	movs	r2, #8
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d017      	beq.n	8002bbe <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b8e:	23a0      	movs	r3, #160	; 0xa0
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2220      	movs	r2, #32
 8002b96:	4013      	ands	r3, r2
 8002b98:	d105      	bne.n	8002ba6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002b9a:	239c      	movs	r3, #156	; 0x9c
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a5b      	ldr	r2, [pc, #364]	; (8002d10 <HAL_UART_IRQHandler+0x2c0>)
 8002ba2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002ba4:	d00b      	beq.n	8002bbe <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2208      	movs	r2, #8
 8002bac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2290      	movs	r2, #144	; 0x90
 8002bb2:	589b      	ldr	r3, [r3, r2]
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2190      	movs	r1, #144	; 0x90
 8002bbc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bbe:	23a4      	movs	r3, #164	; 0xa4
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d013      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x1a4>
 8002bcc:	23a0      	movs	r3, #160	; 0xa0
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	04db      	lsls	r3, r3, #19
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	0112      	lsls	r2, r2, #4
 8002be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2290      	movs	r2, #144	; 0x90
 8002be8:	589b      	ldr	r3, [r3, r2]
 8002bea:	2220      	movs	r2, #32
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2190      	movs	r1, #144	; 0x90
 8002bf2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2290      	movs	r2, #144	; 0x90
 8002bf8:	589b      	ldr	r3, [r3, r2]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d100      	bne.n	8002c00 <HAL_UART_IRQHandler+0x1b0>
 8002bfe:	e23d      	b.n	800307c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c00:	23a4      	movs	r3, #164	; 0xa4
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2220      	movs	r2, #32
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d015      	beq.n	8002c38 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c0c:	23a0      	movs	r3, #160	; 0xa0
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2220      	movs	r2, #32
 8002c14:	4013      	ands	r3, r2
 8002c16:	d106      	bne.n	8002c26 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c18:	239c      	movs	r3, #156	; 0x9c
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	055b      	lsls	r3, r3, #21
 8002c22:	4013      	ands	r3, r2
 8002c24:	d008      	beq.n	8002c38 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d004      	beq.n	8002c38 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	0010      	movs	r0, r2
 8002c36:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2290      	movs	r2, #144	; 0x90
 8002c3c:	589b      	ldr	r3, [r3, r2]
 8002c3e:	2194      	movs	r1, #148	; 0x94
 8002c40:	187a      	adds	r2, r7, r1
 8002c42:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2240      	movs	r2, #64	; 0x40
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b40      	cmp	r3, #64	; 0x40
 8002c50:	d004      	beq.n	8002c5c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c52:	187b      	adds	r3, r7, r1
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2228      	movs	r2, #40	; 0x28
 8002c58:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c5a:	d04c      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f000 feca 	bl	80039f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2240      	movs	r2, #64	; 0x40
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b40      	cmp	r3, #64	; 0x40
 8002c70:	d13c      	bne.n	8002cec <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c72:	f3ef 8310 	mrs	r3, PRIMASK
 8002c76:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002c78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c7a:	2090      	movs	r0, #144	; 0x90
 8002c7c:	183a      	adds	r2, r7, r0
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	2301      	movs	r3, #1
 8002c82:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c86:	f383 8810 	msr	PRIMASK, r3
}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2140      	movs	r1, #64	; 0x40
 8002c98:	438a      	bics	r2, r1
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	183b      	adds	r3, r7, r0
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ca4:	f383 8810 	msr	PRIMASK, r3
}
 8002ca8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	589b      	ldr	r3, [r3, r2]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d016      	beq.n	8002ce2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2280      	movs	r2, #128	; 0x80
 8002cb8:	589b      	ldr	r3, [r3, r2]
 8002cba:	4a17      	ldr	r2, [pc, #92]	; (8002d18 <HAL_UART_IRQHandler+0x2c8>)
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2280      	movs	r2, #128	; 0x80
 8002cc2:	589b      	ldr	r3, [r3, r2]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f7fe fa37 	bl	8001138 <HAL_DMA_Abort_IT>
 8002cca:	1e03      	subs	r3, r0, #0
 8002ccc:	d01c      	beq.n	8002d08 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2280      	movs	r2, #128	; 0x80
 8002cd2:	589b      	ldr	r3, [r3, r2]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	2180      	movs	r1, #128	; 0x80
 8002cda:	5852      	ldr	r2, [r2, r1]
 8002cdc:	0010      	movs	r0, r2
 8002cde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce0:	e012      	b.n	8002d08 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f000 f9e1 	bl	80030ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cea:	e00d      	b.n	8002d08 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f000 f9dc 	bl	80030ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf4:	e008      	b.n	8002d08 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 f9d7 	bl	80030ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2290      	movs	r2, #144	; 0x90
 8002d02:	2100      	movs	r1, #0
 8002d04:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002d06:	e1b9      	b.n	800307c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d08:	46c0      	nop			; (mov r8, r8)
    return;
 8002d0a:	e1b7      	b.n	800307c <HAL_UART_IRQHandler+0x62c>
 8002d0c:	0000080f 	.word	0x0000080f
 8002d10:	10000001 	.word	0x10000001
 8002d14:	04000120 	.word	0x04000120
 8002d18:	08003ac5 	.word	0x08003ac5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d000      	beq.n	8002d26 <HAL_UART_IRQHandler+0x2d6>
 8002d24:	e13e      	b.n	8002fa4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d26:	23a4      	movs	r3, #164	; 0xa4
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2210      	movs	r2, #16
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d100      	bne.n	8002d34 <HAL_UART_IRQHandler+0x2e4>
 8002d32:	e137      	b.n	8002fa4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d34:	23a0      	movs	r3, #160	; 0xa0
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2210      	movs	r2, #16
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d100      	bne.n	8002d42 <HAL_UART_IRQHandler+0x2f2>
 8002d40:	e130      	b.n	8002fa4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2210      	movs	r2, #16
 8002d48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2240      	movs	r2, #64	; 0x40
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b40      	cmp	r3, #64	; 0x40
 8002d56:	d000      	beq.n	8002d5a <HAL_UART_IRQHandler+0x30a>
 8002d58:	e0a4      	b.n	8002ea4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2280      	movs	r2, #128	; 0x80
 8002d5e:	589b      	ldr	r3, [r3, r2]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	217e      	movs	r1, #126	; 0x7e
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002d6a:	187b      	adds	r3, r7, r1
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d100      	bne.n	8002d74 <HAL_UART_IRQHandler+0x324>
 8002d72:	e185      	b.n	8003080 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	225c      	movs	r2, #92	; 0x5c
 8002d78:	5a9b      	ldrh	r3, [r3, r2]
 8002d7a:	187a      	adds	r2, r7, r1
 8002d7c:	8812      	ldrh	r2, [r2, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d300      	bcc.n	8002d84 <HAL_UART_IRQHandler+0x334>
 8002d82:	e17d      	b.n	8003080 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	187a      	adds	r2, r7, r1
 8002d88:	215e      	movs	r1, #94	; 0x5e
 8002d8a:	8812      	ldrh	r2, [r2, #0]
 8002d8c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2280      	movs	r2, #128	; 0x80
 8002d92:	589b      	ldr	r3, [r3, r2]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d170      	bne.n	8002e80 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002da2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002da6:	67bb      	str	r3, [r7, #120]	; 0x78
 8002da8:	2301      	movs	r3, #1
 8002daa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dae:	f383 8810 	msr	PRIMASK, r3
}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	49b4      	ldr	r1, [pc, #720]	; (8003090 <HAL_UART_IRQHandler+0x640>)
 8002dc0:	400a      	ands	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dca:	f383 8810 	msr	PRIMASK, r3
}
 8002dce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd8:	677b      	str	r3, [r7, #116]	; 0x74
 8002dda:	2301      	movs	r3, #1
 8002ddc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de0:	f383 8810 	msr	PRIMASK, r3
}
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2101      	movs	r1, #1
 8002df2:	438a      	bics	r2, r1
 8002df4:	609a      	str	r2, [r3, #8]
 8002df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfc:	f383 8810 	msr	PRIMASK, r3
}
 8002e00:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e02:	f3ef 8310 	mrs	r3, PRIMASK
 8002e06:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e0a:	673b      	str	r3, [r7, #112]	; 0x70
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e12:	f383 8810 	msr	PRIMASK, r3
}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2140      	movs	r1, #64	; 0x40
 8002e24:	438a      	bics	r2, r1
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e2a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e2e:	f383 8810 	msr	PRIMASK, r3
}
 8002e32:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	228c      	movs	r2, #140	; 0x8c
 8002e38:	2120      	movs	r1, #32
 8002e3a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e42:	f3ef 8310 	mrs	r3, PRIMASK
 8002e46:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e52:	f383 8810 	msr	PRIMASK, r3
}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2110      	movs	r1, #16
 8002e64:	438a      	bics	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6e:	f383 8810 	msr	PRIMASK, r3
}
 8002e72:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2280      	movs	r2, #128	; 0x80
 8002e78:	589b      	ldr	r3, [r3, r2]
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f7fe f8fa 	bl	8001074 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	225c      	movs	r2, #92	; 0x5c
 8002e8a:	5a9a      	ldrh	r2, [r3, r2]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	215e      	movs	r1, #94	; 0x5e
 8002e90:	5a5b      	ldrh	r3, [r3, r1]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	0011      	movs	r1, r2
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f000 f90d 	bl	80030bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ea2:	e0ed      	b.n	8003080 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	225c      	movs	r2, #92	; 0x5c
 8002ea8:	5a99      	ldrh	r1, [r3, r2]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	225e      	movs	r2, #94	; 0x5e
 8002eae:	5a9b      	ldrh	r3, [r3, r2]
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	208e      	movs	r0, #142	; 0x8e
 8002eb4:	183b      	adds	r3, r7, r0
 8002eb6:	1a8a      	subs	r2, r1, r2
 8002eb8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	225e      	movs	r2, #94	; 0x5e
 8002ebe:	5a9b      	ldrh	r3, [r3, r2]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d100      	bne.n	8002ec8 <HAL_UART_IRQHandler+0x478>
 8002ec6:	e0dd      	b.n	8003084 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002ec8:	183b      	adds	r3, r7, r0
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d100      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x482>
 8002ed0:	e0d8      	b.n	8003084 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002eda:	2488      	movs	r4, #136	; 0x88
 8002edc:	193a      	adds	r2, r7, r4
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f383 8810 	msr	PRIMASK, r3
}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4967      	ldr	r1, [pc, #412]	; (8003094 <HAL_UART_IRQHandler+0x644>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	193b      	adds	r3, r7, r4
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f383 8810 	msr	PRIMASK, r3
}
 8002f08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f10:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f12:	2484      	movs	r4, #132	; 0x84
 8002f14:	193a      	adds	r2, r7, r4
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	2301      	movs	r3, #1
 8002f1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f383 8810 	msr	PRIMASK, r3
}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	495a      	ldr	r1, [pc, #360]	; (8003098 <HAL_UART_IRQHandler+0x648>)
 8002f30:	400a      	ands	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	193b      	adds	r3, r7, r4
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	f383 8810 	msr	PRIMASK, r3
}
 8002f40:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	228c      	movs	r2, #140	; 0x8c
 8002f46:	2120      	movs	r1, #32
 8002f48:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f56:	f3ef 8310 	mrs	r3, PRIMASK
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f5e:	2480      	movs	r4, #128	; 0x80
 8002f60:	193a      	adds	r2, r7, r4
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	2301      	movs	r3, #1
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6a:	f383 8810 	msr	PRIMASK, r3
}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2110      	movs	r1, #16
 8002f7c:	438a      	bics	r2, r1
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	193b      	adds	r3, r7, r4
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f88:	f383 8810 	msr	PRIMASK, r3
}
 8002f8c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2202      	movs	r2, #2
 8002f92:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f94:	183b      	adds	r3, r7, r0
 8002f96:	881a      	ldrh	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	0011      	movs	r1, r2
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f000 f88d 	bl	80030bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fa2:	e06f      	b.n	8003084 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fa4:	23a4      	movs	r3, #164	; 0xa4
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	2380      	movs	r3, #128	; 0x80
 8002fac:	035b      	lsls	r3, r3, #13
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d010      	beq.n	8002fd4 <HAL_UART_IRQHandler+0x584>
 8002fb2:	239c      	movs	r3, #156	; 0x9c
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	03db      	lsls	r3, r3, #15
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d009      	beq.n	8002fd4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2280      	movs	r2, #128	; 0x80
 8002fc6:	0352      	lsls	r2, r2, #13
 8002fc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f001 fa1d 	bl	800440c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fd2:	e05a      	b.n	800308a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002fd4:	23a4      	movs	r3, #164	; 0xa4
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2280      	movs	r2, #128	; 0x80
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d016      	beq.n	800300e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002fe0:	23a0      	movs	r3, #160	; 0xa0
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d106      	bne.n	8002ffa <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002fec:	239c      	movs	r3, #156	; 0x9c
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d009      	beq.n	800300e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d042      	beq.n	8003088 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	0010      	movs	r0, r2
 800300a:	4798      	blx	r3
    }
    return;
 800300c:	e03c      	b.n	8003088 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800300e:	23a4      	movs	r3, #164	; 0xa4
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2240      	movs	r2, #64	; 0x40
 8003016:	4013      	ands	r3, r2
 8003018:	d00a      	beq.n	8003030 <HAL_UART_IRQHandler+0x5e0>
 800301a:	23a0      	movs	r3, #160	; 0xa0
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2240      	movs	r2, #64	; 0x40
 8003022:	4013      	ands	r3, r2
 8003024:	d004      	beq.n	8003030 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	0018      	movs	r0, r3
 800302a:	f000 fd62 	bl	8003af2 <UART_EndTransmit_IT>
    return;
 800302e:	e02c      	b.n	800308a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003030:	23a4      	movs	r3, #164	; 0xa4
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	041b      	lsls	r3, r3, #16
 800303a:	4013      	ands	r3, r2
 800303c:	d00b      	beq.n	8003056 <HAL_UART_IRQHandler+0x606>
 800303e:	23a0      	movs	r3, #160	; 0xa0
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	05db      	lsls	r3, r3, #23
 8003048:	4013      	ands	r3, r2
 800304a:	d004      	beq.n	8003056 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	0018      	movs	r0, r3
 8003050:	f001 f9ec 	bl	800442c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003054:	e019      	b.n	800308a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003056:	23a4      	movs	r3, #164	; 0xa4
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	045b      	lsls	r3, r3, #17
 8003060:	4013      	ands	r3, r2
 8003062:	d012      	beq.n	800308a <HAL_UART_IRQHandler+0x63a>
 8003064:	23a0      	movs	r3, #160	; 0xa0
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	da0d      	bge.n	800308a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	0018      	movs	r0, r3
 8003072:	f001 f9d3 	bl	800441c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003076:	e008      	b.n	800308a <HAL_UART_IRQHandler+0x63a>
      return;
 8003078:	46c0      	nop			; (mov r8, r8)
 800307a:	e006      	b.n	800308a <HAL_UART_IRQHandler+0x63a>
    return;
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	e004      	b.n	800308a <HAL_UART_IRQHandler+0x63a>
      return;
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	e002      	b.n	800308a <HAL_UART_IRQHandler+0x63a>
      return;
 8003084:	46c0      	nop			; (mov r8, r8)
 8003086:	e000      	b.n	800308a <HAL_UART_IRQHandler+0x63a>
    return;
 8003088:	46c0      	nop			; (mov r8, r8)
  }
}
 800308a:	46bd      	mov	sp, r7
 800308c:	b02a      	add	sp, #168	; 0xa8
 800308e:	bdb0      	pop	{r4, r5, r7, pc}
 8003090:	fffffeff 	.word	0xfffffeff
 8003094:	fffffedf 	.word	0xfffffedf
 8003098:	effffffe 	.word	0xeffffffe

0800309c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030a4:	46c0      	nop			; (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b002      	add	sp, #8
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030b4:	46c0      	nop			; (mov r8, r8)
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b002      	add	sp, #8
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	000a      	movs	r2, r1
 80030c6:	1cbb      	adds	r3, r7, #2
 80030c8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b002      	add	sp, #8
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030dc:	231a      	movs	r3, #26
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4abc      	ldr	r2, [pc, #752]	; (80033f4 <UART_SetConfig+0x320>)
 8003104:	4013      	ands	r3, r2
 8003106:	0019      	movs	r1, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69fa      	ldr	r2, [r7, #28]
 800310e:	430a      	orrs	r2, r1
 8003110:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4ab7      	ldr	r2, [pc, #732]	; (80033f8 <UART_SetConfig+0x324>)
 800311a:	4013      	ands	r3, r2
 800311c:	0019      	movs	r1, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	4313      	orrs	r3, r2
 8003138:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4aae      	ldr	r2, [pc, #696]	; (80033fc <UART_SetConfig+0x328>)
 8003142:	4013      	ands	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	430a      	orrs	r2, r1
 800314e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	220f      	movs	r2, #15
 8003158:	4393      	bics	r3, r2
 800315a:	0019      	movs	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4aa4      	ldr	r2, [pc, #656]	; (8003400 <UART_SetConfig+0x32c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d127      	bne.n	80031c2 <UART_SetConfig+0xee>
 8003172:	4ba4      	ldr	r3, [pc, #656]	; (8003404 <UART_SetConfig+0x330>)
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	2203      	movs	r2, #3
 8003178:	4013      	ands	r3, r2
 800317a:	2b03      	cmp	r3, #3
 800317c:	d017      	beq.n	80031ae <UART_SetConfig+0xda>
 800317e:	d81b      	bhi.n	80031b8 <UART_SetConfig+0xe4>
 8003180:	2b02      	cmp	r3, #2
 8003182:	d00a      	beq.n	800319a <UART_SetConfig+0xc6>
 8003184:	d818      	bhi.n	80031b8 <UART_SetConfig+0xe4>
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <UART_SetConfig+0xbc>
 800318a:	2b01      	cmp	r3, #1
 800318c:	d00a      	beq.n	80031a4 <UART_SetConfig+0xd0>
 800318e:	e013      	b.n	80031b8 <UART_SetConfig+0xe4>
 8003190:	231b      	movs	r3, #27
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]
 8003198:	e058      	b.n	800324c <UART_SetConfig+0x178>
 800319a:	231b      	movs	r3, #27
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	2202      	movs	r2, #2
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	e053      	b.n	800324c <UART_SetConfig+0x178>
 80031a4:	231b      	movs	r3, #27
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	2204      	movs	r2, #4
 80031aa:	701a      	strb	r2, [r3, #0]
 80031ac:	e04e      	b.n	800324c <UART_SetConfig+0x178>
 80031ae:	231b      	movs	r3, #27
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	2208      	movs	r2, #8
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	e049      	b.n	800324c <UART_SetConfig+0x178>
 80031b8:	231b      	movs	r3, #27
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	2210      	movs	r2, #16
 80031be:	701a      	strb	r2, [r3, #0]
 80031c0:	e044      	b.n	800324c <UART_SetConfig+0x178>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a90      	ldr	r2, [pc, #576]	; (8003408 <UART_SetConfig+0x334>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d127      	bne.n	800321c <UART_SetConfig+0x148>
 80031cc:	4b8d      	ldr	r3, [pc, #564]	; (8003404 <UART_SetConfig+0x330>)
 80031ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d0:	220c      	movs	r2, #12
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b0c      	cmp	r3, #12
 80031d6:	d017      	beq.n	8003208 <UART_SetConfig+0x134>
 80031d8:	d81b      	bhi.n	8003212 <UART_SetConfig+0x13e>
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d00a      	beq.n	80031f4 <UART_SetConfig+0x120>
 80031de:	d818      	bhi.n	8003212 <UART_SetConfig+0x13e>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <UART_SetConfig+0x116>
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d00a      	beq.n	80031fe <UART_SetConfig+0x12a>
 80031e8:	e013      	b.n	8003212 <UART_SetConfig+0x13e>
 80031ea:	231b      	movs	r3, #27
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	e02b      	b.n	800324c <UART_SetConfig+0x178>
 80031f4:	231b      	movs	r3, #27
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	2202      	movs	r2, #2
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e026      	b.n	800324c <UART_SetConfig+0x178>
 80031fe:	231b      	movs	r3, #27
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	2204      	movs	r2, #4
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	e021      	b.n	800324c <UART_SetConfig+0x178>
 8003208:	231b      	movs	r3, #27
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	2208      	movs	r2, #8
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	e01c      	b.n	800324c <UART_SetConfig+0x178>
 8003212:	231b      	movs	r3, #27
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	2210      	movs	r2, #16
 8003218:	701a      	strb	r2, [r3, #0]
 800321a:	e017      	b.n	800324c <UART_SetConfig+0x178>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a7a      	ldr	r2, [pc, #488]	; (800340c <UART_SetConfig+0x338>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d104      	bne.n	8003230 <UART_SetConfig+0x15c>
 8003226:	231b      	movs	r3, #27
 8003228:	18fb      	adds	r3, r7, r3
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	e00d      	b.n	800324c <UART_SetConfig+0x178>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a76      	ldr	r2, [pc, #472]	; (8003410 <UART_SetConfig+0x33c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d104      	bne.n	8003244 <UART_SetConfig+0x170>
 800323a:	231b      	movs	r3, #27
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	e003      	b.n	800324c <UART_SetConfig+0x178>
 8003244:	231b      	movs	r3, #27
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	2210      	movs	r2, #16
 800324a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	429a      	cmp	r2, r3
 8003256:	d000      	beq.n	800325a <UART_SetConfig+0x186>
 8003258:	e065      	b.n	8003326 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800325a:	231b      	movs	r3, #27
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b08      	cmp	r3, #8
 8003262:	d015      	beq.n	8003290 <UART_SetConfig+0x1bc>
 8003264:	dc18      	bgt.n	8003298 <UART_SetConfig+0x1c4>
 8003266:	2b04      	cmp	r3, #4
 8003268:	d00d      	beq.n	8003286 <UART_SetConfig+0x1b2>
 800326a:	dc15      	bgt.n	8003298 <UART_SetConfig+0x1c4>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <UART_SetConfig+0x1a2>
 8003270:	2b02      	cmp	r3, #2
 8003272:	d005      	beq.n	8003280 <UART_SetConfig+0x1ac>
 8003274:	e010      	b.n	8003298 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003276:	f7fe fe3b 	bl	8001ef0 <HAL_RCC_GetPCLK1Freq>
 800327a:	0003      	movs	r3, r0
 800327c:	617b      	str	r3, [r7, #20]
        break;
 800327e:	e012      	b.n	80032a6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003280:	4b64      	ldr	r3, [pc, #400]	; (8003414 <UART_SetConfig+0x340>)
 8003282:	617b      	str	r3, [r7, #20]
        break;
 8003284:	e00f      	b.n	80032a6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003286:	f7fe fda7 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 800328a:	0003      	movs	r3, r0
 800328c:	617b      	str	r3, [r7, #20]
        break;
 800328e:	e00a      	b.n	80032a6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	617b      	str	r3, [r7, #20]
        break;
 8003296:	e006      	b.n	80032a6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800329c:	231a      	movs	r3, #26
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	2201      	movs	r2, #1
 80032a2:	701a      	strb	r2, [r3, #0]
        break;
 80032a4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d100      	bne.n	80032ae <UART_SetConfig+0x1da>
 80032ac:	e08d      	b.n	80033ca <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032b2:	4b59      	ldr	r3, [pc, #356]	; (8003418 <UART_SetConfig+0x344>)
 80032b4:	0052      	lsls	r2, r2, #1
 80032b6:	5ad3      	ldrh	r3, [r2, r3]
 80032b8:	0019      	movs	r1, r3
 80032ba:	6978      	ldr	r0, [r7, #20]
 80032bc:	f7fc ff20 	bl	8000100 <__udivsi3>
 80032c0:	0003      	movs	r3, r0
 80032c2:	005a      	lsls	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	085b      	lsrs	r3, r3, #1
 80032ca:	18d2      	adds	r2, r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	0019      	movs	r1, r3
 80032d2:	0010      	movs	r0, r2
 80032d4:	f7fc ff14 	bl	8000100 <__udivsi3>
 80032d8:	0003      	movs	r3, r0
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d91c      	bls.n	800331c <UART_SetConfig+0x248>
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	025b      	lsls	r3, r3, #9
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d217      	bcs.n	800331c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	200e      	movs	r0, #14
 80032f2:	183b      	adds	r3, r7, r0
 80032f4:	210f      	movs	r1, #15
 80032f6:	438a      	bics	r2, r1
 80032f8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	085b      	lsrs	r3, r3, #1
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2207      	movs	r2, #7
 8003302:	4013      	ands	r3, r2
 8003304:	b299      	uxth	r1, r3
 8003306:	183b      	adds	r3, r7, r0
 8003308:	183a      	adds	r2, r7, r0
 800330a:	8812      	ldrh	r2, [r2, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	183a      	adds	r2, r7, r0
 8003316:	8812      	ldrh	r2, [r2, #0]
 8003318:	60da      	str	r2, [r3, #12]
 800331a:	e056      	b.n	80033ca <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800331c:	231a      	movs	r3, #26
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	e051      	b.n	80033ca <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003326:	231b      	movs	r3, #27
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d015      	beq.n	800335c <UART_SetConfig+0x288>
 8003330:	dc18      	bgt.n	8003364 <UART_SetConfig+0x290>
 8003332:	2b04      	cmp	r3, #4
 8003334:	d00d      	beq.n	8003352 <UART_SetConfig+0x27e>
 8003336:	dc15      	bgt.n	8003364 <UART_SetConfig+0x290>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <UART_SetConfig+0x26e>
 800333c:	2b02      	cmp	r3, #2
 800333e:	d005      	beq.n	800334c <UART_SetConfig+0x278>
 8003340:	e010      	b.n	8003364 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003342:	f7fe fdd5 	bl	8001ef0 <HAL_RCC_GetPCLK1Freq>
 8003346:	0003      	movs	r3, r0
 8003348:	617b      	str	r3, [r7, #20]
        break;
 800334a:	e012      	b.n	8003372 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800334c:	4b31      	ldr	r3, [pc, #196]	; (8003414 <UART_SetConfig+0x340>)
 800334e:	617b      	str	r3, [r7, #20]
        break;
 8003350:	e00f      	b.n	8003372 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003352:	f7fe fd41 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8003356:	0003      	movs	r3, r0
 8003358:	617b      	str	r3, [r7, #20]
        break;
 800335a:	e00a      	b.n	8003372 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	021b      	lsls	r3, r3, #8
 8003360:	617b      	str	r3, [r7, #20]
        break;
 8003362:	e006      	b.n	8003372 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003368:	231a      	movs	r3, #26
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
        break;
 8003370:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d028      	beq.n	80033ca <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800337c:	4b26      	ldr	r3, [pc, #152]	; (8003418 <UART_SetConfig+0x344>)
 800337e:	0052      	lsls	r2, r2, #1
 8003380:	5ad3      	ldrh	r3, [r2, r3]
 8003382:	0019      	movs	r1, r3
 8003384:	6978      	ldr	r0, [r7, #20]
 8003386:	f7fc febb 	bl	8000100 <__udivsi3>
 800338a:	0003      	movs	r3, r0
 800338c:	001a      	movs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	18d2      	adds	r2, r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	0019      	movs	r1, r3
 800339c:	0010      	movs	r0, r2
 800339e:	f7fc feaf 	bl	8000100 <__udivsi3>
 80033a2:	0003      	movs	r3, r0
 80033a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b0f      	cmp	r3, #15
 80033aa:	d90a      	bls.n	80033c2 <UART_SetConfig+0x2ee>
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	025b      	lsls	r3, r3, #9
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d205      	bcs.n	80033c2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	e003      	b.n	80033ca <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80033c2:	231a      	movs	r3, #26
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	2201      	movs	r2, #1
 80033c8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	226a      	movs	r2, #106	; 0x6a
 80033ce:	2101      	movs	r1, #1
 80033d0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2268      	movs	r2, #104	; 0x68
 80033d6:	2101      	movs	r1, #1
 80033d8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80033e6:	231a      	movs	r3, #26
 80033e8:	18fb      	adds	r3, r7, r3
 80033ea:	781b      	ldrb	r3, [r3, #0]
}
 80033ec:	0018      	movs	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b008      	add	sp, #32
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	cfff69f3 	.word	0xcfff69f3
 80033f8:	ffffcfff 	.word	0xffffcfff
 80033fc:	11fff4ff 	.word	0x11fff4ff
 8003400:	40013800 	.word	0x40013800
 8003404:	40021000 	.word	0x40021000
 8003408:	40004400 	.word	0x40004400
 800340c:	40004800 	.word	0x40004800
 8003410:	40004c00 	.word	0x40004c00
 8003414:	00f42400 	.word	0x00f42400
 8003418:	08004740 	.word	0x08004740

0800341c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	2201      	movs	r2, #1
 800342a:	4013      	ands	r3, r2
 800342c:	d00b      	beq.n	8003446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4a4a      	ldr	r2, [pc, #296]	; (8003560 <UART_AdvFeatureConfig+0x144>)
 8003436:	4013      	ands	r3, r2
 8003438:	0019      	movs	r1, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	2202      	movs	r2, #2
 800344c:	4013      	ands	r3, r2
 800344e:	d00b      	beq.n	8003468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4a43      	ldr	r2, [pc, #268]	; (8003564 <UART_AdvFeatureConfig+0x148>)
 8003458:	4013      	ands	r3, r2
 800345a:	0019      	movs	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	2204      	movs	r2, #4
 800346e:	4013      	ands	r3, r2
 8003470:	d00b      	beq.n	800348a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4a3b      	ldr	r2, [pc, #236]	; (8003568 <UART_AdvFeatureConfig+0x14c>)
 800347a:	4013      	ands	r3, r2
 800347c:	0019      	movs	r1, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348e:	2208      	movs	r2, #8
 8003490:	4013      	ands	r3, r2
 8003492:	d00b      	beq.n	80034ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4a34      	ldr	r2, [pc, #208]	; (800356c <UART_AdvFeatureConfig+0x150>)
 800349c:	4013      	ands	r3, r2
 800349e:	0019      	movs	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	2210      	movs	r2, #16
 80034b2:	4013      	ands	r3, r2
 80034b4:	d00b      	beq.n	80034ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	4a2c      	ldr	r2, [pc, #176]	; (8003570 <UART_AdvFeatureConfig+0x154>)
 80034be:	4013      	ands	r3, r2
 80034c0:	0019      	movs	r1, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	2220      	movs	r2, #32
 80034d4:	4013      	ands	r3, r2
 80034d6:	d00b      	beq.n	80034f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	4a25      	ldr	r2, [pc, #148]	; (8003574 <UART_AdvFeatureConfig+0x158>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	0019      	movs	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	2240      	movs	r2, #64	; 0x40
 80034f6:	4013      	ands	r3, r2
 80034f8:	d01d      	beq.n	8003536 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4a1d      	ldr	r2, [pc, #116]	; (8003578 <UART_AdvFeatureConfig+0x15c>)
 8003502:	4013      	ands	r3, r2
 8003504:	0019      	movs	r1, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	035b      	lsls	r3, r3, #13
 800351a:	429a      	cmp	r2, r3
 800351c:	d10b      	bne.n	8003536 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4a15      	ldr	r2, [pc, #84]	; (800357c <UART_AdvFeatureConfig+0x160>)
 8003526:	4013      	ands	r3, r2
 8003528:	0019      	movs	r1, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	2280      	movs	r2, #128	; 0x80
 800353c:	4013      	ands	r3, r2
 800353e:	d00b      	beq.n	8003558 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4a0e      	ldr	r2, [pc, #56]	; (8003580 <UART_AdvFeatureConfig+0x164>)
 8003548:	4013      	ands	r3, r2
 800354a:	0019      	movs	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	605a      	str	r2, [r3, #4]
  }
}
 8003558:	46c0      	nop			; (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	b002      	add	sp, #8
 800355e:	bd80      	pop	{r7, pc}
 8003560:	fffdffff 	.word	0xfffdffff
 8003564:	fffeffff 	.word	0xfffeffff
 8003568:	fffbffff 	.word	0xfffbffff
 800356c:	ffff7fff 	.word	0xffff7fff
 8003570:	ffffefff 	.word	0xffffefff
 8003574:	ffffdfff 	.word	0xffffdfff
 8003578:	ffefffff 	.word	0xffefffff
 800357c:	ff9fffff 	.word	0xff9fffff
 8003580:	fff7ffff 	.word	0xfff7ffff

08003584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af02      	add	r7, sp, #8
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2290      	movs	r2, #144	; 0x90
 8003590:	2100      	movs	r1, #0
 8003592:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003594:	f7fd fc62 	bl	8000e5c <HAL_GetTick>
 8003598:	0003      	movs	r3, r0
 800359a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2208      	movs	r2, #8
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d10c      	bne.n	80035c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2280      	movs	r2, #128	; 0x80
 80035ae:	0391      	lsls	r1, r2, #14
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	4a1a      	ldr	r2, [pc, #104]	; (800361c <UART_CheckIdleState+0x98>)
 80035b4:	9200      	str	r2, [sp, #0]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f000 f832 	bl	8003620 <UART_WaitOnFlagUntilTimeout>
 80035bc:	1e03      	subs	r3, r0, #0
 80035be:	d001      	beq.n	80035c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e026      	b.n	8003612 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2204      	movs	r2, #4
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d10c      	bne.n	80035ec <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2280      	movs	r2, #128	; 0x80
 80035d6:	03d1      	lsls	r1, r2, #15
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	4a10      	ldr	r2, [pc, #64]	; (800361c <UART_CheckIdleState+0x98>)
 80035dc:	9200      	str	r2, [sp, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	f000 f81e 	bl	8003620 <UART_WaitOnFlagUntilTimeout>
 80035e4:	1e03      	subs	r3, r0, #0
 80035e6:	d001      	beq.n	80035ec <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e012      	b.n	8003612 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2288      	movs	r2, #136	; 0x88
 80035f0:	2120      	movs	r1, #32
 80035f2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	228c      	movs	r2, #140	; 0x8c
 80035f8:	2120      	movs	r1, #32
 80035fa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2284      	movs	r2, #132	; 0x84
 800360c:	2100      	movs	r1, #0
 800360e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	0018      	movs	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	b004      	add	sp, #16
 8003618:	bd80      	pop	{r7, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	01ffffff 	.word	0x01ffffff

08003620 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b094      	sub	sp, #80	; 0x50
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	1dfb      	adds	r3, r7, #7
 800362e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003630:	e0a7      	b.n	8003782 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003634:	3301      	adds	r3, #1
 8003636:	d100      	bne.n	800363a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003638:	e0a3      	b.n	8003782 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800363a:	f7fd fc0f 	bl	8000e5c <HAL_GetTick>
 800363e:	0002      	movs	r2, r0
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003646:	429a      	cmp	r2, r3
 8003648:	d302      	bcc.n	8003650 <UART_WaitOnFlagUntilTimeout+0x30>
 800364a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800364c:	2b00      	cmp	r3, #0
 800364e:	d13f      	bne.n	80036d0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003650:	f3ef 8310 	mrs	r3, PRIMASK
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003658:	647b      	str	r3, [r7, #68]	; 0x44
 800365a:	2301      	movs	r3, #1
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	f383 8810 	msr	PRIMASK, r3
}
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	494e      	ldr	r1, [pc, #312]	; (80037ac <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003672:	400a      	ands	r2, r1
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003678:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	f383 8810 	msr	PRIMASK, r3
}
 8003680:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003682:	f3ef 8310 	mrs	r3, PRIMASK
 8003686:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368a:	643b      	str	r3, [r7, #64]	; 0x40
 800368c:	2301      	movs	r3, #1
 800368e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003692:	f383 8810 	msr	PRIMASK, r3
}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2101      	movs	r1, #1
 80036a4:	438a      	bics	r2, r1
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ae:	f383 8810 	msr	PRIMASK, r3
}
 80036b2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2288      	movs	r2, #136	; 0x88
 80036b8:	2120      	movs	r1, #32
 80036ba:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	228c      	movs	r2, #140	; 0x8c
 80036c0:	2120      	movs	r1, #32
 80036c2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2284      	movs	r2, #132	; 0x84
 80036c8:	2100      	movs	r1, #0
 80036ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e069      	b.n	80037a4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2204      	movs	r2, #4
 80036d8:	4013      	ands	r3, r2
 80036da:	d052      	beq.n	8003782 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69da      	ldr	r2, [r3, #28]
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	401a      	ands	r2, r3
 80036e8:	2380      	movs	r3, #128	; 0x80
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d148      	bne.n	8003782 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2280      	movs	r2, #128	; 0x80
 80036f6:	0112      	lsls	r2, r2, #4
 80036f8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fa:	f3ef 8310 	mrs	r3, PRIMASK
 80036fe:	613b      	str	r3, [r7, #16]
  return(result);
 8003700:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003704:	2301      	movs	r3, #1
 8003706:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f383 8810 	msr	PRIMASK, r3
}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4924      	ldr	r1, [pc, #144]	; (80037ac <UART_WaitOnFlagUntilTimeout+0x18c>)
 800371c:	400a      	ands	r2, r1
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003722:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	f383 8810 	msr	PRIMASK, r3
}
 800372a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800372c:	f3ef 8310 	mrs	r3, PRIMASK
 8003730:	61fb      	str	r3, [r7, #28]
  return(result);
 8003732:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003734:	64bb      	str	r3, [r7, #72]	; 0x48
 8003736:	2301      	movs	r3, #1
 8003738:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	f383 8810 	msr	PRIMASK, r3
}
 8003740:	46c0      	nop			; (mov r8, r8)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2101      	movs	r1, #1
 800374e:	438a      	bics	r2, r1
 8003750:	609a      	str	r2, [r3, #8]
 8003752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	f383 8810 	msr	PRIMASK, r3
}
 800375c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2288      	movs	r2, #136	; 0x88
 8003762:	2120      	movs	r1, #32
 8003764:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	228c      	movs	r2, #140	; 0x8c
 800376a:	2120      	movs	r1, #32
 800376c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2290      	movs	r2, #144	; 0x90
 8003772:	2120      	movs	r1, #32
 8003774:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2284      	movs	r2, #132	; 0x84
 800377a:	2100      	movs	r1, #0
 800377c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e010      	b.n	80037a4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	4013      	ands	r3, r2
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	425a      	negs	r2, r3
 8003792:	4153      	adcs	r3, r2
 8003794:	b2db      	uxtb	r3, r3
 8003796:	001a      	movs	r2, r3
 8003798:	1dfb      	adds	r3, r7, #7
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d100      	bne.n	80037a2 <UART_WaitOnFlagUntilTimeout+0x182>
 80037a0:	e747      	b.n	8003632 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	0018      	movs	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b014      	add	sp, #80	; 0x50
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	fffffe5f 	.word	0xfffffe5f

080037b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b098      	sub	sp, #96	; 0x60
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	1dbb      	adds	r3, r7, #6
 80037bc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1dba      	adds	r2, r7, #6
 80037c8:	215c      	movs	r1, #92	; 0x5c
 80037ca:	8812      	ldrh	r2, [r2, #0]
 80037cc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1dba      	adds	r2, r7, #6
 80037d2:	215e      	movs	r1, #94	; 0x5e
 80037d4:	8812      	ldrh	r2, [r2, #0]
 80037d6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	015b      	lsls	r3, r3, #5
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d10d      	bne.n	8003806 <UART_Start_Receive_IT+0x56>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d104      	bne.n	80037fc <UART_Start_Receive_IT+0x4c>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2260      	movs	r2, #96	; 0x60
 80037f6:	497b      	ldr	r1, [pc, #492]	; (80039e4 <UART_Start_Receive_IT+0x234>)
 80037f8:	5299      	strh	r1, [r3, r2]
 80037fa:	e02e      	b.n	800385a <UART_Start_Receive_IT+0xaa>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2260      	movs	r2, #96	; 0x60
 8003800:	21ff      	movs	r1, #255	; 0xff
 8003802:	5299      	strh	r1, [r3, r2]
 8003804:	e029      	b.n	800385a <UART_Start_Receive_IT+0xaa>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10d      	bne.n	800382a <UART_Start_Receive_IT+0x7a>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d104      	bne.n	8003820 <UART_Start_Receive_IT+0x70>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2260      	movs	r2, #96	; 0x60
 800381a:	21ff      	movs	r1, #255	; 0xff
 800381c:	5299      	strh	r1, [r3, r2]
 800381e:	e01c      	b.n	800385a <UART_Start_Receive_IT+0xaa>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2260      	movs	r2, #96	; 0x60
 8003824:	217f      	movs	r1, #127	; 0x7f
 8003826:	5299      	strh	r1, [r3, r2]
 8003828:	e017      	b.n	800385a <UART_Start_Receive_IT+0xaa>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	2380      	movs	r3, #128	; 0x80
 8003830:	055b      	lsls	r3, r3, #21
 8003832:	429a      	cmp	r2, r3
 8003834:	d10d      	bne.n	8003852 <UART_Start_Receive_IT+0xa2>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d104      	bne.n	8003848 <UART_Start_Receive_IT+0x98>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2260      	movs	r2, #96	; 0x60
 8003842:	217f      	movs	r1, #127	; 0x7f
 8003844:	5299      	strh	r1, [r3, r2]
 8003846:	e008      	b.n	800385a <UART_Start_Receive_IT+0xaa>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2260      	movs	r2, #96	; 0x60
 800384c:	213f      	movs	r1, #63	; 0x3f
 800384e:	5299      	strh	r1, [r3, r2]
 8003850:	e003      	b.n	800385a <UART_Start_Receive_IT+0xaa>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2260      	movs	r2, #96	; 0x60
 8003856:	2100      	movs	r1, #0
 8003858:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2290      	movs	r2, #144	; 0x90
 800385e:	2100      	movs	r1, #0
 8003860:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	228c      	movs	r2, #140	; 0x8c
 8003866:	2122      	movs	r1, #34	; 0x22
 8003868:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386a:	f3ef 8310 	mrs	r3, PRIMASK
 800386e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003870:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003872:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003874:	2301      	movs	r3, #1
 8003876:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800387a:	f383 8810 	msr	PRIMASK, r3
}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2101      	movs	r1, #1
 800388c:	430a      	orrs	r2, r1
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003892:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003896:	f383 8810 	msr	PRIMASK, r3
}
 800389a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	059b      	lsls	r3, r3, #22
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d150      	bne.n	800394a <UART_Start_Receive_IT+0x19a>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2268      	movs	r2, #104	; 0x68
 80038ac:	5a9b      	ldrh	r3, [r3, r2]
 80038ae:	1dba      	adds	r2, r7, #6
 80038b0:	8812      	ldrh	r2, [r2, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d349      	bcc.n	800394a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	2380      	movs	r3, #128	; 0x80
 80038bc:	015b      	lsls	r3, r3, #5
 80038be:	429a      	cmp	r2, r3
 80038c0:	d107      	bne.n	80038d2 <UART_Start_Receive_IT+0x122>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d103      	bne.n	80038d2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4a46      	ldr	r2, [pc, #280]	; (80039e8 <UART_Start_Receive_IT+0x238>)
 80038ce:	675a      	str	r2, [r3, #116]	; 0x74
 80038d0:	e002      	b.n	80038d8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4a45      	ldr	r2, [pc, #276]	; (80039ec <UART_Start_Receive_IT+0x23c>)
 80038d6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d019      	beq.n	8003914 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e0:	f3ef 8310 	mrs	r3, PRIMASK
 80038e4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80038e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80038ea:	2301      	movs	r3, #1
 80038ec:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f0:	f383 8810 	msr	PRIMASK, r3
}
 80038f4:	46c0      	nop			; (mov r8, r8)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2180      	movs	r1, #128	; 0x80
 8003902:	0049      	lsls	r1, r1, #1
 8003904:	430a      	orrs	r2, r1
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800390a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800390e:	f383 8810 	msr	PRIMASK, r3
}
 8003912:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003914:	f3ef 8310 	mrs	r3, PRIMASK
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800391c:	657b      	str	r3, [r7, #84]	; 0x54
 800391e:	2301      	movs	r3, #1
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	f383 8810 	msr	PRIMASK, r3
}
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2180      	movs	r1, #128	; 0x80
 8003936:	0549      	lsls	r1, r1, #21
 8003938:	430a      	orrs	r2, r1
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800393e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	f383 8810 	msr	PRIMASK, r3
}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	e047      	b.n	80039da <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	2380      	movs	r3, #128	; 0x80
 8003950:	015b      	lsls	r3, r3, #5
 8003952:	429a      	cmp	r2, r3
 8003954:	d107      	bne.n	8003966 <UART_Start_Receive_IT+0x1b6>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d103      	bne.n	8003966 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a23      	ldr	r2, [pc, #140]	; (80039f0 <UART_Start_Receive_IT+0x240>)
 8003962:	675a      	str	r2, [r3, #116]	; 0x74
 8003964:	e002      	b.n	800396c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a22      	ldr	r2, [pc, #136]	; (80039f4 <UART_Start_Receive_IT+0x244>)
 800396a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d019      	beq.n	80039a8 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003974:	f3ef 8310 	mrs	r3, PRIMASK
 8003978:	61fb      	str	r3, [r7, #28]
  return(result);
 800397a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800397c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800397e:	2301      	movs	r3, #1
 8003980:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f383 8810 	msr	PRIMASK, r3
}
 8003988:	46c0      	nop			; (mov r8, r8)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2190      	movs	r1, #144	; 0x90
 8003996:	0049      	lsls	r1, r1, #1
 8003998:	430a      	orrs	r2, r1
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	f383 8810 	msr	PRIMASK, r3
}
 80039a6:	e018      	b.n	80039da <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a8:	f3ef 8310 	mrs	r3, PRIMASK
 80039ac:	613b      	str	r3, [r7, #16]
  return(result);
 80039ae:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80039b0:	653b      	str	r3, [r7, #80]	; 0x50
 80039b2:	2301      	movs	r3, #1
 80039b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f383 8810 	msr	PRIMASK, r3
}
 80039bc:	46c0      	nop			; (mov r8, r8)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2120      	movs	r1, #32
 80039ca:	430a      	orrs	r2, r1
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	f383 8810 	msr	PRIMASK, r3
}
 80039d8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	0018      	movs	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	b018      	add	sp, #96	; 0x60
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	000001ff 	.word	0x000001ff
 80039e8:	08004121 	.word	0x08004121
 80039ec:	08003e35 	.word	0x08003e35
 80039f0:	08003cc1 	.word	0x08003cc1
 80039f4:	08003b4d 	.word	0x08003b4d

080039f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08e      	sub	sp, #56	; 0x38
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a00:	f3ef 8310 	mrs	r3, PRIMASK
 8003a04:	617b      	str	r3, [r7, #20]
  return(result);
 8003a06:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a08:	637b      	str	r3, [r7, #52]	; 0x34
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	f383 8810 	msr	PRIMASK, r3
}
 8003a14:	46c0      	nop			; (mov r8, r8)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4926      	ldr	r1, [pc, #152]	; (8003abc <UART_EndRxTransfer+0xc4>)
 8003a22:	400a      	ands	r2, r1
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f383 8810 	msr	PRIMASK, r3
}
 8003a30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a32:	f3ef 8310 	mrs	r3, PRIMASK
 8003a36:	623b      	str	r3, [r7, #32]
  return(result);
 8003a38:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a3a:	633b      	str	r3, [r7, #48]	; 0x30
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	f383 8810 	msr	PRIMASK, r3
}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	491b      	ldr	r1, [pc, #108]	; (8003ac0 <UART_EndRxTransfer+0xc8>)
 8003a54:	400a      	ands	r2, r1
 8003a56:	609a      	str	r2, [r3, #8]
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5e:	f383 8810 	msr	PRIMASK, r3
}
 8003a62:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d118      	bne.n	8003a9e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a70:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a72:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a76:	2301      	movs	r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f383 8810 	msr	PRIMASK, r3
}
 8003a80:	46c0      	nop			; (mov r8, r8)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2110      	movs	r1, #16
 8003a8e:	438a      	bics	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f383 8810 	msr	PRIMASK, r3
}
 8003a9c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	228c      	movs	r2, #140	; 0x8c
 8003aa2:	2120      	movs	r1, #32
 8003aa4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b00e      	add	sp, #56	; 0x38
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	fffffedf 	.word	0xfffffedf
 8003ac0:	effffffe 	.word	0xeffffffe

08003ac4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	225e      	movs	r2, #94	; 0x5e
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2256      	movs	r2, #86	; 0x56
 8003ade:	2100      	movs	r1, #0
 8003ae0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f7ff fae1 	bl	80030ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b004      	add	sp, #16
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b086      	sub	sp, #24
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003afa:	f3ef 8310 	mrs	r3, PRIMASK
 8003afe:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b00:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	2301      	movs	r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f383 8810 	msr	PRIMASK, r3
}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2140      	movs	r1, #64	; 0x40
 8003b1c:	438a      	bics	r2, r1
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f383 8810 	msr	PRIMASK, r3
}
 8003b2a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2288      	movs	r2, #136	; 0x88
 8003b30:	2120      	movs	r1, #32
 8003b32:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f7ff faad 	bl	800309c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b006      	add	sp, #24
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b090      	sub	sp, #64	; 0x40
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b54:	203e      	movs	r0, #62	; 0x3e
 8003b56:	183b      	adds	r3, r7, r0
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	2160      	movs	r1, #96	; 0x60
 8003b5c:	5a52      	ldrh	r2, [r2, r1]
 8003b5e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	228c      	movs	r2, #140	; 0x8c
 8003b64:	589b      	ldr	r3, [r3, r2]
 8003b66:	2b22      	cmp	r3, #34	; 0x22
 8003b68:	d000      	beq.n	8003b6c <UART_RxISR_8BIT+0x20>
 8003b6a:	e09a      	b.n	8003ca2 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b72:	213c      	movs	r1, #60	; 0x3c
 8003b74:	187b      	adds	r3, r7, r1
 8003b76:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b78:	187b      	adds	r3, r7, r1
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	183b      	adds	r3, r7, r0
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	b2d9      	uxtb	r1, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	400a      	ands	r2, r1
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	225e      	movs	r2, #94	; 0x5e
 8003b9c:	5a9b      	ldrh	r3, [r3, r2]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b299      	uxth	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	225e      	movs	r2, #94	; 0x5e
 8003ba8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	225e      	movs	r2, #94	; 0x5e
 8003bae:	5a9b      	ldrh	r3, [r3, r2]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d000      	beq.n	8003bb8 <UART_RxISR_8BIT+0x6c>
 8003bb6:	e07c      	b.n	8003cb2 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bbe:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	f383 8810 	msr	PRIMASK, r3
}
 8003bcc:	46c0      	nop			; (mov r8, r8)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4938      	ldr	r1, [pc, #224]	; (8003cbc <UART_RxISR_8BIT+0x170>)
 8003bda:	400a      	ands	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	f383 8810 	msr	PRIMASK, r3
}
 8003be8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bea:	f3ef 8310 	mrs	r3, PRIMASK
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	f383 8810 	msr	PRIMASK, r3
}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	438a      	bics	r2, r1
 8003c0e:	609a      	str	r2, [r3, #8]
 8003c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c16:	f383 8810 	msr	PRIMASK, r3
}
 8003c1a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	228c      	movs	r2, #140	; 0x8c
 8003c20:	2120      	movs	r1, #32
 8003c22:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d12f      	bne.n	8003c98 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c42:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c44:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c46:	633b      	str	r3, [r7, #48]	; 0x30
 8003c48:	2301      	movs	r3, #1
 8003c4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f383 8810 	msr	PRIMASK, r3
}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2110      	movs	r1, #16
 8003c60:	438a      	bics	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f383 8810 	msr	PRIMASK, r3
}
 8003c6e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	2210      	movs	r2, #16
 8003c78:	4013      	ands	r3, r2
 8003c7a:	2b10      	cmp	r3, #16
 8003c7c:	d103      	bne.n	8003c86 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2210      	movs	r2, #16
 8003c84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	225c      	movs	r2, #92	; 0x5c
 8003c8a:	5a9a      	ldrh	r2, [r3, r2]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	0011      	movs	r1, r2
 8003c90:	0018      	movs	r0, r3
 8003c92:	f7ff fa13 	bl	80030bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c96:	e00c      	b.n	8003cb2 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f7fc fba6 	bl	80003ec <HAL_UART_RxCpltCallback>
}
 8003ca0:	e007      	b.n	8003cb2 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699a      	ldr	r2, [r3, #24]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2108      	movs	r1, #8
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	619a      	str	r2, [r3, #24]
}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b010      	add	sp, #64	; 0x40
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	fffffedf 	.word	0xfffffedf

08003cc0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b090      	sub	sp, #64	; 0x40
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003cc8:	203e      	movs	r0, #62	; 0x3e
 8003cca:	183b      	adds	r3, r7, r0
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	2160      	movs	r1, #96	; 0x60
 8003cd0:	5a52      	ldrh	r2, [r2, r1]
 8003cd2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	228c      	movs	r2, #140	; 0x8c
 8003cd8:	589b      	ldr	r3, [r3, r2]
 8003cda:	2b22      	cmp	r3, #34	; 0x22
 8003cdc:	d000      	beq.n	8003ce0 <UART_RxISR_16BIT+0x20>
 8003cde:	e09a      	b.n	8003e16 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ce6:	213c      	movs	r1, #60	; 0x3c
 8003ce8:	187b      	adds	r3, r7, r1
 8003cea:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003cf2:	187b      	adds	r3, r7, r1
 8003cf4:	183a      	adds	r2, r7, r0
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	8812      	ldrh	r2, [r2, #0]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d06:	1c9a      	adds	r2, r3, #2
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	225e      	movs	r2, #94	; 0x5e
 8003d10:	5a9b      	ldrh	r3, [r3, r2]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b299      	uxth	r1, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	225e      	movs	r2, #94	; 0x5e
 8003d1c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	225e      	movs	r2, #94	; 0x5e
 8003d22:	5a9b      	ldrh	r3, [r3, r2]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d000      	beq.n	8003d2c <UART_RxISR_16BIT+0x6c>
 8003d2a:	e07c      	b.n	8003e26 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d30:	617b      	str	r3, [r7, #20]
  return(result);
 8003d32:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d34:	637b      	str	r3, [r7, #52]	; 0x34
 8003d36:	2301      	movs	r3, #1
 8003d38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f383 8810 	msr	PRIMASK, r3
}
 8003d40:	46c0      	nop			; (mov r8, r8)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4938      	ldr	r1, [pc, #224]	; (8003e30 <UART_RxISR_16BIT+0x170>)
 8003d4e:	400a      	ands	r2, r1
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	f383 8810 	msr	PRIMASK, r3
}
 8003d5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d62:	623b      	str	r3, [r7, #32]
  return(result);
 8003d64:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d66:	633b      	str	r3, [r7, #48]	; 0x30
 8003d68:	2301      	movs	r3, #1
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	f383 8810 	msr	PRIMASK, r3
}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2101      	movs	r1, #1
 8003d80:	438a      	bics	r2, r1
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	f383 8810 	msr	PRIMASK, r3
}
 8003d8e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	228c      	movs	r2, #140	; 0x8c
 8003d94:	2120      	movs	r1, #32
 8003d96:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d12f      	bne.n	8003e0c <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db2:	f3ef 8310 	mrs	r3, PRIMASK
 8003db6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003db8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f383 8810 	msr	PRIMASK, r3
}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2110      	movs	r1, #16
 8003dd4:	438a      	bics	r2, r1
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f383 8810 	msr	PRIMASK, r3
}
 8003de2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	2210      	movs	r2, #16
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d103      	bne.n	8003dfa <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2210      	movs	r2, #16
 8003df8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	225c      	movs	r2, #92	; 0x5c
 8003dfe:	5a9a      	ldrh	r2, [r3, r2]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	0011      	movs	r1, r2
 8003e04:	0018      	movs	r0, r3
 8003e06:	f7ff f959 	bl	80030bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e0a:	e00c      	b.n	8003e26 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f7fc faec 	bl	80003ec <HAL_UART_RxCpltCallback>
}
 8003e14:	e007      	b.n	8003e26 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699a      	ldr	r2, [r3, #24]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2108      	movs	r1, #8
 8003e22:	430a      	orrs	r2, r1
 8003e24:	619a      	str	r2, [r3, #24]
}
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	b010      	add	sp, #64	; 0x40
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	fffffedf 	.word	0xfffffedf

08003e34 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b09c      	sub	sp, #112	; 0x70
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003e3c:	236a      	movs	r3, #106	; 0x6a
 8003e3e:	18fb      	adds	r3, r7, r3
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	2160      	movs	r1, #96	; 0x60
 8003e44:	5a52      	ldrh	r2, [r2, r1]
 8003e46:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	228c      	movs	r2, #140	; 0x8c
 8003e64:	589b      	ldr	r3, [r3, r2]
 8003e66:	2b22      	cmp	r3, #34	; 0x22
 8003e68:	d000      	beq.n	8003e6c <UART_RxISR_8BIT_FIFOEN+0x38>
 8003e6a:	e144      	b.n	80040f6 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003e6c:	235e      	movs	r3, #94	; 0x5e
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	2168      	movs	r1, #104	; 0x68
 8003e74:	5a52      	ldrh	r2, [r2, r1]
 8003e76:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003e78:	e0eb      	b.n	8004052 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e80:	215c      	movs	r1, #92	; 0x5c
 8003e82:	187b      	adds	r3, r7, r1
 8003e84:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e86:	187b      	adds	r3, r7, r1
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	236a      	movs	r3, #106	; 0x6a
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	b2d9      	uxtb	r1, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e98:	400a      	ands	r2, r1
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	225e      	movs	r2, #94	; 0x5e
 8003eac:	5a9b      	ldrh	r3, [r3, r2]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b299      	uxth	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	225e      	movs	r2, #94	; 0x5e
 8003eb8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec4:	2207      	movs	r2, #7
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d049      	beq.n	8003f5e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ecc:	2201      	movs	r2, #1
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d010      	beq.n	8003ef4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003ed2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ed4:	2380      	movs	r3, #128	; 0x80
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d00b      	beq.n	8003ef4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2290      	movs	r2, #144	; 0x90
 8003ee8:	589b      	ldr	r3, [r3, r2]
 8003eea:	2201      	movs	r2, #1
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2190      	movs	r1, #144	; 0x90
 8003ef2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d00f      	beq.n	8003f1c <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003efc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003efe:	2201      	movs	r2, #1
 8003f00:	4013      	ands	r3, r2
 8003f02:	d00b      	beq.n	8003f1c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2290      	movs	r2, #144	; 0x90
 8003f10:	589b      	ldr	r3, [r3, r2]
 8003f12:	2204      	movs	r2, #4
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2190      	movs	r1, #144	; 0x90
 8003f1a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1e:	2204      	movs	r2, #4
 8003f20:	4013      	ands	r3, r2
 8003f22:	d00f      	beq.n	8003f44 <UART_RxISR_8BIT_FIFOEN+0x110>
 8003f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f26:	2201      	movs	r2, #1
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d00b      	beq.n	8003f44 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2204      	movs	r2, #4
 8003f32:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2290      	movs	r2, #144	; 0x90
 8003f38:	589b      	ldr	r3, [r3, r2]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2190      	movs	r1, #144	; 0x90
 8003f42:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2290      	movs	r2, #144	; 0x90
 8003f48:	589b      	ldr	r3, [r3, r2]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	0018      	movs	r0, r3
 8003f52:	f7ff f8ab 	bl	80030ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2290      	movs	r2, #144	; 0x90
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	225e      	movs	r2, #94	; 0x5e
 8003f62:	5a9b      	ldrh	r3, [r3, r2]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d173      	bne.n	8004052 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f72:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f74:	2301      	movs	r3, #1
 8003f76:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	f383 8810 	msr	PRIMASK, r3
}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4961      	ldr	r1, [pc, #388]	; (8004110 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f92:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f96:	f383 8810 	msr	PRIMASK, r3
}
 8003f9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa0:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fa4:	657b      	str	r3, [r7, #84]	; 0x54
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fac:	f383 8810 	msr	PRIMASK, r3
}
 8003fb0:	46c0      	nop			; (mov r8, r8)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4955      	ldr	r1, [pc, #340]	; (8004114 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8003fbe:	400a      	ands	r2, r1
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fc8:	f383 8810 	msr	PRIMASK, r3
}
 8003fcc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	228c      	movs	r2, #140	; 0x8c
 8003fd2:	2120      	movs	r1, #32
 8003fd4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d12f      	bne.n	800404a <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff4:	623b      	str	r3, [r7, #32]
  return(result);
 8003ff6:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff8:	653b      	str	r3, [r7, #80]	; 0x50
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	f383 8810 	msr	PRIMASK, r3
}
 8004004:	46c0      	nop			; (mov r8, r8)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2110      	movs	r1, #16
 8004012:	438a      	bics	r2, r1
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	f383 8810 	msr	PRIMASK, r3
}
 8004020:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	2210      	movs	r2, #16
 800402a:	4013      	ands	r3, r2
 800402c:	2b10      	cmp	r3, #16
 800402e:	d103      	bne.n	8004038 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2210      	movs	r2, #16
 8004036:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	225c      	movs	r2, #92	; 0x5c
 800403c:	5a9a      	ldrh	r2, [r3, r2]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	0011      	movs	r1, r2
 8004042:	0018      	movs	r0, r3
 8004044:	f7ff f83a 	bl	80030bc <HAL_UARTEx_RxEventCallback>
 8004048:	e003      	b.n	8004052 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	0018      	movs	r0, r3
 800404e:	f7fc f9cd 	bl	80003ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004052:	235e      	movs	r3, #94	; 0x5e
 8004054:	18fb      	adds	r3, r7, r3
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d004      	beq.n	8004066 <UART_RxISR_8BIT_FIFOEN+0x232>
 800405c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405e:	2220      	movs	r2, #32
 8004060:	4013      	ands	r3, r2
 8004062:	d000      	beq.n	8004066 <UART_RxISR_8BIT_FIFOEN+0x232>
 8004064:	e709      	b.n	8003e7a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004066:	204e      	movs	r0, #78	; 0x4e
 8004068:	183b      	adds	r3, r7, r0
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	215e      	movs	r1, #94	; 0x5e
 800406e:	5a52      	ldrh	r2, [r2, r1]
 8004070:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004072:	0001      	movs	r1, r0
 8004074:	187b      	adds	r3, r7, r1
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d044      	beq.n	8004106 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2268      	movs	r2, #104	; 0x68
 8004080:	5a9b      	ldrh	r3, [r3, r2]
 8004082:	187a      	adds	r2, r7, r1
 8004084:	8812      	ldrh	r2, [r2, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d23d      	bcs.n	8004106 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800408a:	f3ef 8310 	mrs	r3, PRIMASK
 800408e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004090:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004092:	64bb      	str	r3, [r7, #72]	; 0x48
 8004094:	2301      	movs	r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f383 8810 	msr	PRIMASK, r3
}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	491b      	ldr	r1, [pc, #108]	; (8004118 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80040ac:	400a      	ands	r2, r1
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f383 8810 	msr	PRIMASK, r3
}
 80040ba:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a17      	ldr	r2, [pc, #92]	; (800411c <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 80040c0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c2:	f3ef 8310 	mrs	r3, PRIMASK
 80040c6:	617b      	str	r3, [r7, #20]
  return(result);
 80040c8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80040ca:	647b      	str	r3, [r7, #68]	; 0x44
 80040cc:	2301      	movs	r3, #1
 80040ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	f383 8810 	msr	PRIMASK, r3
}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2120      	movs	r1, #32
 80040e4:	430a      	orrs	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f383 8810 	msr	PRIMASK, r3
}
 80040f2:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040f4:	e007      	b.n	8004106 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699a      	ldr	r2, [r3, #24]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2108      	movs	r1, #8
 8004102:	430a      	orrs	r2, r1
 8004104:	619a      	str	r2, [r3, #24]
}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	46bd      	mov	sp, r7
 800410a:	b01c      	add	sp, #112	; 0x70
 800410c:	bd80      	pop	{r7, pc}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	fffffeff 	.word	0xfffffeff
 8004114:	effffffe 	.word	0xeffffffe
 8004118:	efffffff 	.word	0xefffffff
 800411c:	08003b4d 	.word	0x08003b4d

08004120 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b09e      	sub	sp, #120	; 0x78
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004128:	2372      	movs	r3, #114	; 0x72
 800412a:	18fb      	adds	r3, r7, r3
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	2160      	movs	r1, #96	; 0x60
 8004130:	5a52      	ldrh	r2, [r2, r1]
 8004132:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	228c      	movs	r2, #140	; 0x8c
 8004150:	589b      	ldr	r3, [r3, r2]
 8004152:	2b22      	cmp	r3, #34	; 0x22
 8004154:	d000      	beq.n	8004158 <UART_RxISR_16BIT_FIFOEN+0x38>
 8004156:	e144      	b.n	80043e2 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004158:	2366      	movs	r3, #102	; 0x66
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	2168      	movs	r1, #104	; 0x68
 8004160:	5a52      	ldrh	r2, [r2, r1]
 8004162:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004164:	e0eb      	b.n	800433e <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800416c:	2164      	movs	r1, #100	; 0x64
 800416e:	187b      	adds	r3, r7, r1
 8004170:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8004178:	187b      	adds	r3, r7, r1
 800417a:	2272      	movs	r2, #114	; 0x72
 800417c:	18ba      	adds	r2, r7, r2
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	8812      	ldrh	r2, [r2, #0]
 8004182:	4013      	ands	r3, r2
 8004184:	b29a      	uxth	r2, r3
 8004186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004188:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	1c9a      	adds	r2, r3, #2
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	225e      	movs	r2, #94	; 0x5e
 8004198:	5a9b      	ldrh	r3, [r3, r2]
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b299      	uxth	r1, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	225e      	movs	r2, #94	; 0x5e
 80041a4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80041ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b0:	2207      	movs	r2, #7
 80041b2:	4013      	ands	r3, r2
 80041b4:	d049      	beq.n	800424a <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b8:	2201      	movs	r2, #1
 80041ba:	4013      	ands	r3, r2
 80041bc:	d010      	beq.n	80041e0 <UART_RxISR_16BIT_FIFOEN+0xc0>
 80041be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	4013      	ands	r3, r2
 80041c6:	d00b      	beq.n	80041e0 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2201      	movs	r2, #1
 80041ce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2290      	movs	r2, #144	; 0x90
 80041d4:	589b      	ldr	r3, [r3, r2]
 80041d6:	2201      	movs	r2, #1
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2190      	movs	r1, #144	; 0x90
 80041de:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e2:	2202      	movs	r2, #2
 80041e4:	4013      	ands	r3, r2
 80041e6:	d00f      	beq.n	8004208 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80041e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041ea:	2201      	movs	r2, #1
 80041ec:	4013      	ands	r3, r2
 80041ee:	d00b      	beq.n	8004208 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2202      	movs	r2, #2
 80041f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2290      	movs	r2, #144	; 0x90
 80041fc:	589b      	ldr	r3, [r3, r2]
 80041fe:	2204      	movs	r2, #4
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2190      	movs	r1, #144	; 0x90
 8004206:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800420a:	2204      	movs	r2, #4
 800420c:	4013      	ands	r3, r2
 800420e:	d00f      	beq.n	8004230 <UART_RxISR_16BIT_FIFOEN+0x110>
 8004210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004212:	2201      	movs	r2, #1
 8004214:	4013      	ands	r3, r2
 8004216:	d00b      	beq.n	8004230 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2204      	movs	r2, #4
 800421e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2290      	movs	r2, #144	; 0x90
 8004224:	589b      	ldr	r3, [r3, r2]
 8004226:	2202      	movs	r2, #2
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2190      	movs	r1, #144	; 0x90
 800422e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2290      	movs	r2, #144	; 0x90
 8004234:	589b      	ldr	r3, [r3, r2]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	0018      	movs	r0, r3
 800423e:	f7fe ff35 	bl	80030ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2290      	movs	r2, #144	; 0x90
 8004246:	2100      	movs	r1, #0
 8004248:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	225e      	movs	r2, #94	; 0x5e
 800424e:	5a9b      	ldrh	r3, [r3, r2]
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d173      	bne.n	800433e <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004256:	f3ef 8310 	mrs	r3, PRIMASK
 800425a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800425e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004260:	2301      	movs	r3, #1
 8004262:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004266:	f383 8810 	msr	PRIMASK, r3
}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4961      	ldr	r1, [pc, #388]	; (80043fc <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8004278:	400a      	ands	r2, r1
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004282:	f383 8810 	msr	PRIMASK, r3
}
 8004286:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004288:	f3ef 8310 	mrs	r3, PRIMASK
 800428c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800428e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004290:	65bb      	str	r3, [r7, #88]	; 0x58
 8004292:	2301      	movs	r3, #1
 8004294:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004298:	f383 8810 	msr	PRIMASK, r3
}
 800429c:	46c0      	nop			; (mov r8, r8)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4955      	ldr	r1, [pc, #340]	; (8004400 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80042aa:	400a      	ands	r2, r1
 80042ac:	609a      	str	r2, [r3, #8]
 80042ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042b0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b4:	f383 8810 	msr	PRIMASK, r3
}
 80042b8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	228c      	movs	r2, #140	; 0x8c
 80042be:	2120      	movs	r1, #32
 80042c0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d12f      	bne.n	8004336 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042dc:	f3ef 8310 	mrs	r3, PRIMASK
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e4:	657b      	str	r3, [r7, #84]	; 0x54
 80042e6:	2301      	movs	r3, #1
 80042e8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	f383 8810 	msr	PRIMASK, r3
}
 80042f0:	46c0      	nop			; (mov r8, r8)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2110      	movs	r1, #16
 80042fe:	438a      	bics	r2, r1
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004304:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004308:	f383 8810 	msr	PRIMASK, r3
}
 800430c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	2210      	movs	r2, #16
 8004316:	4013      	ands	r3, r2
 8004318:	2b10      	cmp	r3, #16
 800431a:	d103      	bne.n	8004324 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2210      	movs	r2, #16
 8004322:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	225c      	movs	r2, #92	; 0x5c
 8004328:	5a9a      	ldrh	r2, [r3, r2]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	0011      	movs	r1, r2
 800432e:	0018      	movs	r0, r3
 8004330:	f7fe fec4 	bl	80030bc <HAL_UARTEx_RxEventCallback>
 8004334:	e003      	b.n	800433e <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	0018      	movs	r0, r3
 800433a:	f7fc f857 	bl	80003ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800433e:	2366      	movs	r3, #102	; 0x66
 8004340:	18fb      	adds	r3, r7, r3
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d004      	beq.n	8004352 <UART_RxISR_16BIT_FIFOEN+0x232>
 8004348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800434a:	2220      	movs	r2, #32
 800434c:	4013      	ands	r3, r2
 800434e:	d000      	beq.n	8004352 <UART_RxISR_16BIT_FIFOEN+0x232>
 8004350:	e709      	b.n	8004166 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004352:	2052      	movs	r0, #82	; 0x52
 8004354:	183b      	adds	r3, r7, r0
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	215e      	movs	r1, #94	; 0x5e
 800435a:	5a52      	ldrh	r2, [r2, r1]
 800435c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800435e:	0001      	movs	r1, r0
 8004360:	187b      	adds	r3, r7, r1
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d044      	beq.n	80043f2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2268      	movs	r2, #104	; 0x68
 800436c:	5a9b      	ldrh	r3, [r3, r2]
 800436e:	187a      	adds	r2, r7, r1
 8004370:	8812      	ldrh	r2, [r2, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d23d      	bcs.n	80043f2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004376:	f3ef 8310 	mrs	r3, PRIMASK
 800437a:	60fb      	str	r3, [r7, #12]
  return(result);
 800437c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800437e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004380:	2301      	movs	r3, #1
 8004382:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f383 8810 	msr	PRIMASK, r3
}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	491b      	ldr	r1, [pc, #108]	; (8004404 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8004398:	400a      	ands	r2, r1
 800439a:	609a      	str	r2, [r3, #8]
 800439c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800439e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f383 8810 	msr	PRIMASK, r3
}
 80043a6:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a17      	ldr	r2, [pc, #92]	; (8004408 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80043ac:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ae:	f3ef 8310 	mrs	r3, PRIMASK
 80043b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80043b4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80043b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80043b8:	2301      	movs	r3, #1
 80043ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f383 8810 	msr	PRIMASK, r3
}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2120      	movs	r1, #32
 80043d0:	430a      	orrs	r2, r1
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	f383 8810 	msr	PRIMASK, r3
}
 80043de:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043e0:	e007      	b.n	80043f2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699a      	ldr	r2, [r3, #24]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2108      	movs	r1, #8
 80043ee:	430a      	orrs	r2, r1
 80043f0:	619a      	str	r2, [r3, #24]
}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b01e      	add	sp, #120	; 0x78
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	fffffeff 	.word	0xfffffeff
 8004400:	effffffe 	.word	0xeffffffe
 8004404:	efffffff 	.word	0xefffffff
 8004408:	08003cc1 	.word	0x08003cc1

0800440c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	46bd      	mov	sp, r7
 8004418:	b002      	add	sp, #8
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004424:	46c0      	nop			; (mov r8, r8)
 8004426:	46bd      	mov	sp, r7
 8004428:	b002      	add	sp, #8
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004434:	46c0      	nop			; (mov r8, r8)
 8004436:	46bd      	mov	sp, r7
 8004438:	b002      	add	sp, #8
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2284      	movs	r2, #132	; 0x84
 8004448:	5c9b      	ldrb	r3, [r3, r2]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_UARTEx_DisableFifoMode+0x16>
 800444e:	2302      	movs	r3, #2
 8004450:	e027      	b.n	80044a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2284      	movs	r2, #132	; 0x84
 8004456:	2101      	movs	r1, #1
 8004458:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2288      	movs	r2, #136	; 0x88
 800445e:	2124      	movs	r1, #36	; 0x24
 8004460:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2101      	movs	r1, #1
 8004476:	438a      	bics	r2, r1
 8004478:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4a0b      	ldr	r2, [pc, #44]	; (80044ac <HAL_UARTEx_DisableFifoMode+0x70>)
 800447e:	4013      	ands	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2288      	movs	r2, #136	; 0x88
 8004494:	2120      	movs	r1, #32
 8004496:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2284      	movs	r2, #132	; 0x84
 800449c:	2100      	movs	r1, #0
 800449e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	0018      	movs	r0, r3
 80044a4:	46bd      	mov	sp, r7
 80044a6:	b004      	add	sp, #16
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	dfffffff 	.word	0xdfffffff

080044b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2284      	movs	r2, #132	; 0x84
 80044be:	5c9b      	ldrb	r3, [r3, r2]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e02e      	b.n	8004526 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2284      	movs	r2, #132	; 0x84
 80044cc:	2101      	movs	r1, #1
 80044ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2288      	movs	r2, #136	; 0x88
 80044d4:	2124      	movs	r1, #36	; 0x24
 80044d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2101      	movs	r1, #1
 80044ec:	438a      	bics	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	08d9      	lsrs	r1, r3, #3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	0018      	movs	r0, r3
 8004508:	f000 f854 	bl	80045b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2288      	movs	r2, #136	; 0x88
 8004518:	2120      	movs	r1, #32
 800451a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2284      	movs	r2, #132	; 0x84
 8004520:	2100      	movs	r1, #0
 8004522:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	0018      	movs	r0, r3
 8004528:	46bd      	mov	sp, r7
 800452a:	b004      	add	sp, #16
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2284      	movs	r2, #132	; 0x84
 800453e:	5c9b      	ldrb	r3, [r3, r2]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004544:	2302      	movs	r3, #2
 8004546:	e02f      	b.n	80045a8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2284      	movs	r2, #132	; 0x84
 800454c:	2101      	movs	r1, #1
 800454e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2288      	movs	r2, #136	; 0x88
 8004554:	2124      	movs	r1, #36	; 0x24
 8004556:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2101      	movs	r1, #1
 800456c:	438a      	bics	r2, r1
 800456e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	4a0e      	ldr	r2, [pc, #56]	; (80045b0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004578:	4013      	ands	r3, r2
 800457a:	0019      	movs	r1, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	0018      	movs	r0, r3
 800458a:	f000 f813 	bl	80045b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2288      	movs	r2, #136	; 0x88
 800459a:	2120      	movs	r1, #32
 800459c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2284      	movs	r2, #132	; 0x84
 80045a2:	2100      	movs	r1, #0
 80045a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	0018      	movs	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b004      	add	sp, #16
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	f1ffffff 	.word	0xf1ffffff

080045b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d108      	bne.n	80045d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	226a      	movs	r2, #106	; 0x6a
 80045c8:	2101      	movs	r1, #1
 80045ca:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2268      	movs	r2, #104	; 0x68
 80045d0:	2101      	movs	r1, #1
 80045d2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045d4:	e043      	b.n	800465e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80045d6:	260f      	movs	r6, #15
 80045d8:	19bb      	adds	r3, r7, r6
 80045da:	2208      	movs	r2, #8
 80045dc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045de:	200e      	movs	r0, #14
 80045e0:	183b      	adds	r3, r7, r0
 80045e2:	2208      	movs	r2, #8
 80045e4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	0e5b      	lsrs	r3, r3, #25
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	240d      	movs	r4, #13
 80045f2:	193b      	adds	r3, r7, r4
 80045f4:	2107      	movs	r1, #7
 80045f6:	400a      	ands	r2, r1
 80045f8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	0f5b      	lsrs	r3, r3, #29
 8004602:	b2da      	uxtb	r2, r3
 8004604:	250c      	movs	r5, #12
 8004606:	197b      	adds	r3, r7, r5
 8004608:	2107      	movs	r1, #7
 800460a:	400a      	ands	r2, r1
 800460c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800460e:	183b      	adds	r3, r7, r0
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	197a      	adds	r2, r7, r5
 8004614:	7812      	ldrb	r2, [r2, #0]
 8004616:	4914      	ldr	r1, [pc, #80]	; (8004668 <UARTEx_SetNbDataToProcess+0xb4>)
 8004618:	5c8a      	ldrb	r2, [r1, r2]
 800461a:	435a      	muls	r2, r3
 800461c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800461e:	197b      	adds	r3, r7, r5
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	4a12      	ldr	r2, [pc, #72]	; (800466c <UARTEx_SetNbDataToProcess+0xb8>)
 8004624:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004626:	0019      	movs	r1, r3
 8004628:	f7fb fdf4 	bl	8000214 <__divsi3>
 800462c:	0003      	movs	r3, r0
 800462e:	b299      	uxth	r1, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	226a      	movs	r2, #106	; 0x6a
 8004634:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004636:	19bb      	adds	r3, r7, r6
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	193a      	adds	r2, r7, r4
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	490a      	ldr	r1, [pc, #40]	; (8004668 <UARTEx_SetNbDataToProcess+0xb4>)
 8004640:	5c8a      	ldrb	r2, [r1, r2]
 8004642:	435a      	muls	r2, r3
 8004644:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004646:	193b      	adds	r3, r7, r4
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	4a08      	ldr	r2, [pc, #32]	; (800466c <UARTEx_SetNbDataToProcess+0xb8>)
 800464c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800464e:	0019      	movs	r1, r3
 8004650:	f7fb fde0 	bl	8000214 <__divsi3>
 8004654:	0003      	movs	r3, r0
 8004656:	b299      	uxth	r1, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2268      	movs	r2, #104	; 0x68
 800465c:	5299      	strh	r1, [r3, r2]
}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	46bd      	mov	sp, r7
 8004662:	b005      	add	sp, #20
 8004664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	08004758 	.word	0x08004758
 800466c:	08004760 	.word	0x08004760

08004670 <__libc_init_array>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	2600      	movs	r6, #0
 8004674:	4d0c      	ldr	r5, [pc, #48]	; (80046a8 <__libc_init_array+0x38>)
 8004676:	4c0d      	ldr	r4, [pc, #52]	; (80046ac <__libc_init_array+0x3c>)
 8004678:	1b64      	subs	r4, r4, r5
 800467a:	10a4      	asrs	r4, r4, #2
 800467c:	42a6      	cmp	r6, r4
 800467e:	d109      	bne.n	8004694 <__libc_init_array+0x24>
 8004680:	2600      	movs	r6, #0
 8004682:	f000 f821 	bl	80046c8 <_init>
 8004686:	4d0a      	ldr	r5, [pc, #40]	; (80046b0 <__libc_init_array+0x40>)
 8004688:	4c0a      	ldr	r4, [pc, #40]	; (80046b4 <__libc_init_array+0x44>)
 800468a:	1b64      	subs	r4, r4, r5
 800468c:	10a4      	asrs	r4, r4, #2
 800468e:	42a6      	cmp	r6, r4
 8004690:	d105      	bne.n	800469e <__libc_init_array+0x2e>
 8004692:	bd70      	pop	{r4, r5, r6, pc}
 8004694:	00b3      	lsls	r3, r6, #2
 8004696:	58eb      	ldr	r3, [r5, r3]
 8004698:	4798      	blx	r3
 800469a:	3601      	adds	r6, #1
 800469c:	e7ee      	b.n	800467c <__libc_init_array+0xc>
 800469e:	00b3      	lsls	r3, r6, #2
 80046a0:	58eb      	ldr	r3, [r5, r3]
 80046a2:	4798      	blx	r3
 80046a4:	3601      	adds	r6, #1
 80046a6:	e7f2      	b.n	800468e <__libc_init_array+0x1e>
 80046a8:	08004768 	.word	0x08004768
 80046ac:	08004768 	.word	0x08004768
 80046b0:	08004768 	.word	0x08004768
 80046b4:	0800476c 	.word	0x0800476c

080046b8 <memset>:
 80046b8:	0003      	movs	r3, r0
 80046ba:	1882      	adds	r2, r0, r2
 80046bc:	4293      	cmp	r3, r2
 80046be:	d100      	bne.n	80046c2 <memset+0xa>
 80046c0:	4770      	bx	lr
 80046c2:	7019      	strb	r1, [r3, #0]
 80046c4:	3301      	adds	r3, #1
 80046c6:	e7f9      	b.n	80046bc <memset+0x4>

080046c8 <_init>:
 80046c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ce:	bc08      	pop	{r3}
 80046d0:	469e      	mov	lr, r3
 80046d2:	4770      	bx	lr

080046d4 <_fini>:
 80046d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046da:	bc08      	pop	{r3}
 80046dc:	469e      	mov	lr, r3
 80046de:	4770      	bx	lr
