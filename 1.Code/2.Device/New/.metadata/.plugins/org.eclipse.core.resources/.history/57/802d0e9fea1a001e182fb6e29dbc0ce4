/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
uint8_t buffComming = 0;
uint8_t rx_data[uartBytes];
uint8_t tx_data[uartBytes];
uint8_t rx_dataChar = 0;
uint16_t rx_count = 0;

uint16_t countingStatusInput1 = 0;
uint16_t countingStatusInput2 = 0;
uint16_t countingStatusInput3 = 0;

uint8_t checkSumCRC[crcBytes];
uint8_t debug = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void clearUart(uint8_t *ptrBuffer, uint16_t sizeBuffer);
void Calc_CRC16(uint8_t *input, uint16_t size, uint8_t *output);
uint8_t CRC_MODBUS(uint8_t *input, uint8_t size);

void ModbusTransHandle(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  UNUSED(huart);

  if(huart->Instance == USART1)
  {
    if(buffComming == 0)
    {
    	buffComming = 1;
    	HAL_TIM_Base_Start(&htim3);
    }

    HAL_UART_Receive_IT(&huart1, &rx_dataChar, 1);
    rx_data[rx_count] = rx_dataChar;
    rx_count++;
    __HAL_TIM_SET_COUNTER(&htim3,0);
  }
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM3_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
  HAL_UART_Receive_IT(&huart1, &rx_dataChar, 1);
  uint8_t preset_sensor_1 = 0;
  uint8_t preset_sensor_2 = 0;
  uint8_t preset_sensor_3 = 0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Dem san pham
    if(HAL_GPIO_ReadPin(Input_Sensor_01_GPIO_Port, Input_Sensor_01_Pin) == GPIO_PIN_RESET)
    {
      HAL_Delay(delayReduceNoise);
      if(HAL_GPIO_ReadPin(Input_Sensor_01_GPIO_Port, Input_Sensor_01_Pin) == GPIO_PIN_RESET) preset_sensor_1 = 1;
    }
    if((HAL_GPIO_ReadPin(Input_Sensor_01_GPIO_Port, Input_Sensor_01_Pin) == GPIO_PIN_SET) && (preset_sensor_1 == 1))
    {
      HAL_Delay(delayReduceNoise);
      if(HAL_GPIO_ReadPin(Input_Sensor_01_GPIO_Port, Input_Sensor_01_Pin) == GPIO_PIN_SET)
      {
        preset_sensor_1 = 0;
        countingStatusInput1++;
      }
    }

    if(HAL_GPIO_ReadPin(Input_Sensor_02_GPIO_Port, Input_Sensor_02_Pin) == GPIO_PIN_RESET)
    {
    	HAL_Delay(delayReduceNoise);
    	if(HAL_GPIO_ReadPin(Input_Sensor_02_GPIO_Port, Input_Sensor_02_Pin) == GPIO_PIN_RESET) countingStatusInput2 = 1;
    }

    /*if(HAL_GPIO_ReadPin(Input_Sensor_02_GPIO_Port, Input_Sensor_02_Pin) == GPIO_PIN_RESET)
    {
      HAL_Delay(delayReduceNoise);
      if(HAL_GPIO_ReadPin(Input_Sensor_02_GPIO_Port, Input_Sensor_02_Pin) == GPIO_PIN_RESET) preset_sensor_2 = 1;
    }
    if((HAL_GPIO_ReadPin(Input_Sensor_02_GPIO_Port, Input_Sensor_02_Pin) == GPIO_PIN_SET) && (preset_sensor_2 == 1))
    {
      HAL_Delay(delayReduceNoise);
      if(HAL_GPIO_ReadPin(Input_Sensor_02_GPIO_Port, Input_Sensor_02_Pin) == GPIO_PIN_SET)
      {
        preset_sensor_2 = 0;
        countingStatusInput2++;
      }
    }

    if(HAL_GPIO_ReadPin(Input_Sensor_03_GPIO_Port, Input_Sensor_03_Pin) == GPIO_PIN_RESET)
    {
      HAL_Delay(delayReduceNoise);
      if(HAL_GPIO_ReadPin(Input_Sensor_03_GPIO_Port, Input_Sensor_03_Pin) == GPIO_PIN_RESET) preset_sensor_3 = 1;
    }
    if((HAL_GPIO_ReadPin(Input_Sensor_03_GPIO_Port, Input_Sensor_03_Pin) == GPIO_PIN_SET) && (preset_sensor_3 == 1))
    {
      HAL_Delay(delayReduceNoise);
      if(HAL_GPIO_ReadPin(Input_Sensor_03_GPIO_Port, Input_Sensor_03_Pin) == GPIO_PIN_SET)
      {
        preset_sensor_3 = 0;
        countingStatusInput3++;
      }
    }*/

	  //xac dinh trang thai chan
	/*if(HAL_GPIO_ReadPin(Input_Sensor_01_GPIO_Port, Input_Sensor_01_Pin) == GPIO_PIN_RESET)
	{
		HAL_Delay(delayReduceNoise);
		if(HAL_GPIO_ReadPin(Input_Sensor_01_GPIO_Port, Input_Sensor_01_Pin) == GPIO_PIN_RESET) countingStatusInput1 = 1;
	}
	else countingStatusInput1 = 0;

	if(HAL_GPIO_ReadPin(Input_Sensor_02_GPIO_Port, Input_Sensor_02_Pin) == GPIO_PIN_RESET)
	{
		HAL_Delay(delayReduceNoise);
		if(HAL_GPIO_ReadPin(Input_Sensor_02_GPIO_Port, Input_Sensor_02_Pin) == GPIO_PIN_RESET) countingStatusInput2 = 1;
	}
	else countingStatusInput2 = 0;

	if(HAL_GPIO_ReadPin(Input_Sensor_03_GPIO_Port, Input_Sensor_03_Pin) == GPIO_PIN_RESET)
	{
		HAL_Delay(delayReduceNoise);
		if(HAL_GPIO_ReadPin(Input_Sensor_03_GPIO_Port, Input_Sensor_03_Pin) == GPIO_PIN_RESET) countingStatusInput3 = 1;
	}
	else countingStatusInput3 = 0;*/




	// nhan uart
    if(__HAL_TIM_GetCounter(&htim3) > 5)
    {
      __HAL_TIM_SET_COUNTER(&htim3,0);
      HAL_TIM_Base_Stop(&htim3);
      buffComming = 0;
      if(CRC_MODBUS(rx_data, rx_count) && rx_data[0]== address) ModbusTransHandle();
      clearUart(rx_data, uartBytes);
    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 16000;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pins : Input_Sensor_02_Pin Input_Sensor_01_Pin */
  GPIO_InitStruct.Pin = Input_Sensor_02_Pin|Input_Sensor_01_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : Input_Sensor_03_Pin */
  GPIO_InitStruct.Pin = Input_Sensor_03_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(Input_Sensor_03_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void clearUart(uint8_t *ptrBuffer, uint16_t sizeBuffer)
{
  if(ptrBuffer == &rx_data[0]) rx_count = 0;

	for(uint16_t i = 0; i < sizeBuffer; i++) ptrBuffer[i] = '\0';
}

void appendString(uint8_t* buff_1_name, uint16_t *buff_1_len, uint8_t* buff_2_name, uint16_t buff_2_len)
{
	uint16_t x = 0;
  for (uint16_t length = *buff_1_len; length < *buff_1_len + buff_2_len; length++)
  {
    buff_1_name[length] = buff_2_name[x];
    x++;
  }
  *buff_1_len = *buff_1_len + buff_2_len;
}

void Calc_CRC16(uint8_t *input, uint16_t size, uint8_t *output)
{
  uint16_t reg_crc = 0xFFFF;

  for(uint16_t i = 0; i < size; i++)
  {
    reg_crc ^= input[i];
    for(uint8_t j = 0; j < 8; j++)
    {
      if((reg_crc & 0x01) == 1) reg_crc = (reg_crc >> 1) ^ 0xA001;
      else reg_crc = reg_crc >> 1;
    }
  }

  output[1] = (reg_crc >> 8) & 0xFF;
  output[0] = reg_crc & 0xFF;
}

uint8_t CRC_MODBUS(uint8_t *input, uint8_t size)
{
  uint16_t check_sum[2];
  uint16_t reg_crc = 0xFFFF;

  for(uint8_t i = 0; i < size - 2; i++) { //tru 2 bytes CRC cuoi
    reg_crc ^= input[i];

    for(uint8_t j = 0; j < 8; j++) {
      if((reg_crc & 0x01) == 1) reg_crc = (reg_crc >> 1) ^ 0xA001;
      else reg_crc = reg_crc >> 1;
    }

    check_sum[1] = (reg_crc >> 8) &0xFF;
    check_sum[0] = reg_crc & 0xFF;
    //debug = check_sum[0];
  }

  if(input[size-2] == check_sum[0] && input[size-1] == check_sum[1]) return 1;
  else return 0;
}

void ModbusTransHandle(void)
{
  tx_data[0] = address;
  tx_data[1] = function;
  tx_data[2] = amongBytes;
  tx_data[3] = countingStatusInput1 >> 8;
  tx_data[4] = countingStatusInput1;
  tx_data[5] = countingStatusInput2 >> 8;
  tx_data[6] = countingStatusInput2;
  tx_data[7] = countingStatusInput3 >> 8;
  tx_data[8] = countingStatusInput3;

  Calc_CRC16(tx_data, 9, checkSumCRC);

  tx_data[9] = checkSumCRC[0];
  tx_data[10] = checkSumCRC[1];
  HAL_UART_Transmit(&huart1, tx_data, 11, 1000);

  clearUart(tx_data, uartBytes);
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
