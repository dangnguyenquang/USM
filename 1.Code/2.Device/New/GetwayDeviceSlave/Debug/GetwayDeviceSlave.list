
GetwayDeviceSlave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046ec  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080047a4  080047a4  000147a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800482c  0800482c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800482c  0800482c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800482c  0800482c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800482c  0800482c  0001482c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004830  08004830  00014830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000001c  08004850  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08004850  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011988  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000274b  00000000  00000000  000319cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00034118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  00035020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016603  00000000  00000000  00035e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121ac  00000000  00000000  0004c443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e98c  00000000  00000000  0005e5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ecf7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003620  00000000  00000000  000ecfcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000001c 	.word	0x2000001c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800478c 	.word	0x0800478c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000020 	.word	0x20000020
 80000fc:	0800478c 	.word	0x0800478c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  if(huart->Instance == USART2)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a1e      	ldr	r2, [pc, #120]	; (8000474 <HAL_UART_RxCpltCallback+0x88>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d11d      	bne.n	800043a <HAL_UART_RxCpltCallback+0x4e>
  {
    HAL_UART_Receive_IT(&huart2, &lorawanDataChar, 1);
 80003fe:	491e      	ldr	r1, [pc, #120]	; (8000478 <HAL_UART_RxCpltCallback+0x8c>)
 8000400:	4b1e      	ldr	r3, [pc, #120]	; (800047c <HAL_UART_RxCpltCallback+0x90>)
 8000402:	2201      	movs	r2, #1
 8000404:	0018      	movs	r0, r3
 8000406:	f002 fb2d 	bl	8002a64 <HAL_UART_Receive_IT>
    lorawanData[lorawanDataCount] = lorawanDataChar;
 800040a:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <HAL_UART_RxCpltCallback+0x94>)
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	001a      	movs	r2, r3
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <HAL_UART_RxCpltCallback+0x8c>)
 8000412:	7819      	ldrb	r1, [r3, #0]
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <HAL_UART_RxCpltCallback+0x98>)
 8000416:	5499      	strb	r1, [r3, r2]
    lorawanDataCount++;
 8000418:	4b19      	ldr	r3, [pc, #100]	; (8000480 <HAL_UART_RxCpltCallback+0x94>)
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	3301      	adds	r3, #1
 800041e:	b29a      	uxth	r2, r3
 8000420:	4b17      	ldr	r3, [pc, #92]	; (8000480 <HAL_UART_RxCpltCallback+0x94>)
 8000422:	801a      	strh	r2, [r3, #0]
    if(lorawanData[0] == 0xAA) lorawanTransHandle();
 8000424:	4b17      	ldr	r3, [pc, #92]	; (8000484 <HAL_UART_RxCpltCallback+0x98>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2baa      	cmp	r3, #170	; 0xaa
 800042a:	d101      	bne.n	8000430 <HAL_UART_RxCpltCallback+0x44>
 800042c:	f000 fa5c 	bl	80008e8 <lorawanTransHandle>
    clearData(lorawanData, uartBytes);
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <HAL_UART_RxCpltCallback+0x98>)
 8000432:	2132      	movs	r1, #50	; 0x32
 8000434:	0018      	movs	r0, r3
 8000436:	f000 fa1b 	bl	8000870 <clearData>
  }

  if(huart->Instance == USART4)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a12      	ldr	r2, [pc, #72]	; (8000488 <HAL_UART_RxCpltCallback+0x9c>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d112      	bne.n	800046a <HAL_UART_RxCpltCallback+0x7e>
  {
    HAL_UART_Receive_IT(&huart4, &modbusDataChar, 1);
 8000444:	4911      	ldr	r1, [pc, #68]	; (800048c <HAL_UART_RxCpltCallback+0xa0>)
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <HAL_UART_RxCpltCallback+0xa4>)
 8000448:	2201      	movs	r2, #1
 800044a:	0018      	movs	r0, r3
 800044c:	f002 fb0a 	bl	8002a64 <HAL_UART_Receive_IT>
    modbusData[modbusDataCount] = modbusDataChar;
 8000450:	4b10      	ldr	r3, [pc, #64]	; (8000494 <HAL_UART_RxCpltCallback+0xa8>)
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	001a      	movs	r2, r3
 8000456:	4b0d      	ldr	r3, [pc, #52]	; (800048c <HAL_UART_RxCpltCallback+0xa0>)
 8000458:	7819      	ldrb	r1, [r3, #0]
 800045a:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <HAL_UART_RxCpltCallback+0xac>)
 800045c:	5499      	strb	r1, [r3, r2]
    modbusDataCount++;
 800045e:	4b0d      	ldr	r3, [pc, #52]	; (8000494 <HAL_UART_RxCpltCallback+0xa8>)
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	3301      	adds	r3, #1
 8000464:	b29a      	uxth	r2, r3
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <HAL_UART_RxCpltCallback+0xa8>)
 8000468:	801a      	strh	r2, [r3, #0]
  }
}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40004400 	.word	0x40004400
 8000478:	200001de 	.word	0x200001de
 800047c:	20000084 	.word	0x20000084
 8000480:	200001e0 	.word	0x200001e0
 8000484:	200001ac 	.word	0x200001ac
 8000488:	40004c00 	.word	0x40004c00
 800048c:	20000216 	.word	0x20000216
 8000490:	20000118 	.word	0x20000118
 8000494:	20000218 	.word	0x20000218
 8000498:	200001e4 	.word	0x200001e4

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 fc42 	bl	8000d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f8ae 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f000 f9cc 	bl	8000844 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ac:	f000 f948 	bl	8000740 <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 80004b0:	f000 f994 	bl	80007dc <MX_USART4_UART_Init>
  MX_TIM3_Init();
 80004b4:	f000 f8ee 	bl	8000694 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80004b8:	4b3c      	ldr	r3, [pc, #240]	; (80005ac <main+0x110>)
 80004ba:	0018      	movs	r0, r3
 80004bc:	f001 ff42 	bl	8002344 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart2, &lorawanDataChar, 1);
 80004c0:	493b      	ldr	r1, [pc, #236]	; (80005b0 <main+0x114>)
 80004c2:	4b3c      	ldr	r3, [pc, #240]	; (80005b4 <main+0x118>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	0018      	movs	r0, r3
 80004c8:	f002 facc 	bl	8002a64 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &modbusDataChar, 1);
 80004cc:	493a      	ldr	r1, [pc, #232]	; (80005b8 <main+0x11c>)
 80004ce:	4b3b      	ldr	r3, [pc, #236]	; (80005bc <main+0x120>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	0018      	movs	r0, r3
 80004d4:	f002 fac6 	bl	8002a64 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_UART_Transmit(&huart4, requestModbus1, sizeof(requestModbus1), 1000);
 80004d8:	23fa      	movs	r3, #250	; 0xfa
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	4938      	ldr	r1, [pc, #224]	; (80005c0 <main+0x124>)
 80004de:	4837      	ldr	r0, [pc, #220]	; (80005bc <main+0x120>)
 80004e0:	2207      	movs	r2, #7
 80004e2:	f002 fa23 	bl	800292c <HAL_UART_Transmit>
    HAL_Delay(500);
 80004e6:	23fa      	movs	r3, #250	; 0xfa
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 fca2 	bl	8000e34 <HAL_Delay>

    if(strlen((char*)modbusData) != 0)
 80004f0:	4b34      	ldr	r3, [pc, #208]	; (80005c4 <main+0x128>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d01b      	beq.n	8000530 <main+0x94>
    {
      isLampTower = 1;
 80004f8:	4b33      	ldr	r3, [pc, #204]	; (80005c8 <main+0x12c>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	701a      	strb	r2, [r3, #0]
      lampStatu1_H = modbusData[3];
 80004fe:	4b31      	ldr	r3, [pc, #196]	; (80005c4 <main+0x128>)
 8000500:	78da      	ldrb	r2, [r3, #3]
 8000502:	4b32      	ldr	r3, [pc, #200]	; (80005cc <main+0x130>)
 8000504:	701a      	strb	r2, [r3, #0]
      lampStatu1_L = modbusData[4];
 8000506:	4b2f      	ldr	r3, [pc, #188]	; (80005c4 <main+0x128>)
 8000508:	791a      	ldrb	r2, [r3, #4]
 800050a:	4b31      	ldr	r3, [pc, #196]	; (80005d0 <main+0x134>)
 800050c:	701a      	strb	r2, [r3, #0]
      lampStatu2_H = modbusData[5];
 800050e:	4b2d      	ldr	r3, [pc, #180]	; (80005c4 <main+0x128>)
 8000510:	795a      	ldrb	r2, [r3, #5]
 8000512:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <main+0x138>)
 8000514:	701a      	strb	r2, [r3, #0]
      lampStatu2_L = modbusData[6];
 8000516:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <main+0x128>)
 8000518:	799a      	ldrb	r2, [r3, #6]
 800051a:	4b2f      	ldr	r3, [pc, #188]	; (80005d8 <main+0x13c>)
 800051c:	701a      	strb	r2, [r3, #0]
      lampStatu3_H = modbusData[7];
 800051e:	4b29      	ldr	r3, [pc, #164]	; (80005c4 <main+0x128>)
 8000520:	79da      	ldrb	r2, [r3, #7]
 8000522:	4b2e      	ldr	r3, [pc, #184]	; (80005dc <main+0x140>)
 8000524:	701a      	strb	r2, [r3, #0]
      lampStatu3_L = modbusData[8];
 8000526:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <main+0x128>)
 8000528:	7a1a      	ldrb	r2, [r3, #8]
 800052a:	4b2d      	ldr	r3, [pc, #180]	; (80005e0 <main+0x144>)
 800052c:	701a      	strb	r2, [r3, #0]
 800052e:	e002      	b.n	8000536 <main+0x9a>
    }
    else isLampTower = 0;
 8000530:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <main+0x12c>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
    clearData(modbusData, uartBytes);
 8000536:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <main+0x128>)
 8000538:	2132      	movs	r1, #50	; 0x32
 800053a:	0018      	movs	r0, r3
 800053c:	f000 f998 	bl	8000870 <clearData>

    HAL_UART_Transmit(&huart4, requestModbus2, sizeof(requestModbus2), 1000);
 8000540:	23fa      	movs	r3, #250	; 0xfa
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	4927      	ldr	r1, [pc, #156]	; (80005e4 <main+0x148>)
 8000546:	481d      	ldr	r0, [pc, #116]	; (80005bc <main+0x120>)
 8000548:	2208      	movs	r2, #8
 800054a:	f002 f9ef 	bl	800292c <HAL_UART_Transmit>
    HAL_Delay(500);
 800054e:	23fa      	movs	r3, #250	; 0xfa
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fc6e 	bl	8000e34 <HAL_Delay>

    if(strlen((char*)modbusData) != 0)
 8000558:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <main+0x128>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d01b      	beq.n	8000598 <main+0xfc>
    {
      isSensorCounter = 1;
 8000560:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <main+0x14c>)
 8000562:	2201      	movs	r2, #1
 8000564:	701a      	strb	r2, [r3, #0]
      sensorCounter1_H = modbusData[3];
 8000566:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <main+0x128>)
 8000568:	78da      	ldrb	r2, [r3, #3]
 800056a:	4b20      	ldr	r3, [pc, #128]	; (80005ec <main+0x150>)
 800056c:	701a      	strb	r2, [r3, #0]
      sensorCounter1_L = modbusData[4];
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <main+0x128>)
 8000570:	791a      	ldrb	r2, [r3, #4]
 8000572:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <main+0x154>)
 8000574:	701a      	strb	r2, [r3, #0]
      sensorCounter2_H = modbusData[5];
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <main+0x128>)
 8000578:	795a      	ldrb	r2, [r3, #5]
 800057a:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <main+0x158>)
 800057c:	701a      	strb	r2, [r3, #0]
      sensorCounter2_L = modbusData[6];
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <main+0x128>)
 8000580:	799a      	ldrb	r2, [r3, #6]
 8000582:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <main+0x15c>)
 8000584:	701a      	strb	r2, [r3, #0]
      sensorCounter3_H = modbusData[7];
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <main+0x128>)
 8000588:	79da      	ldrb	r2, [r3, #7]
 800058a:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <main+0x160>)
 800058c:	701a      	strb	r2, [r3, #0]
      sensorCounter3_L = modbusData[8];
 800058e:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <main+0x128>)
 8000590:	7a1a      	ldrb	r2, [r3, #8]
 8000592:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <main+0x164>)
 8000594:	701a      	strb	r2, [r3, #0]
 8000596:	e002      	b.n	800059e <main+0x102>
    }
    else isSensorCounter = 0;
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <main+0x14c>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
    clearData(modbusData, uartBytes);
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <main+0x128>)
 80005a0:	2132      	movs	r1, #50	; 0x32
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 f964 	bl	8000870 <clearData>
    HAL_UART_Transmit(&huart4, requestModbus1, sizeof(requestModbus1), 1000);
 80005a8:	e796      	b.n	80004d8 <main+0x3c>
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	20000038 	.word	0x20000038
 80005b0:	200001de 	.word	0x200001de
 80005b4:	20000084 	.word	0x20000084
 80005b8:	20000216 	.word	0x20000216
 80005bc:	20000118 	.word	0x20000118
 80005c0:	20000000 	.word	0x20000000
 80005c4:	200001e4 	.word	0x200001e4
 80005c8:	2000024e 	.word	0x2000024e
 80005cc:	20000250 	.word	0x20000250
 80005d0:	20000251 	.word	0x20000251
 80005d4:	20000252 	.word	0x20000252
 80005d8:	20000253 	.word	0x20000253
 80005dc:	20000254 	.word	0x20000254
 80005e0:	20000255 	.word	0x20000255
 80005e4:	20000008 	.word	0x20000008
 80005e8:	2000024f 	.word	0x2000024f
 80005ec:	20000256 	.word	0x20000256
 80005f0:	20000257 	.word	0x20000257
 80005f4:	20000258 	.word	0x20000258
 80005f8:	20000259 	.word	0x20000259
 80005fc:	2000025a 	.word	0x2000025a
 8000600:	2000025b 	.word	0x2000025b

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b093      	sub	sp, #76	; 0x4c
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	2414      	movs	r4, #20
 800060c:	193b      	adds	r3, r7, r4
 800060e:	0018      	movs	r0, r3
 8000610:	2334      	movs	r3, #52	; 0x34
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f004 f8b1 	bl	800477c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	0018      	movs	r0, r3
 800061e:	2310      	movs	r3, #16
 8000620:	001a      	movs	r2, r3
 8000622:	2100      	movs	r1, #0
 8000624:	f004 f8aa 	bl	800477c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	0018      	movs	r0, r3
 800062e:	f000 fff7 	bl	8001620 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000632:	193b      	adds	r3, r7, r4
 8000634:	2202      	movs	r2, #2
 8000636:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	193b      	adds	r3, r7, r4
 800063a:	2280      	movs	r2, #128	; 0x80
 800063c:	0052      	lsls	r2, r2, #1
 800063e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000640:	193b      	adds	r3, r7, r4
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000646:	193b      	adds	r3, r7, r4
 8000648:	2240      	movs	r2, #64	; 0x40
 800064a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064c:	193b      	adds	r3, r7, r4
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	193b      	adds	r3, r7, r4
 8000654:	0018      	movs	r0, r3
 8000656:	f001 f82f 	bl	80016b8 <HAL_RCC_OscConfig>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800065e:	f000 f9db 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2207      	movs	r2, #7
 8000666:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2100      	movs	r1, #0
 800067e:	0018      	movs	r0, r3
 8000680:	f001 fb2a 	bl	8001cd8 <HAL_RCC_ClockConfig>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000688:	f000 f9c6 	bl	8000a18 <Error_Handler>
  }
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b013      	add	sp, #76	; 0x4c
 8000692:	bd90      	pop	{r4, r7, pc}

08000694 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069a:	2310      	movs	r3, #16
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	0018      	movs	r0, r3
 80006a0:	2310      	movs	r3, #16
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f004 f869 	bl	800477c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	0018      	movs	r0, r3
 80006ae:	230c      	movs	r3, #12
 80006b0:	001a      	movs	r2, r3
 80006b2:	2100      	movs	r1, #0
 80006b4:	f004 f862 	bl	800477c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <MX_TIM3_Init+0xa0>)
 80006ba:	4a1f      	ldr	r2, [pc, #124]	; (8000738 <MX_TIM3_Init+0xa4>)
 80006bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000;
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <MX_TIM3_Init+0xa0>)
 80006c0:	22fa      	movs	r2, #250	; 0xfa
 80006c2:	0192      	lsls	r2, r2, #6
 80006c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c6:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <MX_TIM3_Init+0xa0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <MX_TIM3_Init+0xa0>)
 80006ce:	4a1b      	ldr	r2, [pc, #108]	; (800073c <MX_TIM3_Init+0xa8>)
 80006d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d2:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_TIM3_Init+0xa0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_TIM3_Init+0xa0>)
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_TIM3_Init+0xa0>)
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 fdd7 	bl	8002294 <HAL_TIM_Base_Init>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80006ea:	f000 f995 	bl	8000a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ee:	2110      	movs	r1, #16
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	0152      	lsls	r2, r2, #5
 80006f6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006f8:	187a      	adds	r2, r7, r1
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_TIM3_Init+0xa0>)
 80006fc:	0011      	movs	r1, r2
 80006fe:	0018      	movs	r0, r3
 8000700:	f001 fe6e 	bl	80023e0 <HAL_TIM_ConfigClockSource>
 8000704:	1e03      	subs	r3, r0, #0
 8000706:	d001      	beq.n	800070c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000708:	f000 f986 	bl	8000a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000718:	1d3a      	adds	r2, r7, #4
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_TIM3_Init+0xa0>)
 800071c:	0011      	movs	r1, r2
 800071e:	0018      	movs	r0, r3
 8000720:	f002 f846 	bl	80027b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000728:	f000 f976 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b008      	add	sp, #32
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000038 	.word	0x20000038
 8000738:	40000400 	.word	0x40000400
 800073c:	0000ffff 	.word	0x0000ffff

08000740 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <MX_USART2_UART_Init+0x94>)
 8000746:	4a24      	ldr	r2, [pc, #144]	; (80007d8 <MX_USART2_UART_Init+0x98>)
 8000748:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <MX_USART2_UART_Init+0x94>)
 800074c:	22e1      	movs	r2, #225	; 0xe1
 800074e:	0252      	lsls	r2, r2, #9
 8000750:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <MX_USART2_UART_Init+0x94>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_USART2_UART_Init+0x94>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_USART2_UART_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_USART2_UART_Init+0x94>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_USART2_UART_Init+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_USART2_UART_Init+0x94>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_USART2_UART_Init+0x94>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_USART2_UART_Init+0x94>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_USART2_UART_Init+0x94>)
 8000784:	2200      	movs	r2, #0
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_USART2_UART_Init+0x94>)
 800078a:	0018      	movs	r0, r3
 800078c:	f002 f878 	bl	8002880 <HAL_UART_Init>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000794:	f000 f940 	bl	8000a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART2_UART_Init+0x94>)
 800079a:	2100      	movs	r1, #0
 800079c:	0018      	movs	r0, r3
 800079e:	f003 fee9 	bl	8004574 <HAL_UARTEx_SetTxFifoThreshold>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007a6:	f000 f937 	bl	8000a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_USART2_UART_Init+0x94>)
 80007ac:	2100      	movs	r1, #0
 80007ae:	0018      	movs	r0, r3
 80007b0:	f003 ff20 	bl	80045f4 <HAL_UARTEx_SetRxFifoThreshold>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007b8:	f000 f92e 	bl	8000a18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <MX_USART2_UART_Init+0x94>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f003 fe9e 	bl	8004500 <HAL_UARTEx_DisableFifoMode>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007c8:	f000 f926 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	20000084 	.word	0x20000084
 80007d8:	40004400 	.word	0x40004400

080007dc <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_USART4_UART_Init+0x60>)
 80007e2:	4a17      	ldr	r2, [pc, #92]	; (8000840 <MX_USART4_UART_Init+0x64>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_USART4_UART_Init+0x60>)
 80007e8:	22e1      	movs	r2, #225	; 0xe1
 80007ea:	0252      	lsls	r2, r2, #9
 80007ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_USART4_UART_Init+0x60>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USART4_UART_Init+0x60>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_USART4_UART_Init+0x60>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USART4_UART_Init+0x60>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <MX_USART4_UART_Init+0x60>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USART4_UART_Init+0x60>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MX_USART4_UART_Init+0x60>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USART4_UART_Init+0x60>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081e:	4b07      	ldr	r3, [pc, #28]	; (800083c <MX_USART4_UART_Init+0x60>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <MX_USART4_UART_Init+0x60>)
 8000826:	0018      	movs	r0, r3
 8000828:	f002 f82a 	bl	8002880 <HAL_UART_Init>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d001      	beq.n	8000834 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8000830:	f000 f8f2 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	20000118 	.word	0x20000118
 8000840:	40004c00 	.word	0x40004c00

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_GPIO_Init+0x28>)
 800084c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_GPIO_Init+0x28>)
 8000850:	2101      	movs	r1, #1
 8000852:	430a      	orrs	r2, r1
 8000854:	635a      	str	r2, [r3, #52]	; 0x34
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <MX_GPIO_Init+0x28>)
 8000858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800085a:	2201      	movs	r2, #1
 800085c:	4013      	ands	r3, r2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b002      	add	sp, #8
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	40021000 	.word	0x40021000

08000870 <clearData>:

/* USER CODE BEGIN 4 */
void clearData(uint8_t *ptrBuffer, uint16_t sizeBuffer)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	000a      	movs	r2, r1
 800087a:	1cbb      	adds	r3, r7, #2
 800087c:	801a      	strh	r2, [r3, #0]
  if(ptrBuffer == &modbusData[0]) modbusDataCount = 0;
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <clearData+0x68>)
 8000882:	429a      	cmp	r2, r3
 8000884:	d103      	bne.n	800088e <clearData+0x1e>
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <clearData+0x6c>)
 8000888:	2200      	movs	r2, #0
 800088a:	801a      	strh	r2, [r3, #0]
 800088c:	e006      	b.n	800089c <clearData+0x2c>
  else if(ptrBuffer == &lorawanData[0]) lorawanDataCount = 0;
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <clearData+0x70>)
 8000892:	429a      	cmp	r2, r3
 8000894:	d102      	bne.n	800089c <clearData+0x2c>
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <clearData+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	801a      	strh	r2, [r3, #0]

	for(uint16_t i = 0; i < sizeBuffer; i++) ptrBuffer[i] = '\0';
 800089c:	230e      	movs	r3, #14
 800089e:	18fb      	adds	r3, r7, r3
 80008a0:	2200      	movs	r2, #0
 80008a2:	801a      	strh	r2, [r3, #0]
 80008a4:	e00b      	b.n	80008be <clearData+0x4e>
 80008a6:	210e      	movs	r1, #14
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	18d3      	adds	r3, r2, r3
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	881a      	ldrh	r2, [r3, #0]
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	3201      	adds	r2, #1
 80008bc:	801a      	strh	r2, [r3, #0]
 80008be:	230e      	movs	r3, #14
 80008c0:	18fa      	adds	r2, r7, r3
 80008c2:	1cbb      	adds	r3, r7, #2
 80008c4:	8812      	ldrh	r2, [r2, #0]
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d3ec      	bcc.n	80008a6 <clearData+0x36>
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b004      	add	sp, #16
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	200001e4 	.word	0x200001e4
 80008dc:	20000218 	.word	0x20000218
 80008e0:	200001ac 	.word	0x200001ac
 80008e4:	200001e0 	.word	0x200001e0

080008e8 <lorawanTransHandle>:

void lorawanTransHandle(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
  dataFull[0] = 0x01;
 80008ee:	4b3a      	ldr	r3, [pc, #232]	; (80009d8 <lorawanTransHandle+0xf0>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	701a      	strb	r2, [r3, #0]
  dataFull[1] = 0x01;
 80008f4:	4b38      	ldr	r3, [pc, #224]	; (80009d8 <lorawanTransHandle+0xf0>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	705a      	strb	r2, [r3, #1]
  dataFull[2] = 0x01;
 80008fa:	4b37      	ldr	r3, [pc, #220]	; (80009d8 <lorawanTransHandle+0xf0>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	709a      	strb	r2, [r3, #2]
  dataFull[3] = 0x04;
 8000900:	4b35      	ldr	r3, [pc, #212]	; (80009d8 <lorawanTransHandle+0xf0>)
 8000902:	2204      	movs	r2, #4
 8000904:	70da      	strb	r2, [r3, #3]
  dataFull[4] = 0x04;
 8000906:	4b34      	ldr	r3, [pc, #208]	; (80009d8 <lorawanTransHandle+0xf0>)
 8000908:	2204      	movs	r2, #4
 800090a:	711a      	strb	r2, [r3, #4]
  dataFull[5] = isLampTower;
 800090c:	4b33      	ldr	r3, [pc, #204]	; (80009dc <lorawanTransHandle+0xf4>)
 800090e:	781a      	ldrb	r2, [r3, #0]
 8000910:	4b31      	ldr	r3, [pc, #196]	; (80009d8 <lorawanTransHandle+0xf0>)
 8000912:	715a      	strb	r2, [r3, #5]
  dataFull[6] = lampStatu1_H;
 8000914:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <lorawanTransHandle+0xf8>)
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <lorawanTransHandle+0xf0>)
 800091a:	719a      	strb	r2, [r3, #6]
  dataFull[7] = lampStatu1_L;
 800091c:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <lorawanTransHandle+0xfc>)
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <lorawanTransHandle+0xf0>)
 8000922:	71da      	strb	r2, [r3, #7]
  dataFull[8] = lampStatu2_H;
 8000924:	4b30      	ldr	r3, [pc, #192]	; (80009e8 <lorawanTransHandle+0x100>)
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <lorawanTransHandle+0xf0>)
 800092a:	721a      	strb	r2, [r3, #8]
  dataFull[9] = lampStatu2_L;
 800092c:	4b2f      	ldr	r3, [pc, #188]	; (80009ec <lorawanTransHandle+0x104>)
 800092e:	781a      	ldrb	r2, [r3, #0]
 8000930:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <lorawanTransHandle+0xf0>)
 8000932:	725a      	strb	r2, [r3, #9]
  dataFull[10] = lampStatu3_H;
 8000934:	4b2e      	ldr	r3, [pc, #184]	; (80009f0 <lorawanTransHandle+0x108>)
 8000936:	781a      	ldrb	r2, [r3, #0]
 8000938:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <lorawanTransHandle+0xf0>)
 800093a:	729a      	strb	r2, [r3, #10]
  dataFull[11] = lampStatu3_L;
 800093c:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <lorawanTransHandle+0x10c>)
 800093e:	781a      	ldrb	r2, [r3, #0]
 8000940:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <lorawanTransHandle+0xf0>)
 8000942:	72da      	strb	r2, [r3, #11]
  dataFull[12] = isSensorCounter;
 8000944:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <lorawanTransHandle+0x110>)
 8000946:	781a      	ldrb	r2, [r3, #0]
 8000948:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <lorawanTransHandle+0xf0>)
 800094a:	731a      	strb	r2, [r3, #12]
  dataFull[13] = sensorCounter1_H;
 800094c:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <lorawanTransHandle+0x114>)
 800094e:	781a      	ldrb	r2, [r3, #0]
 8000950:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <lorawanTransHandle+0xf0>)
 8000952:	735a      	strb	r2, [r3, #13]
  dataFull[14] = sensorCounter1_L;
 8000954:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <lorawanTransHandle+0x118>)
 8000956:	781a      	ldrb	r2, [r3, #0]
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <lorawanTransHandle+0xf0>)
 800095a:	739a      	strb	r2, [r3, #14]
  dataFull[15] = sensorCounter2_H;
 800095c:	4b29      	ldr	r3, [pc, #164]	; (8000a04 <lorawanTransHandle+0x11c>)
 800095e:	781a      	ldrb	r2, [r3, #0]
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <lorawanTransHandle+0xf0>)
 8000962:	73da      	strb	r2, [r3, #15]
  dataFull[16] = sensorCounter2_L;
 8000964:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <lorawanTransHandle+0x120>)
 8000966:	781a      	ldrb	r2, [r3, #0]
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <lorawanTransHandle+0xf0>)
 800096a:	741a      	strb	r2, [r3, #16]
  dataFull[17] = sensorCounter3_H;
 800096c:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <lorawanTransHandle+0x124>)
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <lorawanTransHandle+0xf0>)
 8000972:	745a      	strb	r2, [r3, #17]
  dataFull[18] = sensorCounter3_L;
 8000974:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <lorawanTransHandle+0x128>)
 8000976:	781a      	ldrb	r2, [r3, #0]
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <lorawanTransHandle+0xf0>)
 800097a:	749a      	strb	r2, [r3, #18]

  uint8_t sum = 0;
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 5; i < 19; i++) sum += dataFull[i];
 8000982:	1dbb      	adds	r3, r7, #6
 8000984:	2205      	movs	r2, #5
 8000986:	701a      	strb	r2, [r3, #0]
 8000988:	e00d      	b.n	80009a6 <lorawanTransHandle+0xbe>
 800098a:	1dbb      	adds	r3, r7, #6
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <lorawanTransHandle+0xf0>)
 8000990:	5cd1      	ldrb	r1, [r2, r3]
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	1dfa      	adds	r2, r7, #7
 8000996:	7812      	ldrb	r2, [r2, #0]
 8000998:	188a      	adds	r2, r1, r2
 800099a:	701a      	strb	r2, [r3, #0]
 800099c:	1dbb      	adds	r3, r7, #6
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	1dbb      	adds	r3, r7, #6
 80009a2:	3201      	adds	r2, #1
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	1dbb      	adds	r3, r7, #6
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b12      	cmp	r3, #18
 80009ac:	d9ed      	bls.n	800098a <lorawanTransHandle+0xa2>
  dataFull[19] = sum;
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <lorawanTransHandle+0xf0>)
 80009b0:	1dfa      	adds	r2, r7, #7
 80009b2:	7812      	ldrb	r2, [r2, #0]
 80009b4:	74da      	strb	r2, [r3, #19]

  HAL_UART_Transmit(&huart2, dataFull, 20, 1000);
 80009b6:	23fa      	movs	r3, #250	; 0xfa
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4907      	ldr	r1, [pc, #28]	; (80009d8 <lorawanTransHandle+0xf0>)
 80009bc:	4815      	ldr	r0, [pc, #84]	; (8000a14 <lorawanTransHandle+0x12c>)
 80009be:	2214      	movs	r2, #20
 80009c0:	f001 ffb4 	bl	800292c <HAL_UART_Transmit>
  clearData(dataFull, 50);
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <lorawanTransHandle+0xf0>)
 80009c6:	2132      	movs	r1, #50	; 0x32
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff ff51 	bl	8000870 <clearData>
}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b002      	add	sp, #8
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	2000021c 	.word	0x2000021c
 80009dc:	2000024e 	.word	0x2000024e
 80009e0:	20000250 	.word	0x20000250
 80009e4:	20000251 	.word	0x20000251
 80009e8:	20000252 	.word	0x20000252
 80009ec:	20000253 	.word	0x20000253
 80009f0:	20000254 	.word	0x20000254
 80009f4:	20000255 	.word	0x20000255
 80009f8:	2000024f 	.word	0x2000024f
 80009fc:	20000256 	.word	0x20000256
 8000a00:	20000257 	.word	0x20000257
 8000a04:	20000258 	.word	0x20000258
 8000a08:	20000259 	.word	0x20000259
 8000a0c:	2000025a 	.word	0x2000025a
 8000a10:	2000025b 	.word	0x2000025b
 8000a14:	20000084 	.word	0x20000084

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <HAL_MspInit+0x6c>)
 8000a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <HAL_MspInit+0x6c>)
 8000a30:	2101      	movs	r1, #1
 8000a32:	430a      	orrs	r2, r1
 8000a34:	641a      	str	r2, [r3, #64]	; 0x40
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <HAL_MspInit+0x6c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <HAL_MspInit+0x6c>)
 8000a44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_MspInit+0x6c>)
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	0549      	lsls	r1, r1, #21
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_MspInit+0x6c>)
 8000a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	055b      	lsls	r3, r3, #21
 8000a58:	4013      	ands	r3, r2
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	2003      	movs	r0, #3
 8000a64:	f000 facc 	bl	8001000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f000 fade 	bl	800102a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	2004      	movs	r0, #4
 8000a74:	f000 fac4 	bl	8001000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000a78:	2004      	movs	r0, #4
 8000a7a:	f000 fad6 	bl	800102a <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000a7e:	23c0      	movs	r3, #192	; 0xc0
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 f9fa 	bl	8000e7c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b002      	add	sp, #8
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <HAL_TIM_Base_MspInit+0x34>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d10b      	bne.n	8000abe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_TIM_Base_MspInit+0x38>)
 8000aa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <HAL_TIM_Base_MspInit+0x38>)
 8000aac:	2102      	movs	r1, #2
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_TIM_Base_MspInit+0x38>)
 8000ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b004      	add	sp, #16
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	40000400 	.word	0x40000400
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b093      	sub	sp, #76	; 0x4c
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	2334      	movs	r3, #52	; 0x34
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	0018      	movs	r0, r3
 8000ade:	2314      	movs	r3, #20
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f003 fe4a 	bl	800477c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae8:	2418      	movs	r4, #24
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	0018      	movs	r0, r3
 8000aee:	231c      	movs	r3, #28
 8000af0:	001a      	movs	r2, r3
 8000af2:	2100      	movs	r1, #0
 8000af4:	f003 fe42 	bl	800477c <memset>
  if(huart->Instance==USART2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a51      	ldr	r2, [pc, #324]	; (8000c44 <HAL_UART_MspInit+0x174>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d147      	bne.n	8000b92 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2202      	movs	r2, #2
 8000b06:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	0018      	movs	r0, r3
 8000b12:	f001 fa8b 	bl	800202c <HAL_RCCEx_PeriphCLKConfig>
 8000b16:	1e03      	subs	r3, r0, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b1a:	f7ff ff7d 	bl	8000a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1e:	4b4a      	ldr	r3, [pc, #296]	; (8000c48 <HAL_UART_MspInit+0x178>)
 8000b20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b22:	4b49      	ldr	r3, [pc, #292]	; (8000c48 <HAL_UART_MspInit+0x178>)
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	0289      	lsls	r1, r1, #10
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b2c:	4b46      	ldr	r3, [pc, #280]	; (8000c48 <HAL_UART_MspInit+0x178>)
 8000b2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	029b      	lsls	r3, r3, #10
 8000b34:	4013      	ands	r3, r2
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4b43      	ldr	r3, [pc, #268]	; (8000c48 <HAL_UART_MspInit+0x178>)
 8000b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b3e:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <HAL_UART_MspInit+0x178>)
 8000b40:	2101      	movs	r1, #1
 8000b42:	430a      	orrs	r2, r1
 8000b44:	635a      	str	r2, [r3, #52]	; 0x34
 8000b46:	4b40      	ldr	r3, [pc, #256]	; (8000c48 <HAL_UART_MspInit+0x178>)
 8000b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LoRaWAN_Tx_Pin|LoRaWAN_Rx_Pin;
 8000b52:	2134      	movs	r1, #52	; 0x34
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	220c      	movs	r2, #12
 8000b58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2202      	movs	r2, #2
 8000b64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2203      	movs	r2, #3
 8000b6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2201      	movs	r2, #1
 8000b70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	187a      	adds	r2, r7, r1
 8000b74:	23a0      	movs	r3, #160	; 0xa0
 8000b76:	05db      	lsls	r3, r3, #23
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 fbec 	bl	8001358 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2101      	movs	r1, #1
 8000b84:	201c      	movs	r0, #28
 8000b86:	f000 fa3b 	bl	8001000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b8a:	201c      	movs	r0, #28
 8000b8c:	f000 fa4d 	bl	800102a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8000b90:	e054      	b.n	8000c3c <HAL_UART_MspInit+0x16c>
  else if(huart->Instance==USART4)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a2d      	ldr	r2, [pc, #180]	; (8000c4c <HAL_UART_MspInit+0x17c>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d14f      	bne.n	8000c3c <HAL_UART_MspInit+0x16c>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000b9c:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <HAL_UART_MspInit+0x178>)
 8000b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ba0:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <HAL_UART_MspInit+0x178>)
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	0309      	lsls	r1, r1, #12
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <HAL_UART_MspInit+0x178>)
 8000bac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	031b      	lsls	r3, r3, #12
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <HAL_UART_MspInit+0x178>)
 8000bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <HAL_UART_MspInit+0x178>)
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	635a      	str	r2, [r3, #52]	; 0x34
 8000bc4:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <HAL_UART_MspInit+0x178>)
 8000bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4013      	ands	r3, r2
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_Tx_Pin;
 8000bd0:	2434      	movs	r4, #52	; 0x34
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	2202      	movs	r2, #2
 8000bdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	2201      	movs	r2, #1
 8000be2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	2203      	movs	r2, #3
 8000be8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	2204      	movs	r2, #4
 8000bee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RS485_Tx_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	193a      	adds	r2, r7, r4
 8000bf2:	23a0      	movs	r3, #160	; 0xa0
 8000bf4:	05db      	lsls	r3, r3, #23
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f000 fbad 	bl	8001358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_Rx_Pin;
 8000bfe:	0021      	movs	r1, r4
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2202      	movs	r2, #2
 8000c04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2202      	movs	r2, #2
 8000c0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2202      	movs	r2, #2
 8000c10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2203      	movs	r2, #3
 8000c16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RS485_Rx_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	187a      	adds	r2, r7, r1
 8000c20:	23a0      	movs	r3, #160	; 0xa0
 8000c22:	05db      	lsls	r3, r3, #23
 8000c24:	0011      	movs	r1, r2
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 fb96 	bl	8001358 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	201d      	movs	r0, #29
 8000c32:	f000 f9e5 	bl	8001000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000c36:	201d      	movs	r0, #29
 8000c38:	f000 f9f7 	bl	800102a <HAL_NVIC_EnableIRQ>
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b013      	add	sp, #76	; 0x4c
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	40004400 	.word	0x40004400
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40004c00 	.word	0x40004c00

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <NMI_Handler+0x4>

08000c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <HardFault_Handler+0x4>

08000c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c74:	f000 f8c2 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000c82:	f000 fabb 	bl	80011fc <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <USART2_IRQHandler+0x14>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f001 ff38 	bl	8002b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	20000084 	.word	0x20000084

08000cb0 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <USART3_4_IRQHandler+0x14>)
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f001 ff2c 	bl	8002b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	20000118 	.word	0x20000118

08000cc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cd8:	f7ff fff6 	bl	8000cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cde:	490d      	ldr	r1, [pc, #52]	; (8000d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <LoopForever+0xe>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf4:	4c0a      	ldr	r4, [pc, #40]	; (8000d20 <LoopForever+0x16>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d02:	f003 fd17 	bl	8004734 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d06:	f7ff fbc9 	bl	800049c <main>

08000d0a <LoopForever>:

LoopForever:
  b LoopForever
 8000d0a:	e7fe      	b.n	8000d0a <LoopForever>
  ldr   r0, =_estack
 8000d0c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d14:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d18:	08004834 	.word	0x08004834
  ldr r2, =_sbss
 8000d1c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d20:	2000027c 	.word	0x2000027c

08000d24 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC1_IRQHandler>
	...

08000d28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_Init+0x3c>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_Init+0x3c>)
 8000d3a:	2180      	movs	r1, #128	; 0x80
 8000d3c:	0049      	lsls	r1, r1, #1
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d42:	2003      	movs	r0, #3
 8000d44:	f000 f810 	bl	8000d68 <HAL_InitTick>
 8000d48:	1e03      	subs	r3, r0, #0
 8000d4a:	d003      	beq.n	8000d54 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	e001      	b.n	8000d58 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d54:	f7ff fe66 	bl	8000a24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d58:	1dfb      	adds	r3, r7, #7
 8000d5a:	781b      	ldrb	r3, [r3, #0]
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b002      	add	sp, #8
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40022000 	.word	0x40022000

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d70:	230f      	movs	r3, #15
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d78:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <HAL_InitTick+0x88>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d02b      	beq.n	8000dd8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d80:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <HAL_InitTick+0x8c>)
 8000d82:	681c      	ldr	r4, [r3, #0]
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <HAL_InitTick+0x88>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	0019      	movs	r1, r3
 8000d8a:	23fa      	movs	r3, #250	; 0xfa
 8000d8c:	0098      	lsls	r0, r3, #2
 8000d8e:	f7ff f9b7 	bl	8000100 <__udivsi3>
 8000d92:	0003      	movs	r3, r0
 8000d94:	0019      	movs	r1, r3
 8000d96:	0020      	movs	r0, r4
 8000d98:	f7ff f9b2 	bl	8000100 <__udivsi3>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f000 f953 	bl	800104a <HAL_SYSTICK_Config>
 8000da4:	1e03      	subs	r3, r0, #0
 8000da6:	d112      	bne.n	8000dce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d80a      	bhi.n	8000dc4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	2301      	movs	r3, #1
 8000db2:	425b      	negs	r3, r3
 8000db4:	2200      	movs	r2, #0
 8000db6:	0018      	movs	r0, r3
 8000db8:	f000 f922 	bl	8001000 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_InitTick+0x90>)
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	e00d      	b.n	8000de0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	e008      	b.n	8000de0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dce:	230f      	movs	r3, #15
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	e003      	b.n	8000de0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dd8:	230f      	movs	r3, #15
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000de0:	230f      	movs	r3, #15
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	781b      	ldrb	r3, [r3, #0]
}
 8000de6:	0018      	movs	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b005      	add	sp, #20
 8000dec:	bd90      	pop	{r4, r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	20000018 	.word	0x20000018
 8000df4:	20000010 	.word	0x20000010
 8000df8:	20000014 	.word	0x20000014

08000dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <HAL_IncTick+0x1c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	001a      	movs	r2, r3
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_IncTick+0x20>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	18d2      	adds	r2, r2, r3
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_IncTick+0x20>)
 8000e0e:	601a      	str	r2, [r3, #0]
}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	20000018 	.word	0x20000018
 8000e1c:	2000025c 	.word	0x2000025c

08000e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  return uwTick;
 8000e24:	4b02      	ldr	r3, [pc, #8]	; (8000e30 <HAL_GetTick+0x10>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	2000025c 	.word	0x2000025c

08000e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e3c:	f7ff fff0 	bl	8000e20 <HAL_GetTick>
 8000e40:	0003      	movs	r3, r0
 8000e42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	d005      	beq.n	8000e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_Delay+0x44>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	001a      	movs	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	189b      	adds	r3, r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	f7ff ffe0 	bl	8000e20 <HAL_GetTick>
 8000e60:	0002      	movs	r2, r0
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d8f7      	bhi.n	8000e5c <HAL_Delay+0x28>
  {
  }
}
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b004      	add	sp, #16
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	20000018 	.word	0x20000018

08000e7c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	430a      	orrs	r2, r1
 8000e94:	601a      	str	r2, [r3, #0]
}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b002      	add	sp, #8
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	fffff9ff 	.word	0xfffff9ff

08000ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	0002      	movs	r2, r0
 8000eb0:	1dfb      	adds	r3, r7, #7
 8000eb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eba:	d809      	bhi.n	8000ed0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	231f      	movs	r3, #31
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <__NVIC_EnableIRQ+0x30>)
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4091      	lsls	r1, r2
 8000ecc:	000a      	movs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b002      	add	sp, #8
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef0:	d828      	bhi.n	8000f44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef2:	4a2f      	ldr	r2, [pc, #188]	; (8000fb0 <__NVIC_SetPriority+0xd4>)
 8000ef4:	1dfb      	adds	r3, r7, #7
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	33c0      	adds	r3, #192	; 0xc0
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	589b      	ldr	r3, [r3, r2]
 8000f02:	1dfa      	adds	r2, r7, #7
 8000f04:	7812      	ldrb	r2, [r2, #0]
 8000f06:	0011      	movs	r1, r2
 8000f08:	2203      	movs	r2, #3
 8000f0a:	400a      	ands	r2, r1
 8000f0c:	00d2      	lsls	r2, r2, #3
 8000f0e:	21ff      	movs	r1, #255	; 0xff
 8000f10:	4091      	lsls	r1, r2
 8000f12:	000a      	movs	r2, r1
 8000f14:	43d2      	mvns	r2, r2
 8000f16:	401a      	ands	r2, r3
 8000f18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	019b      	lsls	r3, r3, #6
 8000f1e:	22ff      	movs	r2, #255	; 0xff
 8000f20:	401a      	ands	r2, r3
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	0018      	movs	r0, r3
 8000f28:	2303      	movs	r3, #3
 8000f2a:	4003      	ands	r3, r0
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f30:	481f      	ldr	r0, [pc, #124]	; (8000fb0 <__NVIC_SetPriority+0xd4>)
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	33c0      	adds	r3, #192	; 0xc0
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f42:	e031      	b.n	8000fa8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f44:	4a1b      	ldr	r2, [pc, #108]	; (8000fb4 <__NVIC_SetPriority+0xd8>)
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	400b      	ands	r3, r1
 8000f50:	3b08      	subs	r3, #8
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3306      	adds	r3, #6
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	18d3      	adds	r3, r2, r3
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	1dfa      	adds	r2, r7, #7
 8000f60:	7812      	ldrb	r2, [r2, #0]
 8000f62:	0011      	movs	r1, r2
 8000f64:	2203      	movs	r2, #3
 8000f66:	400a      	ands	r2, r1
 8000f68:	00d2      	lsls	r2, r2, #3
 8000f6a:	21ff      	movs	r1, #255	; 0xff
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	000a      	movs	r2, r1
 8000f70:	43d2      	mvns	r2, r2
 8000f72:	401a      	ands	r2, r3
 8000f74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	019b      	lsls	r3, r3, #6
 8000f7a:	22ff      	movs	r2, #255	; 0xff
 8000f7c:	401a      	ands	r2, r3
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	0018      	movs	r0, r3
 8000f84:	2303      	movs	r3, #3
 8000f86:	4003      	ands	r3, r0
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f8c:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <__NVIC_SetPriority+0xd8>)
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	001c      	movs	r4, r3
 8000f94:	230f      	movs	r3, #15
 8000f96:	4023      	ands	r3, r4
 8000f98:	3b08      	subs	r3, #8
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	3306      	adds	r3, #6
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	18c3      	adds	r3, r0, r3
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b003      	add	sp, #12
 8000fae:	bd90      	pop	{r4, r7, pc}
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	1e5a      	subs	r2, r3, #1
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	045b      	lsls	r3, r3, #17
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d301      	bcc.n	8000fd0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e010      	b.n	8000ff2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <SysTick_Config+0x44>)
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	3a01      	subs	r2, #1
 8000fd6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd8:	2301      	movs	r3, #1
 8000fda:	425b      	negs	r3, r3
 8000fdc:	2103      	movs	r1, #3
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f7ff ff7c 	bl	8000edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <SysTick_Config+0x44>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <SysTick_Config+0x44>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b002      	add	sp, #8
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	210f      	movs	r1, #15
 800100c:	187b      	adds	r3, r7, r1
 800100e:	1c02      	adds	r2, r0, #0
 8001010:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	187b      	adds	r3, r7, r1
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b25b      	sxtb	r3, r3
 800101a:	0011      	movs	r1, r2
 800101c:	0018      	movs	r0, r3
 800101e:	f7ff ff5d 	bl	8000edc <__NVIC_SetPriority>
}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b004      	add	sp, #16
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	0002      	movs	r2, r0
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b25b      	sxtb	r3, r3
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff ff33 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	0018      	movs	r0, r3
 8001056:	f7ff ffaf 	bl	8000fb8 <SysTick_Config>
 800105a:	0003      	movs	r3, r0
}
 800105c:	0018      	movs	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	b002      	add	sp, #8
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e050      	b.n	8001118 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2225      	movs	r2, #37	; 0x25
 800107a:	5c9b      	ldrb	r3, [r3, r2]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d008      	beq.n	8001094 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2204      	movs	r2, #4
 8001086:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2224      	movs	r2, #36	; 0x24
 800108c:	2100      	movs	r1, #0
 800108e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e041      	b.n	8001118 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	210e      	movs	r1, #14
 80010a0:	438a      	bics	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	491c      	ldr	r1, [pc, #112]	; (8001120 <HAL_DMA_Abort+0xbc>)
 80010b0:	400a      	ands	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2101      	movs	r1, #1
 80010c0:	438a      	bics	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_DMA_Abort+0xc0>)
 80010c6:	6859      	ldr	r1, [r3, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	221c      	movs	r2, #28
 80010ce:	4013      	ands	r3, r2
 80010d0:	2201      	movs	r2, #1
 80010d2:	409a      	lsls	r2, r3
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <HAL_DMA_Abort+0xc0>)
 80010d6:	430a      	orrs	r2, r1
 80010d8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80010e2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00c      	beq.n	8001106 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010f6:	490a      	ldr	r1, [pc, #40]	; (8001120 <HAL_DMA_Abort+0xbc>)
 80010f8:	400a      	ands	r2, r1
 80010fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001104:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2225      	movs	r2, #37	; 0x25
 800110a:	2101      	movs	r1, #1
 800110c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2224      	movs	r2, #36	; 0x24
 8001112:	2100      	movs	r1, #0
 8001114:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}
 8001120:	fffffeff 	.word	0xfffffeff
 8001124:	40020000 	.word	0x40020000

08001128 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001130:	210f      	movs	r1, #15
 8001132:	187b      	adds	r3, r7, r1
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2225      	movs	r2, #37	; 0x25
 800113c:	5c9b      	ldrb	r3, [r3, r2]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d006      	beq.n	8001152 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2204      	movs	r2, #4
 8001148:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
 8001150:	e049      	b.n	80011e6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	210e      	movs	r1, #14
 800115e:	438a      	bics	r2, r1
 8001160:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2101      	movs	r1, #1
 800116e:	438a      	bics	r2, r1
 8001170:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117c:	491d      	ldr	r1, [pc, #116]	; (80011f4 <HAL_DMA_Abort_IT+0xcc>)
 800117e:	400a      	ands	r2, r1
 8001180:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <HAL_DMA_Abort_IT+0xd0>)
 8001184:	6859      	ldr	r1, [r3, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	221c      	movs	r2, #28
 800118c:	4013      	ands	r3, r2
 800118e:	2201      	movs	r2, #1
 8001190:	409a      	lsls	r2, r3
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_DMA_Abort_IT+0xd0>)
 8001194:	430a      	orrs	r2, r1
 8001196:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80011a0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00c      	beq.n	80011c4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011b4:	490f      	ldr	r1, [pc, #60]	; (80011f4 <HAL_DMA_Abort_IT+0xcc>)
 80011b6:	400a      	ands	r2, r1
 80011b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80011c2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2225      	movs	r2, #37	; 0x25
 80011c8:	2101      	movs	r1, #1
 80011ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2224      	movs	r2, #36	; 0x24
 80011d0:	2100      	movs	r1, #0
 80011d2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d004      	beq.n	80011e6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	0010      	movs	r0, r2
 80011e4:	4798      	blx	r3
    }
  }
  return status;
 80011e6:	230f      	movs	r3, #15
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	781b      	ldrb	r3, [r3, #0]
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b004      	add	sp, #16
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	fffffeff 	.word	0xfffffeff
 80011f8:	40020000 	.word	0x40020000

080011fc <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
  uint32_t param;
  uint32_t error;

  /* Save flash errors. */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8001202:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <HAL_FLASH_IRQHandler+0xf0>)
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	4a3a      	ldr	r2, [pc, #232]	; (80012f0 <HAL_FLASH_IRQHandler+0xf4>)
 8001208:	4013      	ands	r3, r2
 800120a:	603b      	str	r3, [r7, #0]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & FLASH_TYPEERASE_MASS) != 0x00U)
 800120c:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2204      	movs	r2, #4
 8001212:	4013      	ands	r3, r2
 8001214:	d003      	beq.n	800121e <HAL_FLASH_IRQHandler+0x22>
  {
    /* return bank number */
    param = pFlash.Banks;
 8001216:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	e013      	b.n	8001246 <HAL_FLASH_IRQHandler+0x4a>
  }
  else
  {
    /* Clear operation only for page erase or program */
    CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 800121e:	4b33      	ldr	r3, [pc, #204]	; (80012ec <HAL_FLASH_IRQHandler+0xf0>)
 8001220:	695a      	ldr	r2, [r3, #20]
 8001222:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	43d9      	mvns	r1, r3
 8001228:	4b30      	ldr	r3, [pc, #192]	; (80012ec <HAL_FLASH_IRQHandler+0xf0>)
 800122a:	400a      	ands	r2, r1
 800122c:	615a      	str	r2, [r3, #20]

    if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0x00U)
 800122e:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	4a31      	ldr	r2, [pc, #196]	; (80012f8 <HAL_FLASH_IRQHandler+0xfc>)
 8001234:	4013      	ands	r3, r2
 8001236:	d003      	beq.n	8001240 <HAL_FLASH_IRQHandler+0x44>
    {
      /* return address being programmed */
      param = pFlash.Address;
 8001238:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	e002      	b.n	8001246 <HAL_FLASH_IRQHandler+0x4a>
    }
    else
    {
      /* return page number being erased */
      param = pFlash.Page;
 8001240:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	607b      	str	r3, [r7, #4]
    }
  }

  /* B] Check errors */
  if (error != 0x00U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00f      	beq.n	800126c <HAL_FLASH_IRQHandler+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	431a      	orrs	r2, r3
 8001254:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 8001256:	605a      	str	r2, [r3, #4]

    /* clear error flags */
    FLASH->SR = FLASH_SR_ERRORS;
 8001258:	4b24      	ldr	r3, [pc, #144]	; (80012ec <HAL_FLASH_IRQHandler+0xf0>)
 800125a:	4a25      	ldr	r2, [pc, #148]	; (80012f0 <HAL_FLASH_IRQHandler+0xf4>)
 800125c:	611a      	str	r2, [r3, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800125e:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	0018      	movs	r0, r3
 8001268:	f000 f852 	bl	8001310 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if ((FLASH->SR & FLASH_SR_EOP) != 0x00U)
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <HAL_FLASH_IRQHandler+0xf0>)
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	2201      	movs	r2, #1
 8001272:	4013      	ands	r3, r2
 8001274:	d028      	beq.n	80012c8 <HAL_FLASH_IRQHandler+0xcc>
  {
    /* Clear FLASH End of Operation pending bit */
    FLASH->SR = FLASH_SR_EOP;
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <HAL_FLASH_IRQHandler+0xf0>)
 8001278:	2201      	movs	r2, #1
 800127a:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d11a      	bne.n	80012ba <HAL_FLASH_IRQHandler+0xbe>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	1e5a      	subs	r2, r3, #1
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 800128c:	619a      	str	r2, [r3, #24]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0x00U)
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00d      	beq.n	80012b2 <HAL_FLASH_IRQHandler+0xb6>
      {
        /* Increment page number */
        pFlash.Page++;
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 800129e:	615a      	str	r2, [r3, #20]
        FLASH_PageErase(pFlash.Banks, pFlash.Page);
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	0019      	movs	r1, r3
 80012aa:	0010      	movs	r0, r2
 80012ac:	f000 f838 	bl	8001320 <FLASH_PageErase>
 80012b0:	e006      	b.n	80012c0 <HAL_FLASH_IRQHandler+0xc4>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	e002      	b.n	80012c0 <HAL_FLASH_IRQHandler+0xc4>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	0018      	movs	r0, r3
 80012c4:	f000 f81c 	bl	8001300 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d108      	bne.n	80012e2 <HAL_FLASH_IRQHandler+0xe6>
  {
    /* Disable End of Operation and Error interrupts */
    FLASH->CR &= ~(FLASH_CR_EOPIE | FLASH_CR_ERRIE);
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_FLASH_IRQHandler+0xf0>)
 80012d2:	695a      	ldr	r2, [r3, #20]
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_FLASH_IRQHandler+0xf0>)
 80012d6:	4909      	ldr	r1, [pc, #36]	; (80012fc <HAL_FLASH_IRQHandler+0x100>)
 80012d8:	400a      	ands	r2, r1
 80012da:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_FLASH_IRQHandler+0xf8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
  }
}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b002      	add	sp, #8
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	40022000 	.word	0x40022000
 80012f0:	000083fa 	.word	0x000083fa
 80012f4:	20000260 	.word	0x20000260
 80012f8:	00040001 	.word	0x00040001
 80012fc:	fcffffff 	.word	0xfcffffff

08001300 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b002      	add	sp, #8
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b002      	add	sp, #8
 800131e:	bd80      	pop	{r7, pc}

08001320 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <FLASH_PageErase+0x2c>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <FLASH_PageErase+0x30>)
 8001330:	4013      	ands	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	00da      	lsls	r2, r3, #3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	431a      	orrs	r2, r3
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <FLASH_PageErase+0x2c>)
 800133e:	4905      	ldr	r1, [pc, #20]	; (8001354 <FLASH_PageErase+0x34>)
 8001340:	430a      	orrs	r2, r1
 8001342:	615a      	str	r2, [r3, #20]
}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	b004      	add	sp, #16
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40022000 	.word	0x40022000
 8001350:	ffffe007 	.word	0xffffe007
 8001354:	00010002 	.word	0x00010002

08001358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001366:	e147      	b.n	80015f8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2101      	movs	r1, #1
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4091      	lsls	r1, r2
 8001372:	000a      	movs	r2, r1
 8001374:	4013      	ands	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d100      	bne.n	8001380 <HAL_GPIO_Init+0x28>
 800137e:	e138      	b.n	80015f2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2203      	movs	r2, #3
 8001386:	4013      	ands	r3, r2
 8001388:	2b01      	cmp	r3, #1
 800138a:	d005      	beq.n	8001398 <HAL_GPIO_Init+0x40>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2203      	movs	r2, #3
 8001392:	4013      	ands	r3, r2
 8001394:	2b02      	cmp	r3, #2
 8001396:	d130      	bne.n	80013fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	409a      	lsls	r2, r3
 80013a6:	0013      	movs	r3, r2
 80013a8:	43da      	mvns	r2, r3
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	409a      	lsls	r2, r3
 80013ba:	0013      	movs	r3, r2
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ce:	2201      	movs	r2, #1
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	43da      	mvns	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	2201      	movs	r2, #1
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
 80013ec:	0013      	movs	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2203      	movs	r2, #3
 8001400:	4013      	ands	r3, r2
 8001402:	2b03      	cmp	r3, #3
 8001404:	d017      	beq.n	8001436 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	409a      	lsls	r2, r3
 8001414:	0013      	movs	r3, r2
 8001416:	43da      	mvns	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	409a      	lsls	r2, r3
 8001428:	0013      	movs	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2203      	movs	r2, #3
 800143c:	4013      	ands	r3, r2
 800143e:	2b02      	cmp	r3, #2
 8001440:	d123      	bne.n	800148a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	08da      	lsrs	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3208      	adds	r2, #8
 800144a:	0092      	lsls	r2, r2, #2
 800144c:	58d3      	ldr	r3, [r2, r3]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2207      	movs	r2, #7
 8001454:	4013      	ands	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	220f      	movs	r2, #15
 800145a:	409a      	lsls	r2, r3
 800145c:	0013      	movs	r3, r2
 800145e:	43da      	mvns	r2, r3
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	2107      	movs	r1, #7
 800146e:	400b      	ands	r3, r1
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	409a      	lsls	r2, r3
 8001474:	0013      	movs	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	08da      	lsrs	r2, r3, #3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3208      	adds	r2, #8
 8001484:	0092      	lsls	r2, r2, #2
 8001486:	6939      	ldr	r1, [r7, #16]
 8001488:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	409a      	lsls	r2, r3
 8001498:	0013      	movs	r3, r2
 800149a:	43da      	mvns	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2203      	movs	r2, #3
 80014a8:	401a      	ands	r2, r3
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	409a      	lsls	r2, r3
 80014b0:	0013      	movs	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	23c0      	movs	r3, #192	; 0xc0
 80014c4:	029b      	lsls	r3, r3, #10
 80014c6:	4013      	ands	r3, r2
 80014c8:	d100      	bne.n	80014cc <HAL_GPIO_Init+0x174>
 80014ca:	e092      	b.n	80015f2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014cc:	4a50      	ldr	r2, [pc, #320]	; (8001610 <HAL_GPIO_Init+0x2b8>)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3318      	adds	r3, #24
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	589b      	ldr	r3, [r3, r2]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2203      	movs	r2, #3
 80014de:	4013      	ands	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	220f      	movs	r2, #15
 80014e4:	409a      	lsls	r2, r3
 80014e6:	0013      	movs	r3, r2
 80014e8:	43da      	mvns	r2, r3
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	23a0      	movs	r3, #160	; 0xa0
 80014f4:	05db      	lsls	r3, r3, #23
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x1ca>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a45      	ldr	r2, [pc, #276]	; (8001614 <HAL_GPIO_Init+0x2bc>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x1c6>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a44      	ldr	r2, [pc, #272]	; (8001618 <HAL_GPIO_Init+0x2c0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x1c2>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a43      	ldr	r2, [pc, #268]	; (800161c <HAL_GPIO_Init+0x2c4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x1be>
 8001512:	2303      	movs	r3, #3
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x1cc>
 8001516:	2305      	movs	r3, #5
 8001518:	e004      	b.n	8001524 <HAL_GPIO_Init+0x1cc>
 800151a:	2302      	movs	r3, #2
 800151c:	e002      	b.n	8001524 <HAL_GPIO_Init+0x1cc>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_GPIO_Init+0x1cc>
 8001522:	2300      	movs	r3, #0
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	2103      	movs	r1, #3
 8001528:	400a      	ands	r2, r1
 800152a:	00d2      	lsls	r2, r2, #3
 800152c:	4093      	lsls	r3, r2
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001534:	4936      	ldr	r1, [pc, #216]	; (8001610 <HAL_GPIO_Init+0x2b8>)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	3318      	adds	r3, #24
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001542:	4b33      	ldr	r3, [pc, #204]	; (8001610 <HAL_GPIO_Init+0x2b8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43da      	mvns	r2, r3
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	035b      	lsls	r3, r3, #13
 800155a:	4013      	ands	r3, r2
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001566:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <HAL_GPIO_Init+0x2b8>)
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <HAL_GPIO_Init+0x2b8>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43da      	mvns	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	039b      	lsls	r3, r3, #14
 8001584:	4013      	ands	r3, r2
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001590:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <HAL_GPIO_Init+0x2b8>)
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001596:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <HAL_GPIO_Init+0x2b8>)
 8001598:	2384      	movs	r3, #132	; 0x84
 800159a:	58d3      	ldr	r3, [r2, r3]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43da      	mvns	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	029b      	lsls	r3, r3, #10
 80015b0:	4013      	ands	r3, r2
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015bc:	4914      	ldr	r1, [pc, #80]	; (8001610 <HAL_GPIO_Init+0x2b8>)
 80015be:	2284      	movs	r2, #132	; 0x84
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80015c4:	4a12      	ldr	r2, [pc, #72]	; (8001610 <HAL_GPIO_Init+0x2b8>)
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	58d3      	ldr	r3, [r2, r3]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43da      	mvns	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	025b      	lsls	r3, r3, #9
 80015de:	4013      	ands	r3, r2
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015ea:	4909      	ldr	r1, [pc, #36]	; (8001610 <HAL_GPIO_Init+0x2b8>)
 80015ec:	2280      	movs	r2, #128	; 0x80
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	40da      	lsrs	r2, r3
 8001600:	1e13      	subs	r3, r2, #0
 8001602:	d000      	beq.n	8001606 <HAL_GPIO_Init+0x2ae>
 8001604:	e6b0      	b.n	8001368 <HAL_GPIO_Init+0x10>
  }
}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	46c0      	nop			; (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	b006      	add	sp, #24
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40021800 	.word	0x40021800
 8001614:	50000400 	.word	0x50000400
 8001618:	50000800 	.word	0x50000800
 800161c:	50000c00 	.word	0x50000c00

08001620 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a19      	ldr	r2, [pc, #100]	; (8001694 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800162e:	4013      	ands	r3, r2
 8001630:	0019      	movs	r1, r3
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	430a      	orrs	r2, r1
 8001638:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	429a      	cmp	r2, r3
 8001642:	d11f      	bne.n	8001684 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	0013      	movs	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	189b      	adds	r3, r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4912      	ldr	r1, [pc, #72]	; (800169c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001652:	0018      	movs	r0, r3
 8001654:	f7fe fd54 	bl	8000100 <__udivsi3>
 8001658:	0003      	movs	r3, r0
 800165a:	3301      	adds	r3, #1
 800165c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800165e:	e008      	b.n	8001672 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3b01      	subs	r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	e001      	b.n	8001672 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e009      	b.n	8001686 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001674:	695a      	ldr	r2, [r3, #20]
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	401a      	ands	r2, r3
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	429a      	cmp	r2, r3
 8001682:	d0ed      	beq.n	8001660 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b004      	add	sp, #16
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	40007000 	.word	0x40007000
 8001694:	fffff9ff 	.word	0xfffff9ff
 8001698:	20000010 	.word	0x20000010
 800169c:	000f4240 	.word	0x000f4240

080016a0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	23e0      	movs	r3, #224	; 0xe0
 80016aa:	01db      	lsls	r3, r3, #7
 80016ac:	4013      	ands	r3, r2
}
 80016ae:	0018      	movs	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40021000 	.word	0x40021000

080016b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e2f3      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2201      	movs	r2, #1
 80016d0:	4013      	ands	r3, r2
 80016d2:	d100      	bne.n	80016d6 <HAL_RCC_OscConfig+0x1e>
 80016d4:	e07c      	b.n	80017d0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d6:	4bc3      	ldr	r3, [pc, #780]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2238      	movs	r2, #56	; 0x38
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e0:	4bc0      	ldr	r3, [pc, #768]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2203      	movs	r2, #3
 80016e6:	4013      	ands	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b10      	cmp	r3, #16
 80016ee:	d102      	bne.n	80016f6 <HAL_RCC_OscConfig+0x3e>
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	d002      	beq.n	80016fc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d10b      	bne.n	8001714 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fc:	4bb9      	ldr	r3, [pc, #740]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	029b      	lsls	r3, r3, #10
 8001704:	4013      	ands	r3, r2
 8001706:	d062      	beq.n	80017ce <HAL_RCC_OscConfig+0x116>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d15e      	bne.n	80017ce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e2ce      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	025b      	lsls	r3, r3, #9
 800171c:	429a      	cmp	r2, r3
 800171e:	d107      	bne.n	8001730 <HAL_RCC_OscConfig+0x78>
 8001720:	4bb0      	ldr	r3, [pc, #704]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4baf      	ldr	r3, [pc, #700]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001726:	2180      	movs	r1, #128	; 0x80
 8001728:	0249      	lsls	r1, r1, #9
 800172a:	430a      	orrs	r2, r1
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e020      	b.n	8001772 <HAL_RCC_OscConfig+0xba>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	23a0      	movs	r3, #160	; 0xa0
 8001736:	02db      	lsls	r3, r3, #11
 8001738:	429a      	cmp	r2, r3
 800173a:	d10e      	bne.n	800175a <HAL_RCC_OscConfig+0xa2>
 800173c:	4ba9      	ldr	r3, [pc, #676]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4ba8      	ldr	r3, [pc, #672]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001742:	2180      	movs	r1, #128	; 0x80
 8001744:	02c9      	lsls	r1, r1, #11
 8001746:	430a      	orrs	r2, r1
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	4ba6      	ldr	r3, [pc, #664]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4ba5      	ldr	r3, [pc, #660]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	0249      	lsls	r1, r1, #9
 8001754:	430a      	orrs	r2, r1
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e00b      	b.n	8001772 <HAL_RCC_OscConfig+0xba>
 800175a:	4ba2      	ldr	r3, [pc, #648]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4ba1      	ldr	r3, [pc, #644]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001760:	49a1      	ldr	r1, [pc, #644]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001762:	400a      	ands	r2, r1
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	4b9f      	ldr	r3, [pc, #636]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4b9e      	ldr	r3, [pc, #632]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800176c:	499f      	ldr	r1, [pc, #636]	; (80019ec <HAL_RCC_OscConfig+0x334>)
 800176e:	400a      	ands	r2, r1
 8001770:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d014      	beq.n	80017a4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177a:	f7ff fb51 	bl	8000e20 <HAL_GetTick>
 800177e:	0003      	movs	r3, r0
 8001780:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fb4c 	bl	8000e20 <HAL_GetTick>
 8001788:	0002      	movs	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e28d      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001796:	4b93      	ldr	r3, [pc, #588]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	029b      	lsls	r3, r3, #10
 800179e:	4013      	ands	r3, r2
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0xcc>
 80017a2:	e015      	b.n	80017d0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff fb3c 	bl	8000e20 <HAL_GetTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ae:	f7ff fb37 	bl	8000e20 <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b64      	cmp	r3, #100	; 0x64
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e278      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017c0:	4b88      	ldr	r3, [pc, #544]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	029b      	lsls	r3, r3, #10
 80017c8:	4013      	ands	r3, r2
 80017ca:	d1f0      	bne.n	80017ae <HAL_RCC_OscConfig+0xf6>
 80017cc:	e000      	b.n	80017d0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2202      	movs	r2, #2
 80017d6:	4013      	ands	r3, r2
 80017d8:	d100      	bne.n	80017dc <HAL_RCC_OscConfig+0x124>
 80017da:	e099      	b.n	8001910 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017dc:	4b81      	ldr	r3, [pc, #516]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2238      	movs	r2, #56	; 0x38
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e6:	4b7f      	ldr	r3, [pc, #508]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	2203      	movs	r2, #3
 80017ec:	4013      	ands	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2b10      	cmp	r3, #16
 80017f4:	d102      	bne.n	80017fc <HAL_RCC_OscConfig+0x144>
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d002      	beq.n	8001802 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d135      	bne.n	800186e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001802:	4b78      	ldr	r3, [pc, #480]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4013      	ands	r3, r2
 800180c:	d005      	beq.n	800181a <HAL_RCC_OscConfig+0x162>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e24b      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181a:	4b72      	ldr	r3, [pc, #456]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4a74      	ldr	r2, [pc, #464]	; (80019f0 <HAL_RCC_OscConfig+0x338>)
 8001820:	4013      	ands	r3, r2
 8001822:	0019      	movs	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	021a      	lsls	r2, r3, #8
 800182a:	4b6e      	ldr	r3, [pc, #440]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800182c:	430a      	orrs	r2, r1
 800182e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d112      	bne.n	800185c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001836:	4b6b      	ldr	r3, [pc, #428]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a6e      	ldr	r2, [pc, #440]	; (80019f4 <HAL_RCC_OscConfig+0x33c>)
 800183c:	4013      	ands	r3, r2
 800183e:	0019      	movs	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	4b67      	ldr	r3, [pc, #412]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001846:	430a      	orrs	r2, r1
 8001848:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800184a:	4b66      	ldr	r3, [pc, #408]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	0adb      	lsrs	r3, r3, #11
 8001850:	2207      	movs	r2, #7
 8001852:	4013      	ands	r3, r2
 8001854:	4a68      	ldr	r2, [pc, #416]	; (80019f8 <HAL_RCC_OscConfig+0x340>)
 8001856:	40da      	lsrs	r2, r3
 8001858:	4b68      	ldr	r3, [pc, #416]	; (80019fc <HAL_RCC_OscConfig+0x344>)
 800185a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800185c:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_RCC_OscConfig+0x348>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	0018      	movs	r0, r3
 8001862:	f7ff fa81 	bl	8000d68 <HAL_InitTick>
 8001866:	1e03      	subs	r3, r0, #0
 8001868:	d051      	beq.n	800190e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e221      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d030      	beq.n	80018d8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001876:	4b5b      	ldr	r3, [pc, #364]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a5e      	ldr	r2, [pc, #376]	; (80019f4 <HAL_RCC_OscConfig+0x33c>)
 800187c:	4013      	ands	r3, r2
 800187e:	0019      	movs	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	4b57      	ldr	r3, [pc, #348]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001886:	430a      	orrs	r2, r1
 8001888:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800188a:	4b56      	ldr	r3, [pc, #344]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4b55      	ldr	r3, [pc, #340]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	0049      	lsls	r1, r1, #1
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fac2 	bl	8000e20 <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a2:	f7ff fabd 	bl	8000e20 <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e1fe      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b4:	4b4b      	ldr	r3, [pc, #300]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4013      	ands	r3, r2
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	4b48      	ldr	r3, [pc, #288]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a4a      	ldr	r2, [pc, #296]	; (80019f0 <HAL_RCC_OscConfig+0x338>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	0019      	movs	r1, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	021a      	lsls	r2, r3, #8
 80018d0:	4b44      	ldr	r3, [pc, #272]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80018d2:	430a      	orrs	r2, r1
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	e01b      	b.n	8001910 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80018d8:	4b42      	ldr	r3, [pc, #264]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b41      	ldr	r3, [pc, #260]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80018de:	4949      	ldr	r1, [pc, #292]	; (8001a04 <HAL_RCC_OscConfig+0x34c>)
 80018e0:	400a      	ands	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f7ff fa9c 	bl	8000e20 <HAL_GetTick>
 80018e8:	0003      	movs	r3, r0
 80018ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ee:	f7ff fa97 	bl	8000e20 <HAL_GetTick>
 80018f2:	0002      	movs	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e1d8      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001900:	4b38      	ldr	r3, [pc, #224]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4013      	ands	r3, r2
 800190a:	d1f0      	bne.n	80018ee <HAL_RCC_OscConfig+0x236>
 800190c:	e000      	b.n	8001910 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800190e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2208      	movs	r2, #8
 8001916:	4013      	ands	r3, r2
 8001918:	d047      	beq.n	80019aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800191a:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2238      	movs	r2, #56	; 0x38
 8001920:	4013      	ands	r3, r2
 8001922:	2b18      	cmp	r3, #24
 8001924:	d10a      	bne.n	800193c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001926:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192a:	2202      	movs	r2, #2
 800192c:	4013      	ands	r3, r2
 800192e:	d03c      	beq.n	80019aa <HAL_RCC_OscConfig+0x2f2>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d138      	bne.n	80019aa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e1ba      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d019      	beq.n	8001978 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001946:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001948:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800194a:	2101      	movs	r1, #1
 800194c:	430a      	orrs	r2, r1
 800194e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff fa66 	bl	8000e20 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195a:	f7ff fa61 	bl	8000e20 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e1a2      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800196c:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800196e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001970:	2202      	movs	r2, #2
 8001972:	4013      	ands	r3, r2
 8001974:	d0f1      	beq.n	800195a <HAL_RCC_OscConfig+0x2a2>
 8001976:	e018      	b.n	80019aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001978:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800197a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800197e:	2101      	movs	r1, #1
 8001980:	438a      	bics	r2, r1
 8001982:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff fa4c 	bl	8000e20 <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198e:	f7ff fa47 	bl	8000e20 <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e188      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a0:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a4:	2202      	movs	r2, #2
 80019a6:	4013      	ands	r3, r2
 80019a8:	d1f1      	bne.n	800198e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2204      	movs	r2, #4
 80019b0:	4013      	ands	r3, r2
 80019b2:	d100      	bne.n	80019b6 <HAL_RCC_OscConfig+0x2fe>
 80019b4:	e0c6      	b.n	8001b44 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b6:	231f      	movs	r3, #31
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2238      	movs	r2, #56	; 0x38
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b20      	cmp	r3, #32
 80019c8:	d11e      	bne.n	8001a08 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80019cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ce:	2202      	movs	r2, #2
 80019d0:	4013      	ands	r3, r2
 80019d2:	d100      	bne.n	80019d6 <HAL_RCC_OscConfig+0x31e>
 80019d4:	e0b6      	b.n	8001b44 <HAL_RCC_OscConfig+0x48c>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d000      	beq.n	80019e0 <HAL_RCC_OscConfig+0x328>
 80019de:	e0b1      	b.n	8001b44 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e166      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
 80019e4:	40021000 	.word	0x40021000
 80019e8:	fffeffff 	.word	0xfffeffff
 80019ec:	fffbffff 	.word	0xfffbffff
 80019f0:	ffff80ff 	.word	0xffff80ff
 80019f4:	ffffc7ff 	.word	0xffffc7ff
 80019f8:	00f42400 	.word	0x00f42400
 80019fc:	20000010 	.word	0x20000010
 8001a00:	20000014 	.word	0x20000014
 8001a04:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a08:	4bac      	ldr	r3, [pc, #688]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	055b      	lsls	r3, r3, #21
 8001a10:	4013      	ands	r3, r2
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_OscConfig+0x360>
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x362>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d011      	beq.n	8001a42 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	4ba7      	ldr	r3, [pc, #668]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a22:	4ba6      	ldr	r3, [pc, #664]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	0549      	lsls	r1, r1, #21
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a2c:	4ba3      	ldr	r3, [pc, #652]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	055b      	lsls	r3, r3, #21
 8001a34:	4013      	ands	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a3a:	231f      	movs	r3, #31
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a42:	4b9f      	ldr	r3, [pc, #636]	; (8001cc0 <HAL_RCC_OscConfig+0x608>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d11a      	bne.n	8001a84 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a4e:	4b9c      	ldr	r3, [pc, #624]	; (8001cc0 <HAL_RCC_OscConfig+0x608>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b9b      	ldr	r3, [pc, #620]	; (8001cc0 <HAL_RCC_OscConfig+0x608>)
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	0049      	lsls	r1, r1, #1
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f9e0 	bl	8000e20 <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a66:	f7ff f9db 	bl	8000e20 <HAL_GetTick>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e11c      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a78:	4b91      	ldr	r3, [pc, #580]	; (8001cc0 <HAL_RCC_OscConfig+0x608>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4013      	ands	r3, r2
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCC_OscConfig+0x3e2>
 8001a8c:	4b8b      	ldr	r3, [pc, #556]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001a8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a90:	4b8a      	ldr	r3, [pc, #552]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001a92:	2101      	movs	r1, #1
 8001a94:	430a      	orrs	r2, r1
 8001a96:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a98:	e01c      	b.n	8001ad4 <HAL_RCC_OscConfig+0x41c>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2b05      	cmp	r3, #5
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0x404>
 8001aa2:	4b86      	ldr	r3, [pc, #536]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001aa4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aa6:	4b85      	ldr	r3, [pc, #532]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001aa8:	2104      	movs	r1, #4
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	65da      	str	r2, [r3, #92]	; 0x5c
 8001aae:	4b83      	ldr	r3, [pc, #524]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001ab0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ab2:	4b82      	ldr	r3, [pc, #520]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001aba:	e00b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x41c>
 8001abc:	4b7f      	ldr	r3, [pc, #508]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001abe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ac0:	4b7e      	ldr	r3, [pc, #504]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	438a      	bics	r2, r1
 8001ac6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ac8:	4b7c      	ldr	r3, [pc, #496]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001aca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001acc:	4b7b      	ldr	r3, [pc, #492]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001ace:	2104      	movs	r1, #4
 8001ad0:	438a      	bics	r2, r1
 8001ad2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d014      	beq.n	8001b06 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff f9a0 	bl	8000e20 <HAL_GetTick>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae4:	e009      	b.n	8001afa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7ff f99b 	bl	8000e20 <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	4a74      	ldr	r2, [pc, #464]	; (8001cc4 <HAL_RCC_OscConfig+0x60c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e0db      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001afa:	4b70      	ldr	r3, [pc, #448]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afe:	2202      	movs	r2, #2
 8001b00:	4013      	ands	r3, r2
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x42e>
 8001b04:	e013      	b.n	8001b2e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7ff f98b 	bl	8000e20 <HAL_GetTick>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b0e:	e009      	b.n	8001b24 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b10:	f7ff f986 	bl	8000e20 <HAL_GetTick>
 8001b14:	0002      	movs	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	4a6a      	ldr	r2, [pc, #424]	; (8001cc4 <HAL_RCC_OscConfig+0x60c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e0c6      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b24:	4b65      	ldr	r3, [pc, #404]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b28:	2202      	movs	r2, #2
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b2e:	231f      	movs	r3, #31
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d105      	bne.n	8001b44 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b38:	4b60      	ldr	r3, [pc, #384]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b3c:	4b5f      	ldr	r3, [pc, #380]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001b3e:	4962      	ldr	r1, [pc, #392]	; (8001cc8 <HAL_RCC_OscConfig+0x610>)
 8001b40:	400a      	ands	r2, r1
 8001b42:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d100      	bne.n	8001b4e <HAL_RCC_OscConfig+0x496>
 8001b4c:	e0b0      	b.n	8001cb0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b4e:	4b5b      	ldr	r3, [pc, #364]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2238      	movs	r2, #56	; 0x38
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b10      	cmp	r3, #16
 8001b58:	d100      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4a4>
 8001b5a:	e078      	b.n	8001c4e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d153      	bne.n	8001c0c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b64:	4b55      	ldr	r3, [pc, #340]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b54      	ldr	r3, [pc, #336]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001b6a:	4958      	ldr	r1, [pc, #352]	; (8001ccc <HAL_RCC_OscConfig+0x614>)
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7ff f956 	bl	8000e20 <HAL_GetTick>
 8001b74:	0003      	movs	r3, r0
 8001b76:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7ff f951 	bl	8000e20 <HAL_GetTick>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e092      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8c:	4b4b      	ldr	r3, [pc, #300]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	049b      	lsls	r3, r3, #18
 8001b94:	4013      	ands	r3, r2
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b98:	4b48      	ldr	r3, [pc, #288]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4a4c      	ldr	r2, [pc, #304]	; (8001cd0 <HAL_RCC_OscConfig+0x618>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1a      	ldr	r2, [r3, #32]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	4b3e      	ldr	r3, [pc, #248]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc6:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b3c      	ldr	r3, [pc, #240]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	0449      	lsls	r1, r1, #17
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001bd4:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	0549      	lsls	r1, r1, #21
 8001bde:	430a      	orrs	r2, r1
 8001be0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be2:	f7ff f91d 	bl	8000e20 <HAL_GetTick>
 8001be6:	0003      	movs	r3, r0
 8001be8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff f918 	bl	8000e20 <HAL_GetTick>
 8001bf0:	0002      	movs	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e059      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfe:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	049b      	lsls	r3, r3, #18
 8001c06:	4013      	ands	r3, r2
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x534>
 8001c0a:	e051      	b.n	8001cb0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0c:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001c12:	492e      	ldr	r1, [pc, #184]	; (8001ccc <HAL_RCC_OscConfig+0x614>)
 8001c14:	400a      	ands	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7ff f902 	bl	8000e20 <HAL_GetTick>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c22:	f7ff f8fd 	bl	8000e20 <HAL_GetTick>
 8001c26:	0002      	movs	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e03e      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	049b      	lsls	r3, r3, #18
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d1f0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001c40:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001c46:	4923      	ldr	r1, [pc, #140]	; (8001cd4 <HAL_RCC_OscConfig+0x61c>)
 8001c48:	400a      	ands	r2, r1
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	e030      	b.n	8001cb0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e02b      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <HAL_RCC_OscConfig+0x604>)
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2203      	movs	r2, #3
 8001c64:	401a      	ands	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d11e      	bne.n	8001cac <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2270      	movs	r2, #112	; 0x70
 8001c72:	401a      	ands	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d117      	bne.n	8001cac <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	23fe      	movs	r3, #254	; 0xfe
 8001c80:	01db      	lsls	r3, r3, #7
 8001c82:	401a      	ands	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d10e      	bne.n	8001cac <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	23f8      	movs	r3, #248	; 0xf8
 8001c92:	039b      	lsls	r3, r3, #14
 8001c94:	401a      	ands	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d106      	bne.n	8001cac <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	0f5b      	lsrs	r3, r3, #29
 8001ca2:	075a      	lsls	r2, r3, #29
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b008      	add	sp, #32
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40007000 	.word	0x40007000
 8001cc4:	00001388 	.word	0x00001388
 8001cc8:	efffffff 	.word	0xefffffff
 8001ccc:	feffffff 	.word	0xfeffffff
 8001cd0:	1fc1808c 	.word	0x1fc1808c
 8001cd4:	effefffc 	.word	0xeffefffc

08001cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0e9      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cec:	4b76      	ldr	r3, [pc, #472]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d91e      	bls.n	8001d38 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfa:	4b73      	ldr	r3, [pc, #460]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2207      	movs	r2, #7
 8001d00:	4393      	bics	r3, r2
 8001d02:	0019      	movs	r1, r3
 8001d04:	4b70      	ldr	r3, [pc, #448]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d0c:	f7ff f888 	bl	8000e20 <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d14:	e009      	b.n	8001d2a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d16:	f7ff f883 	bl	8000e20 <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	4a6a      	ldr	r2, [pc, #424]	; (8001ecc <HAL_RCC_ClockConfig+0x1f4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e0ca      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d2a:	4b67      	ldr	r3, [pc, #412]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2207      	movs	r2, #7
 8001d30:	4013      	ands	r3, r2
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d1ee      	bne.n	8001d16 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d015      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2204      	movs	r2, #4
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d006      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d4c:	4b60      	ldr	r3, [pc, #384]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	4b5f      	ldr	r3, [pc, #380]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d52:	21e0      	movs	r1, #224	; 0xe0
 8001d54:	01c9      	lsls	r1, r1, #7
 8001d56:	430a      	orrs	r2, r1
 8001d58:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5a:	4b5d      	ldr	r3, [pc, #372]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	4a5d      	ldr	r2, [pc, #372]	; (8001ed4 <HAL_RCC_ClockConfig+0x1fc>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	0019      	movs	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	4b59      	ldr	r3, [pc, #356]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2201      	movs	r2, #1
 8001d74:	4013      	ands	r3, r2
 8001d76:	d057      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d107      	bne.n	8001d90 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d80:	4b53      	ldr	r3, [pc, #332]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	029b      	lsls	r3, r3, #10
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d12b      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e097      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d98:	4b4d      	ldr	r3, [pc, #308]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	049b      	lsls	r3, r3, #18
 8001da0:	4013      	ands	r3, r2
 8001da2:	d11f      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e08b      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db0:	4b47      	ldr	r3, [pc, #284]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4013      	ands	r3, r2
 8001dba:	d113      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e07f      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc8:	4b41      	ldr	r3, [pc, #260]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dcc:	2202      	movs	r2, #2
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d108      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e074      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd6:	4b3e      	ldr	r3, [pc, #248]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dda:	2202      	movs	r2, #2
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e06d      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001de4:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2207      	movs	r2, #7
 8001dea:	4393      	bics	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	4b37      	ldr	r3, [pc, #220]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001df4:	430a      	orrs	r2, r1
 8001df6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df8:	f7ff f812 	bl	8000e20 <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e00:	e009      	b.n	8001e16 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e02:	f7ff f80d 	bl	8000e20 <HAL_GetTick>
 8001e06:	0002      	movs	r2, r0
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	4a2f      	ldr	r2, [pc, #188]	; (8001ecc <HAL_RCC_ClockConfig+0x1f4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e054      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2238      	movs	r2, #56	; 0x38
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1ec      	bne.n	8001e02 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	4013      	ands	r3, r2
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d21e      	bcs.n	8001e74 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2207      	movs	r2, #7
 8001e3c:	4393      	bics	r3, r2
 8001e3e:	0019      	movs	r1, r3
 8001e40:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e48:	f7fe ffea 	bl	8000e20 <HAL_GetTick>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e50:	e009      	b.n	8001e66 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e52:	f7fe ffe5 	bl	8000e20 <HAL_GetTick>
 8001e56:	0002      	movs	r2, r0
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	4a1b      	ldr	r2, [pc, #108]	; (8001ecc <HAL_RCC_ClockConfig+0x1f4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e02c      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d1ee      	bne.n	8001e52 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2204      	movs	r2, #4
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	4a15      	ldr	r2, [pc, #84]	; (8001ed8 <HAL_RCC_ClockConfig+0x200>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	0019      	movs	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e92:	f000 f829 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8001e96:	0001      	movs	r1, r0
 8001e98:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_RCC_ClockConfig+0x204>)
 8001ea4:	0092      	lsls	r2, r2, #2
 8001ea6:	58d3      	ldr	r3, [r2, r3]
 8001ea8:	221f      	movs	r2, #31
 8001eaa:	4013      	ands	r3, r2
 8001eac:	000a      	movs	r2, r1
 8001eae:	40da      	lsrs	r2, r3
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_ClockConfig+0x208>)
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCC_ClockConfig+0x20c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f7fe ff55 	bl	8000d68 <HAL_InitTick>
 8001ebe:	0003      	movs	r3, r0
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b004      	add	sp, #16
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40022000 	.word	0x40022000
 8001ecc:	00001388 	.word	0x00001388
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	fffff0ff 	.word	0xfffff0ff
 8001ed8:	ffff8fff 	.word	0xffff8fff
 8001edc:	080047a4 	.word	0x080047a4
 8001ee0:	20000010 	.word	0x20000010
 8001ee4:	20000014 	.word	0x20000014

08001ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eee:	4b3c      	ldr	r3, [pc, #240]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2238      	movs	r2, #56	; 0x38
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d10f      	bne.n	8001f18 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ef8:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	0adb      	lsrs	r3, r3, #11
 8001efe:	2207      	movs	r2, #7
 8001f00:	4013      	ands	r3, r2
 8001f02:	2201      	movs	r2, #1
 8001f04:	409a      	lsls	r2, r3
 8001f06:	0013      	movs	r3, r2
 8001f08:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f0a:	6839      	ldr	r1, [r7, #0]
 8001f0c:	4835      	ldr	r0, [pc, #212]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f0e:	f7fe f8f7 	bl	8000100 <__udivsi3>
 8001f12:	0003      	movs	r3, r0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	e05d      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f18:	4b31      	ldr	r3, [pc, #196]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2238      	movs	r2, #56	; 0x38
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d102      	bne.n	8001f2a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f24:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	e054      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f2a:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2238      	movs	r2, #56	; 0x38
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b10      	cmp	r3, #16
 8001f34:	d138      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f36:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f40:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	2207      	movs	r2, #7
 8001f48:	4013      	ands	r3, r2
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d10d      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	4824      	ldr	r0, [pc, #144]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f58:	f7fe f8d2 	bl	8000100 <__udivsi3>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	0019      	movs	r1, r3
 8001f60:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	227f      	movs	r2, #127	; 0x7f
 8001f68:	4013      	ands	r3, r2
 8001f6a:	434b      	muls	r3, r1
 8001f6c:	617b      	str	r3, [r7, #20]
        break;
 8001f6e:	e00d      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	481c      	ldr	r0, [pc, #112]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f74:	f7fe f8c4 	bl	8000100 <__udivsi3>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	227f      	movs	r2, #127	; 0x7f
 8001f84:	4013      	ands	r3, r2
 8001f86:	434b      	muls	r3, r1
 8001f88:	617b      	str	r3, [r7, #20]
        break;
 8001f8a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	0f5b      	lsrs	r3, r3, #29
 8001f92:	2207      	movs	r2, #7
 8001f94:	4013      	ands	r3, r2
 8001f96:	3301      	adds	r3, #1
 8001f98:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	6978      	ldr	r0, [r7, #20]
 8001f9e:	f7fe f8af 	bl	8000100 <__udivsi3>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	e015      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2238      	movs	r2, #56	; 0x38
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d103      	bne.n	8001fbc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	e00b      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2238      	movs	r2, #56	; 0x38
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b18      	cmp	r3, #24
 8001fc6:	d103      	bne.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001fc8:	23fa      	movs	r3, #250	; 0xfa
 8001fca:	01db      	lsls	r3, r3, #7
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	e001      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fd4:	693b      	ldr	r3, [r7, #16]
}
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b006      	add	sp, #24
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	00f42400 	.word	0x00f42400
 8001fe8:	007a1200 	.word	0x007a1200

08001fec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff0:	4b02      	ldr	r3, [pc, #8]	; (8001ffc <HAL_RCC_GetHCLKFreq+0x10>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	20000010 	.word	0x20000010

08002000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002000:	b5b0      	push	{r4, r5, r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002004:	f7ff fff2 	bl	8001fec <HAL_RCC_GetHCLKFreq>
 8002008:	0004      	movs	r4, r0
 800200a:	f7ff fb49 	bl	80016a0 <LL_RCC_GetAPB1Prescaler>
 800200e:	0003      	movs	r3, r0
 8002010:	0b1a      	lsrs	r2, r3, #12
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002014:	0092      	lsls	r2, r2, #2
 8002016:	58d3      	ldr	r3, [r2, r3]
 8002018:	221f      	movs	r2, #31
 800201a:	4013      	ands	r3, r2
 800201c:	40dc      	lsrs	r4, r3
 800201e:	0023      	movs	r3, r4
}
 8002020:	0018      	movs	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	bdb0      	pop	{r4, r5, r7, pc}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	080047e4 	.word	0x080047e4

0800202c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002034:	2313      	movs	r3, #19
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800203c:	2312      	movs	r3, #18
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	029b      	lsls	r3, r3, #10
 800204c:	4013      	ands	r3, r2
 800204e:	d100      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002050:	e0a3      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002052:	2011      	movs	r0, #17
 8002054:	183b      	adds	r3, r7, r0
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205a:	4b86      	ldr	r3, [pc, #536]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800205c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	055b      	lsls	r3, r3, #21
 8002062:	4013      	ands	r3, r2
 8002064:	d110      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	4b83      	ldr	r3, [pc, #524]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002068:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800206a:	4b82      	ldr	r3, [pc, #520]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800206c:	2180      	movs	r1, #128	; 0x80
 800206e:	0549      	lsls	r1, r1, #21
 8002070:	430a      	orrs	r2, r1
 8002072:	63da      	str	r2, [r3, #60]	; 0x3c
 8002074:	4b7f      	ldr	r3, [pc, #508]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	055b      	lsls	r3, r3, #21
 800207c:	4013      	ands	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002082:	183b      	adds	r3, r7, r0
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002088:	4b7b      	ldr	r3, [pc, #492]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b7a      	ldr	r3, [pc, #488]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800208e:	2180      	movs	r1, #128	; 0x80
 8002090:	0049      	lsls	r1, r1, #1
 8002092:	430a      	orrs	r2, r1
 8002094:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002096:	f7fe fec3 	bl	8000e20 <HAL_GetTick>
 800209a:	0003      	movs	r3, r0
 800209c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800209e:	e00b      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a0:	f7fe febe 	bl	8000e20 <HAL_GetTick>
 80020a4:	0002      	movs	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d904      	bls.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80020ae:	2313      	movs	r3, #19
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	2203      	movs	r2, #3
 80020b4:	701a      	strb	r2, [r3, #0]
        break;
 80020b6:	e005      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020b8:	4b6f      	ldr	r3, [pc, #444]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4013      	ands	r3, r2
 80020c2:	d0ed      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80020c4:	2313      	movs	r3, #19
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d154      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ce:	4b69      	ldr	r3, [pc, #420]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020d2:	23c0      	movs	r3, #192	; 0xc0
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4013      	ands	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d019      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d014      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020ea:	4b62      	ldr	r3, [pc, #392]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	4a63      	ldr	r2, [pc, #396]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020f4:	4b5f      	ldr	r3, [pc, #380]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020f8:	4b5e      	ldr	r3, [pc, #376]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020fa:	2180      	movs	r1, #128	; 0x80
 80020fc:	0249      	lsls	r1, r1, #9
 80020fe:	430a      	orrs	r2, r1
 8002100:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002102:	4b5c      	ldr	r3, [pc, #368]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002104:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002106:	4b5b      	ldr	r3, [pc, #364]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002108:	495d      	ldr	r1, [pc, #372]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800210a:	400a      	ands	r2, r1
 800210c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800210e:	4b59      	ldr	r3, [pc, #356]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2201      	movs	r2, #1
 8002118:	4013      	ands	r3, r2
 800211a:	d016      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7fe fe80 	bl	8000e20 <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002124:	e00c      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7fe fe7b 	bl	8000e20 <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	4a54      	ldr	r2, [pc, #336]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d904      	bls.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002136:	2313      	movs	r3, #19
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	2203      	movs	r2, #3
 800213c:	701a      	strb	r2, [r3, #0]
            break;
 800213e:	e004      	b.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002140:	4b4c      	ldr	r3, [pc, #304]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	2202      	movs	r2, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d0ed      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800214a:	2313      	movs	r3, #19
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10a      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002154:	4b47      	ldr	r3, [pc, #284]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	4a48      	ldr	r2, [pc, #288]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800215a:	4013      	ands	r3, r2
 800215c:	0019      	movs	r1, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	4b44      	ldr	r3, [pc, #272]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002164:	430a      	orrs	r2, r1
 8002166:	65da      	str	r2, [r3, #92]	; 0x5c
 8002168:	e00c      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800216a:	2312      	movs	r3, #18
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	2213      	movs	r2, #19
 8002170:	18ba      	adds	r2, r7, r2
 8002172:	7812      	ldrb	r2, [r2, #0]
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	e005      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002178:	2312      	movs	r3, #18
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	2213      	movs	r2, #19
 800217e:	18ba      	adds	r2, r7, r2
 8002180:	7812      	ldrb	r2, [r2, #0]
 8002182:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002184:	2311      	movs	r3, #17
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d105      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218e:	4b39      	ldr	r3, [pc, #228]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002192:	4b38      	ldr	r3, [pc, #224]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002194:	493c      	ldr	r1, [pc, #240]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002196:	400a      	ands	r2, r1
 8002198:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2201      	movs	r2, #1
 80021a0:	4013      	ands	r3, r2
 80021a2:	d009      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021a4:	4b33      	ldr	r3, [pc, #204]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a8:	2203      	movs	r2, #3
 80021aa:	4393      	bics	r3, r2
 80021ac:	0019      	movs	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	4b30      	ldr	r3, [pc, #192]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021b4:	430a      	orrs	r2, r1
 80021b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2202      	movs	r2, #2
 80021be:	4013      	ands	r3, r2
 80021c0:	d009      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021c2:	4b2c      	ldr	r3, [pc, #176]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c6:	220c      	movs	r2, #12
 80021c8:	4393      	bics	r3, r2
 80021ca:	0019      	movs	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	4b28      	ldr	r3, [pc, #160]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021d2:	430a      	orrs	r2, r1
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2220      	movs	r2, #32
 80021dc:	4013      	ands	r3, r2
 80021de:	d009      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021e0:	4b24      	ldr	r3, [pc, #144]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e4:	4a29      	ldr	r2, [pc, #164]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	0019      	movs	r1, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	4b21      	ldr	r3, [pc, #132]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021f0:	430a      	orrs	r2, r1
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	01db      	lsls	r3, r3, #7
 80021fc:	4013      	ands	r3, r2
 80021fe:	d015      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002200:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	0899      	lsrs	r1, r3, #2
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800220e:	430a      	orrs	r2, r1
 8002210:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	05db      	lsls	r3, r3, #23
 800221a:	429a      	cmp	r2, r3
 800221c:	d106      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	4b14      	ldr	r3, [pc, #80]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002224:	2180      	movs	r1, #128	; 0x80
 8002226:	0249      	lsls	r1, r1, #9
 8002228:	430a      	orrs	r2, r1
 800222a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	4013      	ands	r3, r2
 8002236:	d016      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800223a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223c:	4a14      	ldr	r2, [pc, #80]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800223e:	4013      	ands	r3, r2
 8002240:	0019      	movs	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002248:	430a      	orrs	r2, r1
 800224a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	01db      	lsls	r3, r3, #7
 8002254:	429a      	cmp	r2, r3
 8002256:	d106      	bne.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800225e:	2180      	movs	r1, #128	; 0x80
 8002260:	0249      	lsls	r1, r1, #9
 8002262:	430a      	orrs	r2, r1
 8002264:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002266:	2312      	movs	r3, #18
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	781b      	ldrb	r3, [r3, #0]
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b006      	add	sp, #24
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	40007000 	.word	0x40007000
 800227c:	fffffcff 	.word	0xfffffcff
 8002280:	fffeffff 	.word	0xfffeffff
 8002284:	00001388 	.word	0x00001388
 8002288:	efffffff 	.word	0xefffffff
 800228c:	ffffcfff 	.word	0xffffcfff
 8002290:	ffff3fff 	.word	0xffff3fff

08002294 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e04a      	b.n	800233c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	223d      	movs	r2, #61	; 0x3d
 80022aa:	5c9b      	ldrb	r3, [r3, r2]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d107      	bne.n	80022c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	223c      	movs	r2, #60	; 0x3c
 80022b6:	2100      	movs	r1, #0
 80022b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	0018      	movs	r0, r3
 80022be:	f7fe fbe9 	bl	8000a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	223d      	movs	r2, #61	; 0x3d
 80022c6:	2102      	movs	r1, #2
 80022c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3304      	adds	r3, #4
 80022d2:	0019      	movs	r1, r3
 80022d4:	0010      	movs	r0, r2
 80022d6:	f000 f959 	bl	800258c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2248      	movs	r2, #72	; 0x48
 80022de:	2101      	movs	r1, #1
 80022e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	223e      	movs	r2, #62	; 0x3e
 80022e6:	2101      	movs	r1, #1
 80022e8:	5499      	strb	r1, [r3, r2]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	223f      	movs	r2, #63	; 0x3f
 80022ee:	2101      	movs	r1, #1
 80022f0:	5499      	strb	r1, [r3, r2]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2240      	movs	r2, #64	; 0x40
 80022f6:	2101      	movs	r1, #1
 80022f8:	5499      	strb	r1, [r3, r2]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2241      	movs	r2, #65	; 0x41
 80022fe:	2101      	movs	r1, #1
 8002300:	5499      	strb	r1, [r3, r2]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2242      	movs	r2, #66	; 0x42
 8002306:	2101      	movs	r1, #1
 8002308:	5499      	strb	r1, [r3, r2]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2243      	movs	r2, #67	; 0x43
 800230e:	2101      	movs	r1, #1
 8002310:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2244      	movs	r2, #68	; 0x44
 8002316:	2101      	movs	r1, #1
 8002318:	5499      	strb	r1, [r3, r2]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2245      	movs	r2, #69	; 0x45
 800231e:	2101      	movs	r1, #1
 8002320:	5499      	strb	r1, [r3, r2]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2246      	movs	r2, #70	; 0x46
 8002326:	2101      	movs	r1, #1
 8002328:	5499      	strb	r1, [r3, r2]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2247      	movs	r2, #71	; 0x47
 800232e:	2101      	movs	r1, #1
 8002330:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	223d      	movs	r2, #61	; 0x3d
 8002336:	2101      	movs	r1, #1
 8002338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	223d      	movs	r2, #61	; 0x3d
 8002350:	5c9b      	ldrb	r3, [r3, r2]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b01      	cmp	r3, #1
 8002356:	d001      	beq.n	800235c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e034      	b.n	80023c6 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	223d      	movs	r2, #61	; 0x3d
 8002360:	2102      	movs	r1, #2
 8002362:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a19      	ldr	r2, [pc, #100]	; (80023d0 <HAL_TIM_Base_Start+0x8c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d009      	beq.n	8002382 <HAL_TIM_Base_Start+0x3e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a18      	ldr	r2, [pc, #96]	; (80023d4 <HAL_TIM_Base_Start+0x90>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d004      	beq.n	8002382 <HAL_TIM_Base_Start+0x3e>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a16      	ldr	r2, [pc, #88]	; (80023d8 <HAL_TIM_Base_Start+0x94>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d116      	bne.n	80023b0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <HAL_TIM_Base_Start+0x98>)
 800238a:	4013      	ands	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b06      	cmp	r3, #6
 8002392:	d016      	beq.n	80023c2 <HAL_TIM_Base_Start+0x7e>
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	025b      	lsls	r3, r3, #9
 800239a:	429a      	cmp	r2, r3
 800239c:	d011      	beq.n	80023c2 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2101      	movs	r1, #1
 80023aa:	430a      	orrs	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ae:	e008      	b.n	80023c2 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2101      	movs	r1, #1
 80023bc:	430a      	orrs	r2, r1
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e000      	b.n	80023c4 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023c2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	0018      	movs	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	b004      	add	sp, #16
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	40012c00 	.word	0x40012c00
 80023d4:	40000400 	.word	0x40000400
 80023d8:	40014000 	.word	0x40014000
 80023dc:	00010007 	.word	0x00010007

080023e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ea:	230f      	movs	r3, #15
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	223c      	movs	r2, #60	; 0x3c
 80023f6:	5c9b      	ldrb	r3, [r3, r2]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_TIM_ConfigClockSource+0x20>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e0bc      	b.n	800257a <HAL_TIM_ConfigClockSource+0x19a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	223c      	movs	r2, #60	; 0x3c
 8002404:	2101      	movs	r1, #1
 8002406:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	223d      	movs	r2, #61	; 0x3d
 800240c:	2102      	movs	r1, #2
 800240e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4a5a      	ldr	r2, [pc, #360]	; (8002584 <HAL_TIM_ConfigClockSource+0x1a4>)
 800241c:	4013      	ands	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4a59      	ldr	r2, [pc, #356]	; (8002588 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002424:	4013      	ands	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	0192      	lsls	r2, r2, #6
 8002438:	4293      	cmp	r3, r2
 800243a:	d040      	beq.n	80024be <HAL_TIM_ConfigClockSource+0xde>
 800243c:	2280      	movs	r2, #128	; 0x80
 800243e:	0192      	lsls	r2, r2, #6
 8002440:	4293      	cmp	r3, r2
 8002442:	d900      	bls.n	8002446 <HAL_TIM_ConfigClockSource+0x66>
 8002444:	e088      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x178>
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	0152      	lsls	r2, r2, #5
 800244a:	4293      	cmp	r3, r2
 800244c:	d100      	bne.n	8002450 <HAL_TIM_ConfigClockSource+0x70>
 800244e:	e088      	b.n	8002562 <HAL_TIM_ConfigClockSource+0x182>
 8002450:	2280      	movs	r2, #128	; 0x80
 8002452:	0152      	lsls	r2, r2, #5
 8002454:	4293      	cmp	r3, r2
 8002456:	d900      	bls.n	800245a <HAL_TIM_ConfigClockSource+0x7a>
 8002458:	e07e      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x178>
 800245a:	2b70      	cmp	r3, #112	; 0x70
 800245c:	d018      	beq.n	8002490 <HAL_TIM_ConfigClockSource+0xb0>
 800245e:	d900      	bls.n	8002462 <HAL_TIM_ConfigClockSource+0x82>
 8002460:	e07a      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x178>
 8002462:	2b60      	cmp	r3, #96	; 0x60
 8002464:	d04f      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0x126>
 8002466:	d900      	bls.n	800246a <HAL_TIM_ConfigClockSource+0x8a>
 8002468:	e076      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x178>
 800246a:	2b50      	cmp	r3, #80	; 0x50
 800246c:	d03b      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0x106>
 800246e:	d900      	bls.n	8002472 <HAL_TIM_ConfigClockSource+0x92>
 8002470:	e072      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x178>
 8002472:	2b40      	cmp	r3, #64	; 0x40
 8002474:	d057      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0x146>
 8002476:	d900      	bls.n	800247a <HAL_TIM_ConfigClockSource+0x9a>
 8002478:	e06e      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x178>
 800247a:	2b30      	cmp	r3, #48	; 0x30
 800247c:	d063      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x166>
 800247e:	d86b      	bhi.n	8002558 <HAL_TIM_ConfigClockSource+0x178>
 8002480:	2b20      	cmp	r3, #32
 8002482:	d060      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x166>
 8002484:	d868      	bhi.n	8002558 <HAL_TIM_ConfigClockSource+0x178>
 8002486:	2b00      	cmp	r3, #0
 8002488:	d05d      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x166>
 800248a:	2b10      	cmp	r3, #16
 800248c:	d05b      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x166>
 800248e:	e063      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6899      	ldr	r1, [r3, #8]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f000 f966 	bl	8002770 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2277      	movs	r2, #119	; 0x77
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	609a      	str	r2, [r3, #8]
      break;
 80024bc:	e052      	b.n	8002564 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6899      	ldr	r1, [r3, #8]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f000 f94f 	bl	8002770 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2180      	movs	r1, #128	; 0x80
 80024de:	01c9      	lsls	r1, r1, #7
 80024e0:	430a      	orrs	r2, r1
 80024e2:	609a      	str	r2, [r3, #8]
      break;
 80024e4:	e03e      	b.n	8002564 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	6859      	ldr	r1, [r3, #4]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	001a      	movs	r2, r3
 80024f4:	f000 f8c0 	bl	8002678 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2150      	movs	r1, #80	; 0x50
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 f91a 	bl	8002738 <TIM_ITRx_SetConfig>
      break;
 8002504:	e02e      	b.n	8002564 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6859      	ldr	r1, [r3, #4]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	001a      	movs	r2, r3
 8002514:	f000 f8de 	bl	80026d4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2160      	movs	r1, #96	; 0x60
 800251e:	0018      	movs	r0, r3
 8002520:	f000 f90a 	bl	8002738 <TIM_ITRx_SetConfig>
      break;
 8002524:	e01e      	b.n	8002564 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6859      	ldr	r1, [r3, #4]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	001a      	movs	r2, r3
 8002534:	f000 f8a0 	bl	8002678 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2140      	movs	r1, #64	; 0x40
 800253e:	0018      	movs	r0, r3
 8002540:	f000 f8fa 	bl	8002738 <TIM_ITRx_SetConfig>
      break;
 8002544:	e00e      	b.n	8002564 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	0019      	movs	r1, r3
 8002550:	0010      	movs	r0, r2
 8002552:	f000 f8f1 	bl	8002738 <TIM_ITRx_SetConfig>
      break;
 8002556:	e005      	b.n	8002564 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002558:	230f      	movs	r3, #15
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]
      break;
 8002560:	e000      	b.n	8002564 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002562:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	223d      	movs	r2, #61	; 0x3d
 8002568:	2101      	movs	r1, #1
 800256a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	223c      	movs	r2, #60	; 0x3c
 8002570:	2100      	movs	r1, #0
 8002572:	5499      	strb	r1, [r3, r2]

  return status;
 8002574:	230f      	movs	r3, #15
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	781b      	ldrb	r3, [r3, #0]
}
 800257a:	0018      	movs	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	b004      	add	sp, #16
 8002580:	bd80      	pop	{r7, pc}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	ffceff88 	.word	0xffceff88
 8002588:	ffff00ff 	.word	0xffff00ff

0800258c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a2f      	ldr	r2, [pc, #188]	; (800265c <TIM_Base_SetConfig+0xd0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d003      	beq.n	80025ac <TIM_Base_SetConfig+0x20>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a2e      	ldr	r2, [pc, #184]	; (8002660 <TIM_Base_SetConfig+0xd4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d108      	bne.n	80025be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2270      	movs	r2, #112	; 0x70
 80025b0:	4393      	bics	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a26      	ldr	r2, [pc, #152]	; (800265c <TIM_Base_SetConfig+0xd0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d013      	beq.n	80025ee <TIM_Base_SetConfig+0x62>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a25      	ldr	r2, [pc, #148]	; (8002660 <TIM_Base_SetConfig+0xd4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d00f      	beq.n	80025ee <TIM_Base_SetConfig+0x62>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a24      	ldr	r2, [pc, #144]	; (8002664 <TIM_Base_SetConfig+0xd8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00b      	beq.n	80025ee <TIM_Base_SetConfig+0x62>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a23      	ldr	r2, [pc, #140]	; (8002668 <TIM_Base_SetConfig+0xdc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d007      	beq.n	80025ee <TIM_Base_SetConfig+0x62>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a22      	ldr	r2, [pc, #136]	; (800266c <TIM_Base_SetConfig+0xe0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d003      	beq.n	80025ee <TIM_Base_SetConfig+0x62>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a21      	ldr	r2, [pc, #132]	; (8002670 <TIM_Base_SetConfig+0xe4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d108      	bne.n	8002600 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4a20      	ldr	r2, [pc, #128]	; (8002674 <TIM_Base_SetConfig+0xe8>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2280      	movs	r2, #128	; 0x80
 8002604:	4393      	bics	r3, r2
 8002606:	001a      	movs	r2, r3
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a0c      	ldr	r2, [pc, #48]	; (800265c <TIM_Base_SetConfig+0xd0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00b      	beq.n	8002646 <TIM_Base_SetConfig+0xba>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a0d      	ldr	r2, [pc, #52]	; (8002668 <TIM_Base_SetConfig+0xdc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d007      	beq.n	8002646 <TIM_Base_SetConfig+0xba>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a0c      	ldr	r2, [pc, #48]	; (800266c <TIM_Base_SetConfig+0xe0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d003      	beq.n	8002646 <TIM_Base_SetConfig+0xba>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a0b      	ldr	r2, [pc, #44]	; (8002670 <TIM_Base_SetConfig+0xe4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d103      	bne.n	800264e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	615a      	str	r2, [r3, #20]
}
 8002654:	46c0      	nop			; (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	b004      	add	sp, #16
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40000400 	.word	0x40000400
 8002664:	40002000 	.word	0x40002000
 8002668:	40014000 	.word	0x40014000
 800266c:	40014400 	.word	0x40014400
 8002670:	40014800 	.word	0x40014800
 8002674:	fffffcff 	.word	0xfffffcff

08002678 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	2201      	movs	r2, #1
 8002690:	4393      	bics	r3, r2
 8002692:	001a      	movs	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	22f0      	movs	r2, #240	; 0xf0
 80026a2:	4393      	bics	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	220a      	movs	r2, #10
 80026b4:	4393      	bics	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	4313      	orrs	r3, r2
 80026be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	621a      	str	r2, [r3, #32]
}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b006      	add	sp, #24
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	2210      	movs	r2, #16
 80026e6:	4393      	bics	r3, r2
 80026e8:	001a      	movs	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	4a0d      	ldr	r2, [pc, #52]	; (8002734 <TIM_TI2_ConfigInputStage+0x60>)
 80026fe:	4013      	ands	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	031b      	lsls	r3, r3, #12
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	22a0      	movs	r2, #160	; 0xa0
 8002710:	4393      	bics	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	621a      	str	r2, [r3, #32]
}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	46bd      	mov	sp, r7
 800272e:	b006      	add	sp, #24
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	ffff0fff 	.word	0xffff0fff

08002738 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4a08      	ldr	r2, [pc, #32]	; (800276c <TIM_ITRx_SetConfig+0x34>)
 800274c:	4013      	ands	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4313      	orrs	r3, r2
 8002756:	2207      	movs	r2, #7
 8002758:	4313      	orrs	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	609a      	str	r2, [r3, #8]
}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	46bd      	mov	sp, r7
 8002766:	b004      	add	sp, #16
 8002768:	bd80      	pop	{r7, pc}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	ffcfff8f 	.word	0xffcfff8f

08002770 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	4a09      	ldr	r2, [pc, #36]	; (80027ac <TIM_ETR_SetConfig+0x3c>)
 8002788:	4013      	ands	r3, r2
 800278a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	021a      	lsls	r2, r3, #8
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	431a      	orrs	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4313      	orrs	r3, r2
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	609a      	str	r2, [r3, #8]
}
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b006      	add	sp, #24
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	ffff00ff 	.word	0xffff00ff

080027b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	223c      	movs	r2, #60	; 0x3c
 80027be:	5c9b      	ldrb	r3, [r3, r2]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e04f      	b.n	8002868 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	223c      	movs	r2, #60	; 0x3c
 80027cc:	2101      	movs	r1, #1
 80027ce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	223d      	movs	r2, #61	; 0x3d
 80027d4:	2102      	movs	r1, #2
 80027d6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a20      	ldr	r2, [pc, #128]	; (8002870 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d108      	bne.n	8002804 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4a1f      	ldr	r2, [pc, #124]	; (8002874 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2270      	movs	r2, #112	; 0x70
 8002808:	4393      	bics	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a13      	ldr	r2, [pc, #76]	; (8002870 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d009      	beq.n	800283c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a12      	ldr	r2, [pc, #72]	; (8002878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d004      	beq.n	800283c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a11      	ldr	r2, [pc, #68]	; (800287c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d10c      	bne.n	8002856 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2280      	movs	r2, #128	; 0x80
 8002840:	4393      	bics	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	4313      	orrs	r3, r2
 800284c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	223d      	movs	r2, #61	; 0x3d
 800285a:	2101      	movs	r1, #1
 800285c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	223c      	movs	r2, #60	; 0x3c
 8002862:	2100      	movs	r1, #0
 8002864:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	0018      	movs	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	b004      	add	sp, #16
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40012c00 	.word	0x40012c00
 8002874:	ff0fffff 	.word	0xff0fffff
 8002878:	40000400 	.word	0x40000400
 800287c:	40014000 	.word	0x40014000

08002880 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e046      	b.n	8002920 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2288      	movs	r2, #136	; 0x88
 8002896:	589b      	ldr	r3, [r3, r2]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2284      	movs	r2, #132	; 0x84
 80028a0:	2100      	movs	r1, #0
 80028a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	0018      	movs	r0, r3
 80028a8:	f7fe f912 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2288      	movs	r2, #136	; 0x88
 80028b0:	2124      	movs	r1, #36	; 0x24
 80028b2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2101      	movs	r1, #1
 80028c0:	438a      	bics	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	0018      	movs	r0, r3
 80028c8:	f000 fc66 	bl	8003198 <UART_SetConfig>
 80028cc:	0003      	movs	r3, r0
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e024      	b.n	8002920 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	0018      	movs	r0, r3
 80028e2:	f000 fdfd 	bl	80034e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	490d      	ldr	r1, [pc, #52]	; (8002928 <HAL_UART_Init+0xa8>)
 80028f2:	400a      	ands	r2, r1
 80028f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	212a      	movs	r1, #42	; 0x2a
 8002902:	438a      	bics	r2, r1
 8002904:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2101      	movs	r1, #1
 8002912:	430a      	orrs	r2, r1
 8002914:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	0018      	movs	r0, r3
 800291a:	f000 fe95 	bl	8003648 <UART_CheckIdleState>
 800291e:	0003      	movs	r3, r0
}
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	b002      	add	sp, #8
 8002926:	bd80      	pop	{r7, pc}
 8002928:	ffffb7ff 	.word	0xffffb7ff

0800292c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	1dbb      	adds	r3, r7, #6
 800293a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2288      	movs	r2, #136	; 0x88
 8002940:	589b      	ldr	r3, [r3, r2]
 8002942:	2b20      	cmp	r3, #32
 8002944:	d000      	beq.n	8002948 <HAL_UART_Transmit+0x1c>
 8002946:	e088      	b.n	8002a5a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_UART_Transmit+0x2a>
 800294e:	1dbb      	adds	r3, r7, #6
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e080      	b.n	8002a5c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	015b      	lsls	r3, r3, #5
 8002962:	429a      	cmp	r2, r3
 8002964:	d109      	bne.n	800297a <HAL_UART_Transmit+0x4e>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d105      	bne.n	800297a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2201      	movs	r2, #1
 8002972:	4013      	ands	r3, r2
 8002974:	d001      	beq.n	800297a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e070      	b.n	8002a5c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2290      	movs	r2, #144	; 0x90
 800297e:	2100      	movs	r1, #0
 8002980:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2288      	movs	r2, #136	; 0x88
 8002986:	2121      	movs	r1, #33	; 0x21
 8002988:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800298a:	f7fe fa49 	bl	8000e20 <HAL_GetTick>
 800298e:	0003      	movs	r3, r0
 8002990:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1dba      	adds	r2, r7, #6
 8002996:	2154      	movs	r1, #84	; 0x54
 8002998:	8812      	ldrh	r2, [r2, #0]
 800299a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1dba      	adds	r2, r7, #6
 80029a0:	2156      	movs	r1, #86	; 0x56
 80029a2:	8812      	ldrh	r2, [r2, #0]
 80029a4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	015b      	lsls	r3, r3, #5
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d108      	bne.n	80029c4 <HAL_UART_Transmit+0x98>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d104      	bne.n	80029c4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	e003      	b.n	80029cc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029cc:	e02c      	b.n	8002a28 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	0013      	movs	r3, r2
 80029d8:	2200      	movs	r2, #0
 80029da:	2180      	movs	r1, #128	; 0x80
 80029dc:	f000 fe82 	bl	80036e4 <UART_WaitOnFlagUntilTimeout>
 80029e0:	1e03      	subs	r3, r0, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e039      	b.n	8002a5c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10b      	bne.n	8002a06 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	001a      	movs	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	05d2      	lsls	r2, r2, #23
 80029fa:	0dd2      	lsrs	r2, r2, #23
 80029fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	3302      	adds	r3, #2
 8002a02:	61bb      	str	r3, [r7, #24]
 8002a04:	e007      	b.n	8002a16 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	3301      	adds	r3, #1
 8002a14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2256      	movs	r2, #86	; 0x56
 8002a1a:	5a9b      	ldrh	r3, [r3, r2]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b299      	uxth	r1, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2256      	movs	r2, #86	; 0x56
 8002a26:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2256      	movs	r2, #86	; 0x56
 8002a2c:	5a9b      	ldrh	r3, [r3, r2]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1cc      	bne.n	80029ce <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	0013      	movs	r3, r2
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2140      	movs	r1, #64	; 0x40
 8002a42:	f000 fe4f 	bl	80036e4 <UART_WaitOnFlagUntilTimeout>
 8002a46:	1e03      	subs	r3, r0, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e006      	b.n	8002a5c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2288      	movs	r2, #136	; 0x88
 8002a52:	2120      	movs	r1, #32
 8002a54:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e000      	b.n	8002a5c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002a5a:	2302      	movs	r3, #2
  }
}
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b008      	add	sp, #32
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	1dbb      	adds	r3, r7, #6
 8002a70:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	228c      	movs	r2, #140	; 0x8c
 8002a76:	589b      	ldr	r3, [r3, r2]
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d145      	bne.n	8002b08 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_UART_Receive_IT+0x26>
 8002a82:	1dbb      	adds	r3, r7, #6
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e03d      	b.n	8002b0a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	015b      	lsls	r3, r3, #5
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d109      	bne.n	8002aae <HAL_UART_Receive_IT+0x4a>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d105      	bne.n	8002aae <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d001      	beq.n	8002aae <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e02d      	b.n	8002b0a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	041b      	lsls	r3, r3, #16
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d019      	beq.n	8002af6 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac6:	613b      	str	r3, [r7, #16]
  return(result);
 8002ac8:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	2301      	movs	r3, #1
 8002ace:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f383 8810 	msr	PRIMASK, r3
}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	04c9      	lsls	r1, r1, #19
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	f383 8810 	msr	PRIMASK, r3
}
 8002af4:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002af6:	1dbb      	adds	r3, r7, #6
 8002af8:	881a      	ldrh	r2, [r3, #0]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	0018      	movs	r0, r3
 8002b00:	f000 feb8 	bl	8003874 <UART_Start_Receive_IT>
 8002b04:	0003      	movs	r3, r0
 8002b06:	e000      	b.n	8002b0a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002b08:	2302      	movs	r3, #2
  }
}
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b008      	add	sp, #32
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b14:	b5b0      	push	{r4, r5, r7, lr}
 8002b16:	b0aa      	sub	sp, #168	; 0xa8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	22a4      	movs	r2, #164	; 0xa4
 8002b24:	18b9      	adds	r1, r7, r2
 8002b26:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	20a0      	movs	r0, #160	; 0xa0
 8002b30:	1839      	adds	r1, r7, r0
 8002b32:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	249c      	movs	r4, #156	; 0x9c
 8002b3c:	1939      	adds	r1, r7, r4
 8002b3e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b40:	0011      	movs	r1, r2
 8002b42:	18bb      	adds	r3, r7, r2
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4aa2      	ldr	r2, [pc, #648]	; (8002dd0 <HAL_UART_IRQHandler+0x2bc>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2298      	movs	r2, #152	; 0x98
 8002b4c:	18bd      	adds	r5, r7, r2
 8002b4e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002b50:	18bb      	adds	r3, r7, r2
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d11a      	bne.n	8002b8e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d015      	beq.n	8002b8e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002b62:	183b      	adds	r3, r7, r0
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2220      	movs	r2, #32
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d105      	bne.n	8002b78 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002b6c:	193b      	adds	r3, r7, r4
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	055b      	lsls	r3, r3, #21
 8002b74:	4013      	ands	r3, r2
 8002b76:	d00a      	beq.n	8002b8e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d100      	bne.n	8002b82 <HAL_UART_IRQHandler+0x6e>
 8002b80:	e2dc      	b.n	800313c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	0010      	movs	r0, r2
 8002b8a:	4798      	blx	r3
      }
      return;
 8002b8c:	e2d6      	b.n	800313c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b8e:	2398      	movs	r3, #152	; 0x98
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d100      	bne.n	8002b9a <HAL_UART_IRQHandler+0x86>
 8002b98:	e122      	b.n	8002de0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002b9a:	239c      	movs	r3, #156	; 0x9c
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a8c      	ldr	r2, [pc, #560]	; (8002dd4 <HAL_UART_IRQHandler+0x2c0>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d106      	bne.n	8002bb4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ba6:	23a0      	movs	r3, #160	; 0xa0
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a8a      	ldr	r2, [pc, #552]	; (8002dd8 <HAL_UART_IRQHandler+0x2c4>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d100      	bne.n	8002bb4 <HAL_UART_IRQHandler+0xa0>
 8002bb2:	e115      	b.n	8002de0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bb4:	23a4      	movs	r3, #164	; 0xa4
 8002bb6:	18fb      	adds	r3, r7, r3
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d012      	beq.n	8002be6 <HAL_UART_IRQHandler+0xd2>
 8002bc0:	23a0      	movs	r3, #160	; 0xa0
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d00b      	beq.n	8002be6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2290      	movs	r2, #144	; 0x90
 8002bda:	589b      	ldr	r3, [r3, r2]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2190      	movs	r1, #144	; 0x90
 8002be4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002be6:	23a4      	movs	r3, #164	; 0xa4
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2202      	movs	r2, #2
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d011      	beq.n	8002c16 <HAL_UART_IRQHandler+0x102>
 8002bf2:	239c      	movs	r3, #156	; 0x9c
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d00b      	beq.n	8002c16 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2202      	movs	r2, #2
 8002c04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2290      	movs	r2, #144	; 0x90
 8002c0a:	589b      	ldr	r3, [r3, r2]
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2190      	movs	r1, #144	; 0x90
 8002c14:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c16:	23a4      	movs	r3, #164	; 0xa4
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d011      	beq.n	8002c46 <HAL_UART_IRQHandler+0x132>
 8002c22:	239c      	movs	r3, #156	; 0x9c
 8002c24:	18fb      	adds	r3, r7, r3
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d00b      	beq.n	8002c46 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2204      	movs	r2, #4
 8002c34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2290      	movs	r2, #144	; 0x90
 8002c3a:	589b      	ldr	r3, [r3, r2]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2190      	movs	r1, #144	; 0x90
 8002c44:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c46:	23a4      	movs	r3, #164	; 0xa4
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d017      	beq.n	8002c82 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002c52:	23a0      	movs	r3, #160	; 0xa0
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d105      	bne.n	8002c6a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002c5e:	239c      	movs	r3, #156	; 0x9c
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a5b      	ldr	r2, [pc, #364]	; (8002dd4 <HAL_UART_IRQHandler+0x2c0>)
 8002c66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002c68:	d00b      	beq.n	8002c82 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2208      	movs	r2, #8
 8002c70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2290      	movs	r2, #144	; 0x90
 8002c76:	589b      	ldr	r3, [r3, r2]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2190      	movs	r1, #144	; 0x90
 8002c80:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c82:	23a4      	movs	r3, #164	; 0xa4
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d013      	beq.n	8002cb8 <HAL_UART_IRQHandler+0x1a4>
 8002c90:	23a0      	movs	r3, #160	; 0xa0
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	04db      	lsls	r3, r3, #19
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d00c      	beq.n	8002cb8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2280      	movs	r2, #128	; 0x80
 8002ca4:	0112      	lsls	r2, r2, #4
 8002ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2290      	movs	r2, #144	; 0x90
 8002cac:	589b      	ldr	r3, [r3, r2]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2190      	movs	r1, #144	; 0x90
 8002cb6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2290      	movs	r2, #144	; 0x90
 8002cbc:	589b      	ldr	r3, [r3, r2]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d100      	bne.n	8002cc4 <HAL_UART_IRQHandler+0x1b0>
 8002cc2:	e23d      	b.n	8003140 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002cc4:	23a4      	movs	r3, #164	; 0xa4
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d015      	beq.n	8002cfc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002cd0:	23a0      	movs	r3, #160	; 0xa0
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d106      	bne.n	8002cea <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002cdc:	239c      	movs	r3, #156	; 0x9c
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	055b      	lsls	r3, r3, #21
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d008      	beq.n	8002cfc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	0010      	movs	r0, r2
 8002cfa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2290      	movs	r2, #144	; 0x90
 8002d00:	589b      	ldr	r3, [r3, r2]
 8002d02:	2194      	movs	r1, #148	; 0x94
 8002d04:	187a      	adds	r2, r7, r1
 8002d06:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2240      	movs	r2, #64	; 0x40
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b40      	cmp	r3, #64	; 0x40
 8002d14:	d004      	beq.n	8002d20 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d16:	187b      	adds	r3, r7, r1
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2228      	movs	r2, #40	; 0x28
 8002d1c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d1e:	d04c      	beq.n	8002dba <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	0018      	movs	r0, r3
 8002d24:	f000 feca 	bl	8003abc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2240      	movs	r2, #64	; 0x40
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b40      	cmp	r3, #64	; 0x40
 8002d34:	d13c      	bne.n	8002db0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d36:	f3ef 8310 	mrs	r3, PRIMASK
 8002d3a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002d3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d3e:	2090      	movs	r0, #144	; 0x90
 8002d40:	183a      	adds	r2, r7, r0
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	2301      	movs	r3, #1
 8002d46:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d4a:	f383 8810 	msr	PRIMASK, r3
}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2140      	movs	r1, #64	; 0x40
 8002d5c:	438a      	bics	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	183b      	adds	r3, r7, r0
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d68:	f383 8810 	msr	PRIMASK, r3
}
 8002d6c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2280      	movs	r2, #128	; 0x80
 8002d72:	589b      	ldr	r3, [r3, r2]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d016      	beq.n	8002da6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2280      	movs	r2, #128	; 0x80
 8002d7c:	589b      	ldr	r3, [r3, r2]
 8002d7e:	4a17      	ldr	r2, [pc, #92]	; (8002ddc <HAL_UART_IRQHandler+0x2c8>)
 8002d80:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2280      	movs	r2, #128	; 0x80
 8002d86:	589b      	ldr	r3, [r3, r2]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f7fe f9cd 	bl	8001128 <HAL_DMA_Abort_IT>
 8002d8e:	1e03      	subs	r3, r0, #0
 8002d90:	d01c      	beq.n	8002dcc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2280      	movs	r2, #128	; 0x80
 8002d96:	589b      	ldr	r3, [r3, r2]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	2180      	movs	r1, #128	; 0x80
 8002d9e:	5852      	ldr	r2, [r2, r1]
 8002da0:	0010      	movs	r0, r2
 8002da2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da4:	e012      	b.n	8002dcc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f000 f9e1 	bl	8003170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dae:	e00d      	b.n	8002dcc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 f9dc 	bl	8003170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db8:	e008      	b.n	8002dcc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f000 f9d7 	bl	8003170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2290      	movs	r2, #144	; 0x90
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002dca:	e1b9      	b.n	8003140 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dcc:	46c0      	nop			; (mov r8, r8)
    return;
 8002dce:	e1b7      	b.n	8003140 <HAL_UART_IRQHandler+0x62c>
 8002dd0:	0000080f 	.word	0x0000080f
 8002dd4:	10000001 	.word	0x10000001
 8002dd8:	04000120 	.word	0x04000120
 8002ddc:	08003b89 	.word	0x08003b89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d000      	beq.n	8002dea <HAL_UART_IRQHandler+0x2d6>
 8002de8:	e13e      	b.n	8003068 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002dea:	23a4      	movs	r3, #164	; 0xa4
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2210      	movs	r2, #16
 8002df2:	4013      	ands	r3, r2
 8002df4:	d100      	bne.n	8002df8 <HAL_UART_IRQHandler+0x2e4>
 8002df6:	e137      	b.n	8003068 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002df8:	23a0      	movs	r3, #160	; 0xa0
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2210      	movs	r2, #16
 8002e00:	4013      	ands	r3, r2
 8002e02:	d100      	bne.n	8002e06 <HAL_UART_IRQHandler+0x2f2>
 8002e04:	e130      	b.n	8003068 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2240      	movs	r2, #64	; 0x40
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b40      	cmp	r3, #64	; 0x40
 8002e1a:	d000      	beq.n	8002e1e <HAL_UART_IRQHandler+0x30a>
 8002e1c:	e0a4      	b.n	8002f68 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2280      	movs	r2, #128	; 0x80
 8002e22:	589b      	ldr	r3, [r3, r2]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	217e      	movs	r1, #126	; 0x7e
 8002e2a:	187b      	adds	r3, r7, r1
 8002e2c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002e2e:	187b      	adds	r3, r7, r1
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d100      	bne.n	8002e38 <HAL_UART_IRQHandler+0x324>
 8002e36:	e185      	b.n	8003144 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	225c      	movs	r2, #92	; 0x5c
 8002e3c:	5a9b      	ldrh	r3, [r3, r2]
 8002e3e:	187a      	adds	r2, r7, r1
 8002e40:	8812      	ldrh	r2, [r2, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d300      	bcc.n	8002e48 <HAL_UART_IRQHandler+0x334>
 8002e46:	e17d      	b.n	8003144 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	187a      	adds	r2, r7, r1
 8002e4c:	215e      	movs	r1, #94	; 0x5e
 8002e4e:	8812      	ldrh	r2, [r2, #0]
 8002e50:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2280      	movs	r2, #128	; 0x80
 8002e56:	589b      	ldr	r3, [r3, r2]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d170      	bne.n	8002f44 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e62:	f3ef 8310 	mrs	r3, PRIMASK
 8002e66:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e72:	f383 8810 	msr	PRIMASK, r3
}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	49b4      	ldr	r1, [pc, #720]	; (8003154 <HAL_UART_IRQHandler+0x640>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8e:	f383 8810 	msr	PRIMASK, r3
}
 8002e92:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e94:	f3ef 8310 	mrs	r3, PRIMASK
 8002e98:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9c:	677b      	str	r3, [r7, #116]	; 0x74
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea4:	f383 8810 	msr	PRIMASK, r3
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	438a      	bics	r2, r1
 8002eb8:	609a      	str	r2, [r3, #8]
 8002eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ebc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec0:	f383 8810 	msr	PRIMASK, r3
}
 8002ec4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eca:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ece:	673b      	str	r3, [r7, #112]	; 0x70
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed6:	f383 8810 	msr	PRIMASK, r3
}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2140      	movs	r1, #64	; 0x40
 8002ee8:	438a      	bics	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eee:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef2:	f383 8810 	msr	PRIMASK, r3
}
 8002ef6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	228c      	movs	r2, #140	; 0x8c
 8002efc:	2120      	movs	r1, #32
 8002efe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f06:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f10:	2301      	movs	r3, #1
 8002f12:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f16:	f383 8810 	msr	PRIMASK, r3
}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2110      	movs	r1, #16
 8002f28:	438a      	bics	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f32:	f383 8810 	msr	PRIMASK, r3
}
 8002f36:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2280      	movs	r2, #128	; 0x80
 8002f3c:	589b      	ldr	r3, [r3, r2]
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f7fe f890 	bl	8001064 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	225c      	movs	r2, #92	; 0x5c
 8002f4e:	5a9a      	ldrh	r2, [r3, r2]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	215e      	movs	r1, #94	; 0x5e
 8002f54:	5a5b      	ldrh	r3, [r3, r1]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	0011      	movs	r1, r2
 8002f60:	0018      	movs	r0, r3
 8002f62:	f000 f90d 	bl	8003180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f66:	e0ed      	b.n	8003144 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	225c      	movs	r2, #92	; 0x5c
 8002f6c:	5a99      	ldrh	r1, [r3, r2]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	225e      	movs	r2, #94	; 0x5e
 8002f72:	5a9b      	ldrh	r3, [r3, r2]
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	208e      	movs	r0, #142	; 0x8e
 8002f78:	183b      	adds	r3, r7, r0
 8002f7a:	1a8a      	subs	r2, r1, r2
 8002f7c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	225e      	movs	r2, #94	; 0x5e
 8002f82:	5a9b      	ldrh	r3, [r3, r2]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d100      	bne.n	8002f8c <HAL_UART_IRQHandler+0x478>
 8002f8a:	e0dd      	b.n	8003148 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002f8c:	183b      	adds	r3, r7, r0
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d100      	bne.n	8002f96 <HAL_UART_IRQHandler+0x482>
 8002f94:	e0d8      	b.n	8003148 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f96:	f3ef 8310 	mrs	r3, PRIMASK
 8002f9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f9e:	2488      	movs	r4, #136	; 0x88
 8002fa0:	193a      	adds	r2, r7, r4
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f383 8810 	msr	PRIMASK, r3
}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4967      	ldr	r1, [pc, #412]	; (8003158 <HAL_UART_IRQHandler+0x644>)
 8002fbc:	400a      	ands	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	193b      	adds	r3, r7, r4
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f383 8810 	msr	PRIMASK, r3
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fce:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002fd4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002fd6:	2484      	movs	r4, #132	; 0x84
 8002fd8:	193a      	adds	r2, r7, r4
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	2301      	movs	r3, #1
 8002fde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f383 8810 	msr	PRIMASK, r3
}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	495a      	ldr	r1, [pc, #360]	; (800315c <HAL_UART_IRQHandler+0x648>)
 8002ff4:	400a      	ands	r2, r1
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	f383 8810 	msr	PRIMASK, r3
}
 8003004:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	228c      	movs	r2, #140	; 0x8c
 800300a:	2120      	movs	r1, #32
 800300c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800301a:	f3ef 8310 	mrs	r3, PRIMASK
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003022:	2480      	movs	r4, #128	; 0x80
 8003024:	193a      	adds	r2, r7, r4
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	2301      	movs	r3, #1
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	f383 8810 	msr	PRIMASK, r3
}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2110      	movs	r1, #16
 8003040:	438a      	bics	r2, r1
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	193b      	adds	r3, r7, r4
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304c:	f383 8810 	msr	PRIMASK, r3
}
 8003050:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2202      	movs	r2, #2
 8003056:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003058:	183b      	adds	r3, r7, r0
 800305a:	881a      	ldrh	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	0011      	movs	r1, r2
 8003060:	0018      	movs	r0, r3
 8003062:	f000 f88d 	bl	8003180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003066:	e06f      	b.n	8003148 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003068:	23a4      	movs	r3, #164	; 0xa4
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	2380      	movs	r3, #128	; 0x80
 8003070:	035b      	lsls	r3, r3, #13
 8003072:	4013      	ands	r3, r2
 8003074:	d010      	beq.n	8003098 <HAL_UART_IRQHandler+0x584>
 8003076:	239c      	movs	r3, #156	; 0x9c
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	03db      	lsls	r3, r3, #15
 8003080:	4013      	ands	r3, r2
 8003082:	d009      	beq.n	8003098 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2280      	movs	r2, #128	; 0x80
 800308a:	0352      	lsls	r2, r2, #13
 800308c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	0018      	movs	r0, r3
 8003092:	f001 fa1d 	bl	80044d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003096:	e05a      	b.n	800314e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003098:	23a4      	movs	r3, #164	; 0xa4
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2280      	movs	r2, #128	; 0x80
 80030a0:	4013      	ands	r3, r2
 80030a2:	d016      	beq.n	80030d2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80030a4:	23a0      	movs	r3, #160	; 0xa0
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2280      	movs	r2, #128	; 0x80
 80030ac:	4013      	ands	r3, r2
 80030ae:	d106      	bne.n	80030be <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80030b0:	239c      	movs	r3, #156	; 0x9c
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	041b      	lsls	r3, r3, #16
 80030ba:	4013      	ands	r3, r2
 80030bc:	d009      	beq.n	80030d2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d042      	beq.n	800314c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	0010      	movs	r0, r2
 80030ce:	4798      	blx	r3
    }
    return;
 80030d0:	e03c      	b.n	800314c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80030d2:	23a4      	movs	r3, #164	; 0xa4
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2240      	movs	r2, #64	; 0x40
 80030da:	4013      	ands	r3, r2
 80030dc:	d00a      	beq.n	80030f4 <HAL_UART_IRQHandler+0x5e0>
 80030de:	23a0      	movs	r3, #160	; 0xa0
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2240      	movs	r2, #64	; 0x40
 80030e6:	4013      	ands	r3, r2
 80030e8:	d004      	beq.n	80030f4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	0018      	movs	r0, r3
 80030ee:	f000 fd62 	bl	8003bb6 <UART_EndTransmit_IT>
    return;
 80030f2:	e02c      	b.n	800314e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80030f4:	23a4      	movs	r3, #164	; 0xa4
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	4013      	ands	r3, r2
 8003100:	d00b      	beq.n	800311a <HAL_UART_IRQHandler+0x606>
 8003102:	23a0      	movs	r3, #160	; 0xa0
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	05db      	lsls	r3, r3, #23
 800310c:	4013      	ands	r3, r2
 800310e:	d004      	beq.n	800311a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	0018      	movs	r0, r3
 8003114:	f001 f9ec 	bl	80044f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003118:	e019      	b.n	800314e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800311a:	23a4      	movs	r3, #164	; 0xa4
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	045b      	lsls	r3, r3, #17
 8003124:	4013      	ands	r3, r2
 8003126:	d012      	beq.n	800314e <HAL_UART_IRQHandler+0x63a>
 8003128:	23a0      	movs	r3, #160	; 0xa0
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	da0d      	bge.n	800314e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	0018      	movs	r0, r3
 8003136:	f001 f9d3 	bl	80044e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800313a:	e008      	b.n	800314e <HAL_UART_IRQHandler+0x63a>
      return;
 800313c:	46c0      	nop			; (mov r8, r8)
 800313e:	e006      	b.n	800314e <HAL_UART_IRQHandler+0x63a>
    return;
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	e004      	b.n	800314e <HAL_UART_IRQHandler+0x63a>
      return;
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	e002      	b.n	800314e <HAL_UART_IRQHandler+0x63a>
      return;
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	e000      	b.n	800314e <HAL_UART_IRQHandler+0x63a>
    return;
 800314c:	46c0      	nop			; (mov r8, r8)
  }
}
 800314e:	46bd      	mov	sp, r7
 8003150:	b02a      	add	sp, #168	; 0xa8
 8003152:	bdb0      	pop	{r4, r5, r7, pc}
 8003154:	fffffeff 	.word	0xfffffeff
 8003158:	fffffedf 	.word	0xfffffedf
 800315c:	effffffe 	.word	0xeffffffe

08003160 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	b002      	add	sp, #8
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	46bd      	mov	sp, r7
 800317c:	b002      	add	sp, #8
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	000a      	movs	r2, r1
 800318a:	1cbb      	adds	r3, r7, #2
 800318c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	46bd      	mov	sp, r7
 8003192:	b002      	add	sp, #8
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031a0:	231a      	movs	r3, #26
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4abc      	ldr	r2, [pc, #752]	; (80034b8 <UART_SetConfig+0x320>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	0019      	movs	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4ab7      	ldr	r2, [pc, #732]	; (80034bc <UART_SetConfig+0x324>)
 80031de:	4013      	ands	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4aae      	ldr	r2, [pc, #696]	; (80034c0 <UART_SetConfig+0x328>)
 8003206:	4013      	ands	r3, r2
 8003208:	0019      	movs	r1, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	430a      	orrs	r2, r1
 8003212:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	220f      	movs	r2, #15
 800321c:	4393      	bics	r3, r2
 800321e:	0019      	movs	r1, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4aa4      	ldr	r2, [pc, #656]	; (80034c4 <UART_SetConfig+0x32c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d127      	bne.n	8003286 <UART_SetConfig+0xee>
 8003236:	4ba4      	ldr	r3, [pc, #656]	; (80034c8 <UART_SetConfig+0x330>)
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	2203      	movs	r2, #3
 800323c:	4013      	ands	r3, r2
 800323e:	2b03      	cmp	r3, #3
 8003240:	d017      	beq.n	8003272 <UART_SetConfig+0xda>
 8003242:	d81b      	bhi.n	800327c <UART_SetConfig+0xe4>
 8003244:	2b02      	cmp	r3, #2
 8003246:	d00a      	beq.n	800325e <UART_SetConfig+0xc6>
 8003248:	d818      	bhi.n	800327c <UART_SetConfig+0xe4>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <UART_SetConfig+0xbc>
 800324e:	2b01      	cmp	r3, #1
 8003250:	d00a      	beq.n	8003268 <UART_SetConfig+0xd0>
 8003252:	e013      	b.n	800327c <UART_SetConfig+0xe4>
 8003254:	231b      	movs	r3, #27
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e058      	b.n	8003310 <UART_SetConfig+0x178>
 800325e:	231b      	movs	r3, #27
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	2202      	movs	r2, #2
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	e053      	b.n	8003310 <UART_SetConfig+0x178>
 8003268:	231b      	movs	r3, #27
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	2204      	movs	r2, #4
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	e04e      	b.n	8003310 <UART_SetConfig+0x178>
 8003272:	231b      	movs	r3, #27
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	2208      	movs	r2, #8
 8003278:	701a      	strb	r2, [r3, #0]
 800327a:	e049      	b.n	8003310 <UART_SetConfig+0x178>
 800327c:	231b      	movs	r3, #27
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	2210      	movs	r2, #16
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e044      	b.n	8003310 <UART_SetConfig+0x178>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a90      	ldr	r2, [pc, #576]	; (80034cc <UART_SetConfig+0x334>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d127      	bne.n	80032e0 <UART_SetConfig+0x148>
 8003290:	4b8d      	ldr	r3, [pc, #564]	; (80034c8 <UART_SetConfig+0x330>)
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	220c      	movs	r2, #12
 8003296:	4013      	ands	r3, r2
 8003298:	2b0c      	cmp	r3, #12
 800329a:	d017      	beq.n	80032cc <UART_SetConfig+0x134>
 800329c:	d81b      	bhi.n	80032d6 <UART_SetConfig+0x13e>
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d00a      	beq.n	80032b8 <UART_SetConfig+0x120>
 80032a2:	d818      	bhi.n	80032d6 <UART_SetConfig+0x13e>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <UART_SetConfig+0x116>
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d00a      	beq.n	80032c2 <UART_SetConfig+0x12a>
 80032ac:	e013      	b.n	80032d6 <UART_SetConfig+0x13e>
 80032ae:	231b      	movs	r3, #27
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e02b      	b.n	8003310 <UART_SetConfig+0x178>
 80032b8:	231b      	movs	r3, #27
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	2202      	movs	r2, #2
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	e026      	b.n	8003310 <UART_SetConfig+0x178>
 80032c2:	231b      	movs	r3, #27
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	2204      	movs	r2, #4
 80032c8:	701a      	strb	r2, [r3, #0]
 80032ca:	e021      	b.n	8003310 <UART_SetConfig+0x178>
 80032cc:	231b      	movs	r3, #27
 80032ce:	18fb      	adds	r3, r7, r3
 80032d0:	2208      	movs	r2, #8
 80032d2:	701a      	strb	r2, [r3, #0]
 80032d4:	e01c      	b.n	8003310 <UART_SetConfig+0x178>
 80032d6:	231b      	movs	r3, #27
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	2210      	movs	r2, #16
 80032dc:	701a      	strb	r2, [r3, #0]
 80032de:	e017      	b.n	8003310 <UART_SetConfig+0x178>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a7a      	ldr	r2, [pc, #488]	; (80034d0 <UART_SetConfig+0x338>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d104      	bne.n	80032f4 <UART_SetConfig+0x15c>
 80032ea:	231b      	movs	r3, #27
 80032ec:	18fb      	adds	r3, r7, r3
 80032ee:	2200      	movs	r2, #0
 80032f0:	701a      	strb	r2, [r3, #0]
 80032f2:	e00d      	b.n	8003310 <UART_SetConfig+0x178>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a76      	ldr	r2, [pc, #472]	; (80034d4 <UART_SetConfig+0x33c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d104      	bne.n	8003308 <UART_SetConfig+0x170>
 80032fe:	231b      	movs	r3, #27
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
 8003306:	e003      	b.n	8003310 <UART_SetConfig+0x178>
 8003308:	231b      	movs	r3, #27
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	2210      	movs	r2, #16
 800330e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69da      	ldr	r2, [r3, #28]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	429a      	cmp	r2, r3
 800331a:	d000      	beq.n	800331e <UART_SetConfig+0x186>
 800331c:	e065      	b.n	80033ea <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800331e:	231b      	movs	r3, #27
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d015      	beq.n	8003354 <UART_SetConfig+0x1bc>
 8003328:	dc18      	bgt.n	800335c <UART_SetConfig+0x1c4>
 800332a:	2b04      	cmp	r3, #4
 800332c:	d00d      	beq.n	800334a <UART_SetConfig+0x1b2>
 800332e:	dc15      	bgt.n	800335c <UART_SetConfig+0x1c4>
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <UART_SetConfig+0x1a2>
 8003334:	2b02      	cmp	r3, #2
 8003336:	d005      	beq.n	8003344 <UART_SetConfig+0x1ac>
 8003338:	e010      	b.n	800335c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800333a:	f7fe fe61 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 800333e:	0003      	movs	r3, r0
 8003340:	617b      	str	r3, [r7, #20]
        break;
 8003342:	e012      	b.n	800336a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003344:	4b64      	ldr	r3, [pc, #400]	; (80034d8 <UART_SetConfig+0x340>)
 8003346:	617b      	str	r3, [r7, #20]
        break;
 8003348:	e00f      	b.n	800336a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800334a:	f7fe fdcd 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 800334e:	0003      	movs	r3, r0
 8003350:	617b      	str	r3, [r7, #20]
        break;
 8003352:	e00a      	b.n	800336a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003354:	2380      	movs	r3, #128	; 0x80
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	617b      	str	r3, [r7, #20]
        break;
 800335a:	e006      	b.n	800336a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003360:	231a      	movs	r3, #26
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	2201      	movs	r2, #1
 8003366:	701a      	strb	r2, [r3, #0]
        break;
 8003368:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d100      	bne.n	8003372 <UART_SetConfig+0x1da>
 8003370:	e08d      	b.n	800348e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003376:	4b59      	ldr	r3, [pc, #356]	; (80034dc <UART_SetConfig+0x344>)
 8003378:	0052      	lsls	r2, r2, #1
 800337a:	5ad3      	ldrh	r3, [r2, r3]
 800337c:	0019      	movs	r1, r3
 800337e:	6978      	ldr	r0, [r7, #20]
 8003380:	f7fc febe 	bl	8000100 <__udivsi3>
 8003384:	0003      	movs	r3, r0
 8003386:	005a      	lsls	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	085b      	lsrs	r3, r3, #1
 800338e:	18d2      	adds	r2, r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	0019      	movs	r1, r3
 8003396:	0010      	movs	r0, r2
 8003398:	f7fc feb2 	bl	8000100 <__udivsi3>
 800339c:	0003      	movs	r3, r0
 800339e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	2b0f      	cmp	r3, #15
 80033a4:	d91c      	bls.n	80033e0 <UART_SetConfig+0x248>
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	025b      	lsls	r3, r3, #9
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d217      	bcs.n	80033e0 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	200e      	movs	r0, #14
 80033b6:	183b      	adds	r3, r7, r0
 80033b8:	210f      	movs	r1, #15
 80033ba:	438a      	bics	r2, r1
 80033bc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2207      	movs	r2, #7
 80033c6:	4013      	ands	r3, r2
 80033c8:	b299      	uxth	r1, r3
 80033ca:	183b      	adds	r3, r7, r0
 80033cc:	183a      	adds	r2, r7, r0
 80033ce:	8812      	ldrh	r2, [r2, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	183a      	adds	r2, r7, r0
 80033da:	8812      	ldrh	r2, [r2, #0]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	e056      	b.n	800348e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80033e0:	231a      	movs	r3, #26
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	2201      	movs	r2, #1
 80033e6:	701a      	strb	r2, [r3, #0]
 80033e8:	e051      	b.n	800348e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033ea:	231b      	movs	r3, #27
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d015      	beq.n	8003420 <UART_SetConfig+0x288>
 80033f4:	dc18      	bgt.n	8003428 <UART_SetConfig+0x290>
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d00d      	beq.n	8003416 <UART_SetConfig+0x27e>
 80033fa:	dc15      	bgt.n	8003428 <UART_SetConfig+0x290>
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <UART_SetConfig+0x26e>
 8003400:	2b02      	cmp	r3, #2
 8003402:	d005      	beq.n	8003410 <UART_SetConfig+0x278>
 8003404:	e010      	b.n	8003428 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003406:	f7fe fdfb 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 800340a:	0003      	movs	r3, r0
 800340c:	617b      	str	r3, [r7, #20]
        break;
 800340e:	e012      	b.n	8003436 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003410:	4b31      	ldr	r3, [pc, #196]	; (80034d8 <UART_SetConfig+0x340>)
 8003412:	617b      	str	r3, [r7, #20]
        break;
 8003414:	e00f      	b.n	8003436 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003416:	f7fe fd67 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 800341a:	0003      	movs	r3, r0
 800341c:	617b      	str	r3, [r7, #20]
        break;
 800341e:	e00a      	b.n	8003436 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	617b      	str	r3, [r7, #20]
        break;
 8003426:	e006      	b.n	8003436 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800342c:	231a      	movs	r3, #26
 800342e:	18fb      	adds	r3, r7, r3
 8003430:	2201      	movs	r2, #1
 8003432:	701a      	strb	r2, [r3, #0]
        break;
 8003434:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d028      	beq.n	800348e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003440:	4b26      	ldr	r3, [pc, #152]	; (80034dc <UART_SetConfig+0x344>)
 8003442:	0052      	lsls	r2, r2, #1
 8003444:	5ad3      	ldrh	r3, [r2, r3]
 8003446:	0019      	movs	r1, r3
 8003448:	6978      	ldr	r0, [r7, #20]
 800344a:	f7fc fe59 	bl	8000100 <__udivsi3>
 800344e:	0003      	movs	r3, r0
 8003450:	001a      	movs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	18d2      	adds	r2, r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	0019      	movs	r1, r3
 8003460:	0010      	movs	r0, r2
 8003462:	f7fc fe4d 	bl	8000100 <__udivsi3>
 8003466:	0003      	movs	r3, r0
 8003468:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	2b0f      	cmp	r3, #15
 800346e:	d90a      	bls.n	8003486 <UART_SetConfig+0x2ee>
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	025b      	lsls	r3, r3, #9
 8003476:	429a      	cmp	r2, r3
 8003478:	d205      	bcs.n	8003486 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	b29a      	uxth	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60da      	str	r2, [r3, #12]
 8003484:	e003      	b.n	800348e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003486:	231a      	movs	r3, #26
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	226a      	movs	r2, #106	; 0x6a
 8003492:	2101      	movs	r1, #1
 8003494:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2268      	movs	r2, #104	; 0x68
 800349a:	2101      	movs	r1, #1
 800349c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80034aa:	231a      	movs	r3, #26
 80034ac:	18fb      	adds	r3, r7, r3
 80034ae:	781b      	ldrb	r3, [r3, #0]
}
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b008      	add	sp, #32
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	cfff69f3 	.word	0xcfff69f3
 80034bc:	ffffcfff 	.word	0xffffcfff
 80034c0:	11fff4ff 	.word	0x11fff4ff
 80034c4:	40013800 	.word	0x40013800
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40004400 	.word	0x40004400
 80034d0:	40004800 	.word	0x40004800
 80034d4:	40004c00 	.word	0x40004c00
 80034d8:	00f42400 	.word	0x00f42400
 80034dc:	08004804 	.word	0x08004804

080034e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	2201      	movs	r2, #1
 80034ee:	4013      	ands	r3, r2
 80034f0:	d00b      	beq.n	800350a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	4a4a      	ldr	r2, [pc, #296]	; (8003624 <UART_AdvFeatureConfig+0x144>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	0019      	movs	r1, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	2202      	movs	r2, #2
 8003510:	4013      	ands	r3, r2
 8003512:	d00b      	beq.n	800352c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4a43      	ldr	r2, [pc, #268]	; (8003628 <UART_AdvFeatureConfig+0x148>)
 800351c:	4013      	ands	r3, r2
 800351e:	0019      	movs	r1, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	2204      	movs	r2, #4
 8003532:	4013      	ands	r3, r2
 8003534:	d00b      	beq.n	800354e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4a3b      	ldr	r2, [pc, #236]	; (800362c <UART_AdvFeatureConfig+0x14c>)
 800353e:	4013      	ands	r3, r2
 8003540:	0019      	movs	r1, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	2208      	movs	r2, #8
 8003554:	4013      	ands	r3, r2
 8003556:	d00b      	beq.n	8003570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4a34      	ldr	r2, [pc, #208]	; (8003630 <UART_AdvFeatureConfig+0x150>)
 8003560:	4013      	ands	r3, r2
 8003562:	0019      	movs	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	2210      	movs	r2, #16
 8003576:	4013      	ands	r3, r2
 8003578:	d00b      	beq.n	8003592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4a2c      	ldr	r2, [pc, #176]	; (8003634 <UART_AdvFeatureConfig+0x154>)
 8003582:	4013      	ands	r3, r2
 8003584:	0019      	movs	r1, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	2220      	movs	r2, #32
 8003598:	4013      	ands	r3, r2
 800359a:	d00b      	beq.n	80035b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	4a25      	ldr	r2, [pc, #148]	; (8003638 <UART_AdvFeatureConfig+0x158>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	0019      	movs	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	2240      	movs	r2, #64	; 0x40
 80035ba:	4013      	ands	r3, r2
 80035bc:	d01d      	beq.n	80035fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4a1d      	ldr	r2, [pc, #116]	; (800363c <UART_AdvFeatureConfig+0x15c>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	035b      	lsls	r3, r3, #13
 80035de:	429a      	cmp	r2, r3
 80035e0:	d10b      	bne.n	80035fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	4a15      	ldr	r2, [pc, #84]	; (8003640 <UART_AdvFeatureConfig+0x160>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	0019      	movs	r1, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	2280      	movs	r2, #128	; 0x80
 8003600:	4013      	ands	r3, r2
 8003602:	d00b      	beq.n	800361c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4a0e      	ldr	r2, [pc, #56]	; (8003644 <UART_AdvFeatureConfig+0x164>)
 800360c:	4013      	ands	r3, r2
 800360e:	0019      	movs	r1, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	605a      	str	r2, [r3, #4]
  }
}
 800361c:	46c0      	nop			; (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	b002      	add	sp, #8
 8003622:	bd80      	pop	{r7, pc}
 8003624:	fffdffff 	.word	0xfffdffff
 8003628:	fffeffff 	.word	0xfffeffff
 800362c:	fffbffff 	.word	0xfffbffff
 8003630:	ffff7fff 	.word	0xffff7fff
 8003634:	ffffefff 	.word	0xffffefff
 8003638:	ffffdfff 	.word	0xffffdfff
 800363c:	ffefffff 	.word	0xffefffff
 8003640:	ff9fffff 	.word	0xff9fffff
 8003644:	fff7ffff 	.word	0xfff7ffff

08003648 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af02      	add	r7, sp, #8
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2290      	movs	r2, #144	; 0x90
 8003654:	2100      	movs	r1, #0
 8003656:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003658:	f7fd fbe2 	bl	8000e20 <HAL_GetTick>
 800365c:	0003      	movs	r3, r0
 800365e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2208      	movs	r2, #8
 8003668:	4013      	ands	r3, r2
 800366a:	2b08      	cmp	r3, #8
 800366c:	d10c      	bne.n	8003688 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2280      	movs	r2, #128	; 0x80
 8003672:	0391      	lsls	r1, r2, #14
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4a1a      	ldr	r2, [pc, #104]	; (80036e0 <UART_CheckIdleState+0x98>)
 8003678:	9200      	str	r2, [sp, #0]
 800367a:	2200      	movs	r2, #0
 800367c:	f000 f832 	bl	80036e4 <UART_WaitOnFlagUntilTimeout>
 8003680:	1e03      	subs	r3, r0, #0
 8003682:	d001      	beq.n	8003688 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e026      	b.n	80036d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2204      	movs	r2, #4
 8003690:	4013      	ands	r3, r2
 8003692:	2b04      	cmp	r3, #4
 8003694:	d10c      	bne.n	80036b0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2280      	movs	r2, #128	; 0x80
 800369a:	03d1      	lsls	r1, r2, #15
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4a10      	ldr	r2, [pc, #64]	; (80036e0 <UART_CheckIdleState+0x98>)
 80036a0:	9200      	str	r2, [sp, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f000 f81e 	bl	80036e4 <UART_WaitOnFlagUntilTimeout>
 80036a8:	1e03      	subs	r3, r0, #0
 80036aa:	d001      	beq.n	80036b0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e012      	b.n	80036d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2288      	movs	r2, #136	; 0x88
 80036b4:	2120      	movs	r1, #32
 80036b6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	228c      	movs	r2, #140	; 0x8c
 80036bc:	2120      	movs	r1, #32
 80036be:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2284      	movs	r2, #132	; 0x84
 80036d0:	2100      	movs	r1, #0
 80036d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	0018      	movs	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	b004      	add	sp, #16
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	01ffffff 	.word	0x01ffffff

080036e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b094      	sub	sp, #80	; 0x50
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	1dfb      	adds	r3, r7, #7
 80036f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f4:	e0a7      	b.n	8003846 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036f8:	3301      	adds	r3, #1
 80036fa:	d100      	bne.n	80036fe <UART_WaitOnFlagUntilTimeout+0x1a>
 80036fc:	e0a3      	b.n	8003846 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fe:	f7fd fb8f 	bl	8000e20 <HAL_GetTick>
 8003702:	0002      	movs	r2, r0
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800370a:	429a      	cmp	r2, r3
 800370c:	d302      	bcc.n	8003714 <UART_WaitOnFlagUntilTimeout+0x30>
 800370e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003710:	2b00      	cmp	r3, #0
 8003712:	d13f      	bne.n	8003794 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003714:	f3ef 8310 	mrs	r3, PRIMASK
 8003718:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800371a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800371c:	647b      	str	r3, [r7, #68]	; 0x44
 800371e:	2301      	movs	r3, #1
 8003720:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003724:	f383 8810 	msr	PRIMASK, r3
}
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	494e      	ldr	r1, [pc, #312]	; (8003870 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003736:	400a      	ands	r2, r1
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800373c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	f383 8810 	msr	PRIMASK, r3
}
 8003744:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003746:	f3ef 8310 	mrs	r3, PRIMASK
 800374a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800374c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800374e:	643b      	str	r3, [r7, #64]	; 0x40
 8003750:	2301      	movs	r3, #1
 8003752:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003756:	f383 8810 	msr	PRIMASK, r3
}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2101      	movs	r1, #1
 8003768:	438a      	bics	r2, r1
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003772:	f383 8810 	msr	PRIMASK, r3
}
 8003776:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2288      	movs	r2, #136	; 0x88
 800377c:	2120      	movs	r1, #32
 800377e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	228c      	movs	r2, #140	; 0x8c
 8003784:	2120      	movs	r1, #32
 8003786:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2284      	movs	r2, #132	; 0x84
 800378c:	2100      	movs	r1, #0
 800378e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e069      	b.n	8003868 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2204      	movs	r2, #4
 800379c:	4013      	ands	r3, r2
 800379e:	d052      	beq.n	8003846 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	69da      	ldr	r2, [r3, #28]
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	401a      	ands	r2, r3
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d148      	bne.n	8003846 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2280      	movs	r2, #128	; 0x80
 80037ba:	0112      	lsls	r2, r2, #4
 80037bc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037be:	f3ef 8310 	mrs	r3, PRIMASK
 80037c2:	613b      	str	r3, [r7, #16]
  return(result);
 80037c4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80037c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037c8:	2301      	movs	r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f383 8810 	msr	PRIMASK, r3
}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4924      	ldr	r1, [pc, #144]	; (8003870 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80037e0:	400a      	ands	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f383 8810 	msr	PRIMASK, r3
}
 80037ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f0:	f3ef 8310 	mrs	r3, PRIMASK
 80037f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80037f6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80037fa:	2301      	movs	r3, #1
 80037fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f383 8810 	msr	PRIMASK, r3
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2101      	movs	r1, #1
 8003812:	438a      	bics	r2, r1
 8003814:	609a      	str	r2, [r3, #8]
 8003816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	f383 8810 	msr	PRIMASK, r3
}
 8003820:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2288      	movs	r2, #136	; 0x88
 8003826:	2120      	movs	r1, #32
 8003828:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	228c      	movs	r2, #140	; 0x8c
 800382e:	2120      	movs	r1, #32
 8003830:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2290      	movs	r2, #144	; 0x90
 8003836:	2120      	movs	r1, #32
 8003838:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2284      	movs	r2, #132	; 0x84
 800383e:	2100      	movs	r1, #0
 8003840:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e010      	b.n	8003868 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	4013      	ands	r3, r2
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	425a      	negs	r2, r3
 8003856:	4153      	adcs	r3, r2
 8003858:	b2db      	uxtb	r3, r3
 800385a:	001a      	movs	r2, r3
 800385c:	1dfb      	adds	r3, r7, #7
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d100      	bne.n	8003866 <UART_WaitOnFlagUntilTimeout+0x182>
 8003864:	e747      	b.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	0018      	movs	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	b014      	add	sp, #80	; 0x50
 800386e:	bd80      	pop	{r7, pc}
 8003870:	fffffe5f 	.word	0xfffffe5f

08003874 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b098      	sub	sp, #96	; 0x60
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	1dbb      	adds	r3, r7, #6
 8003880:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1dba      	adds	r2, r7, #6
 800388c:	215c      	movs	r1, #92	; 0x5c
 800388e:	8812      	ldrh	r2, [r2, #0]
 8003890:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1dba      	adds	r2, r7, #6
 8003896:	215e      	movs	r1, #94	; 0x5e
 8003898:	8812      	ldrh	r2, [r2, #0]
 800389a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	015b      	lsls	r3, r3, #5
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d10d      	bne.n	80038ca <UART_Start_Receive_IT+0x56>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d104      	bne.n	80038c0 <UART_Start_Receive_IT+0x4c>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2260      	movs	r2, #96	; 0x60
 80038ba:	497b      	ldr	r1, [pc, #492]	; (8003aa8 <UART_Start_Receive_IT+0x234>)
 80038bc:	5299      	strh	r1, [r3, r2]
 80038be:	e02e      	b.n	800391e <UART_Start_Receive_IT+0xaa>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2260      	movs	r2, #96	; 0x60
 80038c4:	21ff      	movs	r1, #255	; 0xff
 80038c6:	5299      	strh	r1, [r3, r2]
 80038c8:	e029      	b.n	800391e <UART_Start_Receive_IT+0xaa>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10d      	bne.n	80038ee <UART_Start_Receive_IT+0x7a>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d104      	bne.n	80038e4 <UART_Start_Receive_IT+0x70>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2260      	movs	r2, #96	; 0x60
 80038de:	21ff      	movs	r1, #255	; 0xff
 80038e0:	5299      	strh	r1, [r3, r2]
 80038e2:	e01c      	b.n	800391e <UART_Start_Receive_IT+0xaa>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2260      	movs	r2, #96	; 0x60
 80038e8:	217f      	movs	r1, #127	; 0x7f
 80038ea:	5299      	strh	r1, [r3, r2]
 80038ec:	e017      	b.n	800391e <UART_Start_Receive_IT+0xaa>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	2380      	movs	r3, #128	; 0x80
 80038f4:	055b      	lsls	r3, r3, #21
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d10d      	bne.n	8003916 <UART_Start_Receive_IT+0xa2>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d104      	bne.n	800390c <UART_Start_Receive_IT+0x98>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2260      	movs	r2, #96	; 0x60
 8003906:	217f      	movs	r1, #127	; 0x7f
 8003908:	5299      	strh	r1, [r3, r2]
 800390a:	e008      	b.n	800391e <UART_Start_Receive_IT+0xaa>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2260      	movs	r2, #96	; 0x60
 8003910:	213f      	movs	r1, #63	; 0x3f
 8003912:	5299      	strh	r1, [r3, r2]
 8003914:	e003      	b.n	800391e <UART_Start_Receive_IT+0xaa>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2260      	movs	r2, #96	; 0x60
 800391a:	2100      	movs	r1, #0
 800391c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2290      	movs	r2, #144	; 0x90
 8003922:	2100      	movs	r1, #0
 8003924:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	228c      	movs	r2, #140	; 0x8c
 800392a:	2122      	movs	r1, #34	; 0x22
 800392c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800392e:	f3ef 8310 	mrs	r3, PRIMASK
 8003932:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003934:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003936:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003938:	2301      	movs	r3, #1
 800393a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800393e:	f383 8810 	msr	PRIMASK, r3
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2101      	movs	r1, #1
 8003950:	430a      	orrs	r2, r1
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003956:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800395a:	f383 8810 	msr	PRIMASK, r3
}
 800395e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003964:	2380      	movs	r3, #128	; 0x80
 8003966:	059b      	lsls	r3, r3, #22
 8003968:	429a      	cmp	r2, r3
 800396a:	d150      	bne.n	8003a0e <UART_Start_Receive_IT+0x19a>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2268      	movs	r2, #104	; 0x68
 8003970:	5a9b      	ldrh	r3, [r3, r2]
 8003972:	1dba      	adds	r2, r7, #6
 8003974:	8812      	ldrh	r2, [r2, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d349      	bcc.n	8003a0e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	2380      	movs	r3, #128	; 0x80
 8003980:	015b      	lsls	r3, r3, #5
 8003982:	429a      	cmp	r2, r3
 8003984:	d107      	bne.n	8003996 <UART_Start_Receive_IT+0x122>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d103      	bne.n	8003996 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4a46      	ldr	r2, [pc, #280]	; (8003aac <UART_Start_Receive_IT+0x238>)
 8003992:	675a      	str	r2, [r3, #116]	; 0x74
 8003994:	e002      	b.n	800399c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4a45      	ldr	r2, [pc, #276]	; (8003ab0 <UART_Start_Receive_IT+0x23c>)
 800399a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d019      	beq.n	80039d8 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a4:	f3ef 8310 	mrs	r3, PRIMASK
 80039a8:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80039aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80039ae:	2301      	movs	r3, #1
 80039b0:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b4:	f383 8810 	msr	PRIMASK, r3
}
 80039b8:	46c0      	nop			; (mov r8, r8)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2180      	movs	r1, #128	; 0x80
 80039c6:	0049      	lsls	r1, r1, #1
 80039c8:	430a      	orrs	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d2:	f383 8810 	msr	PRIMASK, r3
}
 80039d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d8:	f3ef 8310 	mrs	r3, PRIMASK
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80039de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80039e0:	657b      	str	r3, [r7, #84]	; 0x54
 80039e2:	2301      	movs	r3, #1
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e8:	f383 8810 	msr	PRIMASK, r3
}
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2180      	movs	r1, #128	; 0x80
 80039fa:	0549      	lsls	r1, r1, #21
 80039fc:	430a      	orrs	r2, r1
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a02:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	f383 8810 	msr	PRIMASK, r3
}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	e047      	b.n	8003a9e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	2380      	movs	r3, #128	; 0x80
 8003a14:	015b      	lsls	r3, r3, #5
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d107      	bne.n	8003a2a <UART_Start_Receive_IT+0x1b6>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4a23      	ldr	r2, [pc, #140]	; (8003ab4 <UART_Start_Receive_IT+0x240>)
 8003a26:	675a      	str	r2, [r3, #116]	; 0x74
 8003a28:	e002      	b.n	8003a30 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4a22      	ldr	r2, [pc, #136]	; (8003ab8 <UART_Start_Receive_IT+0x244>)
 8003a2e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d019      	beq.n	8003a6c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a38:	f3ef 8310 	mrs	r3, PRIMASK
 8003a3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a3e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003a40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a42:	2301      	movs	r3, #1
 8003a44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	f383 8810 	msr	PRIMASK, r3
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2190      	movs	r1, #144	; 0x90
 8003a5a:	0049      	lsls	r1, r1, #1
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	f383 8810 	msr	PRIMASK, r3
}
 8003a6a:	e018      	b.n	8003a9e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a70:	613b      	str	r3, [r7, #16]
  return(result);
 8003a72:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003a74:	653b      	str	r3, [r7, #80]	; 0x50
 8003a76:	2301      	movs	r3, #1
 8003a78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f383 8810 	msr	PRIMASK, r3
}
 8003a80:	46c0      	nop			; (mov r8, r8)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2120      	movs	r1, #32
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f383 8810 	msr	PRIMASK, r3
}
 8003a9c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b018      	add	sp, #96	; 0x60
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	000001ff 	.word	0x000001ff
 8003aac:	080041e5 	.word	0x080041e5
 8003ab0:	08003ef9 	.word	0x08003ef9
 8003ab4:	08003d85 	.word	0x08003d85
 8003ab8:	08003c11 	.word	0x08003c11

08003abc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08e      	sub	sp, #56	; 0x38
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac8:	617b      	str	r3, [r7, #20]
  return(result);
 8003aca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003acc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ace:	2301      	movs	r3, #1
 8003ad0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f383 8810 	msr	PRIMASK, r3
}
 8003ad8:	46c0      	nop			; (mov r8, r8)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4926      	ldr	r1, [pc, #152]	; (8003b80 <UART_EndRxTransfer+0xc4>)
 8003ae6:	400a      	ands	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f383 8810 	msr	PRIMASK, r3
}
 8003af4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af6:	f3ef 8310 	mrs	r3, PRIMASK
 8003afa:	623b      	str	r3, [r7, #32]
  return(result);
 8003afc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003afe:	633b      	str	r3, [r7, #48]	; 0x30
 8003b00:	2301      	movs	r3, #1
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	f383 8810 	msr	PRIMASK, r3
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	491b      	ldr	r1, [pc, #108]	; (8003b84 <UART_EndRxTransfer+0xc8>)
 8003b18:	400a      	ands	r2, r1
 8003b1a:	609a      	str	r2, [r3, #8]
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b22:	f383 8810 	msr	PRIMASK, r3
}
 8003b26:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d118      	bne.n	8003b62 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b30:	f3ef 8310 	mrs	r3, PRIMASK
 8003b34:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b36:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f383 8810 	msr	PRIMASK, r3
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2110      	movs	r1, #16
 8003b52:	438a      	bics	r2, r1
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f383 8810 	msr	PRIMASK, r3
}
 8003b60:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	228c      	movs	r2, #140	; 0x8c
 8003b66:	2120      	movs	r1, #32
 8003b68:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b00e      	add	sp, #56	; 0x38
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	fffffedf 	.word	0xfffffedf
 8003b84:	effffffe 	.word	0xeffffffe

08003b88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	225e      	movs	r2, #94	; 0x5e
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2256      	movs	r2, #86	; 0x56
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f7ff fae1 	bl	8003170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	b004      	add	sp, #16
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b086      	sub	sp, #24
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bc4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	2301      	movs	r3, #1
 8003bca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f383 8810 	msr	PRIMASK, r3
}
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2140      	movs	r1, #64	; 0x40
 8003be0:	438a      	bics	r2, r1
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f383 8810 	msr	PRIMASK, r3
}
 8003bee:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2288      	movs	r2, #136	; 0x88
 8003bf4:	2120      	movs	r1, #32
 8003bf6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f7ff faad 	bl	8003160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b006      	add	sp, #24
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b090      	sub	sp, #64	; 0x40
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003c18:	203e      	movs	r0, #62	; 0x3e
 8003c1a:	183b      	adds	r3, r7, r0
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	2160      	movs	r1, #96	; 0x60
 8003c20:	5a52      	ldrh	r2, [r2, r1]
 8003c22:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	228c      	movs	r2, #140	; 0x8c
 8003c28:	589b      	ldr	r3, [r3, r2]
 8003c2a:	2b22      	cmp	r3, #34	; 0x22
 8003c2c:	d000      	beq.n	8003c30 <UART_RxISR_8BIT+0x20>
 8003c2e:	e09a      	b.n	8003d66 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c36:	213c      	movs	r1, #60	; 0x3c
 8003c38:	187b      	adds	r3, r7, r1
 8003c3a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003c3c:	187b      	adds	r3, r7, r1
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	183b      	adds	r3, r7, r0
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	b2d9      	uxtb	r1, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4c:	400a      	ands	r2, r1
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	225e      	movs	r2, #94	; 0x5e
 8003c60:	5a9b      	ldrh	r3, [r3, r2]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b299      	uxth	r1, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	225e      	movs	r2, #94	; 0x5e
 8003c6c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	225e      	movs	r2, #94	; 0x5e
 8003c72:	5a9b      	ldrh	r3, [r3, r2]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d000      	beq.n	8003c7c <UART_RxISR_8BIT+0x6c>
 8003c7a:	e07c      	b.n	8003d76 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c80:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c82:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c84:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c86:	2301      	movs	r3, #1
 8003c88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f383 8810 	msr	PRIMASK, r3
}
 8003c90:	46c0      	nop			; (mov r8, r8)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4938      	ldr	r1, [pc, #224]	; (8003d80 <UART_RxISR_8BIT+0x170>)
 8003c9e:	400a      	ands	r2, r1
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	f383 8810 	msr	PRIMASK, r3
}
 8003cac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cae:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8003cb8:	2301      	movs	r3, #1
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	f383 8810 	msr	PRIMASK, r3
}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2101      	movs	r1, #1
 8003cd0:	438a      	bics	r2, r1
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cda:	f383 8810 	msr	PRIMASK, r3
}
 8003cde:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	228c      	movs	r2, #140	; 0x8c
 8003ce4:	2120      	movs	r1, #32
 8003ce6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d12f      	bne.n	8003d5c <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d02:	f3ef 8310 	mrs	r3, PRIMASK
 8003d06:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d08:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d0a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f383 8810 	msr	PRIMASK, r3
}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2110      	movs	r1, #16
 8003d24:	438a      	bics	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f383 8810 	msr	PRIMASK, r3
}
 8003d32:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	2210      	movs	r2, #16
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d103      	bne.n	8003d4a <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2210      	movs	r2, #16
 8003d48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	225c      	movs	r2, #92	; 0x5c
 8003d4e:	5a9a      	ldrh	r2, [r3, r2]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	0011      	movs	r1, r2
 8003d54:	0018      	movs	r0, r3
 8003d56:	f7ff fa13 	bl	8003180 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d5a:	e00c      	b.n	8003d76 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7fc fb44 	bl	80003ec <HAL_UART_RxCpltCallback>
}
 8003d64:	e007      	b.n	8003d76 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699a      	ldr	r2, [r3, #24]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2108      	movs	r1, #8
 8003d72:	430a      	orrs	r2, r1
 8003d74:	619a      	str	r2, [r3, #24]
}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	b010      	add	sp, #64	; 0x40
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	fffffedf 	.word	0xfffffedf

08003d84 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b090      	sub	sp, #64	; 0x40
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003d8c:	203e      	movs	r0, #62	; 0x3e
 8003d8e:	183b      	adds	r3, r7, r0
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	2160      	movs	r1, #96	; 0x60
 8003d94:	5a52      	ldrh	r2, [r2, r1]
 8003d96:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	228c      	movs	r2, #140	; 0x8c
 8003d9c:	589b      	ldr	r3, [r3, r2]
 8003d9e:	2b22      	cmp	r3, #34	; 0x22
 8003da0:	d000      	beq.n	8003da4 <UART_RxISR_16BIT+0x20>
 8003da2:	e09a      	b.n	8003eda <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003daa:	213c      	movs	r1, #60	; 0x3c
 8003dac:	187b      	adds	r3, r7, r1
 8003dae:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db4:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003db6:	187b      	adds	r3, r7, r1
 8003db8:	183a      	adds	r2, r7, r0
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	8812      	ldrh	r2, [r2, #0]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dca:	1c9a      	adds	r2, r3, #2
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	225e      	movs	r2, #94	; 0x5e
 8003dd4:	5a9b      	ldrh	r3, [r3, r2]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b299      	uxth	r1, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	225e      	movs	r2, #94	; 0x5e
 8003de0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	225e      	movs	r2, #94	; 0x5e
 8003de6:	5a9b      	ldrh	r3, [r3, r2]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d000      	beq.n	8003df0 <UART_RxISR_16BIT+0x6c>
 8003dee:	e07c      	b.n	8003eea <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df0:	f3ef 8310 	mrs	r3, PRIMASK
 8003df4:	617b      	str	r3, [r7, #20]
  return(result);
 8003df6:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003df8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	f383 8810 	msr	PRIMASK, r3
}
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4938      	ldr	r1, [pc, #224]	; (8003ef4 <UART_RxISR_16BIT+0x170>)
 8003e12:	400a      	ands	r2, r1
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f383 8810 	msr	PRIMASK, r3
}
 8003e20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e22:	f3ef 8310 	mrs	r3, PRIMASK
 8003e26:	623b      	str	r3, [r7, #32]
  return(result);
 8003e28:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	f383 8810 	msr	PRIMASK, r3
}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2101      	movs	r1, #1
 8003e44:	438a      	bics	r2, r1
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4e:	f383 8810 	msr	PRIMASK, r3
}
 8003e52:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	228c      	movs	r2, #140	; 0x8c
 8003e58:	2120      	movs	r1, #32
 8003e5a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d12f      	bne.n	8003ed0 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e76:	f3ef 8310 	mrs	r3, PRIMASK
 8003e7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e7c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e80:	2301      	movs	r3, #1
 8003e82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f383 8810 	msr	PRIMASK, r3
}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2110      	movs	r1, #16
 8003e98:	438a      	bics	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f383 8810 	msr	PRIMASK, r3
}
 8003ea6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	2210      	movs	r2, #16
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d103      	bne.n	8003ebe <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2210      	movs	r2, #16
 8003ebc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	225c      	movs	r2, #92	; 0x5c
 8003ec2:	5a9a      	ldrh	r2, [r3, r2]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	0011      	movs	r1, r2
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f7ff f959 	bl	8003180 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ece:	e00c      	b.n	8003eea <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f7fc fa8a 	bl	80003ec <HAL_UART_RxCpltCallback>
}
 8003ed8:	e007      	b.n	8003eea <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699a      	ldr	r2, [r3, #24]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2108      	movs	r1, #8
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	619a      	str	r2, [r3, #24]
}
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b010      	add	sp, #64	; 0x40
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	fffffedf 	.word	0xfffffedf

08003ef8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b09c      	sub	sp, #112	; 0x70
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003f00:	236a      	movs	r3, #106	; 0x6a
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	2160      	movs	r1, #96	; 0x60
 8003f08:	5a52      	ldrh	r2, [r2, r1]
 8003f0a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	228c      	movs	r2, #140	; 0x8c
 8003f28:	589b      	ldr	r3, [r3, r2]
 8003f2a:	2b22      	cmp	r3, #34	; 0x22
 8003f2c:	d000      	beq.n	8003f30 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003f2e:	e144      	b.n	80041ba <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003f30:	235e      	movs	r3, #94	; 0x5e
 8003f32:	18fb      	adds	r3, r7, r3
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	2168      	movs	r1, #104	; 0x68
 8003f38:	5a52      	ldrh	r2, [r2, r1]
 8003f3a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003f3c:	e0eb      	b.n	8004116 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f44:	215c      	movs	r1, #92	; 0x5c
 8003f46:	187b      	adds	r3, r7, r1
 8003f48:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f4a:	187b      	adds	r3, r7, r1
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	236a      	movs	r3, #106	; 0x6a
 8003f52:	18fb      	adds	r3, r7, r3
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b2d9      	uxtb	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	400a      	ands	r2, r1
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	225e      	movs	r2, #94	; 0x5e
 8003f70:	5a9b      	ldrh	r3, [r3, r2]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b299      	uxth	r1, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	225e      	movs	r2, #94	; 0x5e
 8003f7c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f88:	2207      	movs	r2, #7
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d049      	beq.n	8004022 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f90:	2201      	movs	r2, #1
 8003f92:	4013      	ands	r3, r2
 8003f94:	d010      	beq.n	8003fb8 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003f96:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d00b      	beq.n	8003fb8 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2290      	movs	r2, #144	; 0x90
 8003fac:	589b      	ldr	r3, [r3, r2]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2190      	movs	r1, #144	; 0x90
 8003fb6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fba:	2202      	movs	r2, #2
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d00f      	beq.n	8003fe0 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003fc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d00b      	beq.n	8003fe0 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2290      	movs	r2, #144	; 0x90
 8003fd4:	589b      	ldr	r3, [r3, r2]
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2190      	movs	r1, #144	; 0x90
 8003fde:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d00f      	beq.n	8004008 <UART_RxISR_8BIT_FIFOEN+0x110>
 8003fe8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fea:	2201      	movs	r2, #1
 8003fec:	4013      	ands	r3, r2
 8003fee:	d00b      	beq.n	8004008 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2290      	movs	r2, #144	; 0x90
 8003ffc:	589b      	ldr	r3, [r3, r2]
 8003ffe:	2202      	movs	r2, #2
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2190      	movs	r1, #144	; 0x90
 8004006:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2290      	movs	r2, #144	; 0x90
 800400c:	589b      	ldr	r3, [r3, r2]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	0018      	movs	r0, r3
 8004016:	f7ff f8ab 	bl	8003170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2290      	movs	r2, #144	; 0x90
 800401e:	2100      	movs	r1, #0
 8004020:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	225e      	movs	r2, #94	; 0x5e
 8004026:	5a9b      	ldrh	r3, [r3, r2]
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d173      	bne.n	8004116 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800402e:	f3ef 8310 	mrs	r3, PRIMASK
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004036:	65bb      	str	r3, [r7, #88]	; 0x58
 8004038:	2301      	movs	r3, #1
 800403a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403e:	f383 8810 	msr	PRIMASK, r3
}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4961      	ldr	r1, [pc, #388]	; (80041d4 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8004050:	400a      	ands	r2, r1
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004056:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405a:	f383 8810 	msr	PRIMASK, r3
}
 800405e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004060:	f3ef 8310 	mrs	r3, PRIMASK
 8004064:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8004066:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004068:	657b      	str	r3, [r7, #84]	; 0x54
 800406a:	2301      	movs	r3, #1
 800406c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004070:	f383 8810 	msr	PRIMASK, r3
}
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4955      	ldr	r1, [pc, #340]	; (80041d8 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8004082:	400a      	ands	r2, r1
 8004084:	609a      	str	r2, [r3, #8]
 8004086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004088:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800408c:	f383 8810 	msr	PRIMASK, r3
}
 8004090:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	228c      	movs	r2, #140	; 0x8c
 8004096:	2120      	movs	r1, #32
 8004098:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d12f      	bne.n	800410e <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040b4:	f3ef 8310 	mrs	r3, PRIMASK
 80040b8:	623b      	str	r3, [r7, #32]
  return(result);
 80040ba:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040bc:	653b      	str	r3, [r7, #80]	; 0x50
 80040be:	2301      	movs	r3, #1
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	f383 8810 	msr	PRIMASK, r3
}
 80040c8:	46c0      	nop			; (mov r8, r8)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2110      	movs	r1, #16
 80040d6:	438a      	bics	r2, r1
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040dc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e0:	f383 8810 	msr	PRIMASK, r3
}
 80040e4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	2210      	movs	r2, #16
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d103      	bne.n	80040fc <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2210      	movs	r2, #16
 80040fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	225c      	movs	r2, #92	; 0x5c
 8004100:	5a9a      	ldrh	r2, [r3, r2]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	0011      	movs	r1, r2
 8004106:	0018      	movs	r0, r3
 8004108:	f7ff f83a 	bl	8003180 <HAL_UARTEx_RxEventCallback>
 800410c:	e003      	b.n	8004116 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	0018      	movs	r0, r3
 8004112:	f7fc f96b 	bl	80003ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004116:	235e      	movs	r3, #94	; 0x5e
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d004      	beq.n	800412a <UART_RxISR_8BIT_FIFOEN+0x232>
 8004120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004122:	2220      	movs	r2, #32
 8004124:	4013      	ands	r3, r2
 8004126:	d000      	beq.n	800412a <UART_RxISR_8BIT_FIFOEN+0x232>
 8004128:	e709      	b.n	8003f3e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800412a:	204e      	movs	r0, #78	; 0x4e
 800412c:	183b      	adds	r3, r7, r0
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	215e      	movs	r1, #94	; 0x5e
 8004132:	5a52      	ldrh	r2, [r2, r1]
 8004134:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004136:	0001      	movs	r1, r0
 8004138:	187b      	adds	r3, r7, r1
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d044      	beq.n	80041ca <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2268      	movs	r2, #104	; 0x68
 8004144:	5a9b      	ldrh	r3, [r3, r2]
 8004146:	187a      	adds	r2, r7, r1
 8004148:	8812      	ldrh	r2, [r2, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d23d      	bcs.n	80041ca <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800414e:	f3ef 8310 	mrs	r3, PRIMASK
 8004152:	60bb      	str	r3, [r7, #8]
  return(result);
 8004154:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004156:	64bb      	str	r3, [r7, #72]	; 0x48
 8004158:	2301      	movs	r3, #1
 800415a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f383 8810 	msr	PRIMASK, r3
}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	491b      	ldr	r1, [pc, #108]	; (80041dc <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8004170:	400a      	ands	r2, r1
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004176:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f383 8810 	msr	PRIMASK, r3
}
 800417e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a17      	ldr	r2, [pc, #92]	; (80041e0 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8004184:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004186:	f3ef 8310 	mrs	r3, PRIMASK
 800418a:	617b      	str	r3, [r7, #20]
  return(result);
 800418c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800418e:	647b      	str	r3, [r7, #68]	; 0x44
 8004190:	2301      	movs	r3, #1
 8004192:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	f383 8810 	msr	PRIMASK, r3
}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2120      	movs	r1, #32
 80041a8:	430a      	orrs	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f383 8810 	msr	PRIMASK, r3
}
 80041b6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041b8:	e007      	b.n	80041ca <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699a      	ldr	r2, [r3, #24]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2108      	movs	r1, #8
 80041c6:	430a      	orrs	r2, r1
 80041c8:	619a      	str	r2, [r3, #24]
}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b01c      	add	sp, #112	; 0x70
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	fffffeff 	.word	0xfffffeff
 80041d8:	effffffe 	.word	0xeffffffe
 80041dc:	efffffff 	.word	0xefffffff
 80041e0:	08003c11 	.word	0x08003c11

080041e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b09e      	sub	sp, #120	; 0x78
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80041ec:	2372      	movs	r3, #114	; 0x72
 80041ee:	18fb      	adds	r3, r7, r3
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	2160      	movs	r1, #96	; 0x60
 80041f4:	5a52      	ldrh	r2, [r2, r1]
 80041f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	228c      	movs	r2, #140	; 0x8c
 8004214:	589b      	ldr	r3, [r3, r2]
 8004216:	2b22      	cmp	r3, #34	; 0x22
 8004218:	d000      	beq.n	800421c <UART_RxISR_16BIT_FIFOEN+0x38>
 800421a:	e144      	b.n	80044a6 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800421c:	2366      	movs	r3, #102	; 0x66
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	2168      	movs	r1, #104	; 0x68
 8004224:	5a52      	ldrh	r2, [r2, r1]
 8004226:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004228:	e0eb      	b.n	8004402 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004230:	2164      	movs	r1, #100	; 0x64
 8004232:	187b      	adds	r3, r7, r1
 8004234:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423a:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800423c:	187b      	adds	r3, r7, r1
 800423e:	2272      	movs	r2, #114	; 0x72
 8004240:	18ba      	adds	r2, r7, r2
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	8812      	ldrh	r2, [r2, #0]
 8004246:	4013      	ands	r3, r2
 8004248:	b29a      	uxth	r2, r3
 800424a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800424c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004252:	1c9a      	adds	r2, r3, #2
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	225e      	movs	r2, #94	; 0x5e
 800425c:	5a9b      	ldrh	r3, [r3, r2]
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b299      	uxth	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	225e      	movs	r2, #94	; 0x5e
 8004268:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004274:	2207      	movs	r2, #7
 8004276:	4013      	ands	r3, r2
 8004278:	d049      	beq.n	800430e <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800427a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800427c:	2201      	movs	r2, #1
 800427e:	4013      	ands	r3, r2
 8004280:	d010      	beq.n	80042a4 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8004282:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	4013      	ands	r3, r2
 800428a:	d00b      	beq.n	80042a4 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2201      	movs	r2, #1
 8004292:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2290      	movs	r2, #144	; 0x90
 8004298:	589b      	ldr	r3, [r3, r2]
 800429a:	2201      	movs	r2, #1
 800429c:	431a      	orrs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2190      	movs	r1, #144	; 0x90
 80042a2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042a6:	2202      	movs	r2, #2
 80042a8:	4013      	ands	r3, r2
 80042aa:	d00f      	beq.n	80042cc <UART_RxISR_16BIT_FIFOEN+0xe8>
 80042ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042ae:	2201      	movs	r2, #1
 80042b0:	4013      	ands	r3, r2
 80042b2:	d00b      	beq.n	80042cc <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2202      	movs	r2, #2
 80042ba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2290      	movs	r2, #144	; 0x90
 80042c0:	589b      	ldr	r3, [r3, r2]
 80042c2:	2204      	movs	r2, #4
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2190      	movs	r1, #144	; 0x90
 80042ca:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ce:	2204      	movs	r2, #4
 80042d0:	4013      	ands	r3, r2
 80042d2:	d00f      	beq.n	80042f4 <UART_RxISR_16BIT_FIFOEN+0x110>
 80042d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042d6:	2201      	movs	r2, #1
 80042d8:	4013      	ands	r3, r2
 80042da:	d00b      	beq.n	80042f4 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2204      	movs	r2, #4
 80042e2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2290      	movs	r2, #144	; 0x90
 80042e8:	589b      	ldr	r3, [r3, r2]
 80042ea:	2202      	movs	r2, #2
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2190      	movs	r1, #144	; 0x90
 80042f2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2290      	movs	r2, #144	; 0x90
 80042f8:	589b      	ldr	r3, [r3, r2]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d007      	beq.n	800430e <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	0018      	movs	r0, r3
 8004302:	f7fe ff35 	bl	8003170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2290      	movs	r2, #144	; 0x90
 800430a:	2100      	movs	r1, #0
 800430c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	225e      	movs	r2, #94	; 0x5e
 8004312:	5a9b      	ldrh	r3, [r3, r2]
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d173      	bne.n	8004402 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800431a:	f3ef 8310 	mrs	r3, PRIMASK
 800431e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004322:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004324:	2301      	movs	r3, #1
 8004326:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432a:	f383 8810 	msr	PRIMASK, r3
}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4961      	ldr	r1, [pc, #388]	; (80044c0 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800433c:	400a      	ands	r2, r1
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004342:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004346:	f383 8810 	msr	PRIMASK, r3
}
 800434a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800434c:	f3ef 8310 	mrs	r3, PRIMASK
 8004350:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004354:	65bb      	str	r3, [r7, #88]	; 0x58
 8004356:	2301      	movs	r3, #1
 8004358:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800435a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800435c:	f383 8810 	msr	PRIMASK, r3
}
 8004360:	46c0      	nop			; (mov r8, r8)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4955      	ldr	r1, [pc, #340]	; (80044c4 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800436e:	400a      	ands	r2, r1
 8004370:	609a      	str	r2, [r3, #8]
 8004372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004374:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004378:	f383 8810 	msr	PRIMASK, r3
}
 800437c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	228c      	movs	r2, #140	; 0x8c
 8004382:	2120      	movs	r1, #32
 8004384:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004396:	2b01      	cmp	r3, #1
 8004398:	d12f      	bne.n	80043fa <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a0:	f3ef 8310 	mrs	r3, PRIMASK
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a8:	657b      	str	r3, [r7, #84]	; 0x54
 80043aa:	2301      	movs	r3, #1
 80043ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b0:	f383 8810 	msr	PRIMASK, r3
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2110      	movs	r1, #16
 80043c2:	438a      	bics	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	f383 8810 	msr	PRIMASK, r3
}
 80043d0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	2210      	movs	r2, #16
 80043da:	4013      	ands	r3, r2
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d103      	bne.n	80043e8 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2210      	movs	r2, #16
 80043e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	225c      	movs	r2, #92	; 0x5c
 80043ec:	5a9a      	ldrh	r2, [r3, r2]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	0011      	movs	r1, r2
 80043f2:	0018      	movs	r0, r3
 80043f4:	f7fe fec4 	bl	8003180 <HAL_UARTEx_RxEventCallback>
 80043f8:	e003      	b.n	8004402 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	0018      	movs	r0, r3
 80043fe:	f7fb fff5 	bl	80003ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004402:	2366      	movs	r3, #102	; 0x66
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d004      	beq.n	8004416 <UART_RxISR_16BIT_FIFOEN+0x232>
 800440c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800440e:	2220      	movs	r2, #32
 8004410:	4013      	ands	r3, r2
 8004412:	d000      	beq.n	8004416 <UART_RxISR_16BIT_FIFOEN+0x232>
 8004414:	e709      	b.n	800422a <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004416:	2052      	movs	r0, #82	; 0x52
 8004418:	183b      	adds	r3, r7, r0
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	215e      	movs	r1, #94	; 0x5e
 800441e:	5a52      	ldrh	r2, [r2, r1]
 8004420:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004422:	0001      	movs	r1, r0
 8004424:	187b      	adds	r3, r7, r1
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d044      	beq.n	80044b6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2268      	movs	r2, #104	; 0x68
 8004430:	5a9b      	ldrh	r3, [r3, r2]
 8004432:	187a      	adds	r2, r7, r1
 8004434:	8812      	ldrh	r2, [r2, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d23d      	bcs.n	80044b6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800443a:	f3ef 8310 	mrs	r3, PRIMASK
 800443e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004440:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004444:	2301      	movs	r3, #1
 8004446:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f383 8810 	msr	PRIMASK, r3
}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	491b      	ldr	r1, [pc, #108]	; (80044c8 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800445c:	400a      	ands	r2, r1
 800445e:	609a      	str	r2, [r3, #8]
 8004460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004462:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f383 8810 	msr	PRIMASK, r3
}
 800446a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a17      	ldr	r2, [pc, #92]	; (80044cc <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8004470:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004472:	f3ef 8310 	mrs	r3, PRIMASK
 8004476:	61bb      	str	r3, [r7, #24]
  return(result);
 8004478:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800447a:	64bb      	str	r3, [r7, #72]	; 0x48
 800447c:	2301      	movs	r3, #1
 800447e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f383 8810 	msr	PRIMASK, r3
}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2120      	movs	r1, #32
 8004494:	430a      	orrs	r2, r1
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800449a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	f383 8810 	msr	PRIMASK, r3
}
 80044a2:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044a4:	e007      	b.n	80044b6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699a      	ldr	r2, [r3, #24]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2108      	movs	r1, #8
 80044b2:	430a      	orrs	r2, r1
 80044b4:	619a      	str	r2, [r3, #24]
}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	46bd      	mov	sp, r7
 80044ba:	b01e      	add	sp, #120	; 0x78
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	fffffeff 	.word	0xfffffeff
 80044c4:	effffffe 	.word	0xeffffffe
 80044c8:	efffffff 	.word	0xefffffff
 80044cc:	08003d85 	.word	0x08003d85

080044d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80044d8:	46c0      	nop			; (mov r8, r8)
 80044da:	46bd      	mov	sp, r7
 80044dc:	b002      	add	sp, #8
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80044e8:	46c0      	nop			; (mov r8, r8)
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b002      	add	sp, #8
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80044f8:	46c0      	nop			; (mov r8, r8)
 80044fa:	46bd      	mov	sp, r7
 80044fc:	b002      	add	sp, #8
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2284      	movs	r2, #132	; 0x84
 800450c:	5c9b      	ldrb	r3, [r3, r2]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_UARTEx_DisableFifoMode+0x16>
 8004512:	2302      	movs	r3, #2
 8004514:	e027      	b.n	8004566 <HAL_UARTEx_DisableFifoMode+0x66>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2284      	movs	r2, #132	; 0x84
 800451a:	2101      	movs	r1, #1
 800451c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2288      	movs	r2, #136	; 0x88
 8004522:	2124      	movs	r1, #36	; 0x24
 8004524:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2101      	movs	r1, #1
 800453a:	438a      	bics	r2, r1
 800453c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4a0b      	ldr	r2, [pc, #44]	; (8004570 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004542:	4013      	ands	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2288      	movs	r2, #136	; 0x88
 8004558:	2120      	movs	r1, #32
 800455a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2284      	movs	r2, #132	; 0x84
 8004560:	2100      	movs	r1, #0
 8004562:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	0018      	movs	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	b004      	add	sp, #16
 800456c:	bd80      	pop	{r7, pc}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	dfffffff 	.word	0xdfffffff

08004574 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2284      	movs	r2, #132	; 0x84
 8004582:	5c9b      	ldrb	r3, [r3, r2]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004588:	2302      	movs	r3, #2
 800458a:	e02e      	b.n	80045ea <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2284      	movs	r2, #132	; 0x84
 8004590:	2101      	movs	r1, #1
 8004592:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2288      	movs	r2, #136	; 0x88
 8004598:	2124      	movs	r1, #36	; 0x24
 800459a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2101      	movs	r1, #1
 80045b0:	438a      	bics	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	08d9      	lsrs	r1, r3, #3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	0018      	movs	r0, r3
 80045cc:	f000 f854 	bl	8004678 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2288      	movs	r2, #136	; 0x88
 80045dc:	2120      	movs	r1, #32
 80045de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2284      	movs	r2, #132	; 0x84
 80045e4:	2100      	movs	r1, #0
 80045e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	0018      	movs	r0, r3
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b004      	add	sp, #16
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2284      	movs	r2, #132	; 0x84
 8004602:	5c9b      	ldrb	r3, [r3, r2]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004608:	2302      	movs	r3, #2
 800460a:	e02f      	b.n	800466c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2284      	movs	r2, #132	; 0x84
 8004610:	2101      	movs	r1, #1
 8004612:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2288      	movs	r2, #136	; 0x88
 8004618:	2124      	movs	r1, #36	; 0x24
 800461a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2101      	movs	r1, #1
 8004630:	438a      	bics	r2, r1
 8004632:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	4a0e      	ldr	r2, [pc, #56]	; (8004674 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800463c:	4013      	ands	r3, r2
 800463e:	0019      	movs	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	0018      	movs	r0, r3
 800464e:	f000 f813 	bl	8004678 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2288      	movs	r2, #136	; 0x88
 800465e:	2120      	movs	r1, #32
 8004660:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2284      	movs	r2, #132	; 0x84
 8004666:	2100      	movs	r1, #0
 8004668:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	0018      	movs	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	b004      	add	sp, #16
 8004672:	bd80      	pop	{r7, pc}
 8004674:	f1ffffff 	.word	0xf1ffffff

08004678 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004684:	2b00      	cmp	r3, #0
 8004686:	d108      	bne.n	800469a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	226a      	movs	r2, #106	; 0x6a
 800468c:	2101      	movs	r1, #1
 800468e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2268      	movs	r2, #104	; 0x68
 8004694:	2101      	movs	r1, #1
 8004696:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004698:	e043      	b.n	8004722 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800469a:	260f      	movs	r6, #15
 800469c:	19bb      	adds	r3, r7, r6
 800469e:	2208      	movs	r2, #8
 80046a0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046a2:	200e      	movs	r0, #14
 80046a4:	183b      	adds	r3, r7, r0
 80046a6:	2208      	movs	r2, #8
 80046a8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	0e5b      	lsrs	r3, r3, #25
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	240d      	movs	r4, #13
 80046b6:	193b      	adds	r3, r7, r4
 80046b8:	2107      	movs	r1, #7
 80046ba:	400a      	ands	r2, r1
 80046bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	0f5b      	lsrs	r3, r3, #29
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	250c      	movs	r5, #12
 80046ca:	197b      	adds	r3, r7, r5
 80046cc:	2107      	movs	r1, #7
 80046ce:	400a      	ands	r2, r1
 80046d0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046d2:	183b      	adds	r3, r7, r0
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	197a      	adds	r2, r7, r5
 80046d8:	7812      	ldrb	r2, [r2, #0]
 80046da:	4914      	ldr	r1, [pc, #80]	; (800472c <UARTEx_SetNbDataToProcess+0xb4>)
 80046dc:	5c8a      	ldrb	r2, [r1, r2]
 80046de:	435a      	muls	r2, r3
 80046e0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80046e2:	197b      	adds	r3, r7, r5
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	4a12      	ldr	r2, [pc, #72]	; (8004730 <UARTEx_SetNbDataToProcess+0xb8>)
 80046e8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046ea:	0019      	movs	r1, r3
 80046ec:	f7fb fd92 	bl	8000214 <__divsi3>
 80046f0:	0003      	movs	r3, r0
 80046f2:	b299      	uxth	r1, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	226a      	movs	r2, #106	; 0x6a
 80046f8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046fa:	19bb      	adds	r3, r7, r6
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	193a      	adds	r2, r7, r4
 8004700:	7812      	ldrb	r2, [r2, #0]
 8004702:	490a      	ldr	r1, [pc, #40]	; (800472c <UARTEx_SetNbDataToProcess+0xb4>)
 8004704:	5c8a      	ldrb	r2, [r1, r2]
 8004706:	435a      	muls	r2, r3
 8004708:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800470a:	193b      	adds	r3, r7, r4
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	4a08      	ldr	r2, [pc, #32]	; (8004730 <UARTEx_SetNbDataToProcess+0xb8>)
 8004710:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004712:	0019      	movs	r1, r3
 8004714:	f7fb fd7e 	bl	8000214 <__divsi3>
 8004718:	0003      	movs	r3, r0
 800471a:	b299      	uxth	r1, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2268      	movs	r2, #104	; 0x68
 8004720:	5299      	strh	r1, [r3, r2]
}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	46bd      	mov	sp, r7
 8004726:	b005      	add	sp, #20
 8004728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	0800481c 	.word	0x0800481c
 8004730:	08004824 	.word	0x08004824

08004734 <__libc_init_array>:
 8004734:	b570      	push	{r4, r5, r6, lr}
 8004736:	2600      	movs	r6, #0
 8004738:	4d0c      	ldr	r5, [pc, #48]	; (800476c <__libc_init_array+0x38>)
 800473a:	4c0d      	ldr	r4, [pc, #52]	; (8004770 <__libc_init_array+0x3c>)
 800473c:	1b64      	subs	r4, r4, r5
 800473e:	10a4      	asrs	r4, r4, #2
 8004740:	42a6      	cmp	r6, r4
 8004742:	d109      	bne.n	8004758 <__libc_init_array+0x24>
 8004744:	2600      	movs	r6, #0
 8004746:	f000 f821 	bl	800478c <_init>
 800474a:	4d0a      	ldr	r5, [pc, #40]	; (8004774 <__libc_init_array+0x40>)
 800474c:	4c0a      	ldr	r4, [pc, #40]	; (8004778 <__libc_init_array+0x44>)
 800474e:	1b64      	subs	r4, r4, r5
 8004750:	10a4      	asrs	r4, r4, #2
 8004752:	42a6      	cmp	r6, r4
 8004754:	d105      	bne.n	8004762 <__libc_init_array+0x2e>
 8004756:	bd70      	pop	{r4, r5, r6, pc}
 8004758:	00b3      	lsls	r3, r6, #2
 800475a:	58eb      	ldr	r3, [r5, r3]
 800475c:	4798      	blx	r3
 800475e:	3601      	adds	r6, #1
 8004760:	e7ee      	b.n	8004740 <__libc_init_array+0xc>
 8004762:	00b3      	lsls	r3, r6, #2
 8004764:	58eb      	ldr	r3, [r5, r3]
 8004766:	4798      	blx	r3
 8004768:	3601      	adds	r6, #1
 800476a:	e7f2      	b.n	8004752 <__libc_init_array+0x1e>
 800476c:	0800482c 	.word	0x0800482c
 8004770:	0800482c 	.word	0x0800482c
 8004774:	0800482c 	.word	0x0800482c
 8004778:	08004830 	.word	0x08004830

0800477c <memset>:
 800477c:	0003      	movs	r3, r0
 800477e:	1882      	adds	r2, r0, r2
 8004780:	4293      	cmp	r3, r2
 8004782:	d100      	bne.n	8004786 <memset+0xa>
 8004784:	4770      	bx	lr
 8004786:	7019      	strb	r1, [r3, #0]
 8004788:	3301      	adds	r3, #1
 800478a:	e7f9      	b.n	8004780 <memset+0x4>

0800478c <_init>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004792:	bc08      	pop	{r3}
 8004794:	469e      	mov	lr, r3
 8004796:	4770      	bx	lr

08004798 <_fini>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr
