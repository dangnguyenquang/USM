
lampSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005730  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080057e8  080057e8  000157e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005870  08005870  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005870  08005870  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005870  08005870  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005874  08005874  00015874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000000c  08005884  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08005884  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b55  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002503  00000000  00000000  00032b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00035090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00036098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168c3  00000000  00000000  00036fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c0e  00000000  00000000  0004d88b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000944dd  00000000  00000000  00060499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4976  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a8c  00000000  00000000  000f49c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080057d0 	.word	0x080057d0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080057d0 	.word	0x080057d0

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 fe44 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f88c 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 fa36 	bl	8000868 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003fc:	f000 f8d0 	bl	80005a0 <MX_ADC1_Init>
  MX_TIM15_Init();
 8000400:	f000 f936 	bl	8000670 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000404:	f000 f98e 	bl	8000724 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000408:	f000 f9e0 	bl	80007cc <MX_USART1_UART_Init>
  MX_TIM17_Init();
 800040c:	f000 f9b4 	bl	8000778 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000410:	4b33      	ldr	r3, [pc, #204]	; (80004e0 <main+0xf4>)
 8000412:	0018      	movs	r0, r3
 8000414:	f001 f9ca 	bl	80017ac <HAL_ADC_Start>
  HAL_TIM_Base_Start(&htim15);
 8000418:	4b32      	ldr	r3, [pc, #200]	; (80004e4 <main+0xf8>)
 800041a:	0018      	movs	r0, r3
 800041c:	f002 ff8e 	bl	800333c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim17);
 8000420:	4b31      	ldr	r3, [pc, #196]	; (80004e8 <main+0xfc>)
 8000422:	0018      	movs	r0, r3
 8000424:	f002 ff8a 	bl	800333c <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart1, &rx_dataChar, 1);
 8000428:	4930      	ldr	r1, [pc, #192]	; (80004ec <main+0x100>)
 800042a:	4b31      	ldr	r3, [pc, #196]	; (80004f0 <main+0x104>)
 800042c:	2201      	movs	r2, #1
 800042e:	0018      	movs	r0, r3
 8000430:	f003 fb3a 	bl	8003aa8 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	lampStatus = checkLampStatus();
 8000434:	f000 fa2e 	bl	8000894 <checkLampStatus>
 8000438:	0003      	movs	r3, r0
 800043a:	001a      	movs	r2, r3
 800043c:	4b2d      	ldr	r3, [pc, #180]	; (80004f4 <main+0x108>)
 800043e:	701a      	strb	r2, [r3, #0]

	if(lampStatus == 0){
 8000440:	4b2c      	ldr	r3, [pc, #176]	; (80004f4 <main+0x108>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d118      	bne.n	800047a <main+0x8e>
		if(whichLight != 0){
 8000448:	4b2b      	ldr	r3, [pc, #172]	; (80004f8 <main+0x10c>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d003      	beq.n	8000458 <main+0x6c>
			HAL_TIM_Base_Start(&htim15);
 8000450:	4b24      	ldr	r3, [pc, #144]	; (80004e4 <main+0xf8>)
 8000452:	0018      	movs	r0, r3
 8000454:	f002 ff72 	bl	800333c <HAL_TIM_Base_Start>
		}
		if(__HAL_TIM_GetCounter(&htim15) > 3000){
 8000458:	4b22      	ldr	r3, [pc, #136]	; (80004e4 <main+0xf8>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800045e:	4a27      	ldr	r2, [pc, #156]	; (80004fc <main+0x110>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d90a      	bls.n	800047a <main+0x8e>
			HAL_TIM_Base_Stop(&htim15);
 8000464:	4b1f      	ldr	r3, [pc, #124]	; (80004e4 <main+0xf8>)
 8000466:	0018      	movs	r0, r3
 8000468:	f002 ffb6 	bl	80033d8 <HAL_TIM_Base_Stop>
			__HAL_TIM_SET_COUNTER(&htim15,0);
 800046c:	4b1d      	ldr	r3, [pc, #116]	; (80004e4 <main+0xf8>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2200      	movs	r2, #0
 8000472:	625a      	str	r2, [r3, #36]	; 0x24
			whichLight = 0;
 8000474:	4b20      	ldr	r3, [pc, #128]	; (80004f8 <main+0x10c>)
 8000476:	2200      	movs	r2, #0
 8000478:	701a      	strb	r2, [r3, #0]
		}
	}
	if(lampStatus != 0){
 800047a:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <main+0x108>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d00b      	beq.n	800049a <main+0xae>
		if(whichLight != 0){
 8000482:	4b1d      	ldr	r3, [pc, #116]	; (80004f8 <main+0x10c>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d003      	beq.n	8000492 <main+0xa6>
			__HAL_TIM_SET_COUNTER(&htim15,0);
 800048a:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <main+0xf8>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2200      	movs	r2, #0
 8000490:	625a      	str	r2, [r3, #36]	; 0x24
		}
		whichLight = lampStatus;
 8000492:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <main+0x108>)
 8000494:	781a      	ldrb	r2, [r3, #0]
 8000496:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <main+0x10c>)
 8000498:	701a      	strb	r2, [r3, #0]
	}



	if(__HAL_TIM_GetCounter(&htim16) > 5){
 800049a:	4b19      	ldr	r3, [pc, #100]	; (8000500 <main+0x114>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004a0:	2b05      	cmp	r3, #5
 80004a2:	d9c7      	bls.n	8000434 <main+0x48>
		__HAL_TIM_SET_COUNTER(&htim16,0);
 80004a4:	4b16      	ldr	r3, [pc, #88]	; (8000500 <main+0x114>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2200      	movs	r2, #0
 80004aa:	625a      	str	r2, [r3, #36]	; 0x24
	    HAL_TIM_Base_Stop(&htim16);
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <main+0x114>)
 80004ae:	0018      	movs	r0, r3
 80004b0:	f002 ff92 	bl	80033d8 <HAL_TIM_Base_Stop>
	    buffComming = 0;
 80004b4:	4b13      	ldr	r3, [pc, #76]	; (8000504 <main+0x118>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	701a      	strb	r2, [r3, #0]
	    if(CRC_MODBUS(rx_data, rx_count) && rx_data[0] == MODBUSADD) modbusTransHandle();
 80004ba:	4b13      	ldr	r3, [pc, #76]	; (8000508 <main+0x11c>)
 80004bc:	781a      	ldrb	r2, [r3, #0]
 80004be:	4b13      	ldr	r3, [pc, #76]	; (800050c <main+0x120>)
 80004c0:	0011      	movs	r1, r2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 fafa 	bl	8000abc <CRC_MODBUS>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d005      	beq.n	80004d8 <main+0xec>
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <main+0x120>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d101      	bne.n	80004d8 <main+0xec>
 80004d4:	f000 fbe0 	bl	8000c98 <modbusTransHandle>
	    clearRx();
 80004d8:	f000 fad0 	bl	8000a7c <clearRx>
	lampStatus = checkLampStatus();
 80004dc:	e7aa      	b.n	8000434 <main+0x48>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	20000028 	.word	0x20000028
 80004e4:	2000008c 	.word	0x2000008c
 80004e8:	20000124 	.word	0x20000124
 80004ec:	20000209 	.word	0x20000209
 80004f0:	20000170 	.word	0x20000170
 80004f4:	20000206 	.word	0x20000206
 80004f8:	20000207 	.word	0x20000207
 80004fc:	00000bb8 	.word	0x00000bb8
 8000500:	200000d8 	.word	0x200000d8
 8000504:	20000232 	.word	0x20000232
 8000508:	20000220 	.word	0x20000220
 800050c:	2000020c 	.word	0x2000020c

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b093      	sub	sp, #76	; 0x4c
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	2414      	movs	r4, #20
 8000518:	193b      	adds	r3, r7, r4
 800051a:	0018      	movs	r0, r3
 800051c:	2334      	movs	r3, #52	; 0x34
 800051e:	001a      	movs	r2, r3
 8000520:	2100      	movs	r1, #0
 8000522:	f005 f94d 	bl	80057c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	0018      	movs	r0, r3
 800052a:	2310      	movs	r3, #16
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	f005 f946 	bl	80057c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	0018      	movs	r0, r3
 800053a:	f002 f86d 	bl	8002618 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2202      	movs	r2, #2
 8000542:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	0052      	lsls	r2, r2, #1
 800054a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800054c:	193b      	adds	r3, r7, r4
 800054e:	2200      	movs	r2, #0
 8000550:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000552:	193b      	adds	r3, r7, r4
 8000554:	2240      	movs	r2, #64	; 0x40
 8000556:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000558:	193b      	adds	r3, r7, r4
 800055a:	2200      	movs	r2, #0
 800055c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055e:	193b      	adds	r3, r7, r4
 8000560:	0018      	movs	r0, r3
 8000562:	f002 f8a5 	bl	80026b0 <HAL_RCC_OscConfig>
 8000566:	1e03      	subs	r3, r0, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800056a:	f000 fbf7 	bl	8000d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2207      	movs	r2, #7
 8000572:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2100      	movs	r1, #0
 800058a:	0018      	movs	r0, r3
 800058c:	f002 fba0 	bl	8002cd0 <HAL_RCC_ClockConfig>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000594:	f000 fbe2 	bl	8000d5c <Error_Handler>
  }
}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	b013      	add	sp, #76	; 0x4c
 800059e:	bd90      	pop	{r4, r7, pc}

080005a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	0018      	movs	r0, r3
 80005aa:	230c      	movs	r3, #12
 80005ac:	001a      	movs	r2, r3
 80005ae:	2100      	movs	r1, #0
 80005b0:	f005 f906 	bl	80057c0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b4:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <MX_ADC1_Init+0xc4>)
 80005b6:	4a2c      	ldr	r2, [pc, #176]	; (8000668 <MX_ADC1_Init+0xc8>)
 80005b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005ba:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <MX_ADC1_Init+0xc4>)
 80005bc:	2280      	movs	r2, #128	; 0x80
 80005be:	05d2      	lsls	r2, r2, #23
 80005c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c2:	4b28      	ldr	r3, [pc, #160]	; (8000664 <MX_ADC1_Init+0xc4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c8:	4b26      	ldr	r3, [pc, #152]	; (8000664 <MX_ADC1_Init+0xc4>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ce:	4b25      	ldr	r3, [pc, #148]	; (8000664 <MX_ADC1_Init+0xc4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d4:	4b23      	ldr	r3, [pc, #140]	; (8000664 <MX_ADC1_Init+0xc4>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005da:	4b22      	ldr	r3, [pc, #136]	; (8000664 <MX_ADC1_Init+0xc4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80005e0:	4b20      	ldr	r3, [pc, #128]	; (8000664 <MX_ADC1_Init+0xc4>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <MX_ADC1_Init+0xc4>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80005ec:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <MX_ADC1_Init+0xc4>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f2:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <MX_ADC1_Init+0xc4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f8:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_ADC1_Init+0xc4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <MX_ADC1_Init+0xc4>)
 8000600:	222c      	movs	r2, #44	; 0x2c
 8000602:	2100      	movs	r1, #0
 8000604:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_ADC1_Init+0xc4>)
 8000608:	2200      	movs	r2, #0
 800060a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_ADC1_Init+0xc4>)
 800060e:	2200      	movs	r2, #0
 8000610:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_ADC1_Init+0xc4>)
 8000614:	2200      	movs	r2, #0
 8000616:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_ADC1_Init+0xc4>)
 800061a:	223c      	movs	r2, #60	; 0x3c
 800061c:	2100      	movs	r1, #0
 800061e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_ADC1_Init+0xc4>)
 8000622:	2200      	movs	r2, #0
 8000624:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_ADC1_Init+0xc4>)
 8000628:	0018      	movs	r0, r3
 800062a:	f000 ff17 	bl	800145c <HAL_ADC_Init>
 800062e:	1e03      	subs	r3, r0, #0
 8000630:	d001      	beq.n	8000636 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000632:	f000 fb93 	bl	8000d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4a0c      	ldr	r2, [pc, #48]	; (800066c <MX_ADC1_Init+0xcc>)
 800063a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000648:	1d3a      	adds	r2, r7, #4
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_ADC1_Init+0xc4>)
 800064c:	0011      	movs	r1, r2
 800064e:	0018      	movs	r0, r3
 8000650:	f001 f9d6 	bl	8001a00 <HAL_ADC_ConfigChannel>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000658:	f000 fb80 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b004      	add	sp, #16
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000028 	.word	0x20000028
 8000668:	40012400 	.word	0x40012400
 800066c:	0c000008 	.word	0x0c000008

08000670 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000676:	2310      	movs	r3, #16
 8000678:	18fb      	adds	r3, r7, r3
 800067a:	0018      	movs	r0, r3
 800067c:	2310      	movs	r3, #16
 800067e:	001a      	movs	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	f005 f89d 	bl	80057c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	0018      	movs	r0, r3
 800068a:	230c      	movs	r3, #12
 800068c:	001a      	movs	r2, r3
 800068e:	2100      	movs	r1, #0
 8000690:	f005 f896 	bl	80057c0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000694:	4b20      	ldr	r3, [pc, #128]	; (8000718 <MX_TIM15_Init+0xa8>)
 8000696:	4a21      	ldr	r2, [pc, #132]	; (800071c <MX_TIM15_Init+0xac>)
 8000698:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 16000;
 800069a:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <MX_TIM15_Init+0xa8>)
 800069c:	22fa      	movs	r2, #250	; 0xfa
 800069e:	0192      	lsls	r2, r2, #6
 80006a0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a2:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <MX_TIM15_Init+0xa8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_TIM15_Init+0xa8>)
 80006aa:	4a1d      	ldr	r2, [pc, #116]	; (8000720 <MX_TIM15_Init+0xb0>)
 80006ac:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <MX_TIM15_Init+0xa8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_TIM15_Init+0xa8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_TIM15_Init+0xa8>)
 80006bc:	2280      	movs	r2, #128	; 0x80
 80006be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_TIM15_Init+0xa8>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f002 fde2 	bl	800328c <HAL_TIM_Base_Init>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM15_Init+0x60>
  {
    Error_Handler();
 80006cc:	f000 fb46 	bl	8000d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d0:	2110      	movs	r1, #16
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	0152      	lsls	r2, r2, #5
 80006d8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80006da:	187a      	adds	r2, r7, r1
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_TIM15_Init+0xa8>)
 80006de:	0011      	movs	r1, r2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f002 fe9f 	bl	8003424 <HAL_TIM_ConfigClockSource>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80006ea:	f000 fb37 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80006fa:	1d3a      	adds	r2, r7, #4
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_TIM15_Init+0xa8>)
 80006fe:	0011      	movs	r1, r2
 8000700:	0018      	movs	r0, r3
 8000702:	f003 f877 	bl	80037f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 800070a:	f000 fb27 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b008      	add	sp, #32
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	2000008c 	.word	0x2000008c
 800071c:	40014000 	.word	0x40014000
 8000720:	0000ffff 	.word	0x0000ffff

08000724 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000728:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_TIM16_Init+0x48>)
 800072a:	4a11      	ldr	r2, [pc, #68]	; (8000770 <MX_TIM16_Init+0x4c>)
 800072c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16000;
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_TIM16_Init+0x48>)
 8000730:	22fa      	movs	r2, #250	; 0xfa
 8000732:	0192      	lsls	r2, r2, #6
 8000734:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_TIM16_Init+0x48>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_TIM16_Init+0x48>)
 800073e:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <MX_TIM16_Init+0x50>)
 8000740:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_TIM16_Init+0x48>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_TIM16_Init+0x48>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_TIM16_Init+0x48>)
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <MX_TIM16_Init+0x48>)
 8000756:	0018      	movs	r0, r3
 8000758:	f002 fd98 	bl	800328c <HAL_TIM_Base_Init>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000760:	f000 fafc 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	200000d8 	.word	0x200000d8
 8000770:	40014400 	.word	0x40014400
 8000774:	0000ffff 	.word	0x0000ffff

08000778 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800077c:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_TIM17_Init+0x48>)
 800077e:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <MX_TIM17_Init+0x4c>)
 8000780:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 16000;
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_TIM17_Init+0x48>)
 8000784:	22fa      	movs	r2, #250	; 0xfa
 8000786:	0192      	lsls	r2, r2, #6
 8000788:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <MX_TIM17_Init+0x48>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_TIM17_Init+0x48>)
 8000792:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <MX_TIM17_Init+0x50>)
 8000794:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_TIM17_Init+0x48>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_TIM17_Init+0x48>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007a2:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <MX_TIM17_Init+0x48>)
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <MX_TIM17_Init+0x48>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f002 fd6e 	bl	800328c <HAL_TIM_Base_Init>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80007b4:	f000 fad2 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	20000124 	.word	0x20000124
 80007c4:	40014800 	.word	0x40014800
 80007c8:	0000ffff 	.word	0x0000ffff

080007cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d0:	4b23      	ldr	r3, [pc, #140]	; (8000860 <MX_USART1_UART_Init+0x94>)
 80007d2:	4a24      	ldr	r2, [pc, #144]	; (8000864 <MX_USART1_UART_Init+0x98>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007d6:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_USART1_UART_Init+0x94>)
 80007d8:	22e1      	movs	r2, #225	; 0xe1
 80007da:	0252      	lsls	r2, r2, #9
 80007dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b20      	ldr	r3, [pc, #128]	; (8000860 <MX_USART1_UART_Init+0x94>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_USART1_UART_Init+0x94>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_USART1_UART_Init+0x94>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_USART1_UART_Init+0x94>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_USART1_UART_Init+0x94>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_USART1_UART_Init+0x94>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_USART1_UART_Init+0x94>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_USART1_UART_Init+0x94>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_USART1_UART_Init+0x94>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_USART1_UART_Init+0x94>)
 8000816:	0018      	movs	r0, r3
 8000818:	f003 f854 	bl	80038c4 <HAL_UART_Init>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000820:	f000 fa9c 	bl	8000d5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USART1_UART_Init+0x94>)
 8000826:	2100      	movs	r1, #0
 8000828:	0018      	movs	r0, r3
 800082a:	f004 fec5 	bl	80055b8 <HAL_UARTEx_SetTxFifoThreshold>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d001      	beq.n	8000836 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000832:	f000 fa93 	bl	8000d5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <MX_USART1_UART_Init+0x94>)
 8000838:	2100      	movs	r1, #0
 800083a:	0018      	movs	r0, r3
 800083c:	f004 fefc 	bl	8005638 <HAL_UARTEx_SetRxFifoThreshold>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000844:	f000 fa8a 	bl	8000d5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <MX_USART1_UART_Init+0x94>)
 800084a:	0018      	movs	r0, r3
 800084c:	f004 fe7a 	bl	8005544 <HAL_UARTEx_DisableFifoMode>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000854:	f000 fa82 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	20000170 	.word	0x20000170
 8000864:	40013800 	.word	0x40013800

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_GPIO_Init+0x28>)
 8000870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <MX_GPIO_Init+0x28>)
 8000874:	2101      	movs	r1, #1
 8000876:	430a      	orrs	r2, r1
 8000878:	635a      	str	r2, [r3, #52]	; 0x34
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <MX_GPIO_Init+0x28>)
 800087c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800087e:	2201      	movs	r2, #1
 8000880:	4013      	ands	r3, r2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b002      	add	sp, #8
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	40021000 	.word	0x40021000

08000894 <checkLampStatus>:

/* USER CODE BEGIN 4 */
char checkLampStatus(void)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfigPrivate = {0};
 800089a:	2408      	movs	r4, #8
 800089c:	193b      	adds	r3, r7, r4
 800089e:	0018      	movs	r0, r3
 80008a0:	230c      	movs	r3, #12
 80008a2:	001a      	movs	r2, r3
 80008a4:	2100      	movs	r1, #0
 80008a6:	f004 ff8b 	bl	80057c0 <memset>
  uint16_t DCValue[3];

  sConfigPrivate.Channel = ADC_CHANNEL_2;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	4a50      	ldr	r2, [pc, #320]	; (80009f0 <checkLampStatus+0x15c>)
 80008ae:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80008b0:	193a      	adds	r2, r7, r4
 80008b2:	4b50      	ldr	r3, [pc, #320]	; (80009f4 <checkLampStatus+0x160>)
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 f8a2 	bl	8001a00 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 80008bc:	4b4d      	ldr	r3, [pc, #308]	; (80009f4 <checkLampStatus+0x160>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 ff74 	bl	80017ac <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1,1000);
 80008c4:	23fa      	movs	r3, #250	; 0xfa
 80008c6:	009a      	lsls	r2, r3, #2
 80008c8:	4b4a      	ldr	r3, [pc, #296]	; (80009f4 <checkLampStatus+0x160>)
 80008ca:	0011      	movs	r1, r2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f000 fff7 	bl	80018c0 <HAL_ADC_PollForConversion>
  DCValue[0] = HAL_ADC_GetValue(&hadc1);
 80008d2:	4b48      	ldr	r3, [pc, #288]	; (80009f4 <checkLampStatus+0x160>)
 80008d4:	0018      	movs	r0, r3
 80008d6:	f001 f887 	bl	80019e8 <HAL_ADC_GetValue>
 80008da:	0003      	movs	r3, r0
 80008dc:	b29a      	uxth	r2, r3
 80008de:	003b      	movs	r3, r7
 80008e0:	801a      	strh	r2, [r3, #0]
  HAL_ADC_Stop(&hadc1);
 80008e2:	4b44      	ldr	r3, [pc, #272]	; (80009f4 <checkLampStatus+0x160>)
 80008e4:	0018      	movs	r0, r3
 80008e6:	f000 ffaf 	bl	8001848 <HAL_ADC_Stop>

  sConfigPrivate.Channel = ADC_CHANNEL_5;
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	4a42      	ldr	r2, [pc, #264]	; (80009f8 <checkLampStatus+0x164>)
 80008ee:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80008f0:	193a      	adds	r2, r7, r4
 80008f2:	4b40      	ldr	r3, [pc, #256]	; (80009f4 <checkLampStatus+0x160>)
 80008f4:	0011      	movs	r1, r2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f001 f882 	bl	8001a00 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 80008fc:	4b3d      	ldr	r3, [pc, #244]	; (80009f4 <checkLampStatus+0x160>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 ff54 	bl	80017ac <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1,1000);
 8000904:	23fa      	movs	r3, #250	; 0xfa
 8000906:	009a      	lsls	r2, r3, #2
 8000908:	4b3a      	ldr	r3, [pc, #232]	; (80009f4 <checkLampStatus+0x160>)
 800090a:	0011      	movs	r1, r2
 800090c:	0018      	movs	r0, r3
 800090e:	f000 ffd7 	bl	80018c0 <HAL_ADC_PollForConversion>
  DCValue[1] = HAL_ADC_GetValue(&hadc1);
 8000912:	4b38      	ldr	r3, [pc, #224]	; (80009f4 <checkLampStatus+0x160>)
 8000914:	0018      	movs	r0, r3
 8000916:	f001 f867 	bl	80019e8 <HAL_ADC_GetValue>
 800091a:	0003      	movs	r3, r0
 800091c:	b29a      	uxth	r2, r3
 800091e:	003b      	movs	r3, r7
 8000920:	805a      	strh	r2, [r3, #2]
  HAL_ADC_Stop(&hadc1);
 8000922:	4b34      	ldr	r3, [pc, #208]	; (80009f4 <checkLampStatus+0x160>)
 8000924:	0018      	movs	r0, r3
 8000926:	f000 ff8f 	bl	8001848 <HAL_ADC_Stop>

  sConfigPrivate.Channel = ADC_CHANNEL_7;
 800092a:	193b      	adds	r3, r7, r4
 800092c:	4a33      	ldr	r2, [pc, #204]	; (80009fc <checkLampStatus+0x168>)
 800092e:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 8000930:	193a      	adds	r2, r7, r4
 8000932:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <checkLampStatus+0x160>)
 8000934:	0011      	movs	r1, r2
 8000936:	0018      	movs	r0, r3
 8000938:	f001 f862 	bl	8001a00 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 800093c:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <checkLampStatus+0x160>)
 800093e:	0018      	movs	r0, r3
 8000940:	f000 ff34 	bl	80017ac <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1,1000);
 8000944:	23fa      	movs	r3, #250	; 0xfa
 8000946:	009a      	lsls	r2, r3, #2
 8000948:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <checkLampStatus+0x160>)
 800094a:	0011      	movs	r1, r2
 800094c:	0018      	movs	r0, r3
 800094e:	f000 ffb7 	bl	80018c0 <HAL_ADC_PollForConversion>
  DCValue[2] = HAL_ADC_GetValue(&hadc1);
 8000952:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <checkLampStatus+0x160>)
 8000954:	0018      	movs	r0, r3
 8000956:	f001 f847 	bl	80019e8 <HAL_ADC_GetValue>
 800095a:	0003      	movs	r3, r0
 800095c:	b29a      	uxth	r2, r3
 800095e:	003b      	movs	r3, r7
 8000960:	809a      	strh	r2, [r3, #4]
  HAL_ADC_Stop(&hadc1);
 8000962:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <checkLampStatus+0x160>)
 8000964:	0018      	movs	r0, r3
 8000966:	f000 ff6f 	bl	8001848 <HAL_ADC_Stop>

  //check which is highest value
  uint16_t max = 0;
 800096a:	2316      	movs	r3, #22
 800096c:	18fb      	adds	r3, r7, r3
 800096e:	2200      	movs	r2, #0
 8000970:	801a      	strh	r2, [r3, #0]
  char maxPos = 0;
 8000972:	2315      	movs	r3, #21
 8000974:	18fb      	adds	r3, r7, r3
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
  for(char i = 0; i < 3; i++)
 800097a:	2314      	movs	r3, #20
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	e01d      	b.n	80009c0 <checkLampStatus+0x12c>
  {
    if(DCValue[i] > max)
 8000984:	2014      	movs	r0, #20
 8000986:	183b      	adds	r3, r7, r0
 8000988:	781a      	ldrb	r2, [r3, #0]
 800098a:	003b      	movs	r3, r7
 800098c:	0052      	lsls	r2, r2, #1
 800098e:	5ad3      	ldrh	r3, [r2, r3]
 8000990:	2416      	movs	r4, #22
 8000992:	193a      	adds	r2, r7, r4
 8000994:	8812      	ldrh	r2, [r2, #0]
 8000996:	429a      	cmp	r2, r3
 8000998:	d20c      	bcs.n	80009b4 <checkLampStatus+0x120>
    {
      max = DCValue[i];
 800099a:	183b      	adds	r3, r7, r0
 800099c:	7819      	ldrb	r1, [r3, #0]
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	003a      	movs	r2, r7
 80009a2:	0049      	lsls	r1, r1, #1
 80009a4:	5a8a      	ldrh	r2, [r1, r2]
 80009a6:	801a      	strh	r2, [r3, #0]
      maxPos = i + 1;
 80009a8:	2315      	movs	r3, #21
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	183a      	adds	r2, r7, r0
 80009ae:	7812      	ldrb	r2, [r2, #0]
 80009b0:	3201      	adds	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]
  for(char i = 0; i < 3; i++)
 80009b4:	2114      	movs	r1, #20
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	781a      	ldrb	r2, [r3, #0]
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	3201      	adds	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
 80009c0:	2314      	movs	r3, #20
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d9dc      	bls.n	8000984 <checkLampStatus+0xf0>
    }
  }
  //check if that is no light (all off)
  if(max < ADCthreshold) // fix here
 80009ca:	2316      	movs	r3, #22
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	881a      	ldrh	r2, [r3, #0]
 80009d0:	23fa      	movs	r3, #250	; 0xfa
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d203      	bcs.n	80009e0 <checkLampStatus+0x14c>
  {
    maxPos = 0;
 80009d8:	2315      	movs	r3, #21
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
  }
  return maxPos;
 80009e0:	2315      	movs	r3, #21
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	781b      	ldrb	r3, [r3, #0]

}
 80009e6:	0018      	movs	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b007      	add	sp, #28
 80009ec:	bd90      	pop	{r4, r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	08000004 	.word	0x08000004
 80009f4:	20000028 	.word	0x20000028
 80009f8:	14000020 	.word	0x14000020
 80009fc:	1c000080 	.word	0x1c000080

08000a00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1){
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <HAL_UART_RxCpltCallback+0x60>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d121      	bne.n	8000a56 <HAL_UART_RxCpltCallback+0x56>
    	if(buffComming == 0){
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <HAL_UART_RxCpltCallback+0x64>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d106      	bne.n	8000a28 <HAL_UART_RxCpltCallback+0x28>
    		buffComming = 1;
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_UART_RxCpltCallback+0x64>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	701a      	strb	r2, [r3, #0]
    		HAL_TIM_Base_Start(&htim16);
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_UART_RxCpltCallback+0x68>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f002 fc8a 	bl	800333c <HAL_TIM_Base_Start>
    	}
        HAL_UART_Receive_IT(&huart1, &rx_dataChar, 1);
 8000a28:	4910      	ldr	r1, [pc, #64]	; (8000a6c <HAL_UART_RxCpltCallback+0x6c>)
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <HAL_UART_RxCpltCallback+0x70>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f003 f83a 	bl	8003aa8 <HAL_UART_Receive_IT>
        rx_data[rx_count] = rx_dataChar;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <HAL_UART_RxCpltCallback+0x74>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	001a      	movs	r2, r3
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_UART_RxCpltCallback+0x6c>)
 8000a3c:	7819      	ldrb	r1, [r3, #0]
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_UART_RxCpltCallback+0x78>)
 8000a40:	5499      	strb	r1, [r3, r2]
        rx_count++;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HAL_UART_RxCpltCallback+0x74>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	3301      	adds	r3, #1
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_UART_RxCpltCallback+0x74>)
 8000a4c:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim16,0);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_UART_RxCpltCallback+0x68>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
    }
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b002      	add	sp, #8
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	40013800 	.word	0x40013800
 8000a64:	20000232 	.word	0x20000232
 8000a68:	200000d8 	.word	0x200000d8
 8000a6c:	20000209 	.word	0x20000209
 8000a70:	20000170 	.word	0x20000170
 8000a74:	20000220 	.word	0x20000220
 8000a78:	2000020c 	.word	0x2000020c

08000a7c <clearRx>:

void clearRx (void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
  for(uint8_t i = 0; i < maxRxSize; i++)
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
 8000a88:	e009      	b.n	8000a9e <clearRx+0x22>
  {
    rx_data[i] = '\0';
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	4a09      	ldr	r2, [pc, #36]	; (8000ab4 <clearRx+0x38>)
 8000a90:	2100      	movs	r1, #0
 8000a92:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < maxRxSize; i++)
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781a      	ldrb	r2, [r3, #0]
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	3201      	adds	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b13      	cmp	r3, #19
 8000aa4:	d9f1      	bls.n	8000a8a <clearRx+0xe>
  }
  rx_count = 0;
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <clearRx+0x3c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b002      	add	sp, #8
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000020c 	.word	0x2000020c
 8000ab8:	20000220 	.word	0x20000220

08000abc <CRC_MODBUS>:
uint8_t CRC_MODBUS(uint8_t *input, uint8_t size)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	000a      	movs	r2, r1
 8000ac6:	1cfb      	adds	r3, r7, #3
 8000ac8:	701a      	strb	r2, [r3, #0]
  uint16_t check_sum[2];
  uint16_t reg_crc = 0xFFFF;
 8000aca:	230e      	movs	r3, #14
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4252      	negs	r2, r2
 8000ad2:	801a      	strh	r2, [r3, #0]

  for(uint8_t i = 0; i < size - 2; i++) { //tru 2 bytes CRC cuoi
 8000ad4:	230d      	movs	r3, #13
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	e04a      	b.n	8000b74 <CRC_MODBUS+0xb8>
    reg_crc ^= input[i];
 8000ade:	230d      	movs	r3, #13
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	18d3      	adds	r3, r2, r3
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	b299      	uxth	r1, r3
 8000aec:	220e      	movs	r2, #14
 8000aee:	18bb      	adds	r3, r7, r2
 8000af0:	18ba      	adds	r2, r7, r2
 8000af2:	8812      	ldrh	r2, [r2, #0]
 8000af4:	404a      	eors	r2, r1
 8000af6:	801a      	strh	r2, [r3, #0]

    for(uint8_t j = 0; j < 8; j++) {
 8000af8:	230c      	movs	r3, #12
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	e01a      	b.n	8000b38 <CRC_MODBUS+0x7c>
      if((reg_crc & 0x01) == 1) reg_crc = (reg_crc >> 1) ^ 0xA001;
 8000b02:	210e      	movs	r1, #14
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	d008      	beq.n	8000b20 <CRC_MODBUS+0x64>
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	085b      	lsrs	r3, r3, #1
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	4929      	ldr	r1, [pc, #164]	; (8000bc0 <CRC_MODBUS+0x104>)
 8000b1a:	404a      	eors	r2, r1
 8000b1c:	801a      	strh	r2, [r3, #0]
 8000b1e:	e005      	b.n	8000b2c <CRC_MODBUS+0x70>
      else reg_crc = reg_crc >> 1;
 8000b20:	220e      	movs	r2, #14
 8000b22:	18bb      	adds	r3, r7, r2
 8000b24:	18ba      	adds	r2, r7, r2
 8000b26:	8812      	ldrh	r2, [r2, #0]
 8000b28:	0852      	lsrs	r2, r2, #1
 8000b2a:	801a      	strh	r2, [r3, #0]
    for(uint8_t j = 0; j < 8; j++) {
 8000b2c:	210c      	movs	r1, #12
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	3201      	adds	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
 8000b38:	230c      	movs	r3, #12
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b07      	cmp	r3, #7
 8000b40:	d9df      	bls.n	8000b02 <CRC_MODBUS+0x46>
    }

    check_sum[1] = (reg_crc >> 8) &0xFF;
 8000b42:	200e      	movs	r0, #14
 8000b44:	183b      	adds	r3, r7, r0
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	2108      	movs	r1, #8
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	805a      	strh	r2, [r3, #2]
    check_sum[0] = reg_crc & 0xFF;
 8000b52:	183b      	adds	r3, r7, r0
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	22ff      	movs	r2, #255	; 0xff
 8000b58:	4013      	ands	r3, r2
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	801a      	strh	r2, [r3, #0]
    debug = check_sum[0];
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	881a      	ldrh	r2, [r3, #0]
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <CRC_MODBUS+0x108>)
 8000b66:	801a      	strh	r2, [r3, #0]
  for(uint8_t i = 0; i < size - 2; i++) { //tru 2 bytes CRC cuoi
 8000b68:	210d      	movs	r1, #13
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	781a      	ldrb	r2, [r3, #0]
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	3201      	adds	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
 8000b74:	230d      	movs	r3, #13
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	781a      	ldrb	r2, [r3, #0]
 8000b7a:	1cfb      	adds	r3, r7, #3
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	3b02      	subs	r3, #2
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dbac      	blt.n	8000ade <CRC_MODBUS+0x22>
  }

  if(input[size-2] == check_sum[0] && input[size-1] == check_sum[1]) return 1;
 8000b84:	1cfb      	adds	r3, r7, #3
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	3b02      	subs	r3, #2
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	18d3      	adds	r3, r2, r3
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	2108      	movs	r1, #8
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d10c      	bne.n	8000bb6 <CRC_MODBUS+0xfa>
 8000b9c:	1cfb      	adds	r3, r7, #3
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	18d3      	adds	r3, r2, r3
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	885b      	ldrh	r3, [r3, #2]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d101      	bne.n	8000bb6 <CRC_MODBUS+0xfa>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <CRC_MODBUS+0xfc>
  else return 0;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b004      	add	sp, #16
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	ffffa001 	.word	0xffffa001
 8000bc4:	20000204 	.word	0x20000204

08000bc8 <Calc_CRC16>:

void Calc_CRC16(uint8_t *input, uint16_t size, uint8_t *output)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	230a      	movs	r3, #10
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	1c0a      	adds	r2, r1, #0
 8000bd8:	801a      	strh	r2, [r3, #0]
  uint16_t reg_crc = 0xFFFF;
 8000bda:	2316      	movs	r3, #22
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	2201      	movs	r2, #1
 8000be0:	4252      	negs	r2, r2
 8000be2:	801a      	strh	r2, [r3, #0]

  for(uint16_t i = 0; i < size; i++)
 8000be4:	2314      	movs	r3, #20
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	2200      	movs	r2, #0
 8000bea:	801a      	strh	r2, [r3, #0]
 8000bec:	e037      	b.n	8000c5e <Calc_CRC16+0x96>
  {
    reg_crc ^= input[i];
 8000bee:	2314      	movs	r3, #20
 8000bf0:	18fb      	adds	r3, r7, r3
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	18d3      	adds	r3, r2, r3
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b299      	uxth	r1, r3
 8000bfc:	2216      	movs	r2, #22
 8000bfe:	18bb      	adds	r3, r7, r2
 8000c00:	18ba      	adds	r2, r7, r2
 8000c02:	8812      	ldrh	r2, [r2, #0]
 8000c04:	404a      	eors	r2, r1
 8000c06:	801a      	strh	r2, [r3, #0]
    for(uint8_t j = 0; j < 8; j++)
 8000c08:	2313      	movs	r3, #19
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
 8000c10:	e01a      	b.n	8000c48 <Calc_CRC16+0x80>
    {
      if((reg_crc & 0x01) == 1) reg_crc = (reg_crc >> 1) ^ 0xA001;
 8000c12:	2116      	movs	r1, #22
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	d008      	beq.n	8000c30 <Calc_CRC16+0x68>
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	085b      	lsrs	r3, r3, #1
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	491a      	ldr	r1, [pc, #104]	; (8000c94 <Calc_CRC16+0xcc>)
 8000c2a:	404a      	eors	r2, r1
 8000c2c:	801a      	strh	r2, [r3, #0]
 8000c2e:	e005      	b.n	8000c3c <Calc_CRC16+0x74>
      else reg_crc = reg_crc >> 1;
 8000c30:	2216      	movs	r2, #22
 8000c32:	18bb      	adds	r3, r7, r2
 8000c34:	18ba      	adds	r2, r7, r2
 8000c36:	8812      	ldrh	r2, [r2, #0]
 8000c38:	0852      	lsrs	r2, r2, #1
 8000c3a:	801a      	strh	r2, [r3, #0]
    for(uint8_t j = 0; j < 8; j++)
 8000c3c:	2113      	movs	r1, #19
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	3201      	adds	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
 8000c48:	2313      	movs	r3, #19
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b07      	cmp	r3, #7
 8000c50:	d9df      	bls.n	8000c12 <Calc_CRC16+0x4a>
  for(uint16_t i = 0; i < size; i++)
 8000c52:	2114      	movs	r1, #20
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	881a      	ldrh	r2, [r3, #0]
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	3201      	adds	r2, #1
 8000c5c:	801a      	strh	r2, [r3, #0]
 8000c5e:	2314      	movs	r3, #20
 8000c60:	18fa      	adds	r2, r7, r3
 8000c62:	230a      	movs	r3, #10
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	8812      	ldrh	r2, [r2, #0]
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d3bf      	bcc.n	8000bee <Calc_CRC16+0x26>
    }
  }

  output[1] = (reg_crc >> 8) &0xFF;
 8000c6e:	2116      	movs	r1, #22
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	701a      	strb	r2, [r3, #0]
  output[0] = reg_crc & 0xFF;
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	701a      	strb	r2, [r3, #0]
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b006      	add	sp, #24
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	ffffa001 	.word	0xffffa001

08000c98 <modbusTransHandle>:

void modbusTransHandle (void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
	uint8_t CRCbuff[2];

	tx_data[0] = MODBUSADD;
 8000c9e:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <modbusTransHandle+0xa8>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x04;
 8000ca4:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <modbusTransHandle+0xa8>)
 8000ca6:	2204      	movs	r2, #4
 8000ca8:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x0A;
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <modbusTransHandle+0xa8>)
 8000cac:	220a      	movs	r2, #10
 8000cae:	709a      	strb	r2, [r3, #2]
	tx_data[3] = SensorType;
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <modbusTransHandle+0xa8>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	70da      	strb	r2, [r3, #3]
	tx_data[4] = isBlink;
 8000cb6:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <modbusTransHandle+0xac>)
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <modbusTransHandle+0xa8>)
 8000cbc:	711a      	strb	r2, [r3, #4]
	tx_data[5] = whichLight;
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <modbusTransHandle+0xb0>)
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <modbusTransHandle+0xa8>)
 8000cc4:	715a      	strb	r2, [r3, #5]
	tx_data[6] = Blink_RedAccumulateTime >> 8;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <modbusTransHandle+0xb4>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	0a1b      	lsrs	r3, r3, #8
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <modbusTransHandle+0xa8>)
 8000cd2:	719a      	strb	r2, [r3, #6]
	tx_data[7] = Blink_RedAccumulateTime;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <modbusTransHandle+0xb4>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <modbusTransHandle+0xa8>)
 8000cdc:	71da      	strb	r2, [r3, #7]
	tx_data[8] = Blink_YellowAccumulateTime >> 8;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <modbusTransHandle+0xb8>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	0a1b      	lsrs	r3, r3, #8
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <modbusTransHandle+0xa8>)
 8000cea:	721a      	strb	r2, [r3, #8]
	tx_data[9] = Blink_YellowAccumulateTime;
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <modbusTransHandle+0xb8>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <modbusTransHandle+0xa8>)
 8000cf4:	725a      	strb	r2, [r3, #9]
	tx_data[10] = Blink_GreenAccumulateTime >> 8;
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <modbusTransHandle+0xbc>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	0a1b      	lsrs	r3, r3, #8
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <modbusTransHandle+0xa8>)
 8000d02:	729a      	strb	r2, [r3, #10]
	tx_data[11] = Blink_GreenAccumulateTime;
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <modbusTransHandle+0xbc>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <modbusTransHandle+0xa8>)
 8000d0c:	72da      	strb	r2, [r3, #11]

	Calc_CRC16(tx_data, 12, CRCbuff);
 8000d0e:	1d3a      	adds	r2, r7, #4
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <modbusTransHandle+0xa8>)
 8000d12:	210c      	movs	r1, #12
 8000d14:	0018      	movs	r0, r3
 8000d16:	f7ff ff57 	bl	8000bc8 <Calc_CRC16>
	tx_data[12] = CRCbuff[0];
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	781a      	ldrb	r2, [r3, #0]
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <modbusTransHandle+0xa8>)
 8000d20:	731a      	strb	r2, [r3, #12]
	tx_data[13] = CRCbuff[1];
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	785a      	ldrb	r2, [r3, #1]
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <modbusTransHandle+0xa8>)
 8000d28:	735a      	strb	r2, [r3, #13]

	HAL_UART_Transmit(&huart1,&tx_data,sizeof(tx_data), 100);
 8000d2a:	4905      	ldr	r1, [pc, #20]	; (8000d40 <modbusTransHandle+0xa8>)
 8000d2c:	480a      	ldr	r0, [pc, #40]	; (8000d58 <modbusTransHandle+0xc0>)
 8000d2e:	2364      	movs	r3, #100	; 0x64
 8000d30:	220e      	movs	r2, #14
 8000d32:	f002 fe1d 	bl	8003970 <HAL_UART_Transmit>
}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b002      	add	sp, #8
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	20000224 	.word	0x20000224
 8000d44:	20000208 	.word	0x20000208
 8000d48:	20000207 	.word	0x20000207
 8000d4c:	20000234 	.word	0x20000234
 8000d50:	20000236 	.word	0x20000236
 8000d54:	20000238 	.word	0x20000238
 8000d58:	20000170 	.word	0x20000170

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d60:	b672      	cpsid	i
}
 8000d62:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <Error_Handler+0x8>
	...

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <HAL_MspInit+0x44>)
 8000d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_MspInit+0x44>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	430a      	orrs	r2, r1
 8000d78:	641a      	str	r2, [r3, #64]	; 0x40
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_MspInit+0x44>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4013      	ands	r3, r2
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <HAL_MspInit+0x44>)
 8000d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_MspInit+0x44>)
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	0549      	lsls	r1, r1, #21
 8000d90:	430a      	orrs	r2, r1
 8000d92:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_MspInit+0x44>)
 8000d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	055b      	lsls	r3, r3, #21
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b002      	add	sp, #8
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b091      	sub	sp, #68	; 0x44
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	232c      	movs	r3, #44	; 0x2c
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	2314      	movs	r3, #20
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	f004 fcfc 	bl	80057c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc8:	2410      	movs	r4, #16
 8000dca:	193b      	adds	r3, r7, r4
 8000dcc:	0018      	movs	r0, r3
 8000dce:	231c      	movs	r3, #28
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	f004 fcf4 	bl	80057c0 <memset>
  if(hadc->Instance==ADC1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a20      	ldr	r2, [pc, #128]	; (8000e60 <HAL_ADC_MspInit+0xb0>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d139      	bne.n	8000e56 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	01d2      	lsls	r2, r2, #7
 8000de8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000dea:	193b      	adds	r3, r7, r4
 8000dec:	2200      	movs	r2, #0
 8000dee:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	0018      	movs	r0, r3
 8000df4:	f002 f916 	bl	8003024 <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000dfc:	f7ff ffae 	bl	8000d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e00:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_ADC_MspInit+0xb4>)
 8000e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_ADC_MspInit+0xb4>)
 8000e06:	2180      	movs	r1, #128	; 0x80
 8000e08:	0349      	lsls	r1, r1, #13
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_ADC_MspInit+0xb4>)
 8000e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	035b      	lsls	r3, r3, #13
 8000e16:	4013      	ands	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_ADC_MspInit+0xb4>)
 8000e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e20:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <HAL_ADC_MspInit+0xb4>)
 8000e22:	2101      	movs	r1, #1
 8000e24:	430a      	orrs	r2, r1
 8000e26:	635a      	str	r2, [r3, #52]	; 0x34
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_ADC_MspInit+0xb4>)
 8000e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4013      	ands	r3, r2
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000e34:	212c      	movs	r1, #44	; 0x2c
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	2238      	movs	r2, #56	; 0x38
 8000e3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	187a      	adds	r2, r7, r1
 8000e4a:	23a0      	movs	r3, #160	; 0xa0
 8000e4c:	05db      	lsls	r3, r3, #23
 8000e4e:	0011      	movs	r1, r2
 8000e50:	0018      	movs	r0, r3
 8000e52:	f001 fa7d 	bl	8002350 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b011      	add	sp, #68	; 0x44
 8000e5c:	bd90      	pop	{r4, r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	40012400 	.word	0x40012400
 8000e64:	40021000 	.word	0x40021000

08000e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a1e      	ldr	r2, [pc, #120]	; (8000ef0 <HAL_TIM_Base_MspInit+0x88>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d10e      	bne.n	8000e98 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	0249      	lsls	r1, r1, #9
 8000e84:	430a      	orrs	r2, r1
 8000e86:	641a      	str	r2, [r3, #64]	; 0x40
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	025b      	lsls	r3, r3, #9
 8000e90:	4013      	ands	r3, r2
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000e96:	e026      	b.n	8000ee6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM16)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a16      	ldr	r2, [pc, #88]	; (8000ef8 <HAL_TIM_Base_MspInit+0x90>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d10e      	bne.n	8000ec0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_TIM_Base_MspInit+0x8c>)
 8000ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <HAL_TIM_Base_MspInit+0x8c>)
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	0289      	lsls	r1, r1, #10
 8000eac:	430a      	orrs	r2, r1
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_TIM_Base_MspInit+0x8c>)
 8000eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	029b      	lsls	r3, r3, #10
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
}
 8000ebe:	e012      	b.n	8000ee6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM17)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <HAL_TIM_Base_MspInit+0x94>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d10d      	bne.n	8000ee6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_TIM_Base_MspInit+0x8c>)
 8000ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_TIM_Base_MspInit+0x8c>)
 8000ed0:	2180      	movs	r1, #128	; 0x80
 8000ed2:	02c9      	lsls	r1, r1, #11
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_TIM_Base_MspInit+0x8c>)
 8000eda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	02db      	lsls	r3, r3, #11
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b006      	add	sp, #24
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	40014000 	.word	0x40014000
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40014400 	.word	0x40014400
 8000efc:	40014800 	.word	0x40014800

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b091      	sub	sp, #68	; 0x44
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	232c      	movs	r3, #44	; 0x2c
 8000f0a:	18fb      	adds	r3, r7, r3
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	2314      	movs	r3, #20
 8000f10:	001a      	movs	r2, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	f004 fc54 	bl	80057c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f18:	2410      	movs	r4, #16
 8000f1a:	193b      	adds	r3, r7, r4
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	231c      	movs	r3, #28
 8000f20:	001a      	movs	r2, r3
 8000f22:	2100      	movs	r1, #0
 8000f24:	f004 fc4c 	bl	80057c0 <memset>
  if(huart->Instance==USART1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d147      	bne.n	8000fc2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f32:	193b      	adds	r3, r7, r4
 8000f34:	2201      	movs	r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f38:	193b      	adds	r3, r7, r4
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3e:	193b      	adds	r3, r7, r4
 8000f40:	0018      	movs	r0, r3
 8000f42:	f002 f86f 	bl	8003024 <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	1e03      	subs	r3, r0, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f4a:	f7ff ff07 	bl	8000d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <HAL_UART_MspInit+0xd0>)
 8000f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f52:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <HAL_UART_MspInit+0xd0>)
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	01c9      	lsls	r1, r1, #7
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <HAL_UART_MspInit+0xd0>)
 8000f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	01db      	lsls	r3, r3, #7
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <HAL_UART_MspInit+0xd0>)
 8000f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <HAL_UART_MspInit+0xd0>)
 8000f70:	2101      	movs	r1, #1
 8000f72:	430a      	orrs	r2, r1
 8000f74:	635a      	str	r2, [r3, #52]	; 0x34
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_UART_MspInit+0xd0>)
 8000f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f82:	212c      	movs	r1, #44	; 0x2c
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	22c0      	movs	r2, #192	; 0xc0
 8000f88:	00d2      	lsls	r2, r2, #3
 8000f8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2202      	movs	r2, #2
 8000f90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	187a      	adds	r2, r7, r1
 8000fa6:	23a0      	movs	r3, #160	; 0xa0
 8000fa8:	05db      	lsls	r3, r3, #23
 8000faa:	0011      	movs	r1, r2
 8000fac:	0018      	movs	r0, r3
 8000fae:	f001 f9cf 	bl	8002350 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	201b      	movs	r0, #27
 8000fb8:	f001 f8cc 	bl	8002154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fbc:	201b      	movs	r0, #27
 8000fbe:	f001 f8de 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b011      	add	sp, #68	; 0x44
 8000fc8:	bd90      	pop	{r4, r7, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	40013800 	.word	0x40013800
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <NMI_Handler+0x4>

08000fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <HardFault_Handler+0x4>

08000fe0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff8:	f000 f8aa 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <USART1_IRQHandler+0x14>)
 800100a:	0018      	movs	r0, r3
 800100c:	f002 fda4 	bl	8003b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	20000170 	.word	0x20000170

0800101c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800102a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800102c:	f7ff fff6 	bl	800101c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <LoopForever+0x6>)
  ldr r1, =_edata
 8001032:	490d      	ldr	r1, [pc, #52]	; (8001068 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <LoopForever+0xe>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001048:	4c0a      	ldr	r4, [pc, #40]	; (8001074 <LoopForever+0x16>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001056:	f004 fb8f 	bl	8005778 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800105a:	f7ff f9c7 	bl	80003ec <main>

0800105e <LoopForever>:

LoopForever:
  b LoopForever
 800105e:	e7fe      	b.n	800105e <LoopForever>
  ldr   r0, =_estack
 8001060:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800106c:	08005878 	.word	0x08005878
  ldr r2, =_sbss
 8001070:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001074:	20000240 	.word	0x20000240

08001078 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC1_IRQHandler>
	...

0800107c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_Init+0x3c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_Init+0x3c>)
 800108e:	2180      	movs	r1, #128	; 0x80
 8001090:	0049      	lsls	r1, r1, #1
 8001092:	430a      	orrs	r2, r1
 8001094:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001096:	2003      	movs	r0, #3
 8001098:	f000 f810 	bl	80010bc <HAL_InitTick>
 800109c:	1e03      	subs	r3, r0, #0
 800109e:	d003      	beq.n	80010a8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	e001      	b.n	80010ac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010a8:	f7ff fe5e 	bl	8000d68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010ac:	1dfb      	adds	r3, r7, #7
 80010ae:	781b      	ldrb	r3, [r3, #0]
}
 80010b0:	0018      	movs	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b002      	add	sp, #8
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40022000 	.word	0x40022000

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010c4:	230f      	movs	r3, #15
 80010c6:	18fb      	adds	r3, r7, r3
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <HAL_InitTick+0x88>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d02b      	beq.n	800112c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <HAL_InitTick+0x8c>)
 80010d6:	681c      	ldr	r4, [r3, #0]
 80010d8:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <HAL_InitTick+0x88>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	0019      	movs	r1, r3
 80010de:	23fa      	movs	r3, #250	; 0xfa
 80010e0:	0098      	lsls	r0, r3, #2
 80010e2:	f7ff f80d 	bl	8000100 <__udivsi3>
 80010e6:	0003      	movs	r3, r0
 80010e8:	0019      	movs	r1, r3
 80010ea:	0020      	movs	r0, r4
 80010ec:	f7ff f808 	bl	8000100 <__udivsi3>
 80010f0:	0003      	movs	r3, r0
 80010f2:	0018      	movs	r0, r3
 80010f4:	f001 f853 	bl	800219e <HAL_SYSTICK_Config>
 80010f8:	1e03      	subs	r3, r0, #0
 80010fa:	d112      	bne.n	8001122 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d80a      	bhi.n	8001118 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	2301      	movs	r3, #1
 8001106:	425b      	negs	r3, r3
 8001108:	2200      	movs	r2, #0
 800110a:	0018      	movs	r0, r3
 800110c:	f001 f822 	bl	8002154 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_InitTick+0x90>)
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	e00d      	b.n	8001134 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001118:	230f      	movs	r3, #15
 800111a:	18fb      	adds	r3, r7, r3
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	e008      	b.n	8001134 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001122:	230f      	movs	r3, #15
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	e003      	b.n	8001134 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800112c:	230f      	movs	r3, #15
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001134:	230f      	movs	r3, #15
 8001136:	18fb      	adds	r3, r7, r3
 8001138:	781b      	ldrb	r3, [r3, #0]
}
 800113a:	0018      	movs	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	b005      	add	sp, #20
 8001140:	bd90      	pop	{r4, r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	20000008 	.word	0x20000008
 8001148:	20000000 	.word	0x20000000
 800114c:	20000004 	.word	0x20000004

08001150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_IncTick+0x1c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	001a      	movs	r2, r3
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_IncTick+0x20>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	18d2      	adds	r2, r2, r3
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <HAL_IncTick+0x20>)
 8001162:	601a      	str	r2, [r3, #0]
}
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	20000008 	.word	0x20000008
 8001170:	2000023c 	.word	0x2000023c

08001174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b02      	ldr	r3, [pc, #8]	; (8001184 <HAL_GetTick+0x10>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	2000023c 	.word	0x2000023c

08001188 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001198:	401a      	ands	r2, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	431a      	orrs	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	601a      	str	r2, [r3, #0]
}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b002      	add	sp, #8
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	fe3fffff 	.word	0xfe3fffff

080011b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	23e0      	movs	r3, #224	; 0xe0
 80011be:	045b      	lsls	r3, r3, #17
 80011c0:	4013      	ands	r3, r2
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b002      	add	sp, #8
 80011c8:	bd80      	pop	{r7, pc}

080011ca <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	2104      	movs	r1, #4
 80011de:	400a      	ands	r2, r1
 80011e0:	2107      	movs	r1, #7
 80011e2:	4091      	lsls	r1, r2
 80011e4:	000a      	movs	r2, r1
 80011e6:	43d2      	mvns	r2, r2
 80011e8:	401a      	ands	r2, r3
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2104      	movs	r1, #4
 80011ee:	400b      	ands	r3, r1
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	4099      	lsls	r1, r3
 80011f4:	000b      	movs	r3, r1
 80011f6:	431a      	orrs	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b004      	add	sp, #16
 8001202:	bd80      	pop	{r7, pc}

08001204 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	2104      	movs	r1, #4
 8001216:	400a      	ands	r2, r1
 8001218:	2107      	movs	r1, #7
 800121a:	4091      	lsls	r1, r2
 800121c:	000a      	movs	r2, r1
 800121e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	2104      	movs	r1, #4
 8001224:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001226:	40da      	lsrs	r2, r3
 8001228:	0013      	movs	r3, r2
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b002      	add	sp, #8
 8001230:	bd80      	pop	{r7, pc}

08001232 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	23c0      	movs	r3, #192	; 0xc0
 8001240:	011b      	lsls	r3, r3, #4
 8001242:	4013      	ands	r3, r2
 8001244:	d101      	bne.n	800124a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800124a:	2300      	movs	r3, #0
}
 800124c:	0018      	movs	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	b002      	add	sp, #8
 8001252:	bd80      	pop	{r7, pc}

08001254 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	211f      	movs	r1, #31
 8001268:	400a      	ands	r2, r1
 800126a:	210f      	movs	r1, #15
 800126c:	4091      	lsls	r1, r2
 800126e:	000a      	movs	r2, r1
 8001270:	43d2      	mvns	r2, r2
 8001272:	401a      	ands	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	0e9b      	lsrs	r3, r3, #26
 8001278:	210f      	movs	r1, #15
 800127a:	4019      	ands	r1, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	201f      	movs	r0, #31
 8001280:	4003      	ands	r3, r0
 8001282:	4099      	lsls	r1, r3
 8001284:	000b      	movs	r3, r1
 8001286:	431a      	orrs	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	b004      	add	sp, #16
 8001292:	bd80      	pop	{r7, pc}

08001294 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	035b      	lsls	r3, r3, #13
 80012a6:	0b5b      	lsrs	r3, r3, #13
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b002      	add	sp, #8
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	0352      	lsls	r2, r2, #13
 80012c8:	0b52      	lsrs	r2, r2, #13
 80012ca:	43d2      	mvns	r2, r2
 80012cc:	401a      	ands	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	0212      	lsls	r2, r2, #8
 80012f0:	43d2      	mvns	r2, r2
 80012f2:	401a      	ands	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	400b      	ands	r3, r1
 80012fc:	4904      	ldr	r1, [pc, #16]	; (8001310 <LL_ADC_SetChannelSamplingTime+0x34>)
 80012fe:	400b      	ands	r3, r1
 8001300:	431a      	orrs	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b004      	add	sp, #16
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	07ffff00 	.word	0x07ffff00

08001314 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	4a05      	ldr	r2, [pc, #20]	; (8001338 <LL_ADC_EnableInternalRegulator+0x24>)
 8001322:	4013      	ands	r3, r2
 8001324:	2280      	movs	r2, #128	; 0x80
 8001326:	0552      	lsls	r2, r2, #21
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	46bd      	mov	sp, r7
 8001332:	b002      	add	sp, #8
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	6fffffe8 	.word	0x6fffffe8

0800133c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	055b      	lsls	r3, r3, #21
 800134c:	401a      	ands	r2, r3
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	055b      	lsls	r3, r3, #21
 8001352:	429a      	cmp	r2, r3
 8001354:	d101      	bne.n	800135a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800135a:	2300      	movs	r3, #0
}
 800135c:	0018      	movs	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	b002      	add	sp, #8
 8001362:	bd80      	pop	{r7, pc}

08001364 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <LL_ADC_Enable+0x20>)
 8001372:	4013      	ands	r3, r2
 8001374:	2201      	movs	r2, #1
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800137c:	46c0      	nop			; (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	b002      	add	sp, #8
 8001382:	bd80      	pop	{r7, pc}
 8001384:	7fffffe8 	.word	0x7fffffe8

08001388 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <LL_ADC_Disable+0x20>)
 8001396:	4013      	ands	r3, r2
 8001398:	2202      	movs	r2, #2
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	7fffffe8 	.word	0x7fffffe8

080013ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	2201      	movs	r2, #1
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <LL_ADC_IsEnabled+0x18>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <LL_ADC_IsEnabled+0x1a>
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	0018      	movs	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b002      	add	sp, #8
 80013cc:	bd80      	pop	{r7, pc}

080013ce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2202      	movs	r2, #2
 80013dc:	4013      	ands	r3, r2
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d101      	bne.n	80013e6 <LL_ADC_IsDisableOngoing+0x18>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <LL_ADC_IsDisableOngoing+0x1a>
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	0018      	movs	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b002      	add	sp, #8
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <LL_ADC_REG_StartConversion+0x20>)
 80013fe:	4013      	ands	r3, r2
 8001400:	2204      	movs	r2, #4
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001408:	46c0      	nop			; (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	b002      	add	sp, #8
 800140e:	bd80      	pop	{r7, pc}
 8001410:	7fffffe8 	.word	0x7fffffe8

08001414 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <LL_ADC_REG_StopConversion+0x20>)
 8001422:	4013      	ands	r3, r2
 8001424:	2210      	movs	r2, #16
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b002      	add	sp, #8
 8001432:	bd80      	pop	{r7, pc}
 8001434:	7fffffe8 	.word	0x7fffffe8

08001438 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2204      	movs	r2, #4
 8001446:	4013      	ands	r3, r2
 8001448:	2b04      	cmp	r3, #4
 800144a:	d101      	bne.n	8001450 <LL_ADC_REG_IsConversionOngoing+0x18>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001450:	2300      	movs	r3, #0
}
 8001452:	0018      	movs	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	b002      	add	sp, #8
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001464:	231f      	movs	r3, #31
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e17f      	b.n	8001782 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10a      	bne.n	80014a0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff fc8f 	bl	8000db0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2254      	movs	r2, #84	; 0x54
 800149c:	2100      	movs	r1, #0
 800149e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	0018      	movs	r0, r3
 80014a6:	f7ff ff49 	bl	800133c <LL_ADC_IsInternalRegulatorEnabled>
 80014aa:	1e03      	subs	r3, r0, #0
 80014ac:	d115      	bne.n	80014da <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	0018      	movs	r0, r3
 80014b4:	f7ff ff2e 	bl	8001314 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014b8:	4bb4      	ldr	r3, [pc, #720]	; (800178c <HAL_ADC_Init+0x330>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	49b4      	ldr	r1, [pc, #720]	; (8001790 <HAL_ADC_Init+0x334>)
 80014be:	0018      	movs	r0, r3
 80014c0:	f7fe fe1e 	bl	8000100 <__udivsi3>
 80014c4:	0003      	movs	r3, r0
 80014c6:	3301      	adds	r3, #1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014cc:	e002      	b.n	80014d4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f9      	bne.n	80014ce <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	0018      	movs	r0, r3
 80014e0:	f7ff ff2c 	bl	800133c <LL_ADC_IsInternalRegulatorEnabled>
 80014e4:	1e03      	subs	r3, r0, #0
 80014e6:	d10f      	bne.n	8001508 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ec:	2210      	movs	r2, #16
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f8:	2201      	movs	r2, #1
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001500:	231f      	movs	r3, #31
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	0018      	movs	r0, r3
 800150e:	f7ff ff93 	bl	8001438 <LL_ADC_REG_IsConversionOngoing>
 8001512:	0003      	movs	r3, r0
 8001514:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	2210      	movs	r2, #16
 800151c:	4013      	ands	r3, r2
 800151e:	d000      	beq.n	8001522 <HAL_ADC_Init+0xc6>
 8001520:	e122      	b.n	8001768 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d000      	beq.n	800152a <HAL_ADC_Init+0xce>
 8001528:	e11e      	b.n	8001768 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	4a99      	ldr	r2, [pc, #612]	; (8001794 <HAL_ADC_Init+0x338>)
 8001530:	4013      	ands	r3, r2
 8001532:	2202      	movs	r2, #2
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	0018      	movs	r0, r3
 8001540:	f7ff ff34 	bl	80013ac <LL_ADC_IsEnabled>
 8001544:	1e03      	subs	r3, r0, #0
 8001546:	d000      	beq.n	800154a <HAL_ADC_Init+0xee>
 8001548:	e0ad      	b.n	80016a6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7e1b      	ldrb	r3, [r3, #24]
 8001552:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001554:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7e5b      	ldrb	r3, [r3, #25]
 800155a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800155c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7e9b      	ldrb	r3, [r3, #26]
 8001562:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001564:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <HAL_ADC_Init+0x118>
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	015b      	lsls	r3, r3, #5
 8001572:	e000      	b.n	8001576 <HAL_ADC_Init+0x11a>
 8001574:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001576:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800157c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2b00      	cmp	r3, #0
 8001584:	da04      	bge.n	8001590 <HAL_ADC_Init+0x134>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	085b      	lsrs	r3, r3, #1
 800158e:	e001      	b.n	8001594 <HAL_ADC_Init+0x138>
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001594:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	212c      	movs	r1, #44	; 0x2c
 800159a:	5c5b      	ldrb	r3, [r3, r1]
 800159c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800159e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2220      	movs	r2, #32
 80015aa:	5c9b      	ldrb	r3, [r3, r2]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d115      	bne.n	80015dc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7e9b      	ldrb	r3, [r3, #26]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d105      	bne.n	80015c4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2280      	movs	r2, #128	; 0x80
 80015bc:	0252      	lsls	r2, r2, #9
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
 80015c2:	e00b      	b.n	80015dc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c8:	2220      	movs	r2, #32
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	2201      	movs	r2, #1
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00a      	beq.n	80015fa <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015e8:	23e0      	movs	r3, #224	; 0xe0
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015f2:	4313      	orrs	r3, r2
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	4a65      	ldr	r2, [pc, #404]	; (8001798 <HAL_ADC_Init+0x33c>)
 8001602:	4013      	ands	r3, r2
 8001604:	0019      	movs	r1, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	430a      	orrs	r2, r1
 800160e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	0f9b      	lsrs	r3, r3, #30
 8001616:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800161c:	4313      	orrs	r3, r2
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	4313      	orrs	r3, r2
 8001622:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	223c      	movs	r2, #60	; 0x3c
 8001628:	5c9b      	ldrb	r3, [r3, r2]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d111      	bne.n	8001652 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	0f9b      	lsrs	r3, r3, #30
 8001634:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800163a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001640:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001646:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	4313      	orrs	r3, r2
 800164c:	2201      	movs	r2, #1
 800164e:	4313      	orrs	r3, r2
 8001650:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	4a50      	ldr	r2, [pc, #320]	; (800179c <HAL_ADC_Init+0x340>)
 800165a:	4013      	ands	r3, r2
 800165c:	0019      	movs	r1, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	430a      	orrs	r2, r1
 8001666:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	23c0      	movs	r3, #192	; 0xc0
 800166e:	061b      	lsls	r3, r3, #24
 8001670:	429a      	cmp	r2, r3
 8001672:	d018      	beq.n	80016a6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	05db      	lsls	r3, r3, #23
 800167c:	429a      	cmp	r2, r3
 800167e:	d012      	beq.n	80016a6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	061b      	lsls	r3, r3, #24
 8001688:	429a      	cmp	r2, r3
 800168a:	d00c      	beq.n	80016a6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800168c:	4b44      	ldr	r3, [pc, #272]	; (80017a0 <HAL_ADC_Init+0x344>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a44      	ldr	r2, [pc, #272]	; (80017a4 <HAL_ADC_Init+0x348>)
 8001692:	4013      	ands	r3, r2
 8001694:	0019      	movs	r1, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	23f0      	movs	r3, #240	; 0xf0
 800169c:	039b      	lsls	r3, r3, #14
 800169e:	401a      	ands	r2, r3
 80016a0:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <HAL_ADC_Init+0x344>)
 80016a2:	430a      	orrs	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ae:	001a      	movs	r2, r3
 80016b0:	2100      	movs	r1, #0
 80016b2:	f7ff fd8a 	bl	80011ca <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016be:	493a      	ldr	r1, [pc, #232]	; (80017a8 <HAL_ADC_Init+0x34c>)
 80016c0:	001a      	movs	r2, r3
 80016c2:	f7ff fd82 	bl	80011ca <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2110      	movs	r1, #16
 80016da:	4249      	negs	r1, r1
 80016dc:	430a      	orrs	r2, r1
 80016de:	629a      	str	r2, [r3, #40]	; 0x28
 80016e0:	e018      	b.n	8001714 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691a      	ldr	r2, [r3, #16]
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	039b      	lsls	r3, r3, #14
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d112      	bne.n	8001714 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	221c      	movs	r2, #28
 80016fe:	4013      	ands	r3, r2
 8001700:	2210      	movs	r2, #16
 8001702:	4252      	negs	r2, r2
 8001704:	409a      	lsls	r2, r3
 8001706:	0011      	movs	r1, r2
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2100      	movs	r1, #0
 800171a:	0018      	movs	r0, r3
 800171c:	f7ff fd72 	bl	8001204 <LL_ADC_GetSamplingTimeCommonChannels>
 8001720:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001726:	429a      	cmp	r2, r3
 8001728:	d10b      	bne.n	8001742 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001734:	2203      	movs	r2, #3
 8001736:	4393      	bics	r3, r2
 8001738:	2201      	movs	r2, #1
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001740:	e01c      	b.n	800177c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001746:	2212      	movs	r2, #18
 8001748:	4393      	bics	r3, r2
 800174a:	2210      	movs	r2, #16
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001756:	2201      	movs	r2, #1
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800175e:	231f      	movs	r3, #31
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001766:	e009      	b.n	800177c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176c:	2210      	movs	r2, #16
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001774:	231f      	movs	r3, #31
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800177c:	231f      	movs	r3, #31
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	781b      	ldrb	r3, [r3, #0]
}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	b008      	add	sp, #32
 8001788:	bd80      	pop	{r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	20000000 	.word	0x20000000
 8001790:	00030d40 	.word	0x00030d40
 8001794:	fffffefd 	.word	0xfffffefd
 8001798:	fffe0201 	.word	0xfffe0201
 800179c:	1ffffc02 	.word	0x1ffffc02
 80017a0:	40012708 	.word	0x40012708
 80017a4:	ffc3ffff 	.word	0xffc3ffff
 80017a8:	07ffff04 	.word	0x07ffff04

080017ac <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80017ac:	b5b0      	push	{r4, r5, r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7ff fe3d 	bl	8001438 <LL_ADC_REG_IsConversionOngoing>
 80017be:	1e03      	subs	r3, r0, #0
 80017c0:	d135      	bne.n	800182e <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2254      	movs	r2, #84	; 0x54
 80017c6:	5c9b      	ldrb	r3, [r3, r2]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_ADC_Start+0x24>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e035      	b.n	800183c <HAL_ADC_Start+0x90>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2254      	movs	r2, #84	; 0x54
 80017d4:	2101      	movs	r1, #1
 80017d6:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017d8:	250f      	movs	r5, #15
 80017da:	197c      	adds	r4, r7, r5
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	0018      	movs	r0, r3
 80017e0:	f000 fb28 	bl	8001e34 <ADC_Enable>
 80017e4:	0003      	movs	r3, r0
 80017e6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017e8:	197b      	adds	r3, r7, r5
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d119      	bne.n	8001824 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f4:	4a13      	ldr	r2, [pc, #76]	; (8001844 <HAL_ADC_Start+0x98>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	0052      	lsls	r2, r2, #1
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	221c      	movs	r2, #28
 800180e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2254      	movs	r2, #84	; 0x54
 8001814:	2100      	movs	r1, #0
 8001816:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	0018      	movs	r0, r3
 800181e:	f7ff fde7 	bl	80013f0 <LL_ADC_REG_StartConversion>
 8001822:	e008      	b.n	8001836 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2254      	movs	r2, #84	; 0x54
 8001828:	2100      	movs	r1, #0
 800182a:	5499      	strb	r1, [r3, r2]
 800182c:	e003      	b.n	8001836 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800182e:	230f      	movs	r3, #15
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	2202      	movs	r2, #2
 8001834:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001836:	230f      	movs	r3, #15
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	781b      	ldrb	r3, [r3, #0]
}
 800183c:	0018      	movs	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	b004      	add	sp, #16
 8001842:	bdb0      	pop	{r4, r5, r7, pc}
 8001844:	fffff0fe 	.word	0xfffff0fe

08001848 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2254      	movs	r2, #84	; 0x54
 8001854:	5c9b      	ldrb	r3, [r3, r2]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_ADC_Stop+0x16>
 800185a:	2302      	movs	r3, #2
 800185c:	e029      	b.n	80018b2 <HAL_ADC_Stop+0x6a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2254      	movs	r2, #84	; 0x54
 8001862:	2101      	movs	r1, #1
 8001864:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001866:	250f      	movs	r5, #15
 8001868:	197c      	adds	r4, r7, r5
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	0018      	movs	r0, r3
 800186e:	f000 fa9f 	bl	8001db0 <ADC_ConversionStop>
 8001872:	0003      	movs	r3, r0
 8001874:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001876:	197b      	adds	r3, r7, r5
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d112      	bne.n	80018a4 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800187e:	197c      	adds	r4, r7, r5
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	0018      	movs	r0, r3
 8001884:	f000 fb5c 	bl	8001f40 <ADC_Disable>
 8001888:	0003      	movs	r3, r0
 800188a:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800188c:	197b      	adds	r3, r7, r5
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d107      	bne.n	80018a4 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001898:	4a08      	ldr	r2, [pc, #32]	; (80018bc <HAL_ADC_Stop+0x74>)
 800189a:	4013      	ands	r3, r2
 800189c:	2201      	movs	r2, #1
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2254      	movs	r2, #84	; 0x54
 80018a8:	2100      	movs	r1, #0
 80018aa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80018ac:	230f      	movs	r3, #15
 80018ae:	18fb      	adds	r3, r7, r3
 80018b0:	781b      	ldrb	r3, [r3, #0]
}
 80018b2:	0018      	movs	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b004      	add	sp, #16
 80018b8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	fffffefe 	.word	0xfffffefe

080018c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d102      	bne.n	80018d8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80018d2:	2308      	movs	r3, #8
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	e00f      	b.n	80018f8 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2201      	movs	r2, #1
 80018e0:	4013      	ands	r3, r2
 80018e2:	d007      	beq.n	80018f4 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	2220      	movs	r2, #32
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e072      	b.n	80019da <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80018f4:	2304      	movs	r3, #4
 80018f6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80018f8:	f7ff fc3c 	bl	8001174 <HAL_GetTick>
 80018fc:	0003      	movs	r3, r0
 80018fe:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001900:	e01f      	b.n	8001942 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	d01c      	beq.n	8001942 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001908:	f7ff fc34 	bl	8001174 <HAL_GetTick>
 800190c:	0002      	movs	r2, r0
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d302      	bcc.n	800191e <HAL_ADC_PollForConversion+0x5e>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d111      	bne.n	8001942 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	4013      	ands	r3, r2
 8001928:	d10b      	bne.n	8001942 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	2204      	movs	r2, #4
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2254      	movs	r2, #84	; 0x54
 800193a:	2100      	movs	r1, #0
 800193c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e04b      	b.n	80019da <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4013      	ands	r3, r2
 800194c:	d0d9      	beq.n	8001902 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	2280      	movs	r2, #128	; 0x80
 8001954:	0092      	lsls	r2, r2, #2
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	0018      	movs	r0, r3
 8001962:	f7ff fc66 	bl	8001232 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001966:	1e03      	subs	r3, r0, #0
 8001968:	d02e      	beq.n	80019c8 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7e9b      	ldrb	r3, [r3, #26]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d12a      	bne.n	80019c8 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2208      	movs	r2, #8
 800197a:	4013      	ands	r3, r2
 800197c:	2b08      	cmp	r3, #8
 800197e:	d123      	bne.n	80019c8 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	0018      	movs	r0, r3
 8001986:	f7ff fd57 	bl	8001438 <LL_ADC_REG_IsConversionOngoing>
 800198a:	1e03      	subs	r3, r0, #0
 800198c:	d110      	bne.n	80019b0 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	210c      	movs	r1, #12
 800199a:	438a      	bics	r2, r1
 800199c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	4a10      	ldr	r2, [pc, #64]	; (80019e4 <HAL_ADC_PollForConversion+0x124>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	2201      	movs	r2, #1
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	659a      	str	r2, [r3, #88]	; 0x58
 80019ae:	e00b      	b.n	80019c8 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	2220      	movs	r2, #32
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c0:	2201      	movs	r2, #1
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7e1b      	ldrb	r3, [r3, #24]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d103      	bne.n	80019d8 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	220c      	movs	r2, #12
 80019d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	b004      	add	sp, #16
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	fffffefe 	.word	0xfffffefe

080019e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80019f6:	0018      	movs	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b002      	add	sp, #8
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a0a:	2317      	movs	r3, #23
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2254      	movs	r2, #84	; 0x54
 8001a1a:	5c9b      	ldrb	r3, [r3, r2]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x24>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e1c0      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x3a6>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2254      	movs	r2, #84	; 0x54
 8001a28:	2101      	movs	r1, #1
 8001a2a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7ff fd01 	bl	8001438 <LL_ADC_REG_IsConversionOngoing>
 8001a36:	1e03      	subs	r3, r0, #0
 8001a38:	d000      	beq.n	8001a3c <HAL_ADC_ConfigChannel+0x3c>
 8001a3a:	e1a3      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d100      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x46>
 8001a44:	e143      	b.n	8001cce <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691a      	ldr	r2, [r3, #16]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	061b      	lsls	r3, r3, #24
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d004      	beq.n	8001a5c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a56:	4ac1      	ldr	r2, [pc, #772]	; (8001d5c <HAL_ADC_ConfigChannel+0x35c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d108      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	0019      	movs	r1, r3
 8001a66:	0010      	movs	r0, r2
 8001a68:	f7ff fc14 	bl	8001294 <LL_ADC_REG_SetSequencerChAdd>
 8001a6c:	e0c9      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	211f      	movs	r1, #31
 8001a78:	400b      	ands	r3, r1
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	4099      	lsls	r1, r3
 8001a7e:	000b      	movs	r3, r1
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4013      	ands	r3, r2
 8001a84:	0019      	movs	r1, r3
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	035b      	lsls	r3, r3, #13
 8001a8c:	0b5b      	lsrs	r3, r3, #13
 8001a8e:	d105      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x9c>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0e9b      	lsrs	r3, r3, #26
 8001a96:	221f      	movs	r2, #31
 8001a98:	4013      	ands	r3, r2
 8001a9a:	e098      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d000      	beq.n	8001aa8 <HAL_ADC_ConfigChannel+0xa8>
 8001aa6:	e091      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x1cc>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2202      	movs	r2, #2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d000      	beq.n	8001ab4 <HAL_ADC_ConfigChannel+0xb4>
 8001ab2:	e089      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x1c8>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2204      	movs	r2, #4
 8001aba:	4013      	ands	r3, r2
 8001abc:	d000      	beq.n	8001ac0 <HAL_ADC_ConfigChannel+0xc0>
 8001abe:	e081      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x1c4>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d000      	beq.n	8001acc <HAL_ADC_ConfigChannel+0xcc>
 8001aca:	e079      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x1c0>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2210      	movs	r2, #16
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d000      	beq.n	8001ad8 <HAL_ADC_ConfigChannel+0xd8>
 8001ad6:	e071      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x1bc>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2220      	movs	r2, #32
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d000      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0xe4>
 8001ae2:	e069      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x1b8>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2240      	movs	r2, #64	; 0x40
 8001aea:	4013      	ands	r3, r2
 8001aec:	d000      	beq.n	8001af0 <HAL_ADC_ConfigChannel+0xf0>
 8001aee:	e061      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x1b4>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2280      	movs	r2, #128	; 0x80
 8001af6:	4013      	ands	r3, r2
 8001af8:	d000      	beq.n	8001afc <HAL_ADC_ConfigChannel+0xfc>
 8001afa:	e059      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x1b0>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4013      	ands	r3, r2
 8001b06:	d151      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x1ac>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	d149      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x1a8>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d141      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x1a4>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d139      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x1a0>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	015b      	lsls	r3, r3, #5
 8001b34:	4013      	ands	r3, r2
 8001b36:	d131      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x19c>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	019b      	lsls	r3, r3, #6
 8001b40:	4013      	ands	r3, r2
 8001b42:	d129      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x198>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	01db      	lsls	r3, r3, #7
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d121      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x194>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d119      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x190>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	025b      	lsls	r3, r3, #9
 8001b64:	4013      	ands	r3, r2
 8001b66:	d111      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x18c>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	029b      	lsls	r3, r3, #10
 8001b70:	4013      	ands	r3, r2
 8001b72:	d109      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x188>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	02db      	lsls	r3, r3, #11
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d001      	beq.n	8001b84 <HAL_ADC_ConfigChannel+0x184>
 8001b80:	2312      	movs	r3, #18
 8001b82:	e024      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001b84:	2300      	movs	r3, #0
 8001b86:	e022      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001b88:	2311      	movs	r3, #17
 8001b8a:	e020      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001b8c:	2310      	movs	r3, #16
 8001b8e:	e01e      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001b90:	230f      	movs	r3, #15
 8001b92:	e01c      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001b94:	230e      	movs	r3, #14
 8001b96:	e01a      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001b98:	230d      	movs	r3, #13
 8001b9a:	e018      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001b9c:	230c      	movs	r3, #12
 8001b9e:	e016      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001ba0:	230b      	movs	r3, #11
 8001ba2:	e014      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001ba4:	230a      	movs	r3, #10
 8001ba6:	e012      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001ba8:	2309      	movs	r3, #9
 8001baa:	e010      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001bac:	2308      	movs	r3, #8
 8001bae:	e00e      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001bb0:	2307      	movs	r3, #7
 8001bb2:	e00c      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001bb4:	2306      	movs	r3, #6
 8001bb6:	e00a      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001bb8:	2305      	movs	r3, #5
 8001bba:	e008      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	e006      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e004      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e002      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	6852      	ldr	r2, [r2, #4]
 8001bd2:	201f      	movs	r0, #31
 8001bd4:	4002      	ands	r2, r0
 8001bd6:	4093      	lsls	r3, r2
 8001bd8:	000a      	movs	r2, r1
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d808      	bhi.n	8001c02 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	001a      	movs	r2, r3
 8001bfe:	f7ff fb29 	bl	8001254 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	6819      	ldr	r1, [r3, #0]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	001a      	movs	r2, r3
 8001c10:	f7ff fb64 	bl	80012dc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	db00      	blt.n	8001c1e <HAL_ADC_ConfigChannel+0x21e>
 8001c1c:	e0bc      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c1e:	4b50      	ldr	r3, [pc, #320]	; (8001d60 <HAL_ADC_ConfigChannel+0x360>)
 8001c20:	0018      	movs	r0, r3
 8001c22:	f7ff fac5 	bl	80011b0 <LL_ADC_GetCommonPathInternalCh>
 8001c26:	0003      	movs	r3, r0
 8001c28:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a4d      	ldr	r2, [pc, #308]	; (8001d64 <HAL_ADC_ConfigChannel+0x364>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d122      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	041b      	lsls	r3, r3, #16
 8001c3a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c3c:	d11d      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2280      	movs	r2, #128	; 0x80
 8001c42:	0412      	lsls	r2, r2, #16
 8001c44:	4313      	orrs	r3, r2
 8001c46:	4a46      	ldr	r2, [pc, #280]	; (8001d60 <HAL_ADC_ConfigChannel+0x360>)
 8001c48:	0019      	movs	r1, r3
 8001c4a:	0010      	movs	r0, r2
 8001c4c:	f7ff fa9c 	bl	8001188 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c50:	4b45      	ldr	r3, [pc, #276]	; (8001d68 <HAL_ADC_ConfigChannel+0x368>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4945      	ldr	r1, [pc, #276]	; (8001d6c <HAL_ADC_ConfigChannel+0x36c>)
 8001c56:	0018      	movs	r0, r3
 8001c58:	f7fe fa52 	bl	8000100 <__udivsi3>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	0013      	movs	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	189b      	adds	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c6a:	e002      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f9      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c78:	e08e      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a3c      	ldr	r2, [pc, #240]	; (8001d70 <HAL_ADC_ConfigChannel+0x370>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d10e      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	045b      	lsls	r3, r3, #17
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d109      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	0452      	lsls	r2, r2, #17
 8001c94:	4313      	orrs	r3, r2
 8001c96:	4a32      	ldr	r2, [pc, #200]	; (8001d60 <HAL_ADC_ConfigChannel+0x360>)
 8001c98:	0019      	movs	r1, r3
 8001c9a:	0010      	movs	r0, r2
 8001c9c:	f7ff fa74 	bl	8001188 <LL_ADC_SetCommonPathInternalCh>
 8001ca0:	e07a      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a33      	ldr	r2, [pc, #204]	; (8001d74 <HAL_ADC_ConfigChannel+0x374>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d000      	beq.n	8001cae <HAL_ADC_ConfigChannel+0x2ae>
 8001cac:	e074      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	03db      	lsls	r3, r3, #15
 8001cb4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001cb6:	d000      	beq.n	8001cba <HAL_ADC_ConfigChannel+0x2ba>
 8001cb8:	e06e      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	03d2      	lsls	r2, r2, #15
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	4a27      	ldr	r2, [pc, #156]	; (8001d60 <HAL_ADC_ConfigChannel+0x360>)
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	0010      	movs	r0, r2
 8001cc8:	f7ff fa5e 	bl	8001188 <LL_ADC_SetCommonPathInternalCh>
 8001ccc:	e064      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691a      	ldr	r2, [r3, #16]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	061b      	lsls	r3, r3, #24
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d004      	beq.n	8001ce4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cde:	4a1f      	ldr	r2, [pc, #124]	; (8001d5c <HAL_ADC_ConfigChannel+0x35c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d107      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	0019      	movs	r1, r3
 8001cee:	0010      	movs	r0, r2
 8001cf0:	f7ff fae1 	bl	80012b6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	da4d      	bge.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cfc:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <HAL_ADC_ConfigChannel+0x360>)
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f7ff fa56 	bl	80011b0 <LL_ADC_GetCommonPathInternalCh>
 8001d04:	0003      	movs	r3, r0
 8001d06:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a15      	ldr	r2, [pc, #84]	; (8001d64 <HAL_ADC_ConfigChannel+0x364>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d108      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4a18      	ldr	r2, [pc, #96]	; (8001d78 <HAL_ADC_ConfigChannel+0x378>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <HAL_ADC_ConfigChannel+0x360>)
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	0010      	movs	r0, r2
 8001d1e:	f7ff fa33 	bl	8001188 <LL_ADC_SetCommonPathInternalCh>
 8001d22:	e039      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a11      	ldr	r2, [pc, #68]	; (8001d70 <HAL_ADC_ConfigChannel+0x370>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d108      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <HAL_ADC_ConfigChannel+0x37c>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <HAL_ADC_ConfigChannel+0x360>)
 8001d36:	0019      	movs	r1, r3
 8001d38:	0010      	movs	r0, r2
 8001d3a:	f7ff fa25 	bl	8001188 <LL_ADC_SetCommonPathInternalCh>
 8001d3e:	e02b      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <HAL_ADC_ConfigChannel+0x374>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d126      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <HAL_ADC_ConfigChannel+0x380>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	4a03      	ldr	r2, [pc, #12]	; (8001d60 <HAL_ADC_ConfigChannel+0x360>)
 8001d52:	0019      	movs	r1, r3
 8001d54:	0010      	movs	r0, r2
 8001d56:	f7ff fa17 	bl	8001188 <LL_ADC_SetCommonPathInternalCh>
 8001d5a:	e01d      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
 8001d5c:	80000004 	.word	0x80000004
 8001d60:	40012708 	.word	0x40012708
 8001d64:	b0001000 	.word	0xb0001000
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	00030d40 	.word	0x00030d40
 8001d70:	b8004000 	.word	0xb8004000
 8001d74:	b4002000 	.word	0xb4002000
 8001d78:	ff7fffff 	.word	0xff7fffff
 8001d7c:	feffffff 	.word	0xfeffffff
 8001d80:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	2220      	movs	r2, #32
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d90:	2317      	movs	r3, #23
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2254      	movs	r2, #84	; 0x54
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001da0:	2317      	movs	r3, #23
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	781b      	ldrb	r3, [r3, #0]
}
 8001da6:	0018      	movs	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b006      	add	sp, #24
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	46c0      	nop			; (mov r8, r8)

08001db0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f7ff fb3b 	bl	8001438 <LL_ADC_REG_IsConversionOngoing>
 8001dc2:	1e03      	subs	r3, r0, #0
 8001dc4:	d031      	beq.n	8001e2a <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f7ff faff 	bl	80013ce <LL_ADC_IsDisableOngoing>
 8001dd0:	1e03      	subs	r3, r0, #0
 8001dd2:	d104      	bne.n	8001dde <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f7ff fb1b 	bl	8001414 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dde:	f7ff f9c9 	bl	8001174 <HAL_GetTick>
 8001de2:	0003      	movs	r3, r0
 8001de4:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001de6:	e01a      	b.n	8001e1e <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001de8:	f7ff f9c4 	bl	8001174 <HAL_GetTick>
 8001dec:	0002      	movs	r2, r0
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d913      	bls.n	8001e1e <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d00d      	beq.n	8001e1e <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	2210      	movs	r2, #16
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	2201      	movs	r2, #1
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e006      	b.n	8001e2c <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2204      	movs	r2, #4
 8001e26:	4013      	ands	r3, r2
 8001e28:	d1de      	bne.n	8001de8 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b004      	add	sp, #16
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0018      	movs	r0, r3
 8001e46:	f7ff fab1 	bl	80013ac <LL_ADC_IsEnabled>
 8001e4a:	1e03      	subs	r3, r0, #0
 8001e4c:	d000      	beq.n	8001e50 <ADC_Enable+0x1c>
 8001e4e:	e069      	b.n	8001f24 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	4a36      	ldr	r2, [pc, #216]	; (8001f30 <ADC_Enable+0xfc>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d00d      	beq.n	8001e78 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e60:	2210      	movs	r2, #16
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e056      	b.n	8001f26 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f7ff fa71 	bl	8001364 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001e82:	4b2c      	ldr	r3, [pc, #176]	; (8001f34 <ADC_Enable+0x100>)
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7ff f993 	bl	80011b0 <LL_ADC_GetCommonPathInternalCh>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	041b      	lsls	r3, r3, #16
 8001e90:	4013      	ands	r3, r2
 8001e92:	d00f      	beq.n	8001eb4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <ADC_Enable+0x104>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4928      	ldr	r1, [pc, #160]	; (8001f3c <ADC_Enable+0x108>)
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7fe f930 	bl	8000100 <__udivsi3>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001ea4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ea6:	e002      	b.n	8001eae <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f9      	bne.n	8001ea8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7e5b      	ldrb	r3, [r3, #25]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d033      	beq.n	8001f24 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001ebc:	f7ff f95a 	bl	8001174 <HAL_GetTick>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ec4:	e027      	b.n	8001f16 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f7ff fa6e 	bl	80013ac <LL_ADC_IsEnabled>
 8001ed0:	1e03      	subs	r3, r0, #0
 8001ed2:	d104      	bne.n	8001ede <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f7ff fa43 	bl	8001364 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ede:	f7ff f949 	bl	8001174 <HAL_GetTick>
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d914      	bls.n	8001f16 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d00d      	beq.n	8001f16 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	2210      	movs	r2, #16
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e007      	b.n	8001f26 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d1d0      	bne.n	8001ec6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	0018      	movs	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b004      	add	sp, #16
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	80000017 	.word	0x80000017
 8001f34:	40012708 	.word	0x40012708
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	00030d40 	.word	0x00030d40

08001f40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f7ff fa3e 	bl	80013ce <LL_ADC_IsDisableOngoing>
 8001f52:	0003      	movs	r3, r0
 8001f54:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f7ff fa26 	bl	80013ac <LL_ADC_IsEnabled>
 8001f60:	1e03      	subs	r3, r0, #0
 8001f62:	d046      	beq.n	8001ff2 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d143      	bne.n	8001ff2 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2205      	movs	r2, #5
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d10d      	bne.n	8001f94 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f7ff fa03 	bl	8001388 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2203      	movs	r2, #3
 8001f88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f8a:	f7ff f8f3 	bl	8001174 <HAL_GetTick>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f92:	e028      	b.n	8001fe6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	2210      	movs	r2, #16
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e021      	b.n	8001ff4 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fb0:	f7ff f8e0 	bl	8001174 <HAL_GetTick>
 8001fb4:	0002      	movs	r2, r0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d913      	bls.n	8001fe6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d00d      	beq.n	8001fe6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	2210      	movs	r2, #16
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fda:	2201      	movs	r2, #1
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e006      	b.n	8001ff4 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2201      	movs	r2, #1
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d1de      	bne.n	8001fb0 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b004      	add	sp, #16
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	0002      	movs	r2, r0
 8002004:	1dfb      	adds	r3, r7, #7
 8002006:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002008:	1dfb      	adds	r3, r7, #7
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b7f      	cmp	r3, #127	; 0x7f
 800200e:	d809      	bhi.n	8002024 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002010:	1dfb      	adds	r3, r7, #7
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	001a      	movs	r2, r3
 8002016:	231f      	movs	r3, #31
 8002018:	401a      	ands	r2, r3
 800201a:	4b04      	ldr	r3, [pc, #16]	; (800202c <__NVIC_EnableIRQ+0x30>)
 800201c:	2101      	movs	r1, #1
 800201e:	4091      	lsls	r1, r2
 8002020:	000a      	movs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	b002      	add	sp, #8
 800202a:	bd80      	pop	{r7, pc}
 800202c:	e000e100 	.word	0xe000e100

08002030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	0002      	movs	r2, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	1dfb      	adds	r3, r7, #7
 800203c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800203e:	1dfb      	adds	r3, r7, #7
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b7f      	cmp	r3, #127	; 0x7f
 8002044:	d828      	bhi.n	8002098 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002046:	4a2f      	ldr	r2, [pc, #188]	; (8002104 <__NVIC_SetPriority+0xd4>)
 8002048:	1dfb      	adds	r3, r7, #7
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	b25b      	sxtb	r3, r3
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	33c0      	adds	r3, #192	; 0xc0
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	589b      	ldr	r3, [r3, r2]
 8002056:	1dfa      	adds	r2, r7, #7
 8002058:	7812      	ldrb	r2, [r2, #0]
 800205a:	0011      	movs	r1, r2
 800205c:	2203      	movs	r2, #3
 800205e:	400a      	ands	r2, r1
 8002060:	00d2      	lsls	r2, r2, #3
 8002062:	21ff      	movs	r1, #255	; 0xff
 8002064:	4091      	lsls	r1, r2
 8002066:	000a      	movs	r2, r1
 8002068:	43d2      	mvns	r2, r2
 800206a:	401a      	ands	r2, r3
 800206c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	019b      	lsls	r3, r3, #6
 8002072:	22ff      	movs	r2, #255	; 0xff
 8002074:	401a      	ands	r2, r3
 8002076:	1dfb      	adds	r3, r7, #7
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	0018      	movs	r0, r3
 800207c:	2303      	movs	r3, #3
 800207e:	4003      	ands	r3, r0
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002084:	481f      	ldr	r0, [pc, #124]	; (8002104 <__NVIC_SetPriority+0xd4>)
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b25b      	sxtb	r3, r3
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	430a      	orrs	r2, r1
 8002090:	33c0      	adds	r3, #192	; 0xc0
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002096:	e031      	b.n	80020fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002098:	4a1b      	ldr	r2, [pc, #108]	; (8002108 <__NVIC_SetPriority+0xd8>)
 800209a:	1dfb      	adds	r3, r7, #7
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	0019      	movs	r1, r3
 80020a0:	230f      	movs	r3, #15
 80020a2:	400b      	ands	r3, r1
 80020a4:	3b08      	subs	r3, #8
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	3306      	adds	r3, #6
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	18d3      	adds	r3, r2, r3
 80020ae:	3304      	adds	r3, #4
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	1dfa      	adds	r2, r7, #7
 80020b4:	7812      	ldrb	r2, [r2, #0]
 80020b6:	0011      	movs	r1, r2
 80020b8:	2203      	movs	r2, #3
 80020ba:	400a      	ands	r2, r1
 80020bc:	00d2      	lsls	r2, r2, #3
 80020be:	21ff      	movs	r1, #255	; 0xff
 80020c0:	4091      	lsls	r1, r2
 80020c2:	000a      	movs	r2, r1
 80020c4:	43d2      	mvns	r2, r2
 80020c6:	401a      	ands	r2, r3
 80020c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	019b      	lsls	r3, r3, #6
 80020ce:	22ff      	movs	r2, #255	; 0xff
 80020d0:	401a      	ands	r2, r3
 80020d2:	1dfb      	adds	r3, r7, #7
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	0018      	movs	r0, r3
 80020d8:	2303      	movs	r3, #3
 80020da:	4003      	ands	r3, r0
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020e0:	4809      	ldr	r0, [pc, #36]	; (8002108 <__NVIC_SetPriority+0xd8>)
 80020e2:	1dfb      	adds	r3, r7, #7
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	001c      	movs	r4, r3
 80020e8:	230f      	movs	r3, #15
 80020ea:	4023      	ands	r3, r4
 80020ec:	3b08      	subs	r3, #8
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	430a      	orrs	r2, r1
 80020f2:	3306      	adds	r3, #6
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	18c3      	adds	r3, r0, r3
 80020f8:	3304      	adds	r3, #4
 80020fa:	601a      	str	r2, [r3, #0]
}
 80020fc:	46c0      	nop			; (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	b003      	add	sp, #12
 8002102:	bd90      	pop	{r4, r7, pc}
 8002104:	e000e100 	.word	0xe000e100
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	1e5a      	subs	r2, r3, #1
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	045b      	lsls	r3, r3, #17
 800211c:	429a      	cmp	r2, r3
 800211e:	d301      	bcc.n	8002124 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002120:	2301      	movs	r3, #1
 8002122:	e010      	b.n	8002146 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <SysTick_Config+0x44>)
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	3a01      	subs	r2, #1
 800212a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800212c:	2301      	movs	r3, #1
 800212e:	425b      	negs	r3, r3
 8002130:	2103      	movs	r1, #3
 8002132:	0018      	movs	r0, r3
 8002134:	f7ff ff7c 	bl	8002030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <SysTick_Config+0x44>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <SysTick_Config+0x44>)
 8002140:	2207      	movs	r2, #7
 8002142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002144:	2300      	movs	r3, #0
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b002      	add	sp, #8
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	e000e010 	.word	0xe000e010

08002154 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	210f      	movs	r1, #15
 8002160:	187b      	adds	r3, r7, r1
 8002162:	1c02      	adds	r2, r0, #0
 8002164:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	187b      	adds	r3, r7, r1
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b25b      	sxtb	r3, r3
 800216e:	0011      	movs	r1, r2
 8002170:	0018      	movs	r0, r3
 8002172:	f7ff ff5d 	bl	8002030 <__NVIC_SetPriority>
}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	46bd      	mov	sp, r7
 800217a:	b004      	add	sp, #16
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	0002      	movs	r2, r0
 8002186:	1dfb      	adds	r3, r7, #7
 8002188:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	b25b      	sxtb	r3, r3
 8002190:	0018      	movs	r0, r3
 8002192:	f7ff ff33 	bl	8001ffc <__NVIC_EnableIRQ>
}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	46bd      	mov	sp, r7
 800219a:	b002      	add	sp, #8
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7ff ffaf 	bl	800210c <SysTick_Config>
 80021ae:	0003      	movs	r3, r0
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b002      	add	sp, #8
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e050      	b.n	800226c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2225      	movs	r2, #37	; 0x25
 80021ce:	5c9b      	ldrb	r3, [r3, r2]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d008      	beq.n	80021e8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2204      	movs	r2, #4
 80021da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2224      	movs	r2, #36	; 0x24
 80021e0:	2100      	movs	r1, #0
 80021e2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e041      	b.n	800226c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	210e      	movs	r1, #14
 80021f4:	438a      	bics	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	491c      	ldr	r1, [pc, #112]	; (8002274 <HAL_DMA_Abort+0xbc>)
 8002204:	400a      	ands	r2, r1
 8002206:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2101      	movs	r1, #1
 8002214:	438a      	bics	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002218:	4b17      	ldr	r3, [pc, #92]	; (8002278 <HAL_DMA_Abort+0xc0>)
 800221a:	6859      	ldr	r1, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	221c      	movs	r2, #28
 8002222:	4013      	ands	r3, r2
 8002224:	2201      	movs	r2, #1
 8002226:	409a      	lsls	r2, r3
 8002228:	4b13      	ldr	r3, [pc, #76]	; (8002278 <HAL_DMA_Abort+0xc0>)
 800222a:	430a      	orrs	r2, r1
 800222c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002236:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00c      	beq.n	800225a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800224a:	490a      	ldr	r1, [pc, #40]	; (8002274 <HAL_DMA_Abort+0xbc>)
 800224c:	400a      	ands	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002258:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2225      	movs	r2, #37	; 0x25
 800225e:	2101      	movs	r1, #1
 8002260:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2224      	movs	r2, #36	; 0x24
 8002266:	2100      	movs	r1, #0
 8002268:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b002      	add	sp, #8
 8002272:	bd80      	pop	{r7, pc}
 8002274:	fffffeff 	.word	0xfffffeff
 8002278:	40020000 	.word	0x40020000

0800227c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002284:	210f      	movs	r1, #15
 8002286:	187b      	adds	r3, r7, r1
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2225      	movs	r2, #37	; 0x25
 8002290:	5c9b      	ldrb	r3, [r3, r2]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d006      	beq.n	80022a6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2204      	movs	r2, #4
 800229c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800229e:	187b      	adds	r3, r7, r1
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	e049      	b.n	800233a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	210e      	movs	r1, #14
 80022b2:	438a      	bics	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2101      	movs	r1, #1
 80022c2:	438a      	bics	r2, r1
 80022c4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d0:	491d      	ldr	r1, [pc, #116]	; (8002348 <HAL_DMA_Abort_IT+0xcc>)
 80022d2:	400a      	ands	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80022d6:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_DMA_Abort_IT+0xd0>)
 80022d8:	6859      	ldr	r1, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	221c      	movs	r2, #28
 80022e0:	4013      	ands	r3, r2
 80022e2:	2201      	movs	r2, #1
 80022e4:	409a      	lsls	r2, r3
 80022e6:	4b19      	ldr	r3, [pc, #100]	; (800234c <HAL_DMA_Abort_IT+0xd0>)
 80022e8:	430a      	orrs	r2, r1
 80022ea:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00c      	beq.n	8002318 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002308:	490f      	ldr	r1, [pc, #60]	; (8002348 <HAL_DMA_Abort_IT+0xcc>)
 800230a:	400a      	ands	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002316:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2225      	movs	r2, #37	; 0x25
 800231c:	2101      	movs	r1, #1
 800231e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2224      	movs	r2, #36	; 0x24
 8002324:	2100      	movs	r1, #0
 8002326:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232c:	2b00      	cmp	r3, #0
 800232e:	d004      	beq.n	800233a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	0010      	movs	r0, r2
 8002338:	4798      	blx	r3
    }
  }
  return status;
 800233a:	230f      	movs	r3, #15
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	781b      	ldrb	r3, [r3, #0]
}
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	b004      	add	sp, #16
 8002346:	bd80      	pop	{r7, pc}
 8002348:	fffffeff 	.word	0xfffffeff
 800234c:	40020000 	.word	0x40020000

08002350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800235e:	e147      	b.n	80025f0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2101      	movs	r1, #1
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4091      	lsls	r1, r2
 800236a:	000a      	movs	r2, r1
 800236c:	4013      	ands	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d100      	bne.n	8002378 <HAL_GPIO_Init+0x28>
 8002376:	e138      	b.n	80025ea <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2203      	movs	r2, #3
 800237e:	4013      	ands	r3, r2
 8002380:	2b01      	cmp	r3, #1
 8002382:	d005      	beq.n	8002390 <HAL_GPIO_Init+0x40>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2203      	movs	r2, #3
 800238a:	4013      	ands	r3, r2
 800238c:	2b02      	cmp	r3, #2
 800238e:	d130      	bne.n	80023f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	409a      	lsls	r2, r3
 800239e:	0013      	movs	r3, r2
 80023a0:	43da      	mvns	r2, r3
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	409a      	lsls	r2, r3
 80023b2:	0013      	movs	r3, r2
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023c6:	2201      	movs	r2, #1
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	409a      	lsls	r2, r3
 80023cc:	0013      	movs	r3, r2
 80023ce:	43da      	mvns	r2, r3
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	2201      	movs	r2, #1
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
 80023e4:	0013      	movs	r3, r2
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2203      	movs	r2, #3
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d017      	beq.n	800242e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	409a      	lsls	r2, r3
 800240c:	0013      	movs	r3, r2
 800240e:	43da      	mvns	r2, r3
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	409a      	lsls	r2, r3
 8002420:	0013      	movs	r3, r2
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2203      	movs	r2, #3
 8002434:	4013      	ands	r3, r2
 8002436:	2b02      	cmp	r3, #2
 8002438:	d123      	bne.n	8002482 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	08da      	lsrs	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3208      	adds	r2, #8
 8002442:	0092      	lsls	r2, r2, #2
 8002444:	58d3      	ldr	r3, [r2, r3]
 8002446:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2207      	movs	r2, #7
 800244c:	4013      	ands	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	220f      	movs	r2, #15
 8002452:	409a      	lsls	r2, r3
 8002454:	0013      	movs	r3, r2
 8002456:	43da      	mvns	r2, r3
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2107      	movs	r1, #7
 8002466:	400b      	ands	r3, r1
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	409a      	lsls	r2, r3
 800246c:	0013      	movs	r3, r2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	08da      	lsrs	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3208      	adds	r2, #8
 800247c:	0092      	lsls	r2, r2, #2
 800247e:	6939      	ldr	r1, [r7, #16]
 8002480:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	2203      	movs	r2, #3
 800248e:	409a      	lsls	r2, r3
 8002490:	0013      	movs	r3, r2
 8002492:	43da      	mvns	r2, r3
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2203      	movs	r2, #3
 80024a0:	401a      	ands	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	409a      	lsls	r2, r3
 80024a8:	0013      	movs	r3, r2
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	23c0      	movs	r3, #192	; 0xc0
 80024bc:	029b      	lsls	r3, r3, #10
 80024be:	4013      	ands	r3, r2
 80024c0:	d100      	bne.n	80024c4 <HAL_GPIO_Init+0x174>
 80024c2:	e092      	b.n	80025ea <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80024c4:	4a50      	ldr	r2, [pc, #320]	; (8002608 <HAL_GPIO_Init+0x2b8>)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3318      	adds	r3, #24
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	589b      	ldr	r3, [r3, r2]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2203      	movs	r2, #3
 80024d6:	4013      	ands	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	220f      	movs	r2, #15
 80024dc:	409a      	lsls	r2, r3
 80024de:	0013      	movs	r3, r2
 80024e0:	43da      	mvns	r2, r3
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	23a0      	movs	r3, #160	; 0xa0
 80024ec:	05db      	lsls	r3, r3, #23
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d013      	beq.n	800251a <HAL_GPIO_Init+0x1ca>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a45      	ldr	r2, [pc, #276]	; (800260c <HAL_GPIO_Init+0x2bc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00d      	beq.n	8002516 <HAL_GPIO_Init+0x1c6>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a44      	ldr	r2, [pc, #272]	; (8002610 <HAL_GPIO_Init+0x2c0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d007      	beq.n	8002512 <HAL_GPIO_Init+0x1c2>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a43      	ldr	r2, [pc, #268]	; (8002614 <HAL_GPIO_Init+0x2c4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <HAL_GPIO_Init+0x1be>
 800250a:	2303      	movs	r3, #3
 800250c:	e006      	b.n	800251c <HAL_GPIO_Init+0x1cc>
 800250e:	2305      	movs	r3, #5
 8002510:	e004      	b.n	800251c <HAL_GPIO_Init+0x1cc>
 8002512:	2302      	movs	r3, #2
 8002514:	e002      	b.n	800251c <HAL_GPIO_Init+0x1cc>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_GPIO_Init+0x1cc>
 800251a:	2300      	movs	r3, #0
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	2103      	movs	r1, #3
 8002520:	400a      	ands	r2, r1
 8002522:	00d2      	lsls	r2, r2, #3
 8002524:	4093      	lsls	r3, r2
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800252c:	4936      	ldr	r1, [pc, #216]	; (8002608 <HAL_GPIO_Init+0x2b8>)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	3318      	adds	r3, #24
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800253a:	4b33      	ldr	r3, [pc, #204]	; (8002608 <HAL_GPIO_Init+0x2b8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	43da      	mvns	r2, r3
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	035b      	lsls	r3, r3, #13
 8002552:	4013      	ands	r3, r2
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800255e:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <HAL_GPIO_Init+0x2b8>)
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002564:	4b28      	ldr	r3, [pc, #160]	; (8002608 <HAL_GPIO_Init+0x2b8>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	43da      	mvns	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	039b      	lsls	r3, r3, #14
 800257c:	4013      	ands	r3, r2
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002588:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <HAL_GPIO_Init+0x2b8>)
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800258e:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <HAL_GPIO_Init+0x2b8>)
 8002590:	2384      	movs	r3, #132	; 0x84
 8002592:	58d3      	ldr	r3, [r2, r3]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	43da      	mvns	r2, r3
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	029b      	lsls	r3, r3, #10
 80025a8:	4013      	ands	r3, r2
 80025aa:	d003      	beq.n	80025b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025b4:	4914      	ldr	r1, [pc, #80]	; (8002608 <HAL_GPIO_Init+0x2b8>)
 80025b6:	2284      	movs	r2, #132	; 0x84
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80025bc:	4a12      	ldr	r2, [pc, #72]	; (8002608 <HAL_GPIO_Init+0x2b8>)
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	58d3      	ldr	r3, [r2, r3]
 80025c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	43da      	mvns	r2, r3
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	025b      	lsls	r3, r3, #9
 80025d6:	4013      	ands	r3, r2
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025e2:	4909      	ldr	r1, [pc, #36]	; (8002608 <HAL_GPIO_Init+0x2b8>)
 80025e4:	2280      	movs	r2, #128	; 0x80
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3301      	adds	r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	40da      	lsrs	r2, r3
 80025f8:	1e13      	subs	r3, r2, #0
 80025fa:	d000      	beq.n	80025fe <HAL_GPIO_Init+0x2ae>
 80025fc:	e6b0      	b.n	8002360 <HAL_GPIO_Init+0x10>
  }
}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	b006      	add	sp, #24
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021800 	.word	0x40021800
 800260c:	50000400 	.word	0x50000400
 8002610:	50000800 	.word	0x50000800
 8002614:	50000c00 	.word	0x50000c00

08002618 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a19      	ldr	r2, [pc, #100]	; (800268c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002626:	4013      	ands	r3, r2
 8002628:	0019      	movs	r1, r3
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	430a      	orrs	r2, r1
 8002630:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	429a      	cmp	r2, r3
 800263a:	d11f      	bne.n	800267c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	0013      	movs	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	189b      	adds	r3, r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4912      	ldr	r1, [pc, #72]	; (8002694 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800264a:	0018      	movs	r0, r3
 800264c:	f7fd fd58 	bl	8000100 <__udivsi3>
 8002650:	0003      	movs	r3, r0
 8002652:	3301      	adds	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002656:	e008      	b.n	800266a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3b01      	subs	r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	e001      	b.n	800266a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e009      	b.n	800267e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800266a:	4b07      	ldr	r3, [pc, #28]	; (8002688 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	401a      	ands	r2, r3
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	429a      	cmp	r2, r3
 800267a:	d0ed      	beq.n	8002658 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	0018      	movs	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	b004      	add	sp, #16
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	40007000 	.word	0x40007000
 800268c:	fffff9ff 	.word	0xfffff9ff
 8002690:	20000000 	.word	0x20000000
 8002694:	000f4240 	.word	0x000f4240

08002698 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <LL_RCC_GetAPB1Prescaler+0x14>)
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	23e0      	movs	r3, #224	; 0xe0
 80026a2:	01db      	lsls	r3, r3, #7
 80026a4:	4013      	ands	r3, r2
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000

080026b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e2f3      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2201      	movs	r2, #1
 80026c8:	4013      	ands	r3, r2
 80026ca:	d100      	bne.n	80026ce <HAL_RCC_OscConfig+0x1e>
 80026cc:	e07c      	b.n	80027c8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ce:	4bc3      	ldr	r3, [pc, #780]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2238      	movs	r2, #56	; 0x38
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026d8:	4bc0      	ldr	r3, [pc, #768]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2203      	movs	r2, #3
 80026de:	4013      	ands	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	d102      	bne.n	80026ee <HAL_RCC_OscConfig+0x3e>
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d002      	beq.n	80026f4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d10b      	bne.n	800270c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f4:	4bb9      	ldr	r3, [pc, #740]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	029b      	lsls	r3, r3, #10
 80026fc:	4013      	ands	r3, r2
 80026fe:	d062      	beq.n	80027c6 <HAL_RCC_OscConfig+0x116>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d15e      	bne.n	80027c6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e2ce      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	025b      	lsls	r3, r3, #9
 8002714:	429a      	cmp	r2, r3
 8002716:	d107      	bne.n	8002728 <HAL_RCC_OscConfig+0x78>
 8002718:	4bb0      	ldr	r3, [pc, #704]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4baf      	ldr	r3, [pc, #700]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 800271e:	2180      	movs	r1, #128	; 0x80
 8002720:	0249      	lsls	r1, r1, #9
 8002722:	430a      	orrs	r2, r1
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	e020      	b.n	800276a <HAL_RCC_OscConfig+0xba>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	23a0      	movs	r3, #160	; 0xa0
 800272e:	02db      	lsls	r3, r3, #11
 8002730:	429a      	cmp	r2, r3
 8002732:	d10e      	bne.n	8002752 <HAL_RCC_OscConfig+0xa2>
 8002734:	4ba9      	ldr	r3, [pc, #676]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4ba8      	ldr	r3, [pc, #672]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 800273a:	2180      	movs	r1, #128	; 0x80
 800273c:	02c9      	lsls	r1, r1, #11
 800273e:	430a      	orrs	r2, r1
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	4ba6      	ldr	r3, [pc, #664]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4ba5      	ldr	r3, [pc, #660]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002748:	2180      	movs	r1, #128	; 0x80
 800274a:	0249      	lsls	r1, r1, #9
 800274c:	430a      	orrs	r2, r1
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e00b      	b.n	800276a <HAL_RCC_OscConfig+0xba>
 8002752:	4ba2      	ldr	r3, [pc, #648]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4ba1      	ldr	r3, [pc, #644]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002758:	49a1      	ldr	r1, [pc, #644]	; (80029e0 <HAL_RCC_OscConfig+0x330>)
 800275a:	400a      	ands	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	4b9f      	ldr	r3, [pc, #636]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b9e      	ldr	r3, [pc, #632]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002764:	499f      	ldr	r1, [pc, #636]	; (80029e4 <HAL_RCC_OscConfig+0x334>)
 8002766:	400a      	ands	r2, r1
 8002768:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d014      	beq.n	800279c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7fe fcff 	bl	8001174 <HAL_GetTick>
 8002776:	0003      	movs	r3, r0
 8002778:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800277c:	f7fe fcfa 	bl	8001174 <HAL_GetTick>
 8002780:	0002      	movs	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	; 0x64
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e28d      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278e:	4b93      	ldr	r3, [pc, #588]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	029b      	lsls	r3, r3, #10
 8002796:	4013      	ands	r3, r2
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0xcc>
 800279a:	e015      	b.n	80027c8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7fe fcea 	bl	8001174 <HAL_GetTick>
 80027a0:	0003      	movs	r3, r0
 80027a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a6:	f7fe fce5 	bl	8001174 <HAL_GetTick>
 80027aa:	0002      	movs	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b64      	cmp	r3, #100	; 0x64
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e278      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027b8:	4b88      	ldr	r3, [pc, #544]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	029b      	lsls	r3, r3, #10
 80027c0:	4013      	ands	r3, r2
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0xf6>
 80027c4:	e000      	b.n	80027c8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2202      	movs	r2, #2
 80027ce:	4013      	ands	r3, r2
 80027d0:	d100      	bne.n	80027d4 <HAL_RCC_OscConfig+0x124>
 80027d2:	e099      	b.n	8002908 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d4:	4b81      	ldr	r3, [pc, #516]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2238      	movs	r2, #56	; 0x38
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027de:	4b7f      	ldr	r3, [pc, #508]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	2203      	movs	r2, #3
 80027e4:	4013      	ands	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	2b10      	cmp	r3, #16
 80027ec:	d102      	bne.n	80027f4 <HAL_RCC_OscConfig+0x144>
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d002      	beq.n	80027fa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d135      	bne.n	8002866 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027fa:	4b78      	ldr	r3, [pc, #480]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4013      	ands	r3, r2
 8002804:	d005      	beq.n	8002812 <HAL_RCC_OscConfig+0x162>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e24b      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002812:	4b72      	ldr	r3, [pc, #456]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4a74      	ldr	r2, [pc, #464]	; (80029e8 <HAL_RCC_OscConfig+0x338>)
 8002818:	4013      	ands	r3, r2
 800281a:	0019      	movs	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	021a      	lsls	r2, r3, #8
 8002822:	4b6e      	ldr	r3, [pc, #440]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002824:	430a      	orrs	r2, r1
 8002826:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d112      	bne.n	8002854 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800282e:	4b6b      	ldr	r3, [pc, #428]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a6e      	ldr	r2, [pc, #440]	; (80029ec <HAL_RCC_OscConfig+0x33c>)
 8002834:	4013      	ands	r3, r2
 8002836:	0019      	movs	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	4b67      	ldr	r3, [pc, #412]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 800283e:	430a      	orrs	r2, r1
 8002840:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002842:	4b66      	ldr	r3, [pc, #408]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	0adb      	lsrs	r3, r3, #11
 8002848:	2207      	movs	r2, #7
 800284a:	4013      	ands	r3, r2
 800284c:	4a68      	ldr	r2, [pc, #416]	; (80029f0 <HAL_RCC_OscConfig+0x340>)
 800284e:	40da      	lsrs	r2, r3
 8002850:	4b68      	ldr	r3, [pc, #416]	; (80029f4 <HAL_RCC_OscConfig+0x344>)
 8002852:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002854:	4b68      	ldr	r3, [pc, #416]	; (80029f8 <HAL_RCC_OscConfig+0x348>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	0018      	movs	r0, r3
 800285a:	f7fe fc2f 	bl	80010bc <HAL_InitTick>
 800285e:	1e03      	subs	r3, r0, #0
 8002860:	d051      	beq.n	8002906 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e221      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d030      	beq.n	80028d0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800286e:	4b5b      	ldr	r3, [pc, #364]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a5e      	ldr	r2, [pc, #376]	; (80029ec <HAL_RCC_OscConfig+0x33c>)
 8002874:	4013      	ands	r3, r2
 8002876:	0019      	movs	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	4b57      	ldr	r3, [pc, #348]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 800287e:	430a      	orrs	r2, r1
 8002880:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002882:	4b56      	ldr	r3, [pc, #344]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4b55      	ldr	r3, [pc, #340]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002888:	2180      	movs	r1, #128	; 0x80
 800288a:	0049      	lsls	r1, r1, #1
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe fc70 	bl	8001174 <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800289a:	f7fe fc6b 	bl	8001174 <HAL_GetTick>
 800289e:	0002      	movs	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e1fe      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ac:	4b4b      	ldr	r3, [pc, #300]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4013      	ands	r3, r2
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b8:	4b48      	ldr	r3, [pc, #288]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a4a      	ldr	r2, [pc, #296]	; (80029e8 <HAL_RCC_OscConfig+0x338>)
 80028be:	4013      	ands	r3, r2
 80028c0:	0019      	movs	r1, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	021a      	lsls	r2, r3, #8
 80028c8:	4b44      	ldr	r3, [pc, #272]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	e01b      	b.n	8002908 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80028d0:	4b42      	ldr	r3, [pc, #264]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b41      	ldr	r3, [pc, #260]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 80028d6:	4949      	ldr	r1, [pc, #292]	; (80029fc <HAL_RCC_OscConfig+0x34c>)
 80028d8:	400a      	ands	r2, r1
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe fc4a 	bl	8001174 <HAL_GetTick>
 80028e0:	0003      	movs	r3, r0
 80028e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e6:	f7fe fc45 	bl	8001174 <HAL_GetTick>
 80028ea:	0002      	movs	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e1d8      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028f8:	4b38      	ldr	r3, [pc, #224]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4013      	ands	r3, r2
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x236>
 8002904:	e000      	b.n	8002908 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002906:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2208      	movs	r2, #8
 800290e:	4013      	ands	r3, r2
 8002910:	d047      	beq.n	80029a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002912:	4b32      	ldr	r3, [pc, #200]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2238      	movs	r2, #56	; 0x38
 8002918:	4013      	ands	r3, r2
 800291a:	2b18      	cmp	r3, #24
 800291c:	d10a      	bne.n	8002934 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800291e:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002922:	2202      	movs	r2, #2
 8002924:	4013      	ands	r3, r2
 8002926:	d03c      	beq.n	80029a2 <HAL_RCC_OscConfig+0x2f2>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d138      	bne.n	80029a2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e1ba      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d019      	beq.n	8002970 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800293c:	4b27      	ldr	r3, [pc, #156]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 800293e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002940:	4b26      	ldr	r3, [pc, #152]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002942:	2101      	movs	r1, #1
 8002944:	430a      	orrs	r2, r1
 8002946:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe fc14 	bl	8001174 <HAL_GetTick>
 800294c:	0003      	movs	r3, r0
 800294e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002952:	f7fe fc0f 	bl	8001174 <HAL_GetTick>
 8002956:	0002      	movs	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e1a2      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002964:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002968:	2202      	movs	r2, #2
 800296a:	4013      	ands	r3, r2
 800296c:	d0f1      	beq.n	8002952 <HAL_RCC_OscConfig+0x2a2>
 800296e:	e018      	b.n	80029a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002970:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002972:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 8002976:	2101      	movs	r1, #1
 8002978:	438a      	bics	r2, r1
 800297a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7fe fbfa 	bl	8001174 <HAL_GetTick>
 8002980:	0003      	movs	r3, r0
 8002982:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002986:	f7fe fbf5 	bl	8001174 <HAL_GetTick>
 800298a:	0002      	movs	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e188      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002998:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 800299a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299c:	2202      	movs	r2, #2
 800299e:	4013      	ands	r3, r2
 80029a0:	d1f1      	bne.n	8002986 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2204      	movs	r2, #4
 80029a8:	4013      	ands	r3, r2
 80029aa:	d100      	bne.n	80029ae <HAL_RCC_OscConfig+0x2fe>
 80029ac:	e0c6      	b.n	8002b3c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ae:	231f      	movs	r3, #31
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2238      	movs	r2, #56	; 0x38
 80029bc:	4013      	ands	r3, r2
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d11e      	bne.n	8002a00 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_RCC_OscConfig+0x32c>)
 80029c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c6:	2202      	movs	r2, #2
 80029c8:	4013      	ands	r3, r2
 80029ca:	d100      	bne.n	80029ce <HAL_RCC_OscConfig+0x31e>
 80029cc:	e0b6      	b.n	8002b3c <HAL_RCC_OscConfig+0x48c>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d000      	beq.n	80029d8 <HAL_RCC_OscConfig+0x328>
 80029d6:	e0b1      	b.n	8002b3c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e166      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
 80029dc:	40021000 	.word	0x40021000
 80029e0:	fffeffff 	.word	0xfffeffff
 80029e4:	fffbffff 	.word	0xfffbffff
 80029e8:	ffff80ff 	.word	0xffff80ff
 80029ec:	ffffc7ff 	.word	0xffffc7ff
 80029f0:	00f42400 	.word	0x00f42400
 80029f4:	20000000 	.word	0x20000000
 80029f8:	20000004 	.word	0x20000004
 80029fc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a00:	4bac      	ldr	r3, [pc, #688]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	055b      	lsls	r3, r3, #21
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_OscConfig+0x360>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x362>
 8002a10:	2300      	movs	r3, #0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d011      	beq.n	8002a3a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	4ba7      	ldr	r3, [pc, #668]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002a18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a1a:	4ba6      	ldr	r3, [pc, #664]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002a1c:	2180      	movs	r1, #128	; 0x80
 8002a1e:	0549      	lsls	r1, r1, #21
 8002a20:	430a      	orrs	r2, r1
 8002a22:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a24:	4ba3      	ldr	r3, [pc, #652]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	055b      	lsls	r3, r3, #21
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a32:	231f      	movs	r3, #31
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a3a:	4b9f      	ldr	r3, [pc, #636]	; (8002cb8 <HAL_RCC_OscConfig+0x608>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4013      	ands	r3, r2
 8002a44:	d11a      	bne.n	8002a7c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a46:	4b9c      	ldr	r3, [pc, #624]	; (8002cb8 <HAL_RCC_OscConfig+0x608>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	4b9b      	ldr	r3, [pc, #620]	; (8002cb8 <HAL_RCC_OscConfig+0x608>)
 8002a4c:	2180      	movs	r1, #128	; 0x80
 8002a4e:	0049      	lsls	r1, r1, #1
 8002a50:	430a      	orrs	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002a54:	f7fe fb8e 	bl	8001174 <HAL_GetTick>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5e:	f7fe fb89 	bl	8001174 <HAL_GetTick>
 8002a62:	0002      	movs	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e11c      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a70:	4b91      	ldr	r3, [pc, #580]	; (8002cb8 <HAL_RCC_OscConfig+0x608>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	2380      	movs	r3, #128	; 0x80
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x3e2>
 8002a84:	4b8b      	ldr	r3, [pc, #556]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002a86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a88:	4b8a      	ldr	r3, [pc, #552]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a90:	e01c      	b.n	8002acc <HAL_RCC_OscConfig+0x41c>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b05      	cmp	r3, #5
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x404>
 8002a9a:	4b86      	ldr	r3, [pc, #536]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002a9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a9e:	4b85      	ldr	r3, [pc, #532]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002aa0:	2104      	movs	r1, #4
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002aa6:	4b83      	ldr	r3, [pc, #524]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002aa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002aaa:	4b82      	ldr	r3, [pc, #520]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002aac:	2101      	movs	r1, #1
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ab2:	e00b      	b.n	8002acc <HAL_RCC_OscConfig+0x41c>
 8002ab4:	4b7f      	ldr	r3, [pc, #508]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002ab6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ab8:	4b7e      	ldr	r3, [pc, #504]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002aba:	2101      	movs	r1, #1
 8002abc:	438a      	bics	r2, r1
 8002abe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ac0:	4b7c      	ldr	r3, [pc, #496]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002ac2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ac4:	4b7b      	ldr	r3, [pc, #492]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002ac6:	2104      	movs	r1, #4
 8002ac8:	438a      	bics	r2, r1
 8002aca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d014      	beq.n	8002afe <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fb4e 	bl	8001174 <HAL_GetTick>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002adc:	e009      	b.n	8002af2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ade:	f7fe fb49 	bl	8001174 <HAL_GetTick>
 8002ae2:	0002      	movs	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	4a74      	ldr	r2, [pc, #464]	; (8002cbc <HAL_RCC_OscConfig+0x60c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e0db      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af2:	4b70      	ldr	r3, [pc, #448]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af6:	2202      	movs	r2, #2
 8002af8:	4013      	ands	r3, r2
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x42e>
 8002afc:	e013      	b.n	8002b26 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afe:	f7fe fb39 	bl	8001174 <HAL_GetTick>
 8002b02:	0003      	movs	r3, r0
 8002b04:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b06:	e009      	b.n	8002b1c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7fe fb34 	bl	8001174 <HAL_GetTick>
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	4a6a      	ldr	r2, [pc, #424]	; (8002cbc <HAL_RCC_OscConfig+0x60c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e0c6      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b1c:	4b65      	ldr	r3, [pc, #404]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b20:	2202      	movs	r2, #2
 8002b22:	4013      	ands	r3, r2
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b26:	231f      	movs	r3, #31
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b30:	4b60      	ldr	r3, [pc, #384]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b34:	4b5f      	ldr	r3, [pc, #380]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002b36:	4962      	ldr	r1, [pc, #392]	; (8002cc0 <HAL_RCC_OscConfig+0x610>)
 8002b38:	400a      	ands	r2, r1
 8002b3a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d100      	bne.n	8002b46 <HAL_RCC_OscConfig+0x496>
 8002b44:	e0b0      	b.n	8002ca8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b46:	4b5b      	ldr	r3, [pc, #364]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2238      	movs	r2, #56	; 0x38
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b10      	cmp	r3, #16
 8002b50:	d100      	bne.n	8002b54 <HAL_RCC_OscConfig+0x4a4>
 8002b52:	e078      	b.n	8002c46 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d153      	bne.n	8002c04 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5c:	4b55      	ldr	r3, [pc, #340]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b54      	ldr	r3, [pc, #336]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002b62:	4958      	ldr	r1, [pc, #352]	; (8002cc4 <HAL_RCC_OscConfig+0x614>)
 8002b64:	400a      	ands	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe fb04 	bl	8001174 <HAL_GetTick>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b72:	f7fe faff 	bl	8001174 <HAL_GetTick>
 8002b76:	0002      	movs	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e092      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b84:	4b4b      	ldr	r3, [pc, #300]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	049b      	lsls	r3, r3, #18
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d1f0      	bne.n	8002b72 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b90:	4b48      	ldr	r3, [pc, #288]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4a4c      	ldr	r2, [pc, #304]	; (8002cc8 <HAL_RCC_OscConfig+0x618>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1a      	ldr	r2, [r3, #32]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	4b3e      	ldr	r3, [pc, #248]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bbe:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002bc4:	2180      	movs	r1, #128	; 0x80
 8002bc6:	0449      	lsls	r1, r1, #17
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002bcc:	4b39      	ldr	r3, [pc, #228]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002bd2:	2180      	movs	r1, #128	; 0x80
 8002bd4:	0549      	lsls	r1, r1, #21
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bda:	f7fe facb 	bl	8001174 <HAL_GetTick>
 8002bde:	0003      	movs	r3, r0
 8002be0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fe fac6 	bl	8001174 <HAL_GetTick>
 8002be8:	0002      	movs	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e059      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf6:	4b2f      	ldr	r3, [pc, #188]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	049b      	lsls	r3, r3, #18
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x534>
 8002c02:	e051      	b.n	8002ca8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c04:	4b2b      	ldr	r3, [pc, #172]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4b2a      	ldr	r3, [pc, #168]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002c0a:	492e      	ldr	r1, [pc, #184]	; (8002cc4 <HAL_RCC_OscConfig+0x614>)
 8002c0c:	400a      	ands	r2, r1
 8002c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c10:	f7fe fab0 	bl	8001174 <HAL_GetTick>
 8002c14:	0003      	movs	r3, r0
 8002c16:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1a:	f7fe faab 	bl	8001174 <HAL_GetTick>
 8002c1e:	0002      	movs	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e03e      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c2c:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	049b      	lsls	r3, r3, #18
 8002c34:	4013      	ands	r3, r2
 8002c36:	d1f0      	bne.n	8002c1a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002c38:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002c3e:	4923      	ldr	r1, [pc, #140]	; (8002ccc <HAL_RCC_OscConfig+0x61c>)
 8002c40:	400a      	ands	r2, r1
 8002c42:	60da      	str	r2, [r3, #12]
 8002c44:	e030      	b.n	8002ca8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e02b      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <HAL_RCC_OscConfig+0x604>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	401a      	ands	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d11e      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2270      	movs	r2, #112	; 0x70
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d117      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	23fe      	movs	r3, #254	; 0xfe
 8002c78:	01db      	lsls	r3, r3, #7
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d10e      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	23f8      	movs	r3, #248	; 0xf8
 8002c8a:	039b      	lsls	r3, r3, #14
 8002c8c:	401a      	ands	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d106      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	0f5b      	lsrs	r3, r3, #29
 8002c9a:	075a      	lsls	r2, r3, #29
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	0018      	movs	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b008      	add	sp, #32
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40007000 	.word	0x40007000
 8002cbc:	00001388 	.word	0x00001388
 8002cc0:	efffffff 	.word	0xefffffff
 8002cc4:	feffffff 	.word	0xfeffffff
 8002cc8:	1fc1808c 	.word	0x1fc1808c
 8002ccc:	effefffc 	.word	0xeffefffc

08002cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0e9      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b76      	ldr	r3, [pc, #472]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2207      	movs	r2, #7
 8002cea:	4013      	ands	r3, r2
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d91e      	bls.n	8002d30 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b73      	ldr	r3, [pc, #460]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2207      	movs	r2, #7
 8002cf8:	4393      	bics	r3, r2
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	4b70      	ldr	r3, [pc, #448]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d04:	f7fe fa36 	bl	8001174 <HAL_GetTick>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d0c:	e009      	b.n	8002d22 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0e:	f7fe fa31 	bl	8001174 <HAL_GetTick>
 8002d12:	0002      	movs	r2, r0
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	4a6a      	ldr	r2, [pc, #424]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e0ca      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d22:	4b67      	ldr	r3, [pc, #412]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2207      	movs	r2, #7
 8002d28:	4013      	ands	r3, r2
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d1ee      	bne.n	8002d0e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2202      	movs	r2, #2
 8002d36:	4013      	ands	r3, r2
 8002d38:	d015      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2204      	movs	r2, #4
 8002d40:	4013      	ands	r3, r2
 8002d42:	d006      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d44:	4b60      	ldr	r3, [pc, #384]	; (8002ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	4b5f      	ldr	r3, [pc, #380]	; (8002ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d4a:	21e0      	movs	r1, #224	; 0xe0
 8002d4c:	01c9      	lsls	r1, r1, #7
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d52:	4b5d      	ldr	r3, [pc, #372]	; (8002ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	4a5d      	ldr	r2, [pc, #372]	; (8002ecc <HAL_RCC_ClockConfig+0x1fc>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	4b59      	ldr	r3, [pc, #356]	; (8002ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d62:	430a      	orrs	r2, r1
 8002d64:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d057      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d107      	bne.n	8002d88 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d78:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	029b      	lsls	r3, r3, #10
 8002d80:	4013      	ands	r3, r2
 8002d82:	d12b      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e097      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d107      	bne.n	8002da0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d90:	4b4d      	ldr	r3, [pc, #308]	; (8002ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	049b      	lsls	r3, r3, #18
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d11f      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e08b      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d107      	bne.n	8002db8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da8:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	2380      	movs	r3, #128	; 0x80
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4013      	ands	r3, r2
 8002db2:	d113      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e07f      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d106      	bne.n	8002dce <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dc0:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8002dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d108      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e074      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dce:	4b3e      	ldr	r3, [pc, #248]	; (8002ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e06d      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ddc:	4b3a      	ldr	r3, [pc, #232]	; (8002ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2207      	movs	r2, #7
 8002de2:	4393      	bics	r3, r2
 8002de4:	0019      	movs	r1, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	4b37      	ldr	r3, [pc, #220]	; (8002ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8002dec:	430a      	orrs	r2, r1
 8002dee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df0:	f7fe f9c0 	bl	8001174 <HAL_GetTick>
 8002df4:	0003      	movs	r3, r0
 8002df6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df8:	e009      	b.n	8002e0e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfa:	f7fe f9bb 	bl	8001174 <HAL_GetTick>
 8002dfe:	0002      	movs	r2, r0
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	4a2f      	ldr	r2, [pc, #188]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e054      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0e:	4b2e      	ldr	r3, [pc, #184]	; (8002ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2238      	movs	r2, #56	; 0x38
 8002e14:	401a      	ands	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d1ec      	bne.n	8002dfa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e20:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2207      	movs	r2, #7
 8002e26:	4013      	ands	r3, r2
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d21e      	bcs.n	8002e6c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2e:	4b24      	ldr	r3, [pc, #144]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2207      	movs	r2, #7
 8002e34:	4393      	bics	r3, r2
 8002e36:	0019      	movs	r1, r3
 8002e38:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e40:	f7fe f998 	bl	8001174 <HAL_GetTick>
 8002e44:	0003      	movs	r3, r0
 8002e46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e48:	e009      	b.n	8002e5e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4a:	f7fe f993 	bl	8001174 <HAL_GetTick>
 8002e4e:	0002      	movs	r2, r0
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	4a1b      	ldr	r2, [pc, #108]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e02c      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e5e:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2207      	movs	r2, #7
 8002e64:	4013      	ands	r3, r2
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d1ee      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2204      	movs	r2, #4
 8002e72:	4013      	ands	r3, r2
 8002e74:	d009      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e76:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	4a15      	ldr	r2, [pc, #84]	; (8002ed0 <HAL_RCC_ClockConfig+0x200>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	0019      	movs	r1, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8002e86:	430a      	orrs	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e8a:	f000 f829 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8002e8e:	0001      	movs	r1, r0
 8002e90:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	220f      	movs	r2, #15
 8002e98:	401a      	ands	r2, r3
 8002e9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <HAL_RCC_ClockConfig+0x204>)
 8002e9c:	0092      	lsls	r2, r2, #2
 8002e9e:	58d3      	ldr	r3, [r2, r3]
 8002ea0:	221f      	movs	r2, #31
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	000a      	movs	r2, r1
 8002ea6:	40da      	lsrs	r2, r3
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_RCC_ClockConfig+0x208>)
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCC_ClockConfig+0x20c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f7fe f903 	bl	80010bc <HAL_InitTick>
 8002eb6:	0003      	movs	r3, r0
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b004      	add	sp, #16
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40022000 	.word	0x40022000
 8002ec4:	00001388 	.word	0x00001388
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	fffff0ff 	.word	0xfffff0ff
 8002ed0:	ffff8fff 	.word	0xffff8fff
 8002ed4:	080057e8 	.word	0x080057e8
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	20000004 	.word	0x20000004

08002ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ee6:	4b3c      	ldr	r3, [pc, #240]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2238      	movs	r2, #56	; 0x38
 8002eec:	4013      	ands	r3, r2
 8002eee:	d10f      	bne.n	8002f10 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ef0:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	0adb      	lsrs	r3, r3, #11
 8002ef6:	2207      	movs	r2, #7
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2201      	movs	r2, #1
 8002efc:	409a      	lsls	r2, r3
 8002efe:	0013      	movs	r3, r2
 8002f00:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f02:	6839      	ldr	r1, [r7, #0]
 8002f04:	4835      	ldr	r0, [pc, #212]	; (8002fdc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f06:	f7fd f8fb 	bl	8000100 <__udivsi3>
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	e05d      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f10:	4b31      	ldr	r3, [pc, #196]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2238      	movs	r2, #56	; 0x38
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d102      	bne.n	8002f22 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f1c:	4b30      	ldr	r3, [pc, #192]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	e054      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f22:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2238      	movs	r2, #56	; 0x38
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b10      	cmp	r3, #16
 8002f2c:	d138      	bne.n	8002fa0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f2e:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	2203      	movs	r2, #3
 8002f34:	4013      	ands	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f38:	4b27      	ldr	r3, [pc, #156]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	2207      	movs	r2, #7
 8002f40:	4013      	ands	r3, r2
 8002f42:	3301      	adds	r3, #1
 8002f44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d10d      	bne.n	8002f68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	4824      	ldr	r0, [pc, #144]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f50:	f7fd f8d6 	bl	8000100 <__udivsi3>
 8002f54:	0003      	movs	r3, r0
 8002f56:	0019      	movs	r1, r3
 8002f58:	4b1f      	ldr	r3, [pc, #124]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	0a1b      	lsrs	r3, r3, #8
 8002f5e:	227f      	movs	r2, #127	; 0x7f
 8002f60:	4013      	ands	r3, r2
 8002f62:	434b      	muls	r3, r1
 8002f64:	617b      	str	r3, [r7, #20]
        break;
 8002f66:	e00d      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	481c      	ldr	r0, [pc, #112]	; (8002fdc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f6c:	f7fd f8c8 	bl	8000100 <__udivsi3>
 8002f70:	0003      	movs	r3, r0
 8002f72:	0019      	movs	r1, r3
 8002f74:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	227f      	movs	r2, #127	; 0x7f
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	434b      	muls	r3, r1
 8002f80:	617b      	str	r3, [r7, #20]
        break;
 8002f82:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f84:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	0f5b      	lsrs	r3, r3, #29
 8002f8a:	2207      	movs	r2, #7
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	3301      	adds	r3, #1
 8002f90:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	6978      	ldr	r0, [r7, #20]
 8002f96:	f7fd f8b3 	bl	8000100 <__udivsi3>
 8002f9a:	0003      	movs	r3, r0
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	e015      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002fa0:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2238      	movs	r2, #56	; 0x38
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d103      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002fb4:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2238      	movs	r2, #56	; 0x38
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b18      	cmp	r3, #24
 8002fbe:	d103      	bne.n	8002fc8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002fc0:	23fa      	movs	r3, #250	; 0xfa
 8002fc2:	01db      	lsls	r3, r3, #7
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	e001      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fcc:	693b      	ldr	r3, [r7, #16]
}
 8002fce:	0018      	movs	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b006      	add	sp, #24
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	00f42400 	.word	0x00f42400
 8002fe0:	007a1200 	.word	0x007a1200

08002fe4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe8:	4b02      	ldr	r3, [pc, #8]	; (8002ff4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fea:	681b      	ldr	r3, [r3, #0]
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	20000000 	.word	0x20000000

08002ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff8:	b5b0      	push	{r4, r5, r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002ffc:	f7ff fff2 	bl	8002fe4 <HAL_RCC_GetHCLKFreq>
 8003000:	0004      	movs	r4, r0
 8003002:	f7ff fb49 	bl	8002698 <LL_RCC_GetAPB1Prescaler>
 8003006:	0003      	movs	r3, r0
 8003008:	0b1a      	lsrs	r2, r3, #12
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800300c:	0092      	lsls	r2, r2, #2
 800300e:	58d3      	ldr	r3, [r2, r3]
 8003010:	221f      	movs	r2, #31
 8003012:	4013      	ands	r3, r2
 8003014:	40dc      	lsrs	r4, r3
 8003016:	0023      	movs	r3, r4
}
 8003018:	0018      	movs	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	bdb0      	pop	{r4, r5, r7, pc}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	08005828 	.word	0x08005828

08003024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800302c:	2313      	movs	r3, #19
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003034:	2312      	movs	r3, #18
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	029b      	lsls	r3, r3, #10
 8003044:	4013      	ands	r3, r2
 8003046:	d100      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003048:	e0a3      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800304a:	2011      	movs	r0, #17
 800304c:	183b      	adds	r3, r7, r0
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003052:	4b86      	ldr	r3, [pc, #536]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	055b      	lsls	r3, r3, #21
 800305a:	4013      	ands	r3, r2
 800305c:	d110      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305e:	4b83      	ldr	r3, [pc, #524]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003062:	4b82      	ldr	r3, [pc, #520]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003064:	2180      	movs	r1, #128	; 0x80
 8003066:	0549      	lsls	r1, r1, #21
 8003068:	430a      	orrs	r2, r1
 800306a:	63da      	str	r2, [r3, #60]	; 0x3c
 800306c:	4b7f      	ldr	r3, [pc, #508]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800306e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	055b      	lsls	r3, r3, #21
 8003074:	4013      	ands	r3, r2
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307a:	183b      	adds	r3, r7, r0
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003080:	4b7b      	ldr	r3, [pc, #492]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b7a      	ldr	r3, [pc, #488]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003086:	2180      	movs	r1, #128	; 0x80
 8003088:	0049      	lsls	r1, r1, #1
 800308a:	430a      	orrs	r2, r1
 800308c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800308e:	f7fe f871 	bl	8001174 <HAL_GetTick>
 8003092:	0003      	movs	r3, r0
 8003094:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003096:	e00b      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003098:	f7fe f86c 	bl	8001174 <HAL_GetTick>
 800309c:	0002      	movs	r2, r0
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d904      	bls.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80030a6:	2313      	movs	r3, #19
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	2203      	movs	r2, #3
 80030ac:	701a      	strb	r2, [r3, #0]
        break;
 80030ae:	e005      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030b0:	4b6f      	ldr	r3, [pc, #444]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	4013      	ands	r3, r2
 80030ba:	d0ed      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80030bc:	2313      	movs	r3, #19
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d154      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030c6:	4b69      	ldr	r3, [pc, #420]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030ca:	23c0      	movs	r3, #192	; 0xc0
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4013      	ands	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d019      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d014      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030e2:	4b62      	ldr	r3, [pc, #392]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e6:	4a63      	ldr	r2, [pc, #396]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030ec:	4b5f      	ldr	r3, [pc, #380]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030f0:	4b5e      	ldr	r3, [pc, #376]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030f2:	2180      	movs	r1, #128	; 0x80
 80030f4:	0249      	lsls	r1, r1, #9
 80030f6:	430a      	orrs	r2, r1
 80030f8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030fa:	4b5c      	ldr	r3, [pc, #368]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030fe:	4b5b      	ldr	r3, [pc, #364]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003100:	495d      	ldr	r1, [pc, #372]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003102:	400a      	ands	r2, r1
 8003104:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003106:	4b59      	ldr	r3, [pc, #356]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2201      	movs	r2, #1
 8003110:	4013      	ands	r3, r2
 8003112:	d016      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fe f82e 	bl	8001174 <HAL_GetTick>
 8003118:	0003      	movs	r3, r0
 800311a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800311c:	e00c      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311e:	f7fe f829 	bl	8001174 <HAL_GetTick>
 8003122:	0002      	movs	r2, r0
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	4a54      	ldr	r2, [pc, #336]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d904      	bls.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800312e:	2313      	movs	r3, #19
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	2203      	movs	r2, #3
 8003134:	701a      	strb	r2, [r3, #0]
            break;
 8003136:	e004      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003138:	4b4c      	ldr	r3, [pc, #304]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313c:	2202      	movs	r2, #2
 800313e:	4013      	ands	r3, r2
 8003140:	d0ed      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003142:	2313      	movs	r3, #19
 8003144:	18fb      	adds	r3, r7, r3
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800314c:	4b47      	ldr	r3, [pc, #284]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800314e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003150:	4a48      	ldr	r2, [pc, #288]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003152:	4013      	ands	r3, r2
 8003154:	0019      	movs	r1, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	4b44      	ldr	r3, [pc, #272]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800315c:	430a      	orrs	r2, r1
 800315e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003160:	e00c      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003162:	2312      	movs	r3, #18
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	2213      	movs	r2, #19
 8003168:	18ba      	adds	r2, r7, r2
 800316a:	7812      	ldrb	r2, [r2, #0]
 800316c:	701a      	strb	r2, [r3, #0]
 800316e:	e005      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003170:	2312      	movs	r3, #18
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	2213      	movs	r2, #19
 8003176:	18ba      	adds	r2, r7, r2
 8003178:	7812      	ldrb	r2, [r2, #0]
 800317a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800317c:	2311      	movs	r3, #17
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d105      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003186:	4b39      	ldr	r3, [pc, #228]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800318a:	4b38      	ldr	r3, [pc, #224]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800318c:	493c      	ldr	r1, [pc, #240]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800318e:	400a      	ands	r2, r1
 8003190:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2201      	movs	r2, #1
 8003198:	4013      	ands	r3, r2
 800319a:	d009      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800319c:	4b33      	ldr	r3, [pc, #204]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a0:	2203      	movs	r2, #3
 80031a2:	4393      	bics	r3, r2
 80031a4:	0019      	movs	r1, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	4b30      	ldr	r3, [pc, #192]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031ac:	430a      	orrs	r2, r1
 80031ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2202      	movs	r2, #2
 80031b6:	4013      	ands	r3, r2
 80031b8:	d009      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031ba:	4b2c      	ldr	r3, [pc, #176]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	220c      	movs	r2, #12
 80031c0:	4393      	bics	r3, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	4b28      	ldr	r3, [pc, #160]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031ca:	430a      	orrs	r2, r1
 80031cc:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2220      	movs	r2, #32
 80031d4:	4013      	ands	r3, r2
 80031d6:	d009      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031d8:	4b24      	ldr	r3, [pc, #144]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031dc:	4a29      	ldr	r2, [pc, #164]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031de:	4013      	ands	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	4b21      	ldr	r3, [pc, #132]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031e8:	430a      	orrs	r2, r1
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	01db      	lsls	r3, r3, #7
 80031f4:	4013      	ands	r3, r2
 80031f6:	d015      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031f8:	4b1c      	ldr	r3, [pc, #112]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	0899      	lsrs	r1, r3, #2
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	4b19      	ldr	r3, [pc, #100]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003206:	430a      	orrs	r2, r1
 8003208:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	05db      	lsls	r3, r3, #23
 8003212:	429a      	cmp	r2, r3
 8003214:	d106      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	4b14      	ldr	r3, [pc, #80]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800321c:	2180      	movs	r1, #128	; 0x80
 800321e:	0249      	lsls	r1, r1, #9
 8003220:	430a      	orrs	r2, r1
 8003222:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	4013      	ands	r3, r2
 800322e:	d016      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003230:	4b0e      	ldr	r3, [pc, #56]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	4a14      	ldr	r2, [pc, #80]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003236:	4013      	ands	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003240:	430a      	orrs	r2, r1
 8003242:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	01db      	lsls	r3, r3, #7
 800324c:	429a      	cmp	r2, r3
 800324e:	d106      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003250:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003256:	2180      	movs	r1, #128	; 0x80
 8003258:	0249      	lsls	r1, r1, #9
 800325a:	430a      	orrs	r2, r1
 800325c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800325e:	2312      	movs	r3, #18
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	781b      	ldrb	r3, [r3, #0]
}
 8003264:	0018      	movs	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	b006      	add	sp, #24
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40021000 	.word	0x40021000
 8003270:	40007000 	.word	0x40007000
 8003274:	fffffcff 	.word	0xfffffcff
 8003278:	fffeffff 	.word	0xfffeffff
 800327c:	00001388 	.word	0x00001388
 8003280:	efffffff 	.word	0xefffffff
 8003284:	ffffcfff 	.word	0xffffcfff
 8003288:	ffff3fff 	.word	0xffff3fff

0800328c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e04a      	b.n	8003334 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	223d      	movs	r2, #61	; 0x3d
 80032a2:	5c9b      	ldrb	r3, [r3, r2]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d107      	bne.n	80032ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	223c      	movs	r2, #60	; 0x3c
 80032ae:	2100      	movs	r1, #0
 80032b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7fd fdd7 	bl	8000e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	223d      	movs	r2, #61	; 0x3d
 80032be:	2102      	movs	r1, #2
 80032c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3304      	adds	r3, #4
 80032ca:	0019      	movs	r1, r3
 80032cc:	0010      	movs	r0, r2
 80032ce:	f000 f97f 	bl	80035d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2248      	movs	r2, #72	; 0x48
 80032d6:	2101      	movs	r1, #1
 80032d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	223e      	movs	r2, #62	; 0x3e
 80032de:	2101      	movs	r1, #1
 80032e0:	5499      	strb	r1, [r3, r2]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	223f      	movs	r2, #63	; 0x3f
 80032e6:	2101      	movs	r1, #1
 80032e8:	5499      	strb	r1, [r3, r2]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2240      	movs	r2, #64	; 0x40
 80032ee:	2101      	movs	r1, #1
 80032f0:	5499      	strb	r1, [r3, r2]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2241      	movs	r2, #65	; 0x41
 80032f6:	2101      	movs	r1, #1
 80032f8:	5499      	strb	r1, [r3, r2]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2242      	movs	r2, #66	; 0x42
 80032fe:	2101      	movs	r1, #1
 8003300:	5499      	strb	r1, [r3, r2]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2243      	movs	r2, #67	; 0x43
 8003306:	2101      	movs	r1, #1
 8003308:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2244      	movs	r2, #68	; 0x44
 800330e:	2101      	movs	r1, #1
 8003310:	5499      	strb	r1, [r3, r2]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2245      	movs	r2, #69	; 0x45
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2246      	movs	r2, #70	; 0x46
 800331e:	2101      	movs	r1, #1
 8003320:	5499      	strb	r1, [r3, r2]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2247      	movs	r2, #71	; 0x47
 8003326:	2101      	movs	r1, #1
 8003328:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	223d      	movs	r2, #61	; 0x3d
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	0018      	movs	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	b002      	add	sp, #8
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	223d      	movs	r2, #61	; 0x3d
 8003348:	5c9b      	ldrb	r3, [r3, r2]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d001      	beq.n	8003354 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e034      	b.n	80033be <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	223d      	movs	r2, #61	; 0x3d
 8003358:	2102      	movs	r1, #2
 800335a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a19      	ldr	r2, [pc, #100]	; (80033c8 <HAL_TIM_Base_Start+0x8c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d009      	beq.n	800337a <HAL_TIM_Base_Start+0x3e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a18      	ldr	r2, [pc, #96]	; (80033cc <HAL_TIM_Base_Start+0x90>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d004      	beq.n	800337a <HAL_TIM_Base_Start+0x3e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a16      	ldr	r2, [pc, #88]	; (80033d0 <HAL_TIM_Base_Start+0x94>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d116      	bne.n	80033a8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a14      	ldr	r2, [pc, #80]	; (80033d4 <HAL_TIM_Base_Start+0x98>)
 8003382:	4013      	ands	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b06      	cmp	r3, #6
 800338a:	d016      	beq.n	80033ba <HAL_TIM_Base_Start+0x7e>
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	025b      	lsls	r3, r3, #9
 8003392:	429a      	cmp	r2, r3
 8003394:	d011      	beq.n	80033ba <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2101      	movs	r1, #1
 80033a2:	430a      	orrs	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a6:	e008      	b.n	80033ba <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2101      	movs	r1, #1
 80033b4:	430a      	orrs	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	e000      	b.n	80033bc <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ba:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	0018      	movs	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b004      	add	sp, #16
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	40012c00 	.word	0x40012c00
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40014000 	.word	0x40014000
 80033d4:	00010007 	.word	0x00010007

080033d8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	4a0d      	ldr	r2, [pc, #52]	; (800341c <HAL_TIM_Base_Stop+0x44>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	d10d      	bne.n	8003408 <HAL_TIM_Base_Stop+0x30>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <HAL_TIM_Base_Stop+0x48>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	d107      	bne.n	8003408 <HAL_TIM_Base_Stop+0x30>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2101      	movs	r1, #1
 8003404:	438a      	bics	r2, r1
 8003406:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	223d      	movs	r2, #61	; 0x3d
 800340c:	2101      	movs	r1, #1
 800340e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	0018      	movs	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	b002      	add	sp, #8
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	00001111 	.word	0x00001111
 8003420:	00000444 	.word	0x00000444

08003424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800342e:	230f      	movs	r3, #15
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	2200      	movs	r2, #0
 8003434:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	223c      	movs	r2, #60	; 0x3c
 800343a:	5c9b      	ldrb	r3, [r3, r2]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_TIM_ConfigClockSource+0x20>
 8003440:	2302      	movs	r3, #2
 8003442:	e0bc      	b.n	80035be <HAL_TIM_ConfigClockSource+0x19a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	223c      	movs	r2, #60	; 0x3c
 8003448:	2101      	movs	r1, #1
 800344a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	223d      	movs	r2, #61	; 0x3d
 8003450:	2102      	movs	r1, #2
 8003452:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4a5a      	ldr	r2, [pc, #360]	; (80035c8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003460:	4013      	ands	r3, r2
 8003462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4a59      	ldr	r2, [pc, #356]	; (80035cc <HAL_TIM_ConfigClockSource+0x1a8>)
 8003468:	4013      	ands	r3, r2
 800346a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2280      	movs	r2, #128	; 0x80
 800347a:	0192      	lsls	r2, r2, #6
 800347c:	4293      	cmp	r3, r2
 800347e:	d040      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0xde>
 8003480:	2280      	movs	r2, #128	; 0x80
 8003482:	0192      	lsls	r2, r2, #6
 8003484:	4293      	cmp	r3, r2
 8003486:	d900      	bls.n	800348a <HAL_TIM_ConfigClockSource+0x66>
 8003488:	e088      	b.n	800359c <HAL_TIM_ConfigClockSource+0x178>
 800348a:	2280      	movs	r2, #128	; 0x80
 800348c:	0152      	lsls	r2, r2, #5
 800348e:	4293      	cmp	r3, r2
 8003490:	d100      	bne.n	8003494 <HAL_TIM_ConfigClockSource+0x70>
 8003492:	e088      	b.n	80035a6 <HAL_TIM_ConfigClockSource+0x182>
 8003494:	2280      	movs	r2, #128	; 0x80
 8003496:	0152      	lsls	r2, r2, #5
 8003498:	4293      	cmp	r3, r2
 800349a:	d900      	bls.n	800349e <HAL_TIM_ConfigClockSource+0x7a>
 800349c:	e07e      	b.n	800359c <HAL_TIM_ConfigClockSource+0x178>
 800349e:	2b70      	cmp	r3, #112	; 0x70
 80034a0:	d018      	beq.n	80034d4 <HAL_TIM_ConfigClockSource+0xb0>
 80034a2:	d900      	bls.n	80034a6 <HAL_TIM_ConfigClockSource+0x82>
 80034a4:	e07a      	b.n	800359c <HAL_TIM_ConfigClockSource+0x178>
 80034a6:	2b60      	cmp	r3, #96	; 0x60
 80034a8:	d04f      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x126>
 80034aa:	d900      	bls.n	80034ae <HAL_TIM_ConfigClockSource+0x8a>
 80034ac:	e076      	b.n	800359c <HAL_TIM_ConfigClockSource+0x178>
 80034ae:	2b50      	cmp	r3, #80	; 0x50
 80034b0:	d03b      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x106>
 80034b2:	d900      	bls.n	80034b6 <HAL_TIM_ConfigClockSource+0x92>
 80034b4:	e072      	b.n	800359c <HAL_TIM_ConfigClockSource+0x178>
 80034b6:	2b40      	cmp	r3, #64	; 0x40
 80034b8:	d057      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x146>
 80034ba:	d900      	bls.n	80034be <HAL_TIM_ConfigClockSource+0x9a>
 80034bc:	e06e      	b.n	800359c <HAL_TIM_ConfigClockSource+0x178>
 80034be:	2b30      	cmp	r3, #48	; 0x30
 80034c0:	d063      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x166>
 80034c2:	d86b      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x178>
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d060      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x166>
 80034c8:	d868      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x178>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d05d      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x166>
 80034ce:	2b10      	cmp	r3, #16
 80034d0:	d05b      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x166>
 80034d2:	e063      	b.n	800359c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	6899      	ldr	r1, [r3, #8]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f000 f966 	bl	80037b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2277      	movs	r2, #119	; 0x77
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	609a      	str	r2, [r3, #8]
      break;
 8003500:	e052      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6899      	ldr	r1, [r3, #8]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f000 f94f 	bl	80037b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	01c9      	lsls	r1, r1, #7
 8003524:	430a      	orrs	r2, r1
 8003526:	609a      	str	r2, [r3, #8]
      break;
 8003528:	e03e      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	001a      	movs	r2, r3
 8003538:	f000 f8c0 	bl	80036bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2150      	movs	r1, #80	; 0x50
 8003542:	0018      	movs	r0, r3
 8003544:	f000 f91a 	bl	800377c <TIM_ITRx_SetConfig>
      break;
 8003548:	e02e      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	001a      	movs	r2, r3
 8003558:	f000 f8de 	bl	8003718 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2160      	movs	r1, #96	; 0x60
 8003562:	0018      	movs	r0, r3
 8003564:	f000 f90a 	bl	800377c <TIM_ITRx_SetConfig>
      break;
 8003568:	e01e      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6859      	ldr	r1, [r3, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	001a      	movs	r2, r3
 8003578:	f000 f8a0 	bl	80036bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2140      	movs	r1, #64	; 0x40
 8003582:	0018      	movs	r0, r3
 8003584:	f000 f8fa 	bl	800377c <TIM_ITRx_SetConfig>
      break;
 8003588:	e00e      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	0019      	movs	r1, r3
 8003594:	0010      	movs	r0, r2
 8003596:	f000 f8f1 	bl	800377c <TIM_ITRx_SetConfig>
      break;
 800359a:	e005      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800359c:	230f      	movs	r3, #15
 800359e:	18fb      	adds	r3, r7, r3
 80035a0:	2201      	movs	r2, #1
 80035a2:	701a      	strb	r2, [r3, #0]
      break;
 80035a4:	e000      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80035a6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	223d      	movs	r2, #61	; 0x3d
 80035ac:	2101      	movs	r1, #1
 80035ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	223c      	movs	r2, #60	; 0x3c
 80035b4:	2100      	movs	r1, #0
 80035b6:	5499      	strb	r1, [r3, r2]

  return status;
 80035b8:	230f      	movs	r3, #15
 80035ba:	18fb      	adds	r3, r7, r3
 80035bc:	781b      	ldrb	r3, [r3, #0]
}
 80035be:	0018      	movs	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b004      	add	sp, #16
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	ffceff88 	.word	0xffceff88
 80035cc:	ffff00ff 	.word	0xffff00ff

080035d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a2f      	ldr	r2, [pc, #188]	; (80036a0 <TIM_Base_SetConfig+0xd0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_Base_SetConfig+0x20>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a2e      	ldr	r2, [pc, #184]	; (80036a4 <TIM_Base_SetConfig+0xd4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d108      	bne.n	8003602 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2270      	movs	r2, #112	; 0x70
 80035f4:	4393      	bics	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a26      	ldr	r2, [pc, #152]	; (80036a0 <TIM_Base_SetConfig+0xd0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <TIM_Base_SetConfig+0x62>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a25      	ldr	r2, [pc, #148]	; (80036a4 <TIM_Base_SetConfig+0xd4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00f      	beq.n	8003632 <TIM_Base_SetConfig+0x62>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a24      	ldr	r2, [pc, #144]	; (80036a8 <TIM_Base_SetConfig+0xd8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00b      	beq.n	8003632 <TIM_Base_SetConfig+0x62>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a23      	ldr	r2, [pc, #140]	; (80036ac <TIM_Base_SetConfig+0xdc>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d007      	beq.n	8003632 <TIM_Base_SetConfig+0x62>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a22      	ldr	r2, [pc, #136]	; (80036b0 <TIM_Base_SetConfig+0xe0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d003      	beq.n	8003632 <TIM_Base_SetConfig+0x62>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a21      	ldr	r2, [pc, #132]	; (80036b4 <TIM_Base_SetConfig+0xe4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d108      	bne.n	8003644 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4a20      	ldr	r2, [pc, #128]	; (80036b8 <TIM_Base_SetConfig+0xe8>)
 8003636:	4013      	ands	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2280      	movs	r2, #128	; 0x80
 8003648:	4393      	bics	r3, r2
 800364a:	001a      	movs	r2, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a0c      	ldr	r2, [pc, #48]	; (80036a0 <TIM_Base_SetConfig+0xd0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00b      	beq.n	800368a <TIM_Base_SetConfig+0xba>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a0d      	ldr	r2, [pc, #52]	; (80036ac <TIM_Base_SetConfig+0xdc>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d007      	beq.n	800368a <TIM_Base_SetConfig+0xba>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a0c      	ldr	r2, [pc, #48]	; (80036b0 <TIM_Base_SetConfig+0xe0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d003      	beq.n	800368a <TIM_Base_SetConfig+0xba>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a0b      	ldr	r2, [pc, #44]	; (80036b4 <TIM_Base_SetConfig+0xe4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d103      	bne.n	8003692 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	615a      	str	r2, [r3, #20]
}
 8003698:	46c0      	nop			; (mov r8, r8)
 800369a:	46bd      	mov	sp, r7
 800369c:	b004      	add	sp, #16
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40012c00 	.word	0x40012c00
 80036a4:	40000400 	.word	0x40000400
 80036a8:	40002000 	.word	0x40002000
 80036ac:	40014000 	.word	0x40014000
 80036b0:	40014400 	.word	0x40014400
 80036b4:	40014800 	.word	0x40014800
 80036b8:	fffffcff 	.word	0xfffffcff

080036bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	2201      	movs	r2, #1
 80036d4:	4393      	bics	r3, r2
 80036d6:	001a      	movs	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	22f0      	movs	r2, #240	; 0xf0
 80036e6:	4393      	bics	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	220a      	movs	r2, #10
 80036f8:	4393      	bics	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	621a      	str	r2, [r3, #32]
}
 8003710:	46c0      	nop			; (mov r8, r8)
 8003712:	46bd      	mov	sp, r7
 8003714:	b006      	add	sp, #24
 8003716:	bd80      	pop	{r7, pc}

08003718 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	2210      	movs	r2, #16
 800372a:	4393      	bics	r3, r2
 800372c:	001a      	movs	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	4a0d      	ldr	r2, [pc, #52]	; (8003778 <TIM_TI2_ConfigInputStage+0x60>)
 8003742:	4013      	ands	r3, r2
 8003744:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	031b      	lsls	r3, r3, #12
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	22a0      	movs	r2, #160	; 0xa0
 8003754:	4393      	bics	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	621a      	str	r2, [r3, #32]
}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	46bd      	mov	sp, r7
 8003772:	b006      	add	sp, #24
 8003774:	bd80      	pop	{r7, pc}
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	ffff0fff 	.word	0xffff0fff

0800377c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4a08      	ldr	r2, [pc, #32]	; (80037b0 <TIM_ITRx_SetConfig+0x34>)
 8003790:	4013      	ands	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	2207      	movs	r2, #7
 800379c:	4313      	orrs	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	609a      	str	r2, [r3, #8]
}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b004      	add	sp, #16
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	ffcfff8f 	.word	0xffcfff8f

080037b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	4a09      	ldr	r2, [pc, #36]	; (80037f0 <TIM_ETR_SetConfig+0x3c>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	021a      	lsls	r2, r3, #8
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4313      	orrs	r3, r2
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	609a      	str	r2, [r3, #8]
}
 80037e8:	46c0      	nop			; (mov r8, r8)
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b006      	add	sp, #24
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	ffff00ff 	.word	0xffff00ff

080037f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	223c      	movs	r2, #60	; 0x3c
 8003802:	5c9b      	ldrb	r3, [r3, r2]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003808:	2302      	movs	r3, #2
 800380a:	e04f      	b.n	80038ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	223c      	movs	r2, #60	; 0x3c
 8003810:	2101      	movs	r1, #1
 8003812:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	223d      	movs	r2, #61	; 0x3d
 8003818:	2102      	movs	r1, #2
 800381a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a20      	ldr	r2, [pc, #128]	; (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d108      	bne.n	8003848 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4a1f      	ldr	r2, [pc, #124]	; (80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800383a:	4013      	ands	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2270      	movs	r2, #112	; 0x70
 800384c:	4393      	bics	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a13      	ldr	r2, [pc, #76]	; (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d009      	beq.n	8003880 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a12      	ldr	r2, [pc, #72]	; (80038bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a11      	ldr	r2, [pc, #68]	; (80038c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d10c      	bne.n	800389a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2280      	movs	r2, #128	; 0x80
 8003884:	4393      	bics	r3, r2
 8003886:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	4313      	orrs	r3, r2
 8003890:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	223d      	movs	r2, #61	; 0x3d
 800389e:	2101      	movs	r1, #1
 80038a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	223c      	movs	r2, #60	; 0x3c
 80038a6:	2100      	movs	r1, #0
 80038a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	0018      	movs	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b004      	add	sp, #16
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40012c00 	.word	0x40012c00
 80038b8:	ff0fffff 	.word	0xff0fffff
 80038bc:	40000400 	.word	0x40000400
 80038c0:	40014000 	.word	0x40014000

080038c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e046      	b.n	8003964 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2288      	movs	r2, #136	; 0x88
 80038da:	589b      	ldr	r3, [r3, r2]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d107      	bne.n	80038f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2284      	movs	r2, #132	; 0x84
 80038e4:	2100      	movs	r1, #0
 80038e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	0018      	movs	r0, r3
 80038ec:	f7fd fb08 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2288      	movs	r2, #136	; 0x88
 80038f4:	2124      	movs	r1, #36	; 0x24
 80038f6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2101      	movs	r1, #1
 8003904:	438a      	bics	r2, r1
 8003906:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	0018      	movs	r0, r3
 800390c:	f000 fc66 	bl	80041dc <UART_SetConfig>
 8003910:	0003      	movs	r3, r0
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e024      	b.n	8003964 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	0018      	movs	r0, r3
 8003926:	f000 fdfd 	bl	8004524 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	490d      	ldr	r1, [pc, #52]	; (800396c <HAL_UART_Init+0xa8>)
 8003936:	400a      	ands	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	212a      	movs	r1, #42	; 0x2a
 8003946:	438a      	bics	r2, r1
 8003948:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2101      	movs	r1, #1
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	0018      	movs	r0, r3
 800395e:	f000 fe95 	bl	800468c <UART_CheckIdleState>
 8003962:	0003      	movs	r3, r0
}
 8003964:	0018      	movs	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	b002      	add	sp, #8
 800396a:	bd80      	pop	{r7, pc}
 800396c:	ffffb7ff 	.word	0xffffb7ff

08003970 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08a      	sub	sp, #40	; 0x28
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	1dbb      	adds	r3, r7, #6
 800397e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2288      	movs	r2, #136	; 0x88
 8003984:	589b      	ldr	r3, [r3, r2]
 8003986:	2b20      	cmp	r3, #32
 8003988:	d000      	beq.n	800398c <HAL_UART_Transmit+0x1c>
 800398a:	e088      	b.n	8003a9e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_UART_Transmit+0x2a>
 8003992:	1dbb      	adds	r3, r7, #6
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e080      	b.n	8003aa0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	2380      	movs	r3, #128	; 0x80
 80039a4:	015b      	lsls	r3, r3, #5
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d109      	bne.n	80039be <HAL_UART_Transmit+0x4e>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d105      	bne.n	80039be <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2201      	movs	r2, #1
 80039b6:	4013      	ands	r3, r2
 80039b8:	d001      	beq.n	80039be <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e070      	b.n	8003aa0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2290      	movs	r2, #144	; 0x90
 80039c2:	2100      	movs	r1, #0
 80039c4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2288      	movs	r2, #136	; 0x88
 80039ca:	2121      	movs	r1, #33	; 0x21
 80039cc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ce:	f7fd fbd1 	bl	8001174 <HAL_GetTick>
 80039d2:	0003      	movs	r3, r0
 80039d4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1dba      	adds	r2, r7, #6
 80039da:	2154      	movs	r1, #84	; 0x54
 80039dc:	8812      	ldrh	r2, [r2, #0]
 80039de:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	1dba      	adds	r2, r7, #6
 80039e4:	2156      	movs	r1, #86	; 0x56
 80039e6:	8812      	ldrh	r2, [r2, #0]
 80039e8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	2380      	movs	r3, #128	; 0x80
 80039f0:	015b      	lsls	r3, r3, #5
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d108      	bne.n	8003a08 <HAL_UART_Transmit+0x98>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d104      	bne.n	8003a08 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	e003      	b.n	8003a10 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a10:	e02c      	b.n	8003a6c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	0013      	movs	r3, r2
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2180      	movs	r1, #128	; 0x80
 8003a20:	f000 fe82 	bl	8004728 <UART_WaitOnFlagUntilTimeout>
 8003a24:	1e03      	subs	r3, r0, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e039      	b.n	8003aa0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10b      	bne.n	8003a4a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	001a      	movs	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	05d2      	lsls	r2, r2, #23
 8003a3e:	0dd2      	lsrs	r2, r2, #23
 8003a40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	3302      	adds	r3, #2
 8003a46:	61bb      	str	r3, [r7, #24]
 8003a48:	e007      	b.n	8003a5a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	781a      	ldrb	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	3301      	adds	r3, #1
 8003a58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2256      	movs	r2, #86	; 0x56
 8003a5e:	5a9b      	ldrh	r3, [r3, r2]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b299      	uxth	r1, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2256      	movs	r2, #86	; 0x56
 8003a6a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2256      	movs	r2, #86	; 0x56
 8003a70:	5a9b      	ldrh	r3, [r3, r2]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1cc      	bne.n	8003a12 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	0013      	movs	r3, r2
 8003a82:	2200      	movs	r2, #0
 8003a84:	2140      	movs	r1, #64	; 0x40
 8003a86:	f000 fe4f 	bl	8004728 <UART_WaitOnFlagUntilTimeout>
 8003a8a:	1e03      	subs	r3, r0, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e006      	b.n	8003aa0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2288      	movs	r2, #136	; 0x88
 8003a96:	2120      	movs	r1, #32
 8003a98:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e000      	b.n	8003aa0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003a9e:	2302      	movs	r3, #2
  }
}
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b008      	add	sp, #32
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	1dbb      	adds	r3, r7, #6
 8003ab4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	228c      	movs	r2, #140	; 0x8c
 8003aba:	589b      	ldr	r3, [r3, r2]
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d145      	bne.n	8003b4c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_UART_Receive_IT+0x26>
 8003ac6:	1dbb      	adds	r3, r7, #6
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e03d      	b.n	8003b4e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	015b      	lsls	r3, r3, #5
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d109      	bne.n	8003af2 <HAL_UART_Receive_IT+0x4a>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d105      	bne.n	8003af2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	4013      	ands	r3, r2
 8003aec:	d001      	beq.n	8003af2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e02d      	b.n	8003b4e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	2380      	movs	r3, #128	; 0x80
 8003b00:	041b      	lsls	r3, r3, #16
 8003b02:	4013      	ands	r3, r2
 8003b04:	d019      	beq.n	8003b3a <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b06:	f3ef 8310 	mrs	r3, PRIMASK
 8003b0a:	613b      	str	r3, [r7, #16]
  return(result);
 8003b0c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	2301      	movs	r3, #1
 8003b12:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f383 8810 	msr	PRIMASK, r3
}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2180      	movs	r1, #128	; 0x80
 8003b28:	04c9      	lsls	r1, r1, #19
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	f383 8810 	msr	PRIMASK, r3
}
 8003b38:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b3a:	1dbb      	adds	r3, r7, #6
 8003b3c:	881a      	ldrh	r2, [r3, #0]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	0018      	movs	r0, r3
 8003b44:	f000 feb8 	bl	80048b8 <UART_Start_Receive_IT>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	e000      	b.n	8003b4e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
  }
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b008      	add	sp, #32
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b58:	b5b0      	push	{r4, r5, r7, lr}
 8003b5a:	b0aa      	sub	sp, #168	; 0xa8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	22a4      	movs	r2, #164	; 0xa4
 8003b68:	18b9      	adds	r1, r7, r2
 8003b6a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	20a0      	movs	r0, #160	; 0xa0
 8003b74:	1839      	adds	r1, r7, r0
 8003b76:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	249c      	movs	r4, #156	; 0x9c
 8003b80:	1939      	adds	r1, r7, r4
 8003b82:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b84:	0011      	movs	r1, r2
 8003b86:	18bb      	adds	r3, r7, r2
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4aa2      	ldr	r2, [pc, #648]	; (8003e14 <HAL_UART_IRQHandler+0x2bc>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2298      	movs	r2, #152	; 0x98
 8003b90:	18bd      	adds	r5, r7, r2
 8003b92:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003b94:	18bb      	adds	r3, r7, r2
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d11a      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b9c:	187b      	adds	r3, r7, r1
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d015      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ba6:	183b      	adds	r3, r7, r0
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2220      	movs	r2, #32
 8003bac:	4013      	ands	r3, r2
 8003bae:	d105      	bne.n	8003bbc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003bb0:	193b      	adds	r3, r7, r4
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	055b      	lsls	r3, r3, #21
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d00a      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d100      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x6e>
 8003bc4:	e2dc      	b.n	8004180 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	0010      	movs	r0, r2
 8003bce:	4798      	blx	r3
      }
      return;
 8003bd0:	e2d6      	b.n	8004180 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003bd2:	2398      	movs	r3, #152	; 0x98
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d100      	bne.n	8003bde <HAL_UART_IRQHandler+0x86>
 8003bdc:	e122      	b.n	8003e24 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003bde:	239c      	movs	r3, #156	; 0x9c
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a8c      	ldr	r2, [pc, #560]	; (8003e18 <HAL_UART_IRQHandler+0x2c0>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	d106      	bne.n	8003bf8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003bea:	23a0      	movs	r3, #160	; 0xa0
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a8a      	ldr	r2, [pc, #552]	; (8003e1c <HAL_UART_IRQHandler+0x2c4>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d100      	bne.n	8003bf8 <HAL_UART_IRQHandler+0xa0>
 8003bf6:	e115      	b.n	8003e24 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bf8:	23a4      	movs	r3, #164	; 0xa4
 8003bfa:	18fb      	adds	r3, r7, r3
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	4013      	ands	r3, r2
 8003c02:	d012      	beq.n	8003c2a <HAL_UART_IRQHandler+0xd2>
 8003c04:	23a0      	movs	r3, #160	; 0xa0
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d00b      	beq.n	8003c2a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2201      	movs	r2, #1
 8003c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2290      	movs	r2, #144	; 0x90
 8003c1e:	589b      	ldr	r3, [r3, r2]
 8003c20:	2201      	movs	r2, #1
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2190      	movs	r1, #144	; 0x90
 8003c28:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c2a:	23a4      	movs	r3, #164	; 0xa4
 8003c2c:	18fb      	adds	r3, r7, r3
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2202      	movs	r2, #2
 8003c32:	4013      	ands	r3, r2
 8003c34:	d011      	beq.n	8003c5a <HAL_UART_IRQHandler+0x102>
 8003c36:	239c      	movs	r3, #156	; 0x9c
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d00b      	beq.n	8003c5a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2202      	movs	r2, #2
 8003c48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2290      	movs	r2, #144	; 0x90
 8003c4e:	589b      	ldr	r3, [r3, r2]
 8003c50:	2204      	movs	r2, #4
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2190      	movs	r1, #144	; 0x90
 8003c58:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c5a:	23a4      	movs	r3, #164	; 0xa4
 8003c5c:	18fb      	adds	r3, r7, r3
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2204      	movs	r2, #4
 8003c62:	4013      	ands	r3, r2
 8003c64:	d011      	beq.n	8003c8a <HAL_UART_IRQHandler+0x132>
 8003c66:	239c      	movs	r3, #156	; 0x9c
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d00b      	beq.n	8003c8a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2204      	movs	r2, #4
 8003c78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2290      	movs	r2, #144	; 0x90
 8003c7e:	589b      	ldr	r3, [r3, r2]
 8003c80:	2202      	movs	r2, #2
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2190      	movs	r1, #144	; 0x90
 8003c88:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c8a:	23a4      	movs	r3, #164	; 0xa4
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2208      	movs	r2, #8
 8003c92:	4013      	ands	r3, r2
 8003c94:	d017      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c96:	23a0      	movs	r3, #160	; 0xa0
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d105      	bne.n	8003cae <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003ca2:	239c      	movs	r3, #156	; 0x9c
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a5b      	ldr	r2, [pc, #364]	; (8003e18 <HAL_UART_IRQHandler+0x2c0>)
 8003caa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003cac:	d00b      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2290      	movs	r2, #144	; 0x90
 8003cba:	589b      	ldr	r3, [r3, r2]
 8003cbc:	2208      	movs	r2, #8
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2190      	movs	r1, #144	; 0x90
 8003cc4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003cc6:	23a4      	movs	r3, #164	; 0xa4
 8003cc8:	18fb      	adds	r3, r7, r3
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	2380      	movs	r3, #128	; 0x80
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d013      	beq.n	8003cfc <HAL_UART_IRQHandler+0x1a4>
 8003cd4:	23a0      	movs	r3, #160	; 0xa0
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	04db      	lsls	r3, r3, #19
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d00c      	beq.n	8003cfc <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2280      	movs	r2, #128	; 0x80
 8003ce8:	0112      	lsls	r2, r2, #4
 8003cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2290      	movs	r2, #144	; 0x90
 8003cf0:	589b      	ldr	r3, [r3, r2]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2190      	movs	r1, #144	; 0x90
 8003cfa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2290      	movs	r2, #144	; 0x90
 8003d00:	589b      	ldr	r3, [r3, r2]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d100      	bne.n	8003d08 <HAL_UART_IRQHandler+0x1b0>
 8003d06:	e23d      	b.n	8004184 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d08:	23a4      	movs	r3, #164	; 0xa4
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	4013      	ands	r3, r2
 8003d12:	d015      	beq.n	8003d40 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d14:	23a0      	movs	r3, #160	; 0xa0
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d106      	bne.n	8003d2e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d20:	239c      	movs	r3, #156	; 0x9c
 8003d22:	18fb      	adds	r3, r7, r3
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	2380      	movs	r3, #128	; 0x80
 8003d28:	055b      	lsls	r3, r3, #21
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d008      	beq.n	8003d40 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	0010      	movs	r0, r2
 8003d3e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2290      	movs	r2, #144	; 0x90
 8003d44:	589b      	ldr	r3, [r3, r2]
 8003d46:	2194      	movs	r1, #148	; 0x94
 8003d48:	187a      	adds	r2, r7, r1
 8003d4a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2240      	movs	r2, #64	; 0x40
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b40      	cmp	r3, #64	; 0x40
 8003d58:	d004      	beq.n	8003d64 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d5a:	187b      	adds	r3, r7, r1
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2228      	movs	r2, #40	; 0x28
 8003d60:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d62:	d04c      	beq.n	8003dfe <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	0018      	movs	r0, r3
 8003d68:	f000 feca 	bl	8004b00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2240      	movs	r2, #64	; 0x40
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b40      	cmp	r3, #64	; 0x40
 8003d78:	d13c      	bne.n	8003df4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d7e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d82:	2090      	movs	r0, #144	; 0x90
 8003d84:	183a      	adds	r2, r7, r0
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	2301      	movs	r3, #1
 8003d8a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d8e:	f383 8810 	msr	PRIMASK, r3
}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2140      	movs	r1, #64	; 0x40
 8003da0:	438a      	bics	r2, r1
 8003da2:	609a      	str	r2, [r3, #8]
 8003da4:	183b      	adds	r3, r7, r0
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003daa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dac:	f383 8810 	msr	PRIMASK, r3
}
 8003db0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2280      	movs	r2, #128	; 0x80
 8003db6:	589b      	ldr	r3, [r3, r2]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d016      	beq.n	8003dea <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2280      	movs	r2, #128	; 0x80
 8003dc0:	589b      	ldr	r3, [r3, r2]
 8003dc2:	4a17      	ldr	r2, [pc, #92]	; (8003e20 <HAL_UART_IRQHandler+0x2c8>)
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2280      	movs	r2, #128	; 0x80
 8003dca:	589b      	ldr	r3, [r3, r2]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f7fe fa55 	bl	800227c <HAL_DMA_Abort_IT>
 8003dd2:	1e03      	subs	r3, r0, #0
 8003dd4:	d01c      	beq.n	8003e10 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2280      	movs	r2, #128	; 0x80
 8003dda:	589b      	ldr	r3, [r3, r2]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	2180      	movs	r1, #128	; 0x80
 8003de2:	5852      	ldr	r2, [r2, r1]
 8003de4:	0010      	movs	r0, r2
 8003de6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de8:	e012      	b.n	8003e10 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	0018      	movs	r0, r3
 8003dee:	f000 f9e1 	bl	80041b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df2:	e00d      	b.n	8003e10 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	0018      	movs	r0, r3
 8003df8:	f000 f9dc 	bl	80041b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dfc:	e008      	b.n	8003e10 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	0018      	movs	r0, r3
 8003e02:	f000 f9d7 	bl	80041b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2290      	movs	r2, #144	; 0x90
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003e0e:	e1b9      	b.n	8004184 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e10:	46c0      	nop			; (mov r8, r8)
    return;
 8003e12:	e1b7      	b.n	8004184 <HAL_UART_IRQHandler+0x62c>
 8003e14:	0000080f 	.word	0x0000080f
 8003e18:	10000001 	.word	0x10000001
 8003e1c:	04000120 	.word	0x04000120
 8003e20:	08004bcd 	.word	0x08004bcd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d000      	beq.n	8003e2e <HAL_UART_IRQHandler+0x2d6>
 8003e2c:	e13e      	b.n	80040ac <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e2e:	23a4      	movs	r3, #164	; 0xa4
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2210      	movs	r2, #16
 8003e36:	4013      	ands	r3, r2
 8003e38:	d100      	bne.n	8003e3c <HAL_UART_IRQHandler+0x2e4>
 8003e3a:	e137      	b.n	80040ac <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e3c:	23a0      	movs	r3, #160	; 0xa0
 8003e3e:	18fb      	adds	r3, r7, r3
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2210      	movs	r2, #16
 8003e44:	4013      	ands	r3, r2
 8003e46:	d100      	bne.n	8003e4a <HAL_UART_IRQHandler+0x2f2>
 8003e48:	e130      	b.n	80040ac <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2210      	movs	r2, #16
 8003e50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2240      	movs	r2, #64	; 0x40
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b40      	cmp	r3, #64	; 0x40
 8003e5e:	d000      	beq.n	8003e62 <HAL_UART_IRQHandler+0x30a>
 8003e60:	e0a4      	b.n	8003fac <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2280      	movs	r2, #128	; 0x80
 8003e66:	589b      	ldr	r3, [r3, r2]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	217e      	movs	r1, #126	; 0x7e
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003e72:	187b      	adds	r3, r7, r1
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d100      	bne.n	8003e7c <HAL_UART_IRQHandler+0x324>
 8003e7a:	e185      	b.n	8004188 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	225c      	movs	r2, #92	; 0x5c
 8003e80:	5a9b      	ldrh	r3, [r3, r2]
 8003e82:	187a      	adds	r2, r7, r1
 8003e84:	8812      	ldrh	r2, [r2, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d300      	bcc.n	8003e8c <HAL_UART_IRQHandler+0x334>
 8003e8a:	e17d      	b.n	8004188 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	187a      	adds	r2, r7, r1
 8003e90:	215e      	movs	r1, #94	; 0x5e
 8003e92:	8812      	ldrh	r2, [r2, #0]
 8003e94:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2280      	movs	r2, #128	; 0x80
 8003e9a:	589b      	ldr	r3, [r3, r2]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d170      	bne.n	8003f88 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eaa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eae:	67bb      	str	r3, [r7, #120]	; 0x78
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb6:	f383 8810 	msr	PRIMASK, r3
}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	49b4      	ldr	r1, [pc, #720]	; (8004198 <HAL_UART_IRQHandler+0x640>)
 8003ec8:	400a      	ands	r2, r1
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ece:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed2:	f383 8810 	msr	PRIMASK, r3
}
 8003ed6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8003edc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee0:	677b      	str	r3, [r7, #116]	; 0x74
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ee8:	f383 8810 	msr	PRIMASK, r3
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2101      	movs	r1, #1
 8003efa:	438a      	bics	r2, r1
 8003efc:	609a      	str	r2, [r3, #8]
 8003efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f00:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f04:	f383 8810 	msr	PRIMASK, r3
}
 8003f08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f12:	673b      	str	r3, [r7, #112]	; 0x70
 8003f14:	2301      	movs	r3, #1
 8003f16:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f1a:	f383 8810 	msr	PRIMASK, r3
}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2140      	movs	r1, #64	; 0x40
 8003f2c:	438a      	bics	r2, r1
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f32:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f36:	f383 8810 	msr	PRIMASK, r3
}
 8003f3a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	228c      	movs	r2, #140	; 0x8c
 8003f40:	2120      	movs	r1, #32
 8003f42:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f4e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f54:	2301      	movs	r3, #1
 8003f56:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f5a:	f383 8810 	msr	PRIMASK, r3
}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2110      	movs	r1, #16
 8003f6c:	438a      	bics	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f72:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f76:	f383 8810 	msr	PRIMASK, r3
}
 8003f7a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2280      	movs	r2, #128	; 0x80
 8003f80:	589b      	ldr	r3, [r3, r2]
 8003f82:	0018      	movs	r0, r3
 8003f84:	f7fe f918 	bl	80021b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	225c      	movs	r2, #92	; 0x5c
 8003f92:	5a9a      	ldrh	r2, [r3, r2]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	215e      	movs	r1, #94	; 0x5e
 8003f98:	5a5b      	ldrh	r3, [r3, r1]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	0011      	movs	r1, r2
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f000 f90d 	bl	80041c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003faa:	e0ed      	b.n	8004188 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	225c      	movs	r2, #92	; 0x5c
 8003fb0:	5a99      	ldrh	r1, [r3, r2]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	225e      	movs	r2, #94	; 0x5e
 8003fb6:	5a9b      	ldrh	r3, [r3, r2]
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	208e      	movs	r0, #142	; 0x8e
 8003fbc:	183b      	adds	r3, r7, r0
 8003fbe:	1a8a      	subs	r2, r1, r2
 8003fc0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	225e      	movs	r2, #94	; 0x5e
 8003fc6:	5a9b      	ldrh	r3, [r3, r2]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d100      	bne.n	8003fd0 <HAL_UART_IRQHandler+0x478>
 8003fce:	e0dd      	b.n	800418c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003fd0:	183b      	adds	r3, r7, r0
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d100      	bne.n	8003fda <HAL_UART_IRQHandler+0x482>
 8003fd8:	e0d8      	b.n	800418c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fda:	f3ef 8310 	mrs	r3, PRIMASK
 8003fde:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fe2:	2488      	movs	r4, #136	; 0x88
 8003fe4:	193a      	adds	r2, r7, r4
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	2301      	movs	r3, #1
 8003fea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f383 8810 	msr	PRIMASK, r3
}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4967      	ldr	r1, [pc, #412]	; (800419c <HAL_UART_IRQHandler+0x644>)
 8004000:	400a      	ands	r2, r1
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	193b      	adds	r3, r7, r4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f383 8810 	msr	PRIMASK, r3
}
 8004010:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004012:	f3ef 8310 	mrs	r3, PRIMASK
 8004016:	61bb      	str	r3, [r7, #24]
  return(result);
 8004018:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800401a:	2484      	movs	r4, #132	; 0x84
 800401c:	193a      	adds	r2, r7, r4
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	2301      	movs	r3, #1
 8004022:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f383 8810 	msr	PRIMASK, r3
}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	495a      	ldr	r1, [pc, #360]	; (80041a0 <HAL_UART_IRQHandler+0x648>)
 8004038:	400a      	ands	r2, r1
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	193b      	adds	r3, r7, r4
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	f383 8810 	msr	PRIMASK, r3
}
 8004048:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	228c      	movs	r2, #140	; 0x8c
 800404e:	2120      	movs	r1, #32
 8004050:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800405e:	f3ef 8310 	mrs	r3, PRIMASK
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004066:	2480      	movs	r4, #128	; 0x80
 8004068:	193a      	adds	r2, r7, r4
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	2301      	movs	r3, #1
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	f383 8810 	msr	PRIMASK, r3
}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2110      	movs	r1, #16
 8004084:	438a      	bics	r2, r1
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	193b      	adds	r3, r7, r4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004090:	f383 8810 	msr	PRIMASK, r3
}
 8004094:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2202      	movs	r2, #2
 800409a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800409c:	183b      	adds	r3, r7, r0
 800409e:	881a      	ldrh	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	0011      	movs	r1, r2
 80040a4:	0018      	movs	r0, r3
 80040a6:	f000 f88d 	bl	80041c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040aa:	e06f      	b.n	800418c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040ac:	23a4      	movs	r3, #164	; 0xa4
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	035b      	lsls	r3, r3, #13
 80040b6:	4013      	ands	r3, r2
 80040b8:	d010      	beq.n	80040dc <HAL_UART_IRQHandler+0x584>
 80040ba:	239c      	movs	r3, #156	; 0x9c
 80040bc:	18fb      	adds	r3, r7, r3
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	03db      	lsls	r3, r3, #15
 80040c4:	4013      	ands	r3, r2
 80040c6:	d009      	beq.n	80040dc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2280      	movs	r2, #128	; 0x80
 80040ce:	0352      	lsls	r2, r2, #13
 80040d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	0018      	movs	r0, r3
 80040d6:	f001 fa1d 	bl	8005514 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040da:	e05a      	b.n	8004192 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80040dc:	23a4      	movs	r3, #164	; 0xa4
 80040de:	18fb      	adds	r3, r7, r3
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2280      	movs	r2, #128	; 0x80
 80040e4:	4013      	ands	r3, r2
 80040e6:	d016      	beq.n	8004116 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80040e8:	23a0      	movs	r3, #160	; 0xa0
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2280      	movs	r2, #128	; 0x80
 80040f0:	4013      	ands	r3, r2
 80040f2:	d106      	bne.n	8004102 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80040f4:	239c      	movs	r3, #156	; 0x9c
 80040f6:	18fb      	adds	r3, r7, r3
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	2380      	movs	r3, #128	; 0x80
 80040fc:	041b      	lsls	r3, r3, #16
 80040fe:	4013      	ands	r3, r2
 8004100:	d009      	beq.n	8004116 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004106:	2b00      	cmp	r3, #0
 8004108:	d042      	beq.n	8004190 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	0010      	movs	r0, r2
 8004112:	4798      	blx	r3
    }
    return;
 8004114:	e03c      	b.n	8004190 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004116:	23a4      	movs	r3, #164	; 0xa4
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2240      	movs	r2, #64	; 0x40
 800411e:	4013      	ands	r3, r2
 8004120:	d00a      	beq.n	8004138 <HAL_UART_IRQHandler+0x5e0>
 8004122:	23a0      	movs	r3, #160	; 0xa0
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2240      	movs	r2, #64	; 0x40
 800412a:	4013      	ands	r3, r2
 800412c:	d004      	beq.n	8004138 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	0018      	movs	r0, r3
 8004132:	f000 fd62 	bl	8004bfa <UART_EndTransmit_IT>
    return;
 8004136:	e02c      	b.n	8004192 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004138:	23a4      	movs	r3, #164	; 0xa4
 800413a:	18fb      	adds	r3, r7, r3
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	2380      	movs	r3, #128	; 0x80
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	4013      	ands	r3, r2
 8004144:	d00b      	beq.n	800415e <HAL_UART_IRQHandler+0x606>
 8004146:	23a0      	movs	r3, #160	; 0xa0
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	2380      	movs	r3, #128	; 0x80
 800414e:	05db      	lsls	r3, r3, #23
 8004150:	4013      	ands	r3, r2
 8004152:	d004      	beq.n	800415e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	0018      	movs	r0, r3
 8004158:	f001 f9ec 	bl	8005534 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800415c:	e019      	b.n	8004192 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800415e:	23a4      	movs	r3, #164	; 0xa4
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	2380      	movs	r3, #128	; 0x80
 8004166:	045b      	lsls	r3, r3, #17
 8004168:	4013      	ands	r3, r2
 800416a:	d012      	beq.n	8004192 <HAL_UART_IRQHandler+0x63a>
 800416c:	23a0      	movs	r3, #160	; 0xa0
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	da0d      	bge.n	8004192 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	0018      	movs	r0, r3
 800417a:	f001 f9d3 	bl	8005524 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800417e:	e008      	b.n	8004192 <HAL_UART_IRQHandler+0x63a>
      return;
 8004180:	46c0      	nop			; (mov r8, r8)
 8004182:	e006      	b.n	8004192 <HAL_UART_IRQHandler+0x63a>
    return;
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	e004      	b.n	8004192 <HAL_UART_IRQHandler+0x63a>
      return;
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	e002      	b.n	8004192 <HAL_UART_IRQHandler+0x63a>
      return;
 800418c:	46c0      	nop			; (mov r8, r8)
 800418e:	e000      	b.n	8004192 <HAL_UART_IRQHandler+0x63a>
    return;
 8004190:	46c0      	nop			; (mov r8, r8)
  }
}
 8004192:	46bd      	mov	sp, r7
 8004194:	b02a      	add	sp, #168	; 0xa8
 8004196:	bdb0      	pop	{r4, r5, r7, pc}
 8004198:	fffffeff 	.word	0xfffffeff
 800419c:	fffffedf 	.word	0xfffffedf
 80041a0:	effffffe 	.word	0xeffffffe

080041a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041ac:	46c0      	nop			; (mov r8, r8)
 80041ae:	46bd      	mov	sp, r7
 80041b0:	b002      	add	sp, #8
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041bc:	46c0      	nop			; (mov r8, r8)
 80041be:	46bd      	mov	sp, r7
 80041c0:	b002      	add	sp, #8
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	000a      	movs	r2, r1
 80041ce:	1cbb      	adds	r3, r7, #2
 80041d0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b002      	add	sp, #8
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041e4:	231a      	movs	r3, #26
 80041e6:	18fb      	adds	r3, r7, r3
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	4313      	orrs	r3, r2
 8004202:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4abc      	ldr	r2, [pc, #752]	; (80044fc <UART_SetConfig+0x320>)
 800420c:	4013      	ands	r3, r2
 800420e:	0019      	movs	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	430a      	orrs	r2, r1
 8004218:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	4ab7      	ldr	r2, [pc, #732]	; (8004500 <UART_SetConfig+0x324>)
 8004222:	4013      	ands	r3, r2
 8004224:	0019      	movs	r1, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	69fa      	ldr	r2, [r7, #28]
 800423e:	4313      	orrs	r3, r2
 8004240:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	4aae      	ldr	r2, [pc, #696]	; (8004504 <UART_SetConfig+0x328>)
 800424a:	4013      	ands	r3, r2
 800424c:	0019      	movs	r1, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	430a      	orrs	r2, r1
 8004256:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	220f      	movs	r2, #15
 8004260:	4393      	bics	r3, r2
 8004262:	0019      	movs	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4aa4      	ldr	r2, [pc, #656]	; (8004508 <UART_SetConfig+0x32c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d127      	bne.n	80042ca <UART_SetConfig+0xee>
 800427a:	4ba4      	ldr	r3, [pc, #656]	; (800450c <UART_SetConfig+0x330>)
 800427c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427e:	2203      	movs	r2, #3
 8004280:	4013      	ands	r3, r2
 8004282:	2b03      	cmp	r3, #3
 8004284:	d017      	beq.n	80042b6 <UART_SetConfig+0xda>
 8004286:	d81b      	bhi.n	80042c0 <UART_SetConfig+0xe4>
 8004288:	2b02      	cmp	r3, #2
 800428a:	d00a      	beq.n	80042a2 <UART_SetConfig+0xc6>
 800428c:	d818      	bhi.n	80042c0 <UART_SetConfig+0xe4>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <UART_SetConfig+0xbc>
 8004292:	2b01      	cmp	r3, #1
 8004294:	d00a      	beq.n	80042ac <UART_SetConfig+0xd0>
 8004296:	e013      	b.n	80042c0 <UART_SetConfig+0xe4>
 8004298:	231b      	movs	r3, #27
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]
 80042a0:	e058      	b.n	8004354 <UART_SetConfig+0x178>
 80042a2:	231b      	movs	r3, #27
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	2202      	movs	r2, #2
 80042a8:	701a      	strb	r2, [r3, #0]
 80042aa:	e053      	b.n	8004354 <UART_SetConfig+0x178>
 80042ac:	231b      	movs	r3, #27
 80042ae:	18fb      	adds	r3, r7, r3
 80042b0:	2204      	movs	r2, #4
 80042b2:	701a      	strb	r2, [r3, #0]
 80042b4:	e04e      	b.n	8004354 <UART_SetConfig+0x178>
 80042b6:	231b      	movs	r3, #27
 80042b8:	18fb      	adds	r3, r7, r3
 80042ba:	2208      	movs	r2, #8
 80042bc:	701a      	strb	r2, [r3, #0]
 80042be:	e049      	b.n	8004354 <UART_SetConfig+0x178>
 80042c0:	231b      	movs	r3, #27
 80042c2:	18fb      	adds	r3, r7, r3
 80042c4:	2210      	movs	r2, #16
 80042c6:	701a      	strb	r2, [r3, #0]
 80042c8:	e044      	b.n	8004354 <UART_SetConfig+0x178>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a90      	ldr	r2, [pc, #576]	; (8004510 <UART_SetConfig+0x334>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d127      	bne.n	8004324 <UART_SetConfig+0x148>
 80042d4:	4b8d      	ldr	r3, [pc, #564]	; (800450c <UART_SetConfig+0x330>)
 80042d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d8:	220c      	movs	r2, #12
 80042da:	4013      	ands	r3, r2
 80042dc:	2b0c      	cmp	r3, #12
 80042de:	d017      	beq.n	8004310 <UART_SetConfig+0x134>
 80042e0:	d81b      	bhi.n	800431a <UART_SetConfig+0x13e>
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d00a      	beq.n	80042fc <UART_SetConfig+0x120>
 80042e6:	d818      	bhi.n	800431a <UART_SetConfig+0x13e>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <UART_SetConfig+0x116>
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d00a      	beq.n	8004306 <UART_SetConfig+0x12a>
 80042f0:	e013      	b.n	800431a <UART_SetConfig+0x13e>
 80042f2:	231b      	movs	r3, #27
 80042f4:	18fb      	adds	r3, r7, r3
 80042f6:	2200      	movs	r2, #0
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	e02b      	b.n	8004354 <UART_SetConfig+0x178>
 80042fc:	231b      	movs	r3, #27
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	2202      	movs	r2, #2
 8004302:	701a      	strb	r2, [r3, #0]
 8004304:	e026      	b.n	8004354 <UART_SetConfig+0x178>
 8004306:	231b      	movs	r3, #27
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	2204      	movs	r2, #4
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	e021      	b.n	8004354 <UART_SetConfig+0x178>
 8004310:	231b      	movs	r3, #27
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	2208      	movs	r2, #8
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	e01c      	b.n	8004354 <UART_SetConfig+0x178>
 800431a:	231b      	movs	r3, #27
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	2210      	movs	r2, #16
 8004320:	701a      	strb	r2, [r3, #0]
 8004322:	e017      	b.n	8004354 <UART_SetConfig+0x178>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a7a      	ldr	r2, [pc, #488]	; (8004514 <UART_SetConfig+0x338>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d104      	bne.n	8004338 <UART_SetConfig+0x15c>
 800432e:	231b      	movs	r3, #27
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	e00d      	b.n	8004354 <UART_SetConfig+0x178>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a76      	ldr	r2, [pc, #472]	; (8004518 <UART_SetConfig+0x33c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d104      	bne.n	800434c <UART_SetConfig+0x170>
 8004342:	231b      	movs	r3, #27
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	2200      	movs	r2, #0
 8004348:	701a      	strb	r2, [r3, #0]
 800434a:	e003      	b.n	8004354 <UART_SetConfig+0x178>
 800434c:	231b      	movs	r3, #27
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	2210      	movs	r2, #16
 8004352:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69da      	ldr	r2, [r3, #28]
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	429a      	cmp	r2, r3
 800435e:	d000      	beq.n	8004362 <UART_SetConfig+0x186>
 8004360:	e065      	b.n	800442e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8004362:	231b      	movs	r3, #27
 8004364:	18fb      	adds	r3, r7, r3
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d015      	beq.n	8004398 <UART_SetConfig+0x1bc>
 800436c:	dc18      	bgt.n	80043a0 <UART_SetConfig+0x1c4>
 800436e:	2b04      	cmp	r3, #4
 8004370:	d00d      	beq.n	800438e <UART_SetConfig+0x1b2>
 8004372:	dc15      	bgt.n	80043a0 <UART_SetConfig+0x1c4>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <UART_SetConfig+0x1a2>
 8004378:	2b02      	cmp	r3, #2
 800437a:	d005      	beq.n	8004388 <UART_SetConfig+0x1ac>
 800437c:	e010      	b.n	80043a0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800437e:	f7fe fe3b 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 8004382:	0003      	movs	r3, r0
 8004384:	617b      	str	r3, [r7, #20]
        break;
 8004386:	e012      	b.n	80043ae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004388:	4b64      	ldr	r3, [pc, #400]	; (800451c <UART_SetConfig+0x340>)
 800438a:	617b      	str	r3, [r7, #20]
        break;
 800438c:	e00f      	b.n	80043ae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800438e:	f7fe fda7 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8004392:	0003      	movs	r3, r0
 8004394:	617b      	str	r3, [r7, #20]
        break;
 8004396:	e00a      	b.n	80043ae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004398:	2380      	movs	r3, #128	; 0x80
 800439a:	021b      	lsls	r3, r3, #8
 800439c:	617b      	str	r3, [r7, #20]
        break;
 800439e:	e006      	b.n	80043ae <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043a4:	231a      	movs	r3, #26
 80043a6:	18fb      	adds	r3, r7, r3
 80043a8:	2201      	movs	r2, #1
 80043aa:	701a      	strb	r2, [r3, #0]
        break;
 80043ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d100      	bne.n	80043b6 <UART_SetConfig+0x1da>
 80043b4:	e08d      	b.n	80044d2 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ba:	4b59      	ldr	r3, [pc, #356]	; (8004520 <UART_SetConfig+0x344>)
 80043bc:	0052      	lsls	r2, r2, #1
 80043be:	5ad3      	ldrh	r3, [r2, r3]
 80043c0:	0019      	movs	r1, r3
 80043c2:	6978      	ldr	r0, [r7, #20]
 80043c4:	f7fb fe9c 	bl	8000100 <__udivsi3>
 80043c8:	0003      	movs	r3, r0
 80043ca:	005a      	lsls	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	085b      	lsrs	r3, r3, #1
 80043d2:	18d2      	adds	r2, r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	0019      	movs	r1, r3
 80043da:	0010      	movs	r0, r2
 80043dc:	f7fb fe90 	bl	8000100 <__udivsi3>
 80043e0:	0003      	movs	r3, r0
 80043e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b0f      	cmp	r3, #15
 80043e8:	d91c      	bls.n	8004424 <UART_SetConfig+0x248>
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	025b      	lsls	r3, r3, #9
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d217      	bcs.n	8004424 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	200e      	movs	r0, #14
 80043fa:	183b      	adds	r3, r7, r0
 80043fc:	210f      	movs	r1, #15
 80043fe:	438a      	bics	r2, r1
 8004400:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	085b      	lsrs	r3, r3, #1
 8004406:	b29b      	uxth	r3, r3
 8004408:	2207      	movs	r2, #7
 800440a:	4013      	ands	r3, r2
 800440c:	b299      	uxth	r1, r3
 800440e:	183b      	adds	r3, r7, r0
 8004410:	183a      	adds	r2, r7, r0
 8004412:	8812      	ldrh	r2, [r2, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	183a      	adds	r2, r7, r0
 800441e:	8812      	ldrh	r2, [r2, #0]
 8004420:	60da      	str	r2, [r3, #12]
 8004422:	e056      	b.n	80044d2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004424:	231a      	movs	r3, #26
 8004426:	18fb      	adds	r3, r7, r3
 8004428:	2201      	movs	r2, #1
 800442a:	701a      	strb	r2, [r3, #0]
 800442c:	e051      	b.n	80044d2 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800442e:	231b      	movs	r3, #27
 8004430:	18fb      	adds	r3, r7, r3
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b08      	cmp	r3, #8
 8004436:	d015      	beq.n	8004464 <UART_SetConfig+0x288>
 8004438:	dc18      	bgt.n	800446c <UART_SetConfig+0x290>
 800443a:	2b04      	cmp	r3, #4
 800443c:	d00d      	beq.n	800445a <UART_SetConfig+0x27e>
 800443e:	dc15      	bgt.n	800446c <UART_SetConfig+0x290>
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <UART_SetConfig+0x26e>
 8004444:	2b02      	cmp	r3, #2
 8004446:	d005      	beq.n	8004454 <UART_SetConfig+0x278>
 8004448:	e010      	b.n	800446c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800444a:	f7fe fdd5 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 800444e:	0003      	movs	r3, r0
 8004450:	617b      	str	r3, [r7, #20]
        break;
 8004452:	e012      	b.n	800447a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004454:	4b31      	ldr	r3, [pc, #196]	; (800451c <UART_SetConfig+0x340>)
 8004456:	617b      	str	r3, [r7, #20]
        break;
 8004458:	e00f      	b.n	800447a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800445a:	f7fe fd41 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 800445e:	0003      	movs	r3, r0
 8004460:	617b      	str	r3, [r7, #20]
        break;
 8004462:	e00a      	b.n	800447a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	617b      	str	r3, [r7, #20]
        break;
 800446a:	e006      	b.n	800447a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004470:	231a      	movs	r3, #26
 8004472:	18fb      	adds	r3, r7, r3
 8004474:	2201      	movs	r2, #1
 8004476:	701a      	strb	r2, [r3, #0]
        break;
 8004478:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d028      	beq.n	80044d2 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004484:	4b26      	ldr	r3, [pc, #152]	; (8004520 <UART_SetConfig+0x344>)
 8004486:	0052      	lsls	r2, r2, #1
 8004488:	5ad3      	ldrh	r3, [r2, r3]
 800448a:	0019      	movs	r1, r3
 800448c:	6978      	ldr	r0, [r7, #20]
 800448e:	f7fb fe37 	bl	8000100 <__udivsi3>
 8004492:	0003      	movs	r3, r0
 8004494:	001a      	movs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	18d2      	adds	r2, r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	0019      	movs	r1, r3
 80044a4:	0010      	movs	r0, r2
 80044a6:	f7fb fe2b 	bl	8000100 <__udivsi3>
 80044aa:	0003      	movs	r3, r0
 80044ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b0f      	cmp	r3, #15
 80044b2:	d90a      	bls.n	80044ca <UART_SetConfig+0x2ee>
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	2380      	movs	r3, #128	; 0x80
 80044b8:	025b      	lsls	r3, r3, #9
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d205      	bcs.n	80044ca <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60da      	str	r2, [r3, #12]
 80044c8:	e003      	b.n	80044d2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80044ca:	231a      	movs	r3, #26
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	2201      	movs	r2, #1
 80044d0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	226a      	movs	r2, #106	; 0x6a
 80044d6:	2101      	movs	r1, #1
 80044d8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2268      	movs	r2, #104	; 0x68
 80044de:	2101      	movs	r1, #1
 80044e0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80044ee:	231a      	movs	r3, #26
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	781b      	ldrb	r3, [r3, #0]
}
 80044f4:	0018      	movs	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b008      	add	sp, #32
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	cfff69f3 	.word	0xcfff69f3
 8004500:	ffffcfff 	.word	0xffffcfff
 8004504:	11fff4ff 	.word	0x11fff4ff
 8004508:	40013800 	.word	0x40013800
 800450c:	40021000 	.word	0x40021000
 8004510:	40004400 	.word	0x40004400
 8004514:	40004800 	.word	0x40004800
 8004518:	40004c00 	.word	0x40004c00
 800451c:	00f42400 	.word	0x00f42400
 8004520:	08005848 	.word	0x08005848

08004524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	2201      	movs	r2, #1
 8004532:	4013      	ands	r3, r2
 8004534:	d00b      	beq.n	800454e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	4a4a      	ldr	r2, [pc, #296]	; (8004668 <UART_AdvFeatureConfig+0x144>)
 800453e:	4013      	ands	r3, r2
 8004540:	0019      	movs	r1, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	2202      	movs	r2, #2
 8004554:	4013      	ands	r3, r2
 8004556:	d00b      	beq.n	8004570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	4a43      	ldr	r2, [pc, #268]	; (800466c <UART_AdvFeatureConfig+0x148>)
 8004560:	4013      	ands	r3, r2
 8004562:	0019      	movs	r1, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004574:	2204      	movs	r2, #4
 8004576:	4013      	ands	r3, r2
 8004578:	d00b      	beq.n	8004592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	4a3b      	ldr	r2, [pc, #236]	; (8004670 <UART_AdvFeatureConfig+0x14c>)
 8004582:	4013      	ands	r3, r2
 8004584:	0019      	movs	r1, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	2208      	movs	r2, #8
 8004598:	4013      	ands	r3, r2
 800459a:	d00b      	beq.n	80045b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4a34      	ldr	r2, [pc, #208]	; (8004674 <UART_AdvFeatureConfig+0x150>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	0019      	movs	r1, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	2210      	movs	r2, #16
 80045ba:	4013      	ands	r3, r2
 80045bc:	d00b      	beq.n	80045d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	4a2c      	ldr	r2, [pc, #176]	; (8004678 <UART_AdvFeatureConfig+0x154>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	0019      	movs	r1, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	2220      	movs	r2, #32
 80045dc:	4013      	ands	r3, r2
 80045de:	d00b      	beq.n	80045f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	4a25      	ldr	r2, [pc, #148]	; (800467c <UART_AdvFeatureConfig+0x158>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	0019      	movs	r1, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	2240      	movs	r2, #64	; 0x40
 80045fe:	4013      	ands	r3, r2
 8004600:	d01d      	beq.n	800463e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	4a1d      	ldr	r2, [pc, #116]	; (8004680 <UART_AdvFeatureConfig+0x15c>)
 800460a:	4013      	ands	r3, r2
 800460c:	0019      	movs	r1, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800461e:	2380      	movs	r3, #128	; 0x80
 8004620:	035b      	lsls	r3, r3, #13
 8004622:	429a      	cmp	r2, r3
 8004624:	d10b      	bne.n	800463e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	4a15      	ldr	r2, [pc, #84]	; (8004684 <UART_AdvFeatureConfig+0x160>)
 800462e:	4013      	ands	r3, r2
 8004630:	0019      	movs	r1, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004642:	2280      	movs	r2, #128	; 0x80
 8004644:	4013      	ands	r3, r2
 8004646:	d00b      	beq.n	8004660 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	4a0e      	ldr	r2, [pc, #56]	; (8004688 <UART_AdvFeatureConfig+0x164>)
 8004650:	4013      	ands	r3, r2
 8004652:	0019      	movs	r1, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	605a      	str	r2, [r3, #4]
  }
}
 8004660:	46c0      	nop			; (mov r8, r8)
 8004662:	46bd      	mov	sp, r7
 8004664:	b002      	add	sp, #8
 8004666:	bd80      	pop	{r7, pc}
 8004668:	fffdffff 	.word	0xfffdffff
 800466c:	fffeffff 	.word	0xfffeffff
 8004670:	fffbffff 	.word	0xfffbffff
 8004674:	ffff7fff 	.word	0xffff7fff
 8004678:	ffffefff 	.word	0xffffefff
 800467c:	ffffdfff 	.word	0xffffdfff
 8004680:	ffefffff 	.word	0xffefffff
 8004684:	ff9fffff 	.word	0xff9fffff
 8004688:	fff7ffff 	.word	0xfff7ffff

0800468c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af02      	add	r7, sp, #8
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2290      	movs	r2, #144	; 0x90
 8004698:	2100      	movs	r1, #0
 800469a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800469c:	f7fc fd6a 	bl	8001174 <HAL_GetTick>
 80046a0:	0003      	movs	r3, r0
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2208      	movs	r2, #8
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d10c      	bne.n	80046cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2280      	movs	r2, #128	; 0x80
 80046b6:	0391      	lsls	r1, r2, #14
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	4a1a      	ldr	r2, [pc, #104]	; (8004724 <UART_CheckIdleState+0x98>)
 80046bc:	9200      	str	r2, [sp, #0]
 80046be:	2200      	movs	r2, #0
 80046c0:	f000 f832 	bl	8004728 <UART_WaitOnFlagUntilTimeout>
 80046c4:	1e03      	subs	r3, r0, #0
 80046c6:	d001      	beq.n	80046cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e026      	b.n	800471a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2204      	movs	r2, #4
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d10c      	bne.n	80046f4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2280      	movs	r2, #128	; 0x80
 80046de:	03d1      	lsls	r1, r2, #15
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	4a10      	ldr	r2, [pc, #64]	; (8004724 <UART_CheckIdleState+0x98>)
 80046e4:	9200      	str	r2, [sp, #0]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f000 f81e 	bl	8004728 <UART_WaitOnFlagUntilTimeout>
 80046ec:	1e03      	subs	r3, r0, #0
 80046ee:	d001      	beq.n	80046f4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e012      	b.n	800471a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2288      	movs	r2, #136	; 0x88
 80046f8:	2120      	movs	r1, #32
 80046fa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	228c      	movs	r2, #140	; 0x8c
 8004700:	2120      	movs	r1, #32
 8004702:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2284      	movs	r2, #132	; 0x84
 8004714:	2100      	movs	r1, #0
 8004716:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	0018      	movs	r0, r3
 800471c:	46bd      	mov	sp, r7
 800471e:	b004      	add	sp, #16
 8004720:	bd80      	pop	{r7, pc}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	01ffffff 	.word	0x01ffffff

08004728 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b094      	sub	sp, #80	; 0x50
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	1dfb      	adds	r3, r7, #7
 8004736:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004738:	e0a7      	b.n	800488a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800473c:	3301      	adds	r3, #1
 800473e:	d100      	bne.n	8004742 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004740:	e0a3      	b.n	800488a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004742:	f7fc fd17 	bl	8001174 <HAL_GetTick>
 8004746:	0002      	movs	r2, r0
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800474e:	429a      	cmp	r2, r3
 8004750:	d302      	bcc.n	8004758 <UART_WaitOnFlagUntilTimeout+0x30>
 8004752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004754:	2b00      	cmp	r3, #0
 8004756:	d13f      	bne.n	80047d8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004758:	f3ef 8310 	mrs	r3, PRIMASK
 800475c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004760:	647b      	str	r3, [r7, #68]	; 0x44
 8004762:	2301      	movs	r3, #1
 8004764:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004768:	f383 8810 	msr	PRIMASK, r3
}
 800476c:	46c0      	nop			; (mov r8, r8)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	494e      	ldr	r1, [pc, #312]	; (80048b4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800477a:	400a      	ands	r2, r1
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004780:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	f383 8810 	msr	PRIMASK, r3
}
 8004788:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800478a:	f3ef 8310 	mrs	r3, PRIMASK
 800478e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004792:	643b      	str	r3, [r7, #64]	; 0x40
 8004794:	2301      	movs	r3, #1
 8004796:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479a:	f383 8810 	msr	PRIMASK, r3
}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2101      	movs	r1, #1
 80047ac:	438a      	bics	r2, r1
 80047ae:	609a      	str	r2, [r3, #8]
 80047b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b6:	f383 8810 	msr	PRIMASK, r3
}
 80047ba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2288      	movs	r2, #136	; 0x88
 80047c0:	2120      	movs	r1, #32
 80047c2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	228c      	movs	r2, #140	; 0x8c
 80047c8:	2120      	movs	r1, #32
 80047ca:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2284      	movs	r2, #132	; 0x84
 80047d0:	2100      	movs	r1, #0
 80047d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e069      	b.n	80048ac <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2204      	movs	r2, #4
 80047e0:	4013      	ands	r3, r2
 80047e2:	d052      	beq.n	800488a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69da      	ldr	r2, [r3, #28]
 80047ea:	2380      	movs	r3, #128	; 0x80
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	401a      	ands	r2, r3
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d148      	bne.n	800488a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2280      	movs	r2, #128	; 0x80
 80047fe:	0112      	lsls	r2, r2, #4
 8004800:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004802:	f3ef 8310 	mrs	r3, PRIMASK
 8004806:	613b      	str	r3, [r7, #16]
  return(result);
 8004808:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800480a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800480c:	2301      	movs	r3, #1
 800480e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f383 8810 	msr	PRIMASK, r3
}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4924      	ldr	r1, [pc, #144]	; (80048b4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004824:	400a      	ands	r2, r1
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	f383 8810 	msr	PRIMASK, r3
}
 8004832:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004834:	f3ef 8310 	mrs	r3, PRIMASK
 8004838:	61fb      	str	r3, [r7, #28]
  return(result);
 800483a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483c:	64bb      	str	r3, [r7, #72]	; 0x48
 800483e:	2301      	movs	r3, #1
 8004840:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	f383 8810 	msr	PRIMASK, r3
}
 8004848:	46c0      	nop			; (mov r8, r8)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2101      	movs	r1, #1
 8004856:	438a      	bics	r2, r1
 8004858:	609a      	str	r2, [r3, #8]
 800485a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800485c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	f383 8810 	msr	PRIMASK, r3
}
 8004864:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2288      	movs	r2, #136	; 0x88
 800486a:	2120      	movs	r1, #32
 800486c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	228c      	movs	r2, #140	; 0x8c
 8004872:	2120      	movs	r1, #32
 8004874:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2290      	movs	r2, #144	; 0x90
 800487a:	2120      	movs	r1, #32
 800487c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2284      	movs	r2, #132	; 0x84
 8004882:	2100      	movs	r1, #0
 8004884:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e010      	b.n	80048ac <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	4013      	ands	r3, r2
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	425a      	negs	r2, r3
 800489a:	4153      	adcs	r3, r2
 800489c:	b2db      	uxtb	r3, r3
 800489e:	001a      	movs	r2, r3
 80048a0:	1dfb      	adds	r3, r7, #7
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d100      	bne.n	80048aa <UART_WaitOnFlagUntilTimeout+0x182>
 80048a8:	e747      	b.n	800473a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	0018      	movs	r0, r3
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b014      	add	sp, #80	; 0x50
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	fffffe5f 	.word	0xfffffe5f

080048b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b098      	sub	sp, #96	; 0x60
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	1dbb      	adds	r3, r7, #6
 80048c4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	1dba      	adds	r2, r7, #6
 80048d0:	215c      	movs	r1, #92	; 0x5c
 80048d2:	8812      	ldrh	r2, [r2, #0]
 80048d4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1dba      	adds	r2, r7, #6
 80048da:	215e      	movs	r1, #94	; 0x5e
 80048dc:	8812      	ldrh	r2, [r2, #0]
 80048de:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	2380      	movs	r3, #128	; 0x80
 80048ec:	015b      	lsls	r3, r3, #5
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d10d      	bne.n	800490e <UART_Start_Receive_IT+0x56>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d104      	bne.n	8004904 <UART_Start_Receive_IT+0x4c>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2260      	movs	r2, #96	; 0x60
 80048fe:	497b      	ldr	r1, [pc, #492]	; (8004aec <UART_Start_Receive_IT+0x234>)
 8004900:	5299      	strh	r1, [r3, r2]
 8004902:	e02e      	b.n	8004962 <UART_Start_Receive_IT+0xaa>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2260      	movs	r2, #96	; 0x60
 8004908:	21ff      	movs	r1, #255	; 0xff
 800490a:	5299      	strh	r1, [r3, r2]
 800490c:	e029      	b.n	8004962 <UART_Start_Receive_IT+0xaa>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10d      	bne.n	8004932 <UART_Start_Receive_IT+0x7a>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d104      	bne.n	8004928 <UART_Start_Receive_IT+0x70>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2260      	movs	r2, #96	; 0x60
 8004922:	21ff      	movs	r1, #255	; 0xff
 8004924:	5299      	strh	r1, [r3, r2]
 8004926:	e01c      	b.n	8004962 <UART_Start_Receive_IT+0xaa>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2260      	movs	r2, #96	; 0x60
 800492c:	217f      	movs	r1, #127	; 0x7f
 800492e:	5299      	strh	r1, [r3, r2]
 8004930:	e017      	b.n	8004962 <UART_Start_Receive_IT+0xaa>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	2380      	movs	r3, #128	; 0x80
 8004938:	055b      	lsls	r3, r3, #21
 800493a:	429a      	cmp	r2, r3
 800493c:	d10d      	bne.n	800495a <UART_Start_Receive_IT+0xa2>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d104      	bne.n	8004950 <UART_Start_Receive_IT+0x98>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2260      	movs	r2, #96	; 0x60
 800494a:	217f      	movs	r1, #127	; 0x7f
 800494c:	5299      	strh	r1, [r3, r2]
 800494e:	e008      	b.n	8004962 <UART_Start_Receive_IT+0xaa>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2260      	movs	r2, #96	; 0x60
 8004954:	213f      	movs	r1, #63	; 0x3f
 8004956:	5299      	strh	r1, [r3, r2]
 8004958:	e003      	b.n	8004962 <UART_Start_Receive_IT+0xaa>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2260      	movs	r2, #96	; 0x60
 800495e:	2100      	movs	r1, #0
 8004960:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2290      	movs	r2, #144	; 0x90
 8004966:	2100      	movs	r1, #0
 8004968:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	228c      	movs	r2, #140	; 0x8c
 800496e:	2122      	movs	r1, #34	; 0x22
 8004970:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004972:	f3ef 8310 	mrs	r3, PRIMASK
 8004976:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8004978:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800497c:	2301      	movs	r3, #1
 800497e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004982:	f383 8810 	msr	PRIMASK, r3
}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2101      	movs	r1, #1
 8004994:	430a      	orrs	r2, r1
 8004996:	609a      	str	r2, [r3, #8]
 8004998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800499a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499e:	f383 8810 	msr	PRIMASK, r3
}
 80049a2:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80049a8:	2380      	movs	r3, #128	; 0x80
 80049aa:	059b      	lsls	r3, r3, #22
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d150      	bne.n	8004a52 <UART_Start_Receive_IT+0x19a>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2268      	movs	r2, #104	; 0x68
 80049b4:	5a9b      	ldrh	r3, [r3, r2]
 80049b6:	1dba      	adds	r2, r7, #6
 80049b8:	8812      	ldrh	r2, [r2, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d349      	bcc.n	8004a52 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	2380      	movs	r3, #128	; 0x80
 80049c4:	015b      	lsls	r3, r3, #5
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d107      	bne.n	80049da <UART_Start_Receive_IT+0x122>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4a46      	ldr	r2, [pc, #280]	; (8004af0 <UART_Start_Receive_IT+0x238>)
 80049d6:	675a      	str	r2, [r3, #116]	; 0x74
 80049d8:	e002      	b.n	80049e0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a45      	ldr	r2, [pc, #276]	; (8004af4 <UART_Start_Receive_IT+0x23c>)
 80049de:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d019      	beq.n	8004a1c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e8:	f3ef 8310 	mrs	r3, PRIMASK
 80049ec:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80049ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80049f2:	2301      	movs	r3, #1
 80049f4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f8:	f383 8810 	msr	PRIMASK, r3
}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2180      	movs	r1, #128	; 0x80
 8004a0a:	0049      	lsls	r1, r1, #1
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a16:	f383 8810 	msr	PRIMASK, r3
}
 8004a1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a20:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004a24:	657b      	str	r3, [r7, #84]	; 0x54
 8004a26:	2301      	movs	r3, #1
 8004a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	f383 8810 	msr	PRIMASK, r3
}
 8004a30:	46c0      	nop			; (mov r8, r8)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2180      	movs	r1, #128	; 0x80
 8004a3e:	0549      	lsls	r1, r1, #21
 8004a40:	430a      	orrs	r2, r1
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a46:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4a:	f383 8810 	msr	PRIMASK, r3
}
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	e047      	b.n	8004ae2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	2380      	movs	r3, #128	; 0x80
 8004a58:	015b      	lsls	r3, r3, #5
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d107      	bne.n	8004a6e <UART_Start_Receive_IT+0x1b6>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4a23      	ldr	r2, [pc, #140]	; (8004af8 <UART_Start_Receive_IT+0x240>)
 8004a6a:	675a      	str	r2, [r3, #116]	; 0x74
 8004a6c:	e002      	b.n	8004a74 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4a22      	ldr	r2, [pc, #136]	; (8004afc <UART_Start_Receive_IT+0x244>)
 8004a72:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d019      	beq.n	8004ab0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a80:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a82:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004a84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a86:	2301      	movs	r3, #1
 8004a88:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	f383 8810 	msr	PRIMASK, r3
}
 8004a90:	46c0      	nop			; (mov r8, r8)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2190      	movs	r1, #144	; 0x90
 8004a9e:	0049      	lsls	r1, r1, #1
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	f383 8810 	msr	PRIMASK, r3
}
 8004aae:	e018      	b.n	8004ae2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ab4:	613b      	str	r3, [r7, #16]
  return(result);
 8004ab6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004ab8:	653b      	str	r3, [r7, #80]	; 0x50
 8004aba:	2301      	movs	r3, #1
 8004abc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f383 8810 	msr	PRIMASK, r3
}
 8004ac4:	46c0      	nop			; (mov r8, r8)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2120      	movs	r1, #32
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	f383 8810 	msr	PRIMASK, r3
}
 8004ae0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b018      	add	sp, #96	; 0x60
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	000001ff 	.word	0x000001ff
 8004af0:	08005229 	.word	0x08005229
 8004af4:	08004f3d 	.word	0x08004f3d
 8004af8:	08004dc9 	.word	0x08004dc9
 8004afc:	08004c55 	.word	0x08004c55

08004b00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b08e      	sub	sp, #56	; 0x38
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b08:	f3ef 8310 	mrs	r3, PRIMASK
 8004b0c:	617b      	str	r3, [r7, #20]
  return(result);
 8004b0e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b10:	637b      	str	r3, [r7, #52]	; 0x34
 8004b12:	2301      	movs	r3, #1
 8004b14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	f383 8810 	msr	PRIMASK, r3
}
 8004b1c:	46c0      	nop			; (mov r8, r8)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4926      	ldr	r1, [pc, #152]	; (8004bc4 <UART_EndRxTransfer+0xc4>)
 8004b2a:	400a      	ands	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	f383 8810 	msr	PRIMASK, r3
}
 8004b38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b3e:	623b      	str	r3, [r7, #32]
  return(result);
 8004b40:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b42:	633b      	str	r3, [r7, #48]	; 0x30
 8004b44:	2301      	movs	r3, #1
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	f383 8810 	msr	PRIMASK, r3
}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	491b      	ldr	r1, [pc, #108]	; (8004bc8 <UART_EndRxTransfer+0xc8>)
 8004b5c:	400a      	ands	r2, r1
 8004b5e:	609a      	str	r2, [r3, #8]
 8004b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	f383 8810 	msr	PRIMASK, r3
}
 8004b6a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d118      	bne.n	8004ba6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b74:	f3ef 8310 	mrs	r3, PRIMASK
 8004b78:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b7e:	2301      	movs	r3, #1
 8004b80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f383 8810 	msr	PRIMASK, r3
}
 8004b88:	46c0      	nop			; (mov r8, r8)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2110      	movs	r1, #16
 8004b96:	438a      	bics	r2, r1
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f383 8810 	msr	PRIMASK, r3
}
 8004ba4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	228c      	movs	r2, #140	; 0x8c
 8004baa:	2120      	movs	r1, #32
 8004bac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	b00e      	add	sp, #56	; 0x38
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	fffffedf 	.word	0xfffffedf
 8004bc8:	effffffe 	.word	0xeffffffe

08004bcc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	225e      	movs	r2, #94	; 0x5e
 8004bde:	2100      	movs	r1, #0
 8004be0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2256      	movs	r2, #86	; 0x56
 8004be6:	2100      	movs	r1, #0
 8004be8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	0018      	movs	r0, r3
 8004bee:	f7ff fae1 	bl	80041b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b004      	add	sp, #16
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b086      	sub	sp, #24
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c02:	f3ef 8310 	mrs	r3, PRIMASK
 8004c06:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c08:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f383 8810 	msr	PRIMASK, r3
}
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2140      	movs	r1, #64	; 0x40
 8004c24:	438a      	bics	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f383 8810 	msr	PRIMASK, r3
}
 8004c32:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2288      	movs	r2, #136	; 0x88
 8004c38:	2120      	movs	r1, #32
 8004c3a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	0018      	movs	r0, r3
 8004c46:	f7ff faad 	bl	80041a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	b006      	add	sp, #24
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b090      	sub	sp, #64	; 0x40
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004c5c:	203e      	movs	r0, #62	; 0x3e
 8004c5e:	183b      	adds	r3, r7, r0
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	2160      	movs	r1, #96	; 0x60
 8004c64:	5a52      	ldrh	r2, [r2, r1]
 8004c66:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	228c      	movs	r2, #140	; 0x8c
 8004c6c:	589b      	ldr	r3, [r3, r2]
 8004c6e:	2b22      	cmp	r3, #34	; 0x22
 8004c70:	d000      	beq.n	8004c74 <UART_RxISR_8BIT+0x20>
 8004c72:	e09a      	b.n	8004daa <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c7a:	213c      	movs	r1, #60	; 0x3c
 8004c7c:	187b      	adds	r3, r7, r1
 8004c7e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004c80:	187b      	adds	r3, r7, r1
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	183b      	adds	r3, r7, r0
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	b2d9      	uxtb	r1, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c90:	400a      	ands	r2, r1
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	225e      	movs	r2, #94	; 0x5e
 8004ca4:	5a9b      	ldrh	r3, [r3, r2]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b299      	uxth	r1, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	225e      	movs	r2, #94	; 0x5e
 8004cb0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	225e      	movs	r2, #94	; 0x5e
 8004cb6:	5a9b      	ldrh	r3, [r3, r2]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d000      	beq.n	8004cc0 <UART_RxISR_8BIT+0x6c>
 8004cbe:	e07c      	b.n	8004dba <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004cc6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cca:	2301      	movs	r3, #1
 8004ccc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	f383 8810 	msr	PRIMASK, r3
}
 8004cd4:	46c0      	nop			; (mov r8, r8)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4938      	ldr	r1, [pc, #224]	; (8004dc4 <UART_RxISR_8BIT+0x170>)
 8004ce2:	400a      	ands	r2, r1
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	f383 8810 	msr	PRIMASK, r3
}
 8004cf0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	f383 8810 	msr	PRIMASK, r3
}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2101      	movs	r1, #1
 8004d14:	438a      	bics	r2, r1
 8004d16:	609a      	str	r2, [r3, #8]
 8004d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1e:	f383 8810 	msr	PRIMASK, r3
}
 8004d22:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	228c      	movs	r2, #140	; 0x8c
 8004d28:	2120      	movs	r1, #32
 8004d2a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d12f      	bne.n	8004da0 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d46:	f3ef 8310 	mrs	r3, PRIMASK
 8004d4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d4c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d50:	2301      	movs	r3, #1
 8004d52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f383 8810 	msr	PRIMASK, r3
}
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2110      	movs	r1, #16
 8004d68:	438a      	bics	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f383 8810 	msr	PRIMASK, r3
}
 8004d76:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	2210      	movs	r2, #16
 8004d80:	4013      	ands	r3, r2
 8004d82:	2b10      	cmp	r3, #16
 8004d84:	d103      	bne.n	8004d8e <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2210      	movs	r2, #16
 8004d8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	225c      	movs	r2, #92	; 0x5c
 8004d92:	5a9a      	ldrh	r2, [r3, r2]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	0011      	movs	r1, r2
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f7ff fa13 	bl	80041c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d9e:	e00c      	b.n	8004dba <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	0018      	movs	r0, r3
 8004da4:	f7fb fe2c 	bl	8000a00 <HAL_UART_RxCpltCallback>
}
 8004da8:	e007      	b.n	8004dba <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699a      	ldr	r2, [r3, #24]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2108      	movs	r1, #8
 8004db6:	430a      	orrs	r2, r1
 8004db8:	619a      	str	r2, [r3, #24]
}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	b010      	add	sp, #64	; 0x40
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	fffffedf 	.word	0xfffffedf

08004dc8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b090      	sub	sp, #64	; 0x40
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004dd0:	203e      	movs	r0, #62	; 0x3e
 8004dd2:	183b      	adds	r3, r7, r0
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	2160      	movs	r1, #96	; 0x60
 8004dd8:	5a52      	ldrh	r2, [r2, r1]
 8004dda:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	228c      	movs	r2, #140	; 0x8c
 8004de0:	589b      	ldr	r3, [r3, r2]
 8004de2:	2b22      	cmp	r3, #34	; 0x22
 8004de4:	d000      	beq.n	8004de8 <UART_RxISR_16BIT+0x20>
 8004de6:	e09a      	b.n	8004f1e <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dee:	213c      	movs	r1, #60	; 0x3c
 8004df0:	187b      	adds	r3, r7, r1
 8004df2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df8:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004dfa:	187b      	adds	r3, r7, r1
 8004dfc:	183a      	adds	r2, r7, r0
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	8812      	ldrh	r2, [r2, #0]
 8004e02:	4013      	ands	r3, r2
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0e:	1c9a      	adds	r2, r3, #2
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	225e      	movs	r2, #94	; 0x5e
 8004e18:	5a9b      	ldrh	r3, [r3, r2]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b299      	uxth	r1, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	225e      	movs	r2, #94	; 0x5e
 8004e24:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	225e      	movs	r2, #94	; 0x5e
 8004e2a:	5a9b      	ldrh	r3, [r3, r2]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d000      	beq.n	8004e34 <UART_RxISR_16BIT+0x6c>
 8004e32:	e07c      	b.n	8004f2e <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e34:	f3ef 8310 	mrs	r3, PRIMASK
 8004e38:	617b      	str	r3, [r7, #20]
  return(result);
 8004e3a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e3e:	2301      	movs	r3, #1
 8004e40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	f383 8810 	msr	PRIMASK, r3
}
 8004e48:	46c0      	nop			; (mov r8, r8)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4938      	ldr	r1, [pc, #224]	; (8004f38 <UART_RxISR_16BIT+0x170>)
 8004e56:	400a      	ands	r2, r1
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	f383 8810 	msr	PRIMASK, r3
}
 8004e64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e66:	f3ef 8310 	mrs	r3, PRIMASK
 8004e6a:	623b      	str	r3, [r7, #32]
  return(result);
 8004e6c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e70:	2301      	movs	r3, #1
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	f383 8810 	msr	PRIMASK, r3
}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2101      	movs	r1, #1
 8004e88:	438a      	bics	r2, r1
 8004e8a:	609a      	str	r2, [r3, #8]
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e92:	f383 8810 	msr	PRIMASK, r3
}
 8004e96:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	228c      	movs	r2, #140	; 0x8c
 8004e9c:	2120      	movs	r1, #32
 8004e9e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d12f      	bne.n	8004f14 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eba:	f3ef 8310 	mrs	r3, PRIMASK
 8004ebe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ec0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f383 8810 	msr	PRIMASK, r3
}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2110      	movs	r1, #16
 8004edc:	438a      	bics	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f383 8810 	msr	PRIMASK, r3
}
 8004eea:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	2210      	movs	r2, #16
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b10      	cmp	r3, #16
 8004ef8:	d103      	bne.n	8004f02 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2210      	movs	r2, #16
 8004f00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	225c      	movs	r2, #92	; 0x5c
 8004f06:	5a9a      	ldrh	r2, [r3, r2]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	0011      	movs	r1, r2
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f7ff f959 	bl	80041c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f12:	e00c      	b.n	8004f2e <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	0018      	movs	r0, r3
 8004f18:	f7fb fd72 	bl	8000a00 <HAL_UART_RxCpltCallback>
}
 8004f1c:	e007      	b.n	8004f2e <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	699a      	ldr	r2, [r3, #24]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2108      	movs	r1, #8
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	619a      	str	r2, [r3, #24]
}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b010      	add	sp, #64	; 0x40
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	fffffedf 	.word	0xfffffedf

08004f3c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b09c      	sub	sp, #112	; 0x70
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004f44:	236a      	movs	r3, #106	; 0x6a
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	2160      	movs	r1, #96	; 0x60
 8004f4c:	5a52      	ldrh	r2, [r2, r1]
 8004f4e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	228c      	movs	r2, #140	; 0x8c
 8004f6c:	589b      	ldr	r3, [r3, r2]
 8004f6e:	2b22      	cmp	r3, #34	; 0x22
 8004f70:	d000      	beq.n	8004f74 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004f72:	e144      	b.n	80051fe <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004f74:	235e      	movs	r3, #94	; 0x5e
 8004f76:	18fb      	adds	r3, r7, r3
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	2168      	movs	r1, #104	; 0x68
 8004f7c:	5a52      	ldrh	r2, [r2, r1]
 8004f7e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f80:	e0eb      	b.n	800515a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f88:	215c      	movs	r1, #92	; 0x5c
 8004f8a:	187b      	adds	r3, r7, r1
 8004f8c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004f8e:	187b      	adds	r3, r7, r1
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	236a      	movs	r3, #106	; 0x6a
 8004f96:	18fb      	adds	r3, r7, r3
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	b2d9      	uxtb	r1, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa0:	400a      	ands	r2, r1
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	225e      	movs	r2, #94	; 0x5e
 8004fb4:	5a9b      	ldrh	r3, [r3, r2]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b299      	uxth	r1, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	225e      	movs	r2, #94	; 0x5e
 8004fc0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fcc:	2207      	movs	r2, #7
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d049      	beq.n	8005066 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	d010      	beq.n	8004ffc <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004fda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fdc:	2380      	movs	r3, #128	; 0x80
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d00b      	beq.n	8004ffc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2290      	movs	r2, #144	; 0x90
 8004ff0:	589b      	ldr	r3, [r3, r2]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2190      	movs	r1, #144	; 0x90
 8004ffa:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffe:	2202      	movs	r2, #2
 8005000:	4013      	ands	r3, r2
 8005002:	d00f      	beq.n	8005024 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005004:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005006:	2201      	movs	r2, #1
 8005008:	4013      	ands	r3, r2
 800500a:	d00b      	beq.n	8005024 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2202      	movs	r2, #2
 8005012:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2290      	movs	r2, #144	; 0x90
 8005018:	589b      	ldr	r3, [r3, r2]
 800501a:	2204      	movs	r2, #4
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2190      	movs	r1, #144	; 0x90
 8005022:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005026:	2204      	movs	r2, #4
 8005028:	4013      	ands	r3, r2
 800502a:	d00f      	beq.n	800504c <UART_RxISR_8BIT_FIFOEN+0x110>
 800502c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800502e:	2201      	movs	r2, #1
 8005030:	4013      	ands	r3, r2
 8005032:	d00b      	beq.n	800504c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2204      	movs	r2, #4
 800503a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2290      	movs	r2, #144	; 0x90
 8005040:	589b      	ldr	r3, [r3, r2]
 8005042:	2202      	movs	r2, #2
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2190      	movs	r1, #144	; 0x90
 800504a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2290      	movs	r2, #144	; 0x90
 8005050:	589b      	ldr	r3, [r3, r2]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d007      	beq.n	8005066 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	0018      	movs	r0, r3
 800505a:	f7ff f8ab 	bl	80041b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2290      	movs	r2, #144	; 0x90
 8005062:	2100      	movs	r1, #0
 8005064:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	225e      	movs	r2, #94	; 0x5e
 800506a:	5a9b      	ldrh	r3, [r3, r2]
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d173      	bne.n	800515a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005072:	f3ef 8310 	mrs	r3, PRIMASK
 8005076:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800507a:	65bb      	str	r3, [r7, #88]	; 0x58
 800507c:	2301      	movs	r3, #1
 800507e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005082:	f383 8810 	msr	PRIMASK, r3
}
 8005086:	46c0      	nop			; (mov r8, r8)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4961      	ldr	r1, [pc, #388]	; (8005218 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8005094:	400a      	ands	r2, r1
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800509a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509e:	f383 8810 	msr	PRIMASK, r3
}
 80050a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a4:	f3ef 8310 	mrs	r3, PRIMASK
 80050a8:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80050aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050ac:	657b      	str	r3, [r7, #84]	; 0x54
 80050ae:	2301      	movs	r3, #1
 80050b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b4:	f383 8810 	msr	PRIMASK, r3
}
 80050b8:	46c0      	nop			; (mov r8, r8)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4955      	ldr	r1, [pc, #340]	; (800521c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80050c6:	400a      	ands	r2, r1
 80050c8:	609a      	str	r2, [r3, #8]
 80050ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050cc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050d0:	f383 8810 	msr	PRIMASK, r3
}
 80050d4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	228c      	movs	r2, #140	; 0x8c
 80050da:	2120      	movs	r1, #32
 80050dc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d12f      	bne.n	8005152 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f8:	f3ef 8310 	mrs	r3, PRIMASK
 80050fc:	623b      	str	r3, [r7, #32]
  return(result);
 80050fe:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005100:	653b      	str	r3, [r7, #80]	; 0x50
 8005102:	2301      	movs	r3, #1
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	f383 8810 	msr	PRIMASK, r3
}
 800510c:	46c0      	nop			; (mov r8, r8)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2110      	movs	r1, #16
 800511a:	438a      	bics	r2, r1
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005120:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005124:	f383 8810 	msr	PRIMASK, r3
}
 8005128:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	2210      	movs	r2, #16
 8005132:	4013      	ands	r3, r2
 8005134:	2b10      	cmp	r3, #16
 8005136:	d103      	bne.n	8005140 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2210      	movs	r2, #16
 800513e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	225c      	movs	r2, #92	; 0x5c
 8005144:	5a9a      	ldrh	r2, [r3, r2]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	0011      	movs	r1, r2
 800514a:	0018      	movs	r0, r3
 800514c:	f7ff f83a 	bl	80041c4 <HAL_UARTEx_RxEventCallback>
 8005150:	e003      	b.n	800515a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	0018      	movs	r0, r3
 8005156:	f7fb fc53 	bl	8000a00 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800515a:	235e      	movs	r3, #94	; 0x5e
 800515c:	18fb      	adds	r3, r7, r3
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d004      	beq.n	800516e <UART_RxISR_8BIT_FIFOEN+0x232>
 8005164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005166:	2220      	movs	r2, #32
 8005168:	4013      	ands	r3, r2
 800516a:	d000      	beq.n	800516e <UART_RxISR_8BIT_FIFOEN+0x232>
 800516c:	e709      	b.n	8004f82 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800516e:	204e      	movs	r0, #78	; 0x4e
 8005170:	183b      	adds	r3, r7, r0
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	215e      	movs	r1, #94	; 0x5e
 8005176:	5a52      	ldrh	r2, [r2, r1]
 8005178:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800517a:	0001      	movs	r1, r0
 800517c:	187b      	adds	r3, r7, r1
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d044      	beq.n	800520e <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2268      	movs	r2, #104	; 0x68
 8005188:	5a9b      	ldrh	r3, [r3, r2]
 800518a:	187a      	adds	r2, r7, r1
 800518c:	8812      	ldrh	r2, [r2, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d23d      	bcs.n	800520e <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005192:	f3ef 8310 	mrs	r3, PRIMASK
 8005196:	60bb      	str	r3, [r7, #8]
  return(result);
 8005198:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800519a:	64bb      	str	r3, [r7, #72]	; 0x48
 800519c:	2301      	movs	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f383 8810 	msr	PRIMASK, r3
}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	491b      	ldr	r1, [pc, #108]	; (8005220 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80051b4:	400a      	ands	r2, r1
 80051b6:	609a      	str	r2, [r3, #8]
 80051b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f383 8810 	msr	PRIMASK, r3
}
 80051c2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a17      	ldr	r2, [pc, #92]	; (8005224 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 80051c8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ca:	f3ef 8310 	mrs	r3, PRIMASK
 80051ce:	617b      	str	r3, [r7, #20]
  return(result);
 80051d0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80051d2:	647b      	str	r3, [r7, #68]	; 0x44
 80051d4:	2301      	movs	r3, #1
 80051d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	f383 8810 	msr	PRIMASK, r3
}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2120      	movs	r1, #32
 80051ec:	430a      	orrs	r2, r1
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f383 8810 	msr	PRIMASK, r3
}
 80051fa:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051fc:	e007      	b.n	800520e <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	699a      	ldr	r2, [r3, #24]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2108      	movs	r1, #8
 800520a:	430a      	orrs	r2, r1
 800520c:	619a      	str	r2, [r3, #24]
}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	46bd      	mov	sp, r7
 8005212:	b01c      	add	sp, #112	; 0x70
 8005214:	bd80      	pop	{r7, pc}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	fffffeff 	.word	0xfffffeff
 800521c:	effffffe 	.word	0xeffffffe
 8005220:	efffffff 	.word	0xefffffff
 8005224:	08004c55 	.word	0x08004c55

08005228 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b09e      	sub	sp, #120	; 0x78
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005230:	2372      	movs	r3, #114	; 0x72
 8005232:	18fb      	adds	r3, r7, r3
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	2160      	movs	r1, #96	; 0x60
 8005238:	5a52      	ldrh	r2, [r2, r1]
 800523a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	228c      	movs	r2, #140	; 0x8c
 8005258:	589b      	ldr	r3, [r3, r2]
 800525a:	2b22      	cmp	r3, #34	; 0x22
 800525c:	d000      	beq.n	8005260 <UART_RxISR_16BIT_FIFOEN+0x38>
 800525e:	e144      	b.n	80054ea <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005260:	2366      	movs	r3, #102	; 0x66
 8005262:	18fb      	adds	r3, r7, r3
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	2168      	movs	r1, #104	; 0x68
 8005268:	5a52      	ldrh	r2, [r2, r1]
 800526a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800526c:	e0eb      	b.n	8005446 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005274:	2164      	movs	r1, #100	; 0x64
 8005276:	187b      	adds	r3, r7, r1
 8005278:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8005280:	187b      	adds	r3, r7, r1
 8005282:	2272      	movs	r2, #114	; 0x72
 8005284:	18ba      	adds	r2, r7, r2
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	8812      	ldrh	r2, [r2, #0]
 800528a:	4013      	ands	r3, r2
 800528c:	b29a      	uxth	r2, r3
 800528e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005290:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005296:	1c9a      	adds	r2, r3, #2
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	225e      	movs	r2, #94	; 0x5e
 80052a0:	5a9b      	ldrh	r3, [r3, r2]
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b299      	uxth	r1, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	225e      	movs	r2, #94	; 0x5e
 80052ac:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80052b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052b8:	2207      	movs	r2, #7
 80052ba:	4013      	ands	r3, r2
 80052bc:	d049      	beq.n	8005352 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052c0:	2201      	movs	r2, #1
 80052c2:	4013      	ands	r3, r2
 80052c4:	d010      	beq.n	80052e8 <UART_RxISR_16BIT_FIFOEN+0xc0>
 80052c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052c8:	2380      	movs	r3, #128	; 0x80
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	4013      	ands	r3, r2
 80052ce:	d00b      	beq.n	80052e8 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2201      	movs	r2, #1
 80052d6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2290      	movs	r2, #144	; 0x90
 80052dc:	589b      	ldr	r3, [r3, r2]
 80052de:	2201      	movs	r2, #1
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2190      	movs	r1, #144	; 0x90
 80052e6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ea:	2202      	movs	r2, #2
 80052ec:	4013      	ands	r3, r2
 80052ee:	d00f      	beq.n	8005310 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80052f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052f2:	2201      	movs	r2, #1
 80052f4:	4013      	ands	r3, r2
 80052f6:	d00b      	beq.n	8005310 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2202      	movs	r2, #2
 80052fe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2290      	movs	r2, #144	; 0x90
 8005304:	589b      	ldr	r3, [r3, r2]
 8005306:	2204      	movs	r2, #4
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2190      	movs	r1, #144	; 0x90
 800530e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005312:	2204      	movs	r2, #4
 8005314:	4013      	ands	r3, r2
 8005316:	d00f      	beq.n	8005338 <UART_RxISR_16BIT_FIFOEN+0x110>
 8005318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800531a:	2201      	movs	r2, #1
 800531c:	4013      	ands	r3, r2
 800531e:	d00b      	beq.n	8005338 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2204      	movs	r2, #4
 8005326:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2290      	movs	r2, #144	; 0x90
 800532c:	589b      	ldr	r3, [r3, r2]
 800532e:	2202      	movs	r2, #2
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2190      	movs	r1, #144	; 0x90
 8005336:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2290      	movs	r2, #144	; 0x90
 800533c:	589b      	ldr	r3, [r3, r2]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d007      	beq.n	8005352 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	0018      	movs	r0, r3
 8005346:	f7fe ff35 	bl	80041b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2290      	movs	r2, #144	; 0x90
 800534e:	2100      	movs	r1, #0
 8005350:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	225e      	movs	r2, #94	; 0x5e
 8005356:	5a9b      	ldrh	r3, [r3, r2]
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d173      	bne.n	8005446 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800535e:	f3ef 8310 	mrs	r3, PRIMASK
 8005362:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005366:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005368:	2301      	movs	r3, #1
 800536a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800536c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536e:	f383 8810 	msr	PRIMASK, r3
}
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4961      	ldr	r1, [pc, #388]	; (8005504 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8005380:	400a      	ands	r2, r1
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005386:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538a:	f383 8810 	msr	PRIMASK, r3
}
 800538e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005390:	f3ef 8310 	mrs	r3, PRIMASK
 8005394:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005398:	65bb      	str	r3, [r7, #88]	; 0x58
 800539a:	2301      	movs	r3, #1
 800539c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a0:	f383 8810 	msr	PRIMASK, r3
}
 80053a4:	46c0      	nop			; (mov r8, r8)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4955      	ldr	r1, [pc, #340]	; (8005508 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80053b2:	400a      	ands	r2, r1
 80053b4:	609a      	str	r2, [r3, #8]
 80053b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053b8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053bc:	f383 8810 	msr	PRIMASK, r3
}
 80053c0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	228c      	movs	r2, #140	; 0x8c
 80053c6:	2120      	movs	r1, #32
 80053c8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d12f      	bne.n	800543e <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053e4:	f3ef 8310 	mrs	r3, PRIMASK
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ec:	657b      	str	r3, [r7, #84]	; 0x54
 80053ee:	2301      	movs	r3, #1
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	f383 8810 	msr	PRIMASK, r3
}
 80053f8:	46c0      	nop			; (mov r8, r8)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2110      	movs	r1, #16
 8005406:	438a      	bics	r2, r1
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800540c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005410:	f383 8810 	msr	PRIMASK, r3
}
 8005414:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	2210      	movs	r2, #16
 800541e:	4013      	ands	r3, r2
 8005420:	2b10      	cmp	r3, #16
 8005422:	d103      	bne.n	800542c <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2210      	movs	r2, #16
 800542a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	225c      	movs	r2, #92	; 0x5c
 8005430:	5a9a      	ldrh	r2, [r3, r2]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	0011      	movs	r1, r2
 8005436:	0018      	movs	r0, r3
 8005438:	f7fe fec4 	bl	80041c4 <HAL_UARTEx_RxEventCallback>
 800543c:	e003      	b.n	8005446 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	0018      	movs	r0, r3
 8005442:	f7fb fadd 	bl	8000a00 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005446:	2366      	movs	r3, #102	; 0x66
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d004      	beq.n	800545a <UART_RxISR_16BIT_FIFOEN+0x232>
 8005450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005452:	2220      	movs	r2, #32
 8005454:	4013      	ands	r3, r2
 8005456:	d000      	beq.n	800545a <UART_RxISR_16BIT_FIFOEN+0x232>
 8005458:	e709      	b.n	800526e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800545a:	2052      	movs	r0, #82	; 0x52
 800545c:	183b      	adds	r3, r7, r0
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	215e      	movs	r1, #94	; 0x5e
 8005462:	5a52      	ldrh	r2, [r2, r1]
 8005464:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005466:	0001      	movs	r1, r0
 8005468:	187b      	adds	r3, r7, r1
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d044      	beq.n	80054fa <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2268      	movs	r2, #104	; 0x68
 8005474:	5a9b      	ldrh	r3, [r3, r2]
 8005476:	187a      	adds	r2, r7, r1
 8005478:	8812      	ldrh	r2, [r2, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d23d      	bcs.n	80054fa <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800547e:	f3ef 8310 	mrs	r3, PRIMASK
 8005482:	60fb      	str	r3, [r7, #12]
  return(result);
 8005484:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005488:	2301      	movs	r3, #1
 800548a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f383 8810 	msr	PRIMASK, r3
}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	491b      	ldr	r1, [pc, #108]	; (800550c <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80054a0:	400a      	ands	r2, r1
 80054a2:	609a      	str	r2, [r3, #8]
 80054a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f383 8810 	msr	PRIMASK, r3
}
 80054ae:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a17      	ldr	r2, [pc, #92]	; (8005510 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80054b4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b6:	f3ef 8310 	mrs	r3, PRIMASK
 80054ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80054bc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80054be:	64bb      	str	r3, [r7, #72]	; 0x48
 80054c0:	2301      	movs	r3, #1
 80054c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f383 8810 	msr	PRIMASK, r3
}
 80054ca:	46c0      	nop			; (mov r8, r8)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2120      	movs	r1, #32
 80054d8:	430a      	orrs	r2, r1
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	f383 8810 	msr	PRIMASK, r3
}
 80054e6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054e8:	e007      	b.n	80054fa <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699a      	ldr	r2, [r3, #24]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2108      	movs	r1, #8
 80054f6:	430a      	orrs	r2, r1
 80054f8:	619a      	str	r2, [r3, #24]
}
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	46bd      	mov	sp, r7
 80054fe:	b01e      	add	sp, #120	; 0x78
 8005500:	bd80      	pop	{r7, pc}
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	fffffeff 	.word	0xfffffeff
 8005508:	effffffe 	.word	0xeffffffe
 800550c:	efffffff 	.word	0xefffffff
 8005510:	08004dc9 	.word	0x08004dc9

08005514 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800551c:	46c0      	nop			; (mov r8, r8)
 800551e:	46bd      	mov	sp, r7
 8005520:	b002      	add	sp, #8
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800552c:	46c0      	nop			; (mov r8, r8)
 800552e:	46bd      	mov	sp, r7
 8005530:	b002      	add	sp, #8
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800553c:	46c0      	nop			; (mov r8, r8)
 800553e:	46bd      	mov	sp, r7
 8005540:	b002      	add	sp, #8
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2284      	movs	r2, #132	; 0x84
 8005550:	5c9b      	ldrb	r3, [r3, r2]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_UARTEx_DisableFifoMode+0x16>
 8005556:	2302      	movs	r3, #2
 8005558:	e027      	b.n	80055aa <HAL_UARTEx_DisableFifoMode+0x66>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2284      	movs	r2, #132	; 0x84
 800555e:	2101      	movs	r1, #1
 8005560:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2288      	movs	r2, #136	; 0x88
 8005566:	2124      	movs	r1, #36	; 0x24
 8005568:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2101      	movs	r1, #1
 800557e:	438a      	bics	r2, r1
 8005580:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4a0b      	ldr	r2, [pc, #44]	; (80055b4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005586:	4013      	ands	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2288      	movs	r2, #136	; 0x88
 800559c:	2120      	movs	r1, #32
 800559e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2284      	movs	r2, #132	; 0x84
 80055a4:	2100      	movs	r1, #0
 80055a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	0018      	movs	r0, r3
 80055ac:	46bd      	mov	sp, r7
 80055ae:	b004      	add	sp, #16
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	46c0      	nop			; (mov r8, r8)
 80055b4:	dfffffff 	.word	0xdfffffff

080055b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2284      	movs	r2, #132	; 0x84
 80055c6:	5c9b      	ldrb	r3, [r3, r2]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e02e      	b.n	800562e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2284      	movs	r2, #132	; 0x84
 80055d4:	2101      	movs	r1, #1
 80055d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2288      	movs	r2, #136	; 0x88
 80055dc:	2124      	movs	r1, #36	; 0x24
 80055de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2101      	movs	r1, #1
 80055f4:	438a      	bics	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	08d9      	lsrs	r1, r3, #3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	0018      	movs	r0, r3
 8005610:	f000 f854 	bl	80056bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2288      	movs	r2, #136	; 0x88
 8005620:	2120      	movs	r1, #32
 8005622:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2284      	movs	r2, #132	; 0x84
 8005628:	2100      	movs	r1, #0
 800562a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	0018      	movs	r0, r3
 8005630:	46bd      	mov	sp, r7
 8005632:	b004      	add	sp, #16
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2284      	movs	r2, #132	; 0x84
 8005646:	5c9b      	ldrb	r3, [r3, r2]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800564c:	2302      	movs	r3, #2
 800564e:	e02f      	b.n	80056b0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2284      	movs	r2, #132	; 0x84
 8005654:	2101      	movs	r1, #1
 8005656:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2288      	movs	r2, #136	; 0x88
 800565c:	2124      	movs	r1, #36	; 0x24
 800565e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2101      	movs	r1, #1
 8005674:	438a      	bics	r2, r1
 8005676:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	4a0e      	ldr	r2, [pc, #56]	; (80056b8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005680:	4013      	ands	r3, r2
 8005682:	0019      	movs	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	0018      	movs	r0, r3
 8005692:	f000 f813 	bl	80056bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2288      	movs	r2, #136	; 0x88
 80056a2:	2120      	movs	r1, #32
 80056a4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2284      	movs	r2, #132	; 0x84
 80056aa:	2100      	movs	r1, #0
 80056ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	0018      	movs	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	b004      	add	sp, #16
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	f1ffffff 	.word	0xf1ffffff

080056bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d108      	bne.n	80056de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	226a      	movs	r2, #106	; 0x6a
 80056d0:	2101      	movs	r1, #1
 80056d2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2268      	movs	r2, #104	; 0x68
 80056d8:	2101      	movs	r1, #1
 80056da:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056dc:	e043      	b.n	8005766 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056de:	260f      	movs	r6, #15
 80056e0:	19bb      	adds	r3, r7, r6
 80056e2:	2208      	movs	r2, #8
 80056e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056e6:	200e      	movs	r0, #14
 80056e8:	183b      	adds	r3, r7, r0
 80056ea:	2208      	movs	r2, #8
 80056ec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	0e5b      	lsrs	r3, r3, #25
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	240d      	movs	r4, #13
 80056fa:	193b      	adds	r3, r7, r4
 80056fc:	2107      	movs	r1, #7
 80056fe:	400a      	ands	r2, r1
 8005700:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	0f5b      	lsrs	r3, r3, #29
 800570a:	b2da      	uxtb	r2, r3
 800570c:	250c      	movs	r5, #12
 800570e:	197b      	adds	r3, r7, r5
 8005710:	2107      	movs	r1, #7
 8005712:	400a      	ands	r2, r1
 8005714:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005716:	183b      	adds	r3, r7, r0
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	197a      	adds	r2, r7, r5
 800571c:	7812      	ldrb	r2, [r2, #0]
 800571e:	4914      	ldr	r1, [pc, #80]	; (8005770 <UARTEx_SetNbDataToProcess+0xb4>)
 8005720:	5c8a      	ldrb	r2, [r1, r2]
 8005722:	435a      	muls	r2, r3
 8005724:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005726:	197b      	adds	r3, r7, r5
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	4a12      	ldr	r2, [pc, #72]	; (8005774 <UARTEx_SetNbDataToProcess+0xb8>)
 800572c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800572e:	0019      	movs	r1, r3
 8005730:	f7fa fd70 	bl	8000214 <__divsi3>
 8005734:	0003      	movs	r3, r0
 8005736:	b299      	uxth	r1, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	226a      	movs	r2, #106	; 0x6a
 800573c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800573e:	19bb      	adds	r3, r7, r6
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	193a      	adds	r2, r7, r4
 8005744:	7812      	ldrb	r2, [r2, #0]
 8005746:	490a      	ldr	r1, [pc, #40]	; (8005770 <UARTEx_SetNbDataToProcess+0xb4>)
 8005748:	5c8a      	ldrb	r2, [r1, r2]
 800574a:	435a      	muls	r2, r3
 800574c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800574e:	193b      	adds	r3, r7, r4
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	4a08      	ldr	r2, [pc, #32]	; (8005774 <UARTEx_SetNbDataToProcess+0xb8>)
 8005754:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005756:	0019      	movs	r1, r3
 8005758:	f7fa fd5c 	bl	8000214 <__divsi3>
 800575c:	0003      	movs	r3, r0
 800575e:	b299      	uxth	r1, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2268      	movs	r2, #104	; 0x68
 8005764:	5299      	strh	r1, [r3, r2]
}
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	46bd      	mov	sp, r7
 800576a:	b005      	add	sp, #20
 800576c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	08005860 	.word	0x08005860
 8005774:	08005868 	.word	0x08005868

08005778 <__libc_init_array>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	2600      	movs	r6, #0
 800577c:	4d0c      	ldr	r5, [pc, #48]	; (80057b0 <__libc_init_array+0x38>)
 800577e:	4c0d      	ldr	r4, [pc, #52]	; (80057b4 <__libc_init_array+0x3c>)
 8005780:	1b64      	subs	r4, r4, r5
 8005782:	10a4      	asrs	r4, r4, #2
 8005784:	42a6      	cmp	r6, r4
 8005786:	d109      	bne.n	800579c <__libc_init_array+0x24>
 8005788:	2600      	movs	r6, #0
 800578a:	f000 f821 	bl	80057d0 <_init>
 800578e:	4d0a      	ldr	r5, [pc, #40]	; (80057b8 <__libc_init_array+0x40>)
 8005790:	4c0a      	ldr	r4, [pc, #40]	; (80057bc <__libc_init_array+0x44>)
 8005792:	1b64      	subs	r4, r4, r5
 8005794:	10a4      	asrs	r4, r4, #2
 8005796:	42a6      	cmp	r6, r4
 8005798:	d105      	bne.n	80057a6 <__libc_init_array+0x2e>
 800579a:	bd70      	pop	{r4, r5, r6, pc}
 800579c:	00b3      	lsls	r3, r6, #2
 800579e:	58eb      	ldr	r3, [r5, r3]
 80057a0:	4798      	blx	r3
 80057a2:	3601      	adds	r6, #1
 80057a4:	e7ee      	b.n	8005784 <__libc_init_array+0xc>
 80057a6:	00b3      	lsls	r3, r6, #2
 80057a8:	58eb      	ldr	r3, [r5, r3]
 80057aa:	4798      	blx	r3
 80057ac:	3601      	adds	r6, #1
 80057ae:	e7f2      	b.n	8005796 <__libc_init_array+0x1e>
 80057b0:	08005870 	.word	0x08005870
 80057b4:	08005870 	.word	0x08005870
 80057b8:	08005870 	.word	0x08005870
 80057bc:	08005874 	.word	0x08005874

080057c0 <memset>:
 80057c0:	0003      	movs	r3, r0
 80057c2:	1882      	adds	r2, r0, r2
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d100      	bne.n	80057ca <memset+0xa>
 80057c8:	4770      	bx	lr
 80057ca:	7019      	strb	r1, [r3, #0]
 80057cc:	3301      	adds	r3, #1
 80057ce:	e7f9      	b.n	80057c4 <memset+0x4>

080057d0 <_init>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d6:	bc08      	pop	{r3}
 80057d8:	469e      	mov	lr, r3
 80057da:	4770      	bx	lr

080057dc <_fini>:
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e2:	bc08      	pop	{r3}
 80057e4:	469e      	mov	lr, r3
 80057e6:	4770      	bx	lr
