
GetwayDeviceSlave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004674  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047b4  080047b4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080047b4  080047b4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047b4  080047b4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b4  080047b4  000147b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047b8  080047b8  000147b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080047bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000001c  080047d8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080047d8  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001192e  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000274b  00000000  00000000  00031972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  000340c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  00034fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016603  00000000  00000000  00035de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012189  00000000  00000000  0004c3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e945  00000000  00000000  0005e574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eceb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003620  00000000  00000000  000ecf0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000001c 	.word	0x2000001c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004714 	.word	0x08004714

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000020 	.word	0x20000020
 80000fc:	08004714 	.word	0x08004714

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  if(huart->Instance == USART2)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a1e      	ldr	r2, [pc, #120]	; (8000474 <HAL_UART_RxCpltCallback+0x88>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d11d      	bne.n	800043a <HAL_UART_RxCpltCallback+0x4e>
  {
    HAL_UART_Receive_IT(&huart2, &lorawanDataChar, 1);
 80003fe:	491e      	ldr	r1, [pc, #120]	; (8000478 <HAL_UART_RxCpltCallback+0x8c>)
 8000400:	4b1e      	ldr	r3, [pc, #120]	; (800047c <HAL_UART_RxCpltCallback+0x90>)
 8000402:	2201      	movs	r2, #1
 8000404:	0018      	movs	r0, r3
 8000406:	f002 faf1 	bl	80029ec <HAL_UART_Receive_IT>
    lorawanData[lorawanDataCount] = lorawanDataChar;
 800040a:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <HAL_UART_RxCpltCallback+0x94>)
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	001a      	movs	r2, r3
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <HAL_UART_RxCpltCallback+0x8c>)
 8000412:	7819      	ldrb	r1, [r3, #0]
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <HAL_UART_RxCpltCallback+0x98>)
 8000416:	5499      	strb	r1, [r3, r2]
    lorawanDataCount++;
 8000418:	4b19      	ldr	r3, [pc, #100]	; (8000480 <HAL_UART_RxCpltCallback+0x94>)
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	3301      	adds	r3, #1
 800041e:	b29a      	uxth	r2, r3
 8000420:	4b17      	ldr	r3, [pc, #92]	; (8000480 <HAL_UART_RxCpltCallback+0x94>)
 8000422:	801a      	strh	r2, [r3, #0]
    if(lorawanData[0] == 0xAA) lorawanTransHandle();
 8000424:	4b17      	ldr	r3, [pc, #92]	; (8000484 <HAL_UART_RxCpltCallback+0x98>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2baa      	cmp	r3, #170	; 0xaa
 800042a:	d101      	bne.n	8000430 <HAL_UART_RxCpltCallback+0x44>
 800042c:	f000 fa3e 	bl	80008ac <lorawanTransHandle>
    clearData(lorawanData, uartBytes);
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <HAL_UART_RxCpltCallback+0x98>)
 8000432:	2132      	movs	r1, #50	; 0x32
 8000434:	0018      	movs	r0, r3
 8000436:	f000 f9fd 	bl	8000834 <clearData>
  }

  if(huart->Instance == USART4)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a12      	ldr	r2, [pc, #72]	; (8000488 <HAL_UART_RxCpltCallback+0x9c>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d112      	bne.n	800046a <HAL_UART_RxCpltCallback+0x7e>
  {
    HAL_UART_Receive_IT(&huart4, &modbusDataChar, 1);
 8000444:	4911      	ldr	r1, [pc, #68]	; (800048c <HAL_UART_RxCpltCallback+0xa0>)
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <HAL_UART_RxCpltCallback+0xa4>)
 8000448:	2201      	movs	r2, #1
 800044a:	0018      	movs	r0, r3
 800044c:	f002 face 	bl	80029ec <HAL_UART_Receive_IT>
    modbusData[modbusDataCount] = modbusDataChar;
 8000450:	4b10      	ldr	r3, [pc, #64]	; (8000494 <HAL_UART_RxCpltCallback+0xa8>)
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	001a      	movs	r2, r3
 8000456:	4b0d      	ldr	r3, [pc, #52]	; (800048c <HAL_UART_RxCpltCallback+0xa0>)
 8000458:	7819      	ldrb	r1, [r3, #0]
 800045a:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <HAL_UART_RxCpltCallback+0xac>)
 800045c:	5499      	strb	r1, [r3, r2]
    modbusDataCount++;
 800045e:	4b0d      	ldr	r3, [pc, #52]	; (8000494 <HAL_UART_RxCpltCallback+0xa8>)
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	3301      	adds	r3, #1
 8000464:	b29a      	uxth	r2, r3
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <HAL_UART_RxCpltCallback+0xa8>)
 8000468:	801a      	strh	r2, [r3, #0]
  }
}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40004400 	.word	0x40004400
 8000478:	200001de 	.word	0x200001de
 800047c:	20000084 	.word	0x20000084
 8000480:	200001e0 	.word	0x200001e0
 8000484:	200001ac 	.word	0x200001ac
 8000488:	40004c00 	.word	0x40004c00
 800048c:	20000216 	.word	0x20000216
 8000490:	20000118 	.word	0x20000118
 8000494:	20000218 	.word	0x20000218
 8000498:	200001e4 	.word	0x200001e4

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 fc06 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f890 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f000 f9ae 	bl	8000808 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ac:	f000 f92a 	bl	8000704 <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 80004b0:	f000 f976 	bl	80007a0 <MX_USART4_UART_Init>
  MX_TIM3_Init();
 80004b4:	f000 f8d0 	bl	8000658 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80004b8:	4b32      	ldr	r3, [pc, #200]	; (8000584 <main+0xe8>)
 80004ba:	0018      	movs	r0, r3
 80004bc:	f001 ff06 	bl	80022cc <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart2, &lorawanDataChar, 1);
 80004c0:	4931      	ldr	r1, [pc, #196]	; (8000588 <main+0xec>)
 80004c2:	4b32      	ldr	r3, [pc, #200]	; (800058c <main+0xf0>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	0018      	movs	r0, r3
 80004c8:	f002 fa90 	bl	80029ec <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &modbusDataChar, 1);
 80004cc:	4930      	ldr	r1, [pc, #192]	; (8000590 <main+0xf4>)
 80004ce:	4b31      	ldr	r3, [pc, #196]	; (8000594 <main+0xf8>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	0018      	movs	r0, r3
 80004d4:	f002 fa8a 	bl	80029ec <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_UART_Transmit(&huart4, requestModbus1, sizeof(requestModbus1), 1000);
 80004d8:	23fa      	movs	r3, #250	; 0xfa
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	492e      	ldr	r1, [pc, #184]	; (8000598 <main+0xfc>)
 80004de:	482d      	ldr	r0, [pc, #180]	; (8000594 <main+0xf8>)
 80004e0:	2207      	movs	r2, #7
 80004e2:	f002 f9e7 	bl	80028b4 <HAL_UART_Transmit>
    HAL_Delay(500);
 80004e6:	23fa      	movs	r3, #250	; 0xfa
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 fc66 	bl	8000dbc <HAL_Delay>

    if(strlen((char*)modbusData) != 0)
 80004f0:	4b2a      	ldr	r3, [pc, #168]	; (800059c <main+0x100>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d007      	beq.n	8000508 <main+0x6c>
    {
      isLampTower = 1;
 80004f8:	4b29      	ldr	r3, [pc, #164]	; (80005a0 <main+0x104>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	701a      	strb	r2, [r3, #0]
      lampStatus = modbusData[5];
 80004fe:	4b27      	ldr	r3, [pc, #156]	; (800059c <main+0x100>)
 8000500:	795a      	ldrb	r2, [r3, #5]
 8000502:	4b28      	ldr	r3, [pc, #160]	; (80005a4 <main+0x108>)
 8000504:	701a      	strb	r2, [r3, #0]
 8000506:	e002      	b.n	800050e <main+0x72>
    }
    else isLampTower = 0;
 8000508:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <main+0x104>)
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
    clearData(modbusData, uartBytes);
 800050e:	4b23      	ldr	r3, [pc, #140]	; (800059c <main+0x100>)
 8000510:	2132      	movs	r1, #50	; 0x32
 8000512:	0018      	movs	r0, r3
 8000514:	f000 f98e 	bl	8000834 <clearData>

    HAL_UART_Transmit(&huart4, requestModbus2, sizeof(requestModbus2), 1000);
 8000518:	23fa      	movs	r3, #250	; 0xfa
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	4922      	ldr	r1, [pc, #136]	; (80005a8 <main+0x10c>)
 800051e:	481d      	ldr	r0, [pc, #116]	; (8000594 <main+0xf8>)
 8000520:	2208      	movs	r2, #8
 8000522:	f002 f9c7 	bl	80028b4 <HAL_UART_Transmit>
    HAL_Delay(500);
 8000526:	23fa      	movs	r3, #250	; 0xfa
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	0018      	movs	r0, r3
 800052c:	f000 fc46 	bl	8000dbc <HAL_Delay>

    if(strlen((char*)modbusData) != 0)
 8000530:	4b1a      	ldr	r3, [pc, #104]	; (800059c <main+0x100>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d01b      	beq.n	8000570 <main+0xd4>
    {
      isSensorCounter = 1;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <main+0x110>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
      sensorCounter1_H = modbusData[3];
 800053e:	4b17      	ldr	r3, [pc, #92]	; (800059c <main+0x100>)
 8000540:	78da      	ldrb	r2, [r3, #3]
 8000542:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <main+0x114>)
 8000544:	701a      	strb	r2, [r3, #0]
      sensorCounter1_L = modbusData[4];
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <main+0x100>)
 8000548:	791a      	ldrb	r2, [r3, #4]
 800054a:	4b1a      	ldr	r3, [pc, #104]	; (80005b4 <main+0x118>)
 800054c:	701a      	strb	r2, [r3, #0]
      sensorCounter2_H = modbusData[5];
 800054e:	4b13      	ldr	r3, [pc, #76]	; (800059c <main+0x100>)
 8000550:	795a      	ldrb	r2, [r3, #5]
 8000552:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <main+0x11c>)
 8000554:	701a      	strb	r2, [r3, #0]
      sensorCounter2_L = modbusData[6];
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <main+0x100>)
 8000558:	799a      	ldrb	r2, [r3, #6]
 800055a:	4b18      	ldr	r3, [pc, #96]	; (80005bc <main+0x120>)
 800055c:	701a      	strb	r2, [r3, #0]
      sensorCounter3_H = modbusData[7];
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <main+0x100>)
 8000560:	79da      	ldrb	r2, [r3, #7]
 8000562:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <main+0x124>)
 8000564:	701a      	strb	r2, [r3, #0]
      sensorCounter3_L = modbusData[8];
 8000566:	4b0d      	ldr	r3, [pc, #52]	; (800059c <main+0x100>)
 8000568:	7a1a      	ldrb	r2, [r3, #8]
 800056a:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <main+0x128>)
 800056c:	701a      	strb	r2, [r3, #0]
 800056e:	e002      	b.n	8000576 <main+0xda>
    }
    else isSensorCounter = 0;
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <main+0x110>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
    clearData(modbusData, uartBytes);
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <main+0x100>)
 8000578:	2132      	movs	r1, #50	; 0x32
 800057a:	0018      	movs	r0, r3
 800057c:	f000 f95a 	bl	8000834 <clearData>
    HAL_UART_Transmit(&huart4, requestModbus1, sizeof(requestModbus1), 1000);
 8000580:	e7aa      	b.n	80004d8 <main+0x3c>
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	20000038 	.word	0x20000038
 8000588:	200001de 	.word	0x200001de
 800058c:	20000084 	.word	0x20000084
 8000590:	20000216 	.word	0x20000216
 8000594:	20000118 	.word	0x20000118
 8000598:	20000000 	.word	0x20000000
 800059c:	200001e4 	.word	0x200001e4
 80005a0:	2000024e 	.word	0x2000024e
 80005a4:	20000250 	.word	0x20000250
 80005a8:	20000008 	.word	0x20000008
 80005ac:	2000024f 	.word	0x2000024f
 80005b0:	20000251 	.word	0x20000251
 80005b4:	20000252 	.word	0x20000252
 80005b8:	20000253 	.word	0x20000253
 80005bc:	20000254 	.word	0x20000254
 80005c0:	20000255 	.word	0x20000255
 80005c4:	20000256 	.word	0x20000256

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b093      	sub	sp, #76	; 0x4c
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	2414      	movs	r4, #20
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	0018      	movs	r0, r3
 80005d4:	2334      	movs	r3, #52	; 0x34
 80005d6:	001a      	movs	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	f004 f893 	bl	8004704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	0018      	movs	r0, r3
 80005e2:	2310      	movs	r3, #16
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f004 f88c 	bl	8004704 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 ffd9 	bl	80015a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	2202      	movs	r2, #2
 80005fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	0052      	lsls	r2, r2, #1
 8000602:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000604:	193b      	adds	r3, r7, r4
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060a:	193b      	adds	r3, r7, r4
 800060c:	2240      	movs	r2, #64	; 0x40
 800060e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000610:	193b      	adds	r3, r7, r4
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	193b      	adds	r3, r7, r4
 8000618:	0018      	movs	r0, r3
 800061a:	f001 f811 	bl	8001640 <HAL_RCC_OscConfig>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000622:	f000 f9bd 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2207      	movs	r2, #7
 800062a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2100      	movs	r1, #0
 8000642:	0018      	movs	r0, r3
 8000644:	f001 fb0c 	bl	8001c60 <HAL_RCC_ClockConfig>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800064c:	f000 f9a8 	bl	80009a0 <Error_Handler>
  }
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b013      	add	sp, #76	; 0x4c
 8000656:	bd90      	pop	{r4, r7, pc}

08000658 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065e:	2310      	movs	r3, #16
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	0018      	movs	r0, r3
 8000664:	2310      	movs	r3, #16
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f004 f84b 	bl	8004704 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	0018      	movs	r0, r3
 8000672:	230c      	movs	r3, #12
 8000674:	001a      	movs	r2, r3
 8000676:	2100      	movs	r1, #0
 8000678:	f004 f844 	bl	8004704 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_TIM3_Init+0xa0>)
 800067e:	4a1f      	ldr	r2, [pc, #124]	; (80006fc <MX_TIM3_Init+0xa4>)
 8000680:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000;
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_TIM3_Init+0xa0>)
 8000684:	22fa      	movs	r2, #250	; 0xfa
 8000686:	0192      	lsls	r2, r2, #6
 8000688:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068a:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_TIM3_Init+0xa0>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_TIM3_Init+0xa0>)
 8000692:	4a1b      	ldr	r2, [pc, #108]	; (8000700 <MX_TIM3_Init+0xa8>)
 8000694:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_TIM3_Init+0xa0>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_TIM3_Init+0xa0>)
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_TIM3_Init+0xa0>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 fdb9 	bl	800221c <HAL_TIM_Base_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80006ae:	f000 f977 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b2:	2110      	movs	r1, #16
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2280      	movs	r2, #128	; 0x80
 80006b8:	0152      	lsls	r2, r2, #5
 80006ba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006bc:	187a      	adds	r2, r7, r1
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_TIM3_Init+0xa0>)
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 fe50 	bl	8002368 <HAL_TIM_ConfigClockSource>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80006cc:	f000 f968 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006dc:	1d3a      	adds	r2, r7, #4
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_TIM3_Init+0xa0>)
 80006e0:	0011      	movs	r1, r2
 80006e2:	0018      	movs	r0, r3
 80006e4:	f002 f828 	bl	8002738 <HAL_TIMEx_MasterConfigSynchronization>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80006ec:	f000 f958 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b008      	add	sp, #32
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000038 	.word	0x20000038
 80006fc:	40000400 	.word	0x40000400
 8000700:	0000ffff 	.word	0x0000ffff

08000704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_USART2_UART_Init+0x94>)
 800070a:	4a24      	ldr	r2, [pc, #144]	; (800079c <MX_USART2_UART_Init+0x98>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	4b22      	ldr	r3, [pc, #136]	; (8000798 <MX_USART2_UART_Init+0x94>)
 8000710:	22e1      	movs	r2, #225	; 0xe1
 8000712:	0252      	lsls	r2, r2, #9
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_USART2_UART_Init+0x94>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_USART2_UART_Init+0x94>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_USART2_UART_Init+0x94>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_USART2_UART_Init+0x94>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_USART2_UART_Init+0x94>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_USART2_UART_Init+0x94>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_USART2_UART_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_USART2_UART_Init+0x94>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_USART2_UART_Init+0x94>)
 8000748:	2200      	movs	r2, #0
 800074a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_USART2_UART_Init+0x94>)
 800074e:	0018      	movs	r0, r3
 8000750:	f002 f85a 	bl	8002808 <HAL_UART_Init>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000758:	f000 f922 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_USART2_UART_Init+0x94>)
 800075e:	2100      	movs	r1, #0
 8000760:	0018      	movs	r0, r3
 8000762:	f003 fecb 	bl	80044fc <HAL_UARTEx_SetTxFifoThreshold>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800076a:	f000 f919 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_USART2_UART_Init+0x94>)
 8000770:	2100      	movs	r1, #0
 8000772:	0018      	movs	r0, r3
 8000774:	f003 ff02 	bl	800457c <HAL_UARTEx_SetRxFifoThreshold>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800077c:	f000 f910 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <MX_USART2_UART_Init+0x94>)
 8000782:	0018      	movs	r0, r3
 8000784:	f003 fe80 	bl	8004488 <HAL_UARTEx_DisableFifoMode>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800078c:	f000 f908 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	20000084 	.word	0x20000084
 800079c:	40004400 	.word	0x40004400

080007a0 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_USART4_UART_Init+0x60>)
 80007a6:	4a17      	ldr	r2, [pc, #92]	; (8000804 <MX_USART4_UART_Init+0x64>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_USART4_UART_Init+0x60>)
 80007ac:	22e1      	movs	r2, #225	; 0xe1
 80007ae:	0252      	lsls	r2, r2, #9
 80007b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_USART4_UART_Init+0x60>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_USART4_UART_Init+0x60>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_USART4_UART_Init+0x60>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_USART4_UART_Init+0x60>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_USART4_UART_Init+0x60>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_USART4_UART_Init+0x60>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_USART4_UART_Init+0x60>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_USART4_UART_Init+0x60>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_USART4_UART_Init+0x60>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <MX_USART4_UART_Init+0x60>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f002 f80c 	bl	8002808 <HAL_UART_Init>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 80007f4:	f000 f8d4 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	20000118 	.word	0x20000118
 8000804:	40004c00 	.word	0x40004c00

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_GPIO_Init+0x28>)
 8000810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_GPIO_Init+0x28>)
 8000814:	2101      	movs	r1, #1
 8000816:	430a      	orrs	r2, r1
 8000818:	635a      	str	r2, [r3, #52]	; 0x34
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <MX_GPIO_Init+0x28>)
 800081c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800081e:	2201      	movs	r2, #1
 8000820:	4013      	ands	r3, r2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	40021000 	.word	0x40021000

08000834 <clearData>:

/* USER CODE BEGIN 4 */
void clearData(uint8_t *ptrBuffer, uint16_t sizeBuffer)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	000a      	movs	r2, r1
 800083e:	1cbb      	adds	r3, r7, #2
 8000840:	801a      	strh	r2, [r3, #0]
  if(ptrBuffer == &modbusData[0]) modbusDataCount = 0;
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <clearData+0x68>)
 8000846:	429a      	cmp	r2, r3
 8000848:	d103      	bne.n	8000852 <clearData+0x1e>
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <clearData+0x6c>)
 800084c:	2200      	movs	r2, #0
 800084e:	801a      	strh	r2, [r3, #0]
 8000850:	e006      	b.n	8000860 <clearData+0x2c>
  else if(ptrBuffer == &lorawanData[0]) lorawanDataCount = 0;
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <clearData+0x70>)
 8000856:	429a      	cmp	r2, r3
 8000858:	d102      	bne.n	8000860 <clearData+0x2c>
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <clearData+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	801a      	strh	r2, [r3, #0]

	for(uint16_t i = 0; i < sizeBuffer; i++) ptrBuffer[i] = '\0';
 8000860:	230e      	movs	r3, #14
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	2200      	movs	r2, #0
 8000866:	801a      	strh	r2, [r3, #0]
 8000868:	e00b      	b.n	8000882 <clearData+0x4e>
 800086a:	210e      	movs	r1, #14
 800086c:	187b      	adds	r3, r7, r1
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	18d3      	adds	r3, r2, r3
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
 8000878:	187b      	adds	r3, r7, r1
 800087a:	881a      	ldrh	r2, [r3, #0]
 800087c:	187b      	adds	r3, r7, r1
 800087e:	3201      	adds	r2, #1
 8000880:	801a      	strh	r2, [r3, #0]
 8000882:	230e      	movs	r3, #14
 8000884:	18fa      	adds	r2, r7, r3
 8000886:	1cbb      	adds	r3, r7, #2
 8000888:	8812      	ldrh	r2, [r2, #0]
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	429a      	cmp	r2, r3
 800088e:	d3ec      	bcc.n	800086a <clearData+0x36>
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b004      	add	sp, #16
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	200001e4 	.word	0x200001e4
 80008a0:	20000218 	.word	0x20000218
 80008a4:	200001ac 	.word	0x200001ac
 80008a8:	200001e0 	.word	0x200001e0

080008ac <lorawanTransHandle>:

void lorawanTransHandle(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
  dataFull[0] = 0x01;
 80008b2:	4b30      	ldr	r3, [pc, #192]	; (8000974 <lorawanTransHandle+0xc8>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]
  dataFull[1] = 0x01;
 80008b8:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <lorawanTransHandle+0xc8>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	705a      	strb	r2, [r3, #1]
  dataFull[2] = 0x01;
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <lorawanTransHandle+0xc8>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	709a      	strb	r2, [r3, #2]
  dataFull[3] = 0x05;
 80008c4:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <lorawanTransHandle+0xc8>)
 80008c6:	2205      	movs	r2, #5
 80008c8:	70da      	strb	r2, [r3, #3]
  dataFull[4] = 0x05;
 80008ca:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <lorawanTransHandle+0xc8>)
 80008cc:	2205      	movs	r2, #5
 80008ce:	711a      	strb	r2, [r3, #4]
  dataFull[5] = isLampTower;
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <lorawanTransHandle+0xcc>)
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	4b27      	ldr	r3, [pc, #156]	; (8000974 <lorawanTransHandle+0xc8>)
 80008d6:	715a      	strb	r2, [r3, #5]
  dataFull[6] = lampStatus;
 80008d8:	4b28      	ldr	r3, [pc, #160]	; (800097c <lorawanTransHandle+0xd0>)
 80008da:	781a      	ldrb	r2, [r3, #0]
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <lorawanTransHandle+0xc8>)
 80008de:	719a      	strb	r2, [r3, #6]
  dataFull[7] = isSensorCounter;
 80008e0:	4b27      	ldr	r3, [pc, #156]	; (8000980 <lorawanTransHandle+0xd4>)
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	4b23      	ldr	r3, [pc, #140]	; (8000974 <lorawanTransHandle+0xc8>)
 80008e6:	71da      	strb	r2, [r3, #7]
  dataFull[8] = sensorCounter1_H;
 80008e8:	4b26      	ldr	r3, [pc, #152]	; (8000984 <lorawanTransHandle+0xd8>)
 80008ea:	781a      	ldrb	r2, [r3, #0]
 80008ec:	4b21      	ldr	r3, [pc, #132]	; (8000974 <lorawanTransHandle+0xc8>)
 80008ee:	721a      	strb	r2, [r3, #8]
  dataFull[9] = sensorCounter1_L;
 80008f0:	4b25      	ldr	r3, [pc, #148]	; (8000988 <lorawanTransHandle+0xdc>)
 80008f2:	781a      	ldrb	r2, [r3, #0]
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <lorawanTransHandle+0xc8>)
 80008f6:	725a      	strb	r2, [r3, #9]
  dataFull[10] = sensorCounter2_H;
 80008f8:	4b24      	ldr	r3, [pc, #144]	; (800098c <lorawanTransHandle+0xe0>)
 80008fa:	781a      	ldrb	r2, [r3, #0]
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <lorawanTransHandle+0xc8>)
 80008fe:	729a      	strb	r2, [r3, #10]
  dataFull[11] = sensorCounter2_L;
 8000900:	4b23      	ldr	r3, [pc, #140]	; (8000990 <lorawanTransHandle+0xe4>)
 8000902:	781a      	ldrb	r2, [r3, #0]
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <lorawanTransHandle+0xc8>)
 8000906:	72da      	strb	r2, [r3, #11]
  dataFull[12] = sensorCounter3_H;
 8000908:	4b22      	ldr	r3, [pc, #136]	; (8000994 <lorawanTransHandle+0xe8>)
 800090a:	781a      	ldrb	r2, [r3, #0]
 800090c:	4b19      	ldr	r3, [pc, #100]	; (8000974 <lorawanTransHandle+0xc8>)
 800090e:	731a      	strb	r2, [r3, #12]
  dataFull[13] = sensorCounter3_L;
 8000910:	4b21      	ldr	r3, [pc, #132]	; (8000998 <lorawanTransHandle+0xec>)
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <lorawanTransHandle+0xc8>)
 8000916:	735a      	strb	r2, [r3, #13]

  uint8_t sum = 0;
 8000918:	1dfb      	adds	r3, r7, #7
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 5; i < 14; i++) sum += dataFull[i];
 800091e:	1dbb      	adds	r3, r7, #6
 8000920:	2205      	movs	r2, #5
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	e00d      	b.n	8000942 <lorawanTransHandle+0x96>
 8000926:	1dbb      	adds	r3, r7, #6
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <lorawanTransHandle+0xc8>)
 800092c:	5cd1      	ldrb	r1, [r2, r3]
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	1dfa      	adds	r2, r7, #7
 8000932:	7812      	ldrb	r2, [r2, #0]
 8000934:	188a      	adds	r2, r1, r2
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	1dbb      	adds	r3, r7, #6
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	1dbb      	adds	r3, r7, #6
 800093e:	3201      	adds	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
 8000942:	1dbb      	adds	r3, r7, #6
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b0d      	cmp	r3, #13
 8000948:	d9ed      	bls.n	8000926 <lorawanTransHandle+0x7a>
  dataFull[14] = sum;
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <lorawanTransHandle+0xc8>)
 800094c:	1dfa      	adds	r2, r7, #7
 800094e:	7812      	ldrb	r2, [r2, #0]
 8000950:	739a      	strb	r2, [r3, #14]

  HAL_UART_Transmit(&huart2, dataFull, 15, 1000);
 8000952:	23fa      	movs	r3, #250	; 0xfa
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	4907      	ldr	r1, [pc, #28]	; (8000974 <lorawanTransHandle+0xc8>)
 8000958:	4810      	ldr	r0, [pc, #64]	; (800099c <lorawanTransHandle+0xf0>)
 800095a:	220f      	movs	r2, #15
 800095c:	f001 ffaa 	bl	80028b4 <HAL_UART_Transmit>
  clearData(dataFull, 50);
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <lorawanTransHandle+0xc8>)
 8000962:	2132      	movs	r1, #50	; 0x32
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff ff65 	bl	8000834 <clearData>
}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b002      	add	sp, #8
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	2000021c 	.word	0x2000021c
 8000978:	2000024e 	.word	0x2000024e
 800097c:	20000250 	.word	0x20000250
 8000980:	2000024f 	.word	0x2000024f
 8000984:	20000251 	.word	0x20000251
 8000988:	20000252 	.word	0x20000252
 800098c:	20000253 	.word	0x20000253
 8000990:	20000254 	.word	0x20000254
 8000994:	20000255 	.word	0x20000255
 8000998:	20000256 	.word	0x20000256
 800099c:	20000084 	.word	0x20000084

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <HAL_MspInit+0x6c>)
 80009b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <HAL_MspInit+0x6c>)
 80009b8:	2101      	movs	r1, #1
 80009ba:	430a      	orrs	r2, r1
 80009bc:	641a      	str	r2, [r3, #64]	; 0x40
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <HAL_MspInit+0x6c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	2201      	movs	r2, #1
 80009c4:	4013      	ands	r3, r2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <HAL_MspInit+0x6c>)
 80009cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_MspInit+0x6c>)
 80009d0:	2180      	movs	r1, #128	; 0x80
 80009d2:	0549      	lsls	r1, r1, #21
 80009d4:	430a      	orrs	r2, r1
 80009d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <HAL_MspInit+0x6c>)
 80009da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	055b      	lsls	r3, r3, #21
 80009e0:	4013      	ands	r3, r2
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	2003      	movs	r0, #3
 80009ec:	f000 facc 	bl	8000f88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 fade 	bl	8000fb2 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	2004      	movs	r0, #4
 80009fc:	f000 fac4 	bl	8000f88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000a00:	2004      	movs	r0, #4
 8000a02:	f000 fad6 	bl	8000fb2 <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000a06:	23c0      	movs	r3, #192	; 0xc0
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 f9fa 	bl	8000e04 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b002      	add	sp, #8
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40021000 	.word	0x40021000

08000a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a09      	ldr	r2, [pc, #36]	; (8000a50 <HAL_TIM_Base_MspInit+0x34>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d10b      	bne.n	8000a46 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_TIM_Base_MspInit+0x38>)
 8000a30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <HAL_TIM_Base_MspInit+0x38>)
 8000a34:	2102      	movs	r1, #2
 8000a36:	430a      	orrs	r2, r1
 8000a38:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_TIM_Base_MspInit+0x38>)
 8000a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a3e:	2202      	movs	r2, #2
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b004      	add	sp, #16
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	40000400 	.word	0x40000400
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b093      	sub	sp, #76	; 0x4c
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	2334      	movs	r3, #52	; 0x34
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	0018      	movs	r0, r3
 8000a66:	2314      	movs	r3, #20
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f003 fe4a 	bl	8004704 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a70:	2418      	movs	r4, #24
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	0018      	movs	r0, r3
 8000a76:	231c      	movs	r3, #28
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f003 fe42 	bl	8004704 <memset>
  if(huart->Instance==USART2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a51      	ldr	r2, [pc, #324]	; (8000bcc <HAL_UART_MspInit+0x174>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d147      	bne.n	8000b1a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f001 fa8b 	bl	8001fb4 <HAL_RCCEx_PeriphCLKConfig>
 8000a9e:	1e03      	subs	r3, r0, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000aa2:	f7ff ff7d 	bl	80009a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa6:	4b4a      	ldr	r3, [pc, #296]	; (8000bd0 <HAL_UART_MspInit+0x178>)
 8000aa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aaa:	4b49      	ldr	r3, [pc, #292]	; (8000bd0 <HAL_UART_MspInit+0x178>)
 8000aac:	2180      	movs	r1, #128	; 0x80
 8000aae:	0289      	lsls	r1, r1, #10
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ab4:	4b46      	ldr	r3, [pc, #280]	; (8000bd0 <HAL_UART_MspInit+0x178>)
 8000ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	029b      	lsls	r3, r3, #10
 8000abc:	4013      	ands	r3, r2
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b43      	ldr	r3, [pc, #268]	; (8000bd0 <HAL_UART_MspInit+0x178>)
 8000ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ac6:	4b42      	ldr	r3, [pc, #264]	; (8000bd0 <HAL_UART_MspInit+0x178>)
 8000ac8:	2101      	movs	r1, #1
 8000aca:	430a      	orrs	r2, r1
 8000acc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ace:	4b40      	ldr	r3, [pc, #256]	; (8000bd0 <HAL_UART_MspInit+0x178>)
 8000ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LoRaWAN_Tx_Pin|LoRaWAN_Rx_Pin;
 8000ada:	2134      	movs	r1, #52	; 0x34
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	2202      	movs	r2, #2
 8000aec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2203      	movs	r2, #3
 8000af2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2201      	movs	r2, #1
 8000af8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	187a      	adds	r2, r7, r1
 8000afc:	23a0      	movs	r3, #160	; 0xa0
 8000afe:	05db      	lsls	r3, r3, #23
 8000b00:	0011      	movs	r1, r2
 8000b02:	0018      	movs	r0, r3
 8000b04:	f000 fbec 	bl	80012e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	201c      	movs	r0, #28
 8000b0e:	f000 fa3b 	bl	8000f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b12:	201c      	movs	r0, #28
 8000b14:	f000 fa4d 	bl	8000fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8000b18:	e054      	b.n	8000bc4 <HAL_UART_MspInit+0x16c>
  else if(huart->Instance==USART4)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a2d      	ldr	r2, [pc, #180]	; (8000bd4 <HAL_UART_MspInit+0x17c>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d14f      	bne.n	8000bc4 <HAL_UART_MspInit+0x16c>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <HAL_UART_MspInit+0x178>)
 8000b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b28:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <HAL_UART_MspInit+0x178>)
 8000b2a:	2180      	movs	r1, #128	; 0x80
 8000b2c:	0309      	lsls	r1, r1, #12
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <HAL_UART_MspInit+0x178>)
 8000b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b36:	2380      	movs	r3, #128	; 0x80
 8000b38:	031b      	lsls	r3, r3, #12
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b40:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <HAL_UART_MspInit+0x178>)
 8000b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <HAL_UART_MspInit+0x178>)
 8000b46:	2101      	movs	r1, #1
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000b4c:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <HAL_UART_MspInit+0x178>)
 8000b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b50:	2201      	movs	r2, #1
 8000b52:	4013      	ands	r3, r2
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_Tx_Pin;
 8000b58:	2434      	movs	r4, #52	; 0x34
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	2202      	movs	r2, #2
 8000b64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	2201      	movs	r2, #1
 8000b6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	2203      	movs	r2, #3
 8000b70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	2204      	movs	r2, #4
 8000b76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RS485_Tx_GPIO_Port, &GPIO_InitStruct);
 8000b78:	193a      	adds	r2, r7, r4
 8000b7a:	23a0      	movs	r3, #160	; 0xa0
 8000b7c:	05db      	lsls	r3, r3, #23
 8000b7e:	0011      	movs	r1, r2
 8000b80:	0018      	movs	r0, r3
 8000b82:	f000 fbad 	bl	80012e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_Rx_Pin;
 8000b86:	0021      	movs	r1, r4
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2202      	movs	r2, #2
 8000b92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2202      	movs	r2, #2
 8000b98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RS485_Rx_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	187a      	adds	r2, r7, r1
 8000ba8:	23a0      	movs	r3, #160	; 0xa0
 8000baa:	05db      	lsls	r3, r3, #23
 8000bac:	0011      	movs	r1, r2
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 fb96 	bl	80012e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	201d      	movs	r0, #29
 8000bba:	f000 f9e5 	bl	8000f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000bbe:	201d      	movs	r0, #29
 8000bc0:	f000 f9f7 	bl	8000fb2 <HAL_NVIC_EnableIRQ>
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b013      	add	sp, #76	; 0x4c
 8000bca:	bd90      	pop	{r4, r7, pc}
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40004c00 	.word	0x40004c00

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfc:	f000 f8c2 	bl	8000d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000c0a:	f000 fabb 	bl	8001184 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <USART2_IRQHandler+0x14>)
 8000c26:	0018      	movs	r0, r3
 8000c28:	f001 ff38 	bl	8002a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	20000084 	.word	0x20000084

08000c38 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <USART3_4_IRQHandler+0x14>)
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f001 ff2c 	bl	8002a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	20000118 	.word	0x20000118

08000c50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c60:	f7ff fff6 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c66:	490d      	ldr	r1, [pc, #52]	; (8000c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <LoopForever+0xe>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ca8 <LoopForever+0x16>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c8a:	f003 fd17 	bl	80046bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c8e:	f7ff fc05 	bl	800049c <main>

08000c92 <LoopForever>:

LoopForever:
  b LoopForever
 8000c92:	e7fe      	b.n	8000c92 <LoopForever>
  ldr   r0, =_estack
 8000c94:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ca0:	080047bc 	.word	0x080047bc
  ldr r2, =_sbss
 8000ca4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000ca8:	20000278 	.word	0x20000278

08000cac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC1_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_Init+0x3c>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_Init+0x3c>)
 8000cc2:	2180      	movs	r1, #128	; 0x80
 8000cc4:	0049      	lsls	r1, r1, #1
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cca:	2003      	movs	r0, #3
 8000ccc:	f000 f810 	bl	8000cf0 <HAL_InitTick>
 8000cd0:	1e03      	subs	r3, r0, #0
 8000cd2:	d003      	beq.n	8000cdc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	e001      	b.n	8000ce0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000cdc:	f7ff fe66 	bl	80009ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce0:	1dfb      	adds	r3, r7, #7
 8000ce2:	781b      	ldrb	r3, [r3, #0]
}
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b002      	add	sp, #8
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40022000 	.word	0x40022000

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b590      	push	{r4, r7, lr}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <HAL_InitTick+0x88>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d02b      	beq.n	8000d60 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d08:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <HAL_InitTick+0x8c>)
 8000d0a:	681c      	ldr	r4, [r3, #0]
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <HAL_InitTick+0x88>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	0019      	movs	r1, r3
 8000d12:	23fa      	movs	r3, #250	; 0xfa
 8000d14:	0098      	lsls	r0, r3, #2
 8000d16:	f7ff f9f3 	bl	8000100 <__udivsi3>
 8000d1a:	0003      	movs	r3, r0
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	0020      	movs	r0, r4
 8000d20:	f7ff f9ee 	bl	8000100 <__udivsi3>
 8000d24:	0003      	movs	r3, r0
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 f953 	bl	8000fd2 <HAL_SYSTICK_Config>
 8000d2c:	1e03      	subs	r3, r0, #0
 8000d2e:	d112      	bne.n	8000d56 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d80a      	bhi.n	8000d4c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	425b      	negs	r3, r3
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 f922 	bl	8000f88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_InitTick+0x90>)
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	e00d      	b.n	8000d68 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
 8000d54:	e008      	b.n	8000d68 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d56:	230f      	movs	r3, #15
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	e003      	b.n	8000d68 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d60:	230f      	movs	r3, #15
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d68:	230f      	movs	r3, #15
 8000d6a:	18fb      	adds	r3, r7, r3
 8000d6c:	781b      	ldrb	r3, [r3, #0]
}
 8000d6e:	0018      	movs	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b005      	add	sp, #20
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	20000018 	.word	0x20000018
 8000d7c:	20000010 	.word	0x20000010
 8000d80:	20000014 	.word	0x20000014

08000d84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_IncTick+0x1c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	001a      	movs	r2, r3
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <HAL_IncTick+0x20>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	18d2      	adds	r2, r2, r3
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <HAL_IncTick+0x20>)
 8000d96:	601a      	str	r2, [r3, #0]
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	20000018 	.word	0x20000018
 8000da4:	20000258 	.word	0x20000258

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b02      	ldr	r3, [pc, #8]	; (8000db8 <HAL_GetTick+0x10>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	20000258 	.word	0x20000258

08000dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc4:	f7ff fff0 	bl	8000da8 <HAL_GetTick>
 8000dc8:	0003      	movs	r3, r0
 8000dca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	d005      	beq.n	8000de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_Delay+0x44>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	001a      	movs	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	189b      	adds	r3, r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	f7ff ffe0 	bl	8000da8 <HAL_GetTick>
 8000de8:	0002      	movs	r2, r0
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d8f7      	bhi.n	8000de4 <HAL_Delay+0x28>
  {
  }
}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b004      	add	sp, #16
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	20000018 	.word	0x20000018

08000e04 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000e12:	4013      	ands	r3, r2
 8000e14:	0019      	movs	r1, r3
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]
}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b002      	add	sp, #8
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	fffff9ff 	.word	0xfffff9ff

08000e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	0002      	movs	r2, r0
 8000e38:	1dfb      	adds	r3, r7, #7
 8000e3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b7f      	cmp	r3, #127	; 0x7f
 8000e42:	d809      	bhi.n	8000e58 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e44:	1dfb      	adds	r3, r7, #7
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	001a      	movs	r2, r3
 8000e4a:	231f      	movs	r3, #31
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_EnableIRQ+0x30>)
 8000e50:	2101      	movs	r1, #1
 8000e52:	4091      	lsls	r1, r2
 8000e54:	000a      	movs	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	e000e100 	.word	0xe000e100

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b7f      	cmp	r3, #127	; 0x7f
 8000e78:	d828      	bhi.n	8000ecc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e7a:	4a2f      	ldr	r2, [pc, #188]	; (8000f38 <__NVIC_SetPriority+0xd4>)
 8000e7c:	1dfb      	adds	r3, r7, #7
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	089b      	lsrs	r3, r3, #2
 8000e84:	33c0      	adds	r3, #192	; 0xc0
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	589b      	ldr	r3, [r3, r2]
 8000e8a:	1dfa      	adds	r2, r7, #7
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	0011      	movs	r1, r2
 8000e90:	2203      	movs	r2, #3
 8000e92:	400a      	ands	r2, r1
 8000e94:	00d2      	lsls	r2, r2, #3
 8000e96:	21ff      	movs	r1, #255	; 0xff
 8000e98:	4091      	lsls	r1, r2
 8000e9a:	000a      	movs	r2, r1
 8000e9c:	43d2      	mvns	r2, r2
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	019b      	lsls	r3, r3, #6
 8000ea6:	22ff      	movs	r2, #255	; 0xff
 8000ea8:	401a      	ands	r2, r3
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	0018      	movs	r0, r3
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	4003      	ands	r3, r0
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb8:	481f      	ldr	r0, [pc, #124]	; (8000f38 <__NVIC_SetPriority+0xd4>)
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	33c0      	adds	r3, #192	; 0xc0
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000eca:	e031      	b.n	8000f30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <__NVIC_SetPriority+0xd8>)
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	400b      	ands	r3, r1
 8000ed8:	3b08      	subs	r3, #8
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3306      	adds	r3, #6
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	18d3      	adds	r3, r2, r3
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	1dfa      	adds	r2, r7, #7
 8000ee8:	7812      	ldrb	r2, [r2, #0]
 8000eea:	0011      	movs	r1, r2
 8000eec:	2203      	movs	r2, #3
 8000eee:	400a      	ands	r2, r1
 8000ef0:	00d2      	lsls	r2, r2, #3
 8000ef2:	21ff      	movs	r1, #255	; 0xff
 8000ef4:	4091      	lsls	r1, r2
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	43d2      	mvns	r2, r2
 8000efa:	401a      	ands	r2, r3
 8000efc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	019b      	lsls	r3, r3, #6
 8000f02:	22ff      	movs	r2, #255	; 0xff
 8000f04:	401a      	ands	r2, r3
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	4003      	ands	r3, r0
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f14:	4809      	ldr	r0, [pc, #36]	; (8000f3c <__NVIC_SetPriority+0xd8>)
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	001c      	movs	r4, r3
 8000f1c:	230f      	movs	r3, #15
 8000f1e:	4023      	ands	r3, r4
 8000f20:	3b08      	subs	r3, #8
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	430a      	orrs	r2, r1
 8000f26:	3306      	adds	r3, #6
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	18c3      	adds	r3, r0, r3
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	601a      	str	r2, [r3, #0]
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b003      	add	sp, #12
 8000f36:	bd90      	pop	{r4, r7, pc}
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	1e5a      	subs	r2, r3, #1
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	045b      	lsls	r3, r3, #17
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d301      	bcc.n	8000f58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f54:	2301      	movs	r3, #1
 8000f56:	e010      	b.n	8000f7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <SysTick_Config+0x44>)
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	3a01      	subs	r2, #1
 8000f5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f60:	2301      	movs	r3, #1
 8000f62:	425b      	negs	r3, r3
 8000f64:	2103      	movs	r1, #3
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff ff7c 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <SysTick_Config+0x44>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <SysTick_Config+0x44>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b002      	add	sp, #8
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	210f      	movs	r1, #15
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	1c02      	adds	r2, r0, #0
 8000f98:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f7ff ff5d 	bl	8000e64 <__NVIC_SetPriority>
}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b004      	add	sp, #16
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	0002      	movs	r2, r0
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	b25b      	sxtb	r3, r3
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff ff33 	bl	8000e30 <__NVIC_EnableIRQ>
}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b002      	add	sp, #8
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff ffaf 	bl	8000f40 <SysTick_Config>
 8000fe2:	0003      	movs	r3, r0
}
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e050      	b.n	80010a0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2225      	movs	r2, #37	; 0x25
 8001002:	5c9b      	ldrb	r3, [r3, r2]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d008      	beq.n	800101c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2204      	movs	r2, #4
 800100e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2224      	movs	r2, #36	; 0x24
 8001014:	2100      	movs	r1, #0
 8001016:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e041      	b.n	80010a0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	210e      	movs	r1, #14
 8001028:	438a      	bics	r2, r1
 800102a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	491c      	ldr	r1, [pc, #112]	; (80010a8 <HAL_DMA_Abort+0xbc>)
 8001038:	400a      	ands	r2, r1
 800103a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2101      	movs	r1, #1
 8001048:	438a      	bics	r2, r1
 800104a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_DMA_Abort+0xc0>)
 800104e:	6859      	ldr	r1, [r3, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	221c      	movs	r2, #28
 8001056:	4013      	ands	r3, r2
 8001058:	2201      	movs	r2, #1
 800105a:	409a      	lsls	r2, r3
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <HAL_DMA_Abort+0xc0>)
 800105e:	430a      	orrs	r2, r1
 8001060:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800106a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00c      	beq.n	800108e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800107e:	490a      	ldr	r1, [pc, #40]	; (80010a8 <HAL_DMA_Abort+0xbc>)
 8001080:	400a      	ands	r2, r1
 8001082:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800108c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2225      	movs	r2, #37	; 0x25
 8001092:	2101      	movs	r1, #1
 8001094:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2224      	movs	r2, #36	; 0x24
 800109a:	2100      	movs	r1, #0
 800109c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b002      	add	sp, #8
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	fffffeff 	.word	0xfffffeff
 80010ac:	40020000 	.word	0x40020000

080010b0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010b8:	210f      	movs	r1, #15
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2225      	movs	r2, #37	; 0x25
 80010c4:	5c9b      	ldrb	r3, [r3, r2]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d006      	beq.n	80010da <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2204      	movs	r2, #4
 80010d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e049      	b.n	800116e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	210e      	movs	r1, #14
 80010e6:	438a      	bics	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2101      	movs	r1, #1
 80010f6:	438a      	bics	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001104:	491d      	ldr	r1, [pc, #116]	; (800117c <HAL_DMA_Abort_IT+0xcc>)
 8001106:	400a      	ands	r2, r1
 8001108:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <HAL_DMA_Abort_IT+0xd0>)
 800110c:	6859      	ldr	r1, [r3, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	221c      	movs	r2, #28
 8001114:	4013      	ands	r3, r2
 8001116:	2201      	movs	r2, #1
 8001118:	409a      	lsls	r2, r3
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_DMA_Abort_IT+0xd0>)
 800111c:	430a      	orrs	r2, r1
 800111e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001128:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00c      	beq.n	800114c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800113c:	490f      	ldr	r1, [pc, #60]	; (800117c <HAL_DMA_Abort_IT+0xcc>)
 800113e:	400a      	ands	r2, r1
 8001140:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800114a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2225      	movs	r2, #37	; 0x25
 8001150:	2101      	movs	r1, #1
 8001152:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2224      	movs	r2, #36	; 0x24
 8001158:	2100      	movs	r1, #0
 800115a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001160:	2b00      	cmp	r3, #0
 8001162:	d004      	beq.n	800116e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	0010      	movs	r0, r2
 800116c:	4798      	blx	r3
    }
  }
  return status;
 800116e:	230f      	movs	r3, #15
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	781b      	ldrb	r3, [r3, #0]
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b004      	add	sp, #16
 800117a:	bd80      	pop	{r7, pc}
 800117c:	fffffeff 	.word	0xfffffeff
 8001180:	40020000 	.word	0x40020000

08001184 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
  uint32_t param;
  uint32_t error;

  /* Save flash errors. */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800118a:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <HAL_FLASH_IRQHandler+0xf0>)
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	4a3a      	ldr	r2, [pc, #232]	; (8001278 <HAL_FLASH_IRQHandler+0xf4>)
 8001190:	4013      	ands	r3, r2
 8001192:	603b      	str	r3, [r7, #0]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & FLASH_TYPEERASE_MASS) != 0x00U)
 8001194:	4b39      	ldr	r3, [pc, #228]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	2204      	movs	r2, #4
 800119a:	4013      	ands	r3, r2
 800119c:	d003      	beq.n	80011a6 <HAL_FLASH_IRQHandler+0x22>
  {
    /* return bank number */
    param = pFlash.Banks;
 800119e:	4b37      	ldr	r3, [pc, #220]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	e013      	b.n	80011ce <HAL_FLASH_IRQHandler+0x4a>
  }
  else
  {
    /* Clear operation only for page erase or program */
    CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 80011a6:	4b33      	ldr	r3, [pc, #204]	; (8001274 <HAL_FLASH_IRQHandler+0xf0>)
 80011a8:	695a      	ldr	r2, [r3, #20]
 80011aa:	4b34      	ldr	r3, [pc, #208]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	4b30      	ldr	r3, [pc, #192]	; (8001274 <HAL_FLASH_IRQHandler+0xf0>)
 80011b2:	400a      	ands	r2, r1
 80011b4:	615a      	str	r2, [r3, #20]

    if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0x00U)
 80011b6:	4b31      	ldr	r3, [pc, #196]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	4a31      	ldr	r2, [pc, #196]	; (8001280 <HAL_FLASH_IRQHandler+0xfc>)
 80011bc:	4013      	ands	r3, r2
 80011be:	d003      	beq.n	80011c8 <HAL_FLASH_IRQHandler+0x44>
    {
      /* return address being programmed */
      param = pFlash.Address;
 80011c0:	4b2e      	ldr	r3, [pc, #184]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	e002      	b.n	80011ce <HAL_FLASH_IRQHandler+0x4a>
    }
    else
    {
      /* return page number being erased */
      param = pFlash.Page;
 80011c8:	4b2c      	ldr	r3, [pc, #176]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	607b      	str	r3, [r7, #4]
    }
  }

  /* B] Check errors */
  if (error != 0x00U)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00f      	beq.n	80011f4 <HAL_FLASH_IRQHandler+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80011d4:	4b29      	ldr	r3, [pc, #164]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	431a      	orrs	r2, r3
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 80011de:	605a      	str	r2, [r3, #4]

    /* clear error flags */
    FLASH->SR = FLASH_SR_ERRORS;
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <HAL_FLASH_IRQHandler+0xf0>)
 80011e2:	4a25      	ldr	r2, [pc, #148]	; (8001278 <HAL_FLASH_IRQHandler+0xf4>)
 80011e4:	611a      	str	r2, [r3, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80011e6:	4b25      	ldr	r3, [pc, #148]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	0018      	movs	r0, r3
 80011f0:	f000 f852 	bl	8001298 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if ((FLASH->SR & FLASH_SR_EOP) != 0x00U)
 80011f4:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <HAL_FLASH_IRQHandler+0xf0>)
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	2201      	movs	r2, #1
 80011fa:	4013      	ands	r3, r2
 80011fc:	d028      	beq.n	8001250 <HAL_FLASH_IRQHandler+0xcc>
  {
    /* Clear FLASH End of Operation pending bit */
    FLASH->SR = FLASH_SR_EOP;
 80011fe:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <HAL_FLASH_IRQHandler+0xf0>)
 8001200:	2201      	movs	r2, #1
 8001202:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d11a      	bne.n	8001242 <HAL_FLASH_IRQHandler+0xbe>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	1e5a      	subs	r2, r3, #1
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 8001214:	619a      	str	r2, [r3, #24]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0x00U)
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00d      	beq.n	800123a <HAL_FLASH_IRQHandler+0xb6>
      {
        /* Increment page number */
        pFlash.Page++;
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 8001226:	615a      	str	r2, [r3, #20]
        FLASH_PageErase(pFlash.Banks, pFlash.Page);
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	0019      	movs	r1, r3
 8001232:	0010      	movs	r0, r2
 8001234:	f000 f838 	bl	80012a8 <FLASH_PageErase>
 8001238:	e006      	b.n	8001248 <HAL_FLASH_IRQHandler+0xc4>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	e002      	b.n	8001248 <HAL_FLASH_IRQHandler+0xc4>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	0018      	movs	r0, r3
 800124c:	f000 f81c 	bl	8001288 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d108      	bne.n	800126a <HAL_FLASH_IRQHandler+0xe6>
  {
    /* Disable End of Operation and Error interrupts */
    FLASH->CR &= ~(FLASH_CR_EOPIE | FLASH_CR_ERRIE);
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_FLASH_IRQHandler+0xf0>)
 800125a:	695a      	ldr	r2, [r3, #20]
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_FLASH_IRQHandler+0xf0>)
 800125e:	4909      	ldr	r1, [pc, #36]	; (8001284 <HAL_FLASH_IRQHandler+0x100>)
 8001260:	400a      	ands	r2, r1
 8001262:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_FLASH_IRQHandler+0xf8>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
  }
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	40022000 	.word	0x40022000
 8001278:	000083fa 	.word	0x000083fa
 800127c:	2000025c 	.word	0x2000025c
 8001280:	00040001 	.word	0x00040001
 8001284:	fcffffff 	.word	0xfcffffff

08001288 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b002      	add	sp, #8
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b002      	add	sp, #8
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <FLASH_PageErase+0x2c>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <FLASH_PageErase+0x30>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	00da      	lsls	r2, r3, #3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	431a      	orrs	r2, r3
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <FLASH_PageErase+0x2c>)
 80012c6:	4905      	ldr	r1, [pc, #20]	; (80012dc <FLASH_PageErase+0x34>)
 80012c8:	430a      	orrs	r2, r1
 80012ca:	615a      	str	r2, [r3, #20]
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b004      	add	sp, #16
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40022000 	.word	0x40022000
 80012d8:	ffffe007 	.word	0xffffe007
 80012dc:	00010002 	.word	0x00010002

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ee:	e147      	b.n	8001580 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2101      	movs	r1, #1
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4091      	lsls	r1, r2
 80012fa:	000a      	movs	r2, r1
 80012fc:	4013      	ands	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d100      	bne.n	8001308 <HAL_GPIO_Init+0x28>
 8001306:	e138      	b.n	800157a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2203      	movs	r2, #3
 800130e:	4013      	ands	r3, r2
 8001310:	2b01      	cmp	r3, #1
 8001312:	d005      	beq.n	8001320 <HAL_GPIO_Init+0x40>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2203      	movs	r2, #3
 800131a:	4013      	ands	r3, r2
 800131c:	2b02      	cmp	r3, #2
 800131e:	d130      	bne.n	8001382 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	409a      	lsls	r2, r3
 800132e:	0013      	movs	r3, r2
 8001330:	43da      	mvns	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	409a      	lsls	r2, r3
 8001342:	0013      	movs	r3, r2
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001356:	2201      	movs	r2, #1
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	43da      	mvns	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	2201      	movs	r2, #1
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
 8001374:	0013      	movs	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2203      	movs	r2, #3
 8001388:	4013      	ands	r3, r2
 800138a:	2b03      	cmp	r3, #3
 800138c:	d017      	beq.n	80013be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	2203      	movs	r2, #3
 800139a:	409a      	lsls	r2, r3
 800139c:	0013      	movs	r3, r2
 800139e:	43da      	mvns	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	409a      	lsls	r2, r3
 80013b0:	0013      	movs	r3, r2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2203      	movs	r2, #3
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d123      	bne.n	8001412 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	08da      	lsrs	r2, r3, #3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3208      	adds	r2, #8
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	58d3      	ldr	r3, [r2, r3]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2207      	movs	r2, #7
 80013dc:	4013      	ands	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	409a      	lsls	r2, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	43da      	mvns	r2, r3
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2107      	movs	r1, #7
 80013f6:	400b      	ands	r3, r1
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	08da      	lsrs	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3208      	adds	r2, #8
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	6939      	ldr	r1, [r7, #16]
 8001410:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	409a      	lsls	r2, r3
 8001420:	0013      	movs	r3, r2
 8001422:	43da      	mvns	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2203      	movs	r2, #3
 8001430:	401a      	ands	r2, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	409a      	lsls	r2, r3
 8001438:	0013      	movs	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	23c0      	movs	r3, #192	; 0xc0
 800144c:	029b      	lsls	r3, r3, #10
 800144e:	4013      	ands	r3, r2
 8001450:	d100      	bne.n	8001454 <HAL_GPIO_Init+0x174>
 8001452:	e092      	b.n	800157a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001454:	4a50      	ldr	r2, [pc, #320]	; (8001598 <HAL_GPIO_Init+0x2b8>)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	089b      	lsrs	r3, r3, #2
 800145a:	3318      	adds	r3, #24
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	589b      	ldr	r3, [r3, r2]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2203      	movs	r2, #3
 8001466:	4013      	ands	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	220f      	movs	r2, #15
 800146c:	409a      	lsls	r2, r3
 800146e:	0013      	movs	r3, r2
 8001470:	43da      	mvns	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	23a0      	movs	r3, #160	; 0xa0
 800147c:	05db      	lsls	r3, r3, #23
 800147e:	429a      	cmp	r2, r3
 8001480:	d013      	beq.n	80014aa <HAL_GPIO_Init+0x1ca>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a45      	ldr	r2, [pc, #276]	; (800159c <HAL_GPIO_Init+0x2bc>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00d      	beq.n	80014a6 <HAL_GPIO_Init+0x1c6>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a44      	ldr	r2, [pc, #272]	; (80015a0 <HAL_GPIO_Init+0x2c0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d007      	beq.n	80014a2 <HAL_GPIO_Init+0x1c2>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a43      	ldr	r2, [pc, #268]	; (80015a4 <HAL_GPIO_Init+0x2c4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <HAL_GPIO_Init+0x1be>
 800149a:	2303      	movs	r3, #3
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x1cc>
 800149e:	2305      	movs	r3, #5
 80014a0:	e004      	b.n	80014ac <HAL_GPIO_Init+0x1cc>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e002      	b.n	80014ac <HAL_GPIO_Init+0x1cc>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_GPIO_Init+0x1cc>
 80014aa:	2300      	movs	r3, #0
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	2103      	movs	r1, #3
 80014b0:	400a      	ands	r2, r1
 80014b2:	00d2      	lsls	r2, r2, #3
 80014b4:	4093      	lsls	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80014bc:	4936      	ldr	r1, [pc, #216]	; (8001598 <HAL_GPIO_Init+0x2b8>)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	3318      	adds	r3, #24
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ca:	4b33      	ldr	r3, [pc, #204]	; (8001598 <HAL_GPIO_Init+0x2b8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	43da      	mvns	r2, r3
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	035b      	lsls	r3, r3, #13
 80014e2:	4013      	ands	r3, r2
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <HAL_GPIO_Init+0x2b8>)
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80014f4:	4b28      	ldr	r3, [pc, #160]	; (8001598 <HAL_GPIO_Init+0x2b8>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	43da      	mvns	r2, r3
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	039b      	lsls	r3, r3, #14
 800150c:	4013      	ands	r3, r2
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <HAL_GPIO_Init+0x2b8>)
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800151e:	4a1e      	ldr	r2, [pc, #120]	; (8001598 <HAL_GPIO_Init+0x2b8>)
 8001520:	2384      	movs	r3, #132	; 0x84
 8001522:	58d3      	ldr	r3, [r2, r3]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	43da      	mvns	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	029b      	lsls	r3, r3, #10
 8001538:	4013      	ands	r3, r2
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001544:	4914      	ldr	r1, [pc, #80]	; (8001598 <HAL_GPIO_Init+0x2b8>)
 8001546:	2284      	movs	r2, #132	; 0x84
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800154c:	4a12      	ldr	r2, [pc, #72]	; (8001598 <HAL_GPIO_Init+0x2b8>)
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	58d3      	ldr	r3, [r2, r3]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43da      	mvns	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	025b      	lsls	r3, r3, #9
 8001566:	4013      	ands	r3, r2
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001572:	4909      	ldr	r1, [pc, #36]	; (8001598 <HAL_GPIO_Init+0x2b8>)
 8001574:	2280      	movs	r2, #128	; 0x80
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	40da      	lsrs	r2, r3
 8001588:	1e13      	subs	r3, r2, #0
 800158a:	d000      	beq.n	800158e <HAL_GPIO_Init+0x2ae>
 800158c:	e6b0      	b.n	80012f0 <HAL_GPIO_Init+0x10>
  }
}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	46c0      	nop			; (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	b006      	add	sp, #24
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40021800 	.word	0x40021800
 800159c:	50000400 	.word	0x50000400
 80015a0:	50000800 	.word	0x50000800
 80015a4:	50000c00 	.word	0x50000c00

080015a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	0019      	movs	r1, r3
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	430a      	orrs	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d11f      	bne.n	800160c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	0013      	movs	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	189b      	adds	r3, r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4912      	ldr	r1, [pc, #72]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80015da:	0018      	movs	r0, r3
 80015dc:	f7fe fd90 	bl	8000100 <__udivsi3>
 80015e0:	0003      	movs	r3, r0
 80015e2:	3301      	adds	r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015e6:	e008      	b.n	80015fa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	e001      	b.n	80015fa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e009      	b.n	800160e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	401a      	ands	r2, r3
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	429a      	cmp	r2, r3
 800160a:	d0ed      	beq.n	80015e8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	0018      	movs	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	b004      	add	sp, #16
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	40007000 	.word	0x40007000
 800161c:	fffff9ff 	.word	0xfffff9ff
 8001620:	20000010 	.word	0x20000010
 8001624:	000f4240 	.word	0x000f4240

08001628 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <LL_RCC_GetAPB1Prescaler+0x14>)
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	23e0      	movs	r3, #224	; 0xe0
 8001632:	01db      	lsls	r3, r3, #7
 8001634:	4013      	ands	r3, r2
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000

08001640 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e2f3      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2201      	movs	r2, #1
 8001658:	4013      	ands	r3, r2
 800165a:	d100      	bne.n	800165e <HAL_RCC_OscConfig+0x1e>
 800165c:	e07c      	b.n	8001758 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165e:	4bc3      	ldr	r3, [pc, #780]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2238      	movs	r2, #56	; 0x38
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001668:	4bc0      	ldr	r3, [pc, #768]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2203      	movs	r2, #3
 800166e:	4013      	ands	r3, r2
 8001670:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b10      	cmp	r3, #16
 8001676:	d102      	bne.n	800167e <HAL_RCC_OscConfig+0x3e>
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	2b03      	cmp	r3, #3
 800167c:	d002      	beq.n	8001684 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	2b08      	cmp	r3, #8
 8001682:	d10b      	bne.n	800169c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	4bb9      	ldr	r3, [pc, #740]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	029b      	lsls	r3, r3, #10
 800168c:	4013      	ands	r3, r2
 800168e:	d062      	beq.n	8001756 <HAL_RCC_OscConfig+0x116>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d15e      	bne.n	8001756 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e2ce      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	025b      	lsls	r3, r3, #9
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d107      	bne.n	80016b8 <HAL_RCC_OscConfig+0x78>
 80016a8:	4bb0      	ldr	r3, [pc, #704]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4baf      	ldr	r3, [pc, #700]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	0249      	lsls	r1, r1, #9
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e020      	b.n	80016fa <HAL_RCC_OscConfig+0xba>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	23a0      	movs	r3, #160	; 0xa0
 80016be:	02db      	lsls	r3, r3, #11
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d10e      	bne.n	80016e2 <HAL_RCC_OscConfig+0xa2>
 80016c4:	4ba9      	ldr	r3, [pc, #676]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4ba8      	ldr	r3, [pc, #672]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	02c9      	lsls	r1, r1, #11
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	4ba6      	ldr	r3, [pc, #664]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4ba5      	ldr	r3, [pc, #660]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80016d8:	2180      	movs	r1, #128	; 0x80
 80016da:	0249      	lsls	r1, r1, #9
 80016dc:	430a      	orrs	r2, r1
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	e00b      	b.n	80016fa <HAL_RCC_OscConfig+0xba>
 80016e2:	4ba2      	ldr	r3, [pc, #648]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4ba1      	ldr	r3, [pc, #644]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80016e8:	49a1      	ldr	r1, [pc, #644]	; (8001970 <HAL_RCC_OscConfig+0x330>)
 80016ea:	400a      	ands	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	4b9f      	ldr	r3, [pc, #636]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4b9e      	ldr	r3, [pc, #632]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80016f4:	499f      	ldr	r1, [pc, #636]	; (8001974 <HAL_RCC_OscConfig+0x334>)
 80016f6:	400a      	ands	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d014      	beq.n	800172c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001702:	f7ff fb51 	bl	8000da8 <HAL_GetTick>
 8001706:	0003      	movs	r3, r0
 8001708:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff fb4c 	bl	8000da8 <HAL_GetTick>
 8001710:	0002      	movs	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	; 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e28d      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800171e:	4b93      	ldr	r3, [pc, #588]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	029b      	lsls	r3, r3, #10
 8001726:	4013      	ands	r3, r2
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0xcc>
 800172a:	e015      	b.n	8001758 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff fb3c 	bl	8000da8 <HAL_GetTick>
 8001730:	0003      	movs	r3, r0
 8001732:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001736:	f7ff fb37 	bl	8000da8 <HAL_GetTick>
 800173a:	0002      	movs	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b64      	cmp	r3, #100	; 0x64
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e278      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001748:	4b88      	ldr	r3, [pc, #544]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	029b      	lsls	r3, r3, #10
 8001750:	4013      	ands	r3, r2
 8001752:	d1f0      	bne.n	8001736 <HAL_RCC_OscConfig+0xf6>
 8001754:	e000      	b.n	8001758 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001756:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2202      	movs	r2, #2
 800175e:	4013      	ands	r3, r2
 8001760:	d100      	bne.n	8001764 <HAL_RCC_OscConfig+0x124>
 8001762:	e099      	b.n	8001898 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001764:	4b81      	ldr	r3, [pc, #516]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2238      	movs	r2, #56	; 0x38
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800176e:	4b7f      	ldr	r3, [pc, #508]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2203      	movs	r2, #3
 8001774:	4013      	ands	r3, r2
 8001776:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b10      	cmp	r3, #16
 800177c:	d102      	bne.n	8001784 <HAL_RCC_OscConfig+0x144>
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d002      	beq.n	800178a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d135      	bne.n	80017f6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800178a:	4b78      	ldr	r3, [pc, #480]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4013      	ands	r3, r2
 8001794:	d005      	beq.n	80017a2 <HAL_RCC_OscConfig+0x162>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e24b      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a2:	4b72      	ldr	r3, [pc, #456]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4a74      	ldr	r2, [pc, #464]	; (8001978 <HAL_RCC_OscConfig+0x338>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	0019      	movs	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	021a      	lsls	r2, r3, #8
 80017b2:	4b6e      	ldr	r3, [pc, #440]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80017b4:	430a      	orrs	r2, r1
 80017b6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d112      	bne.n	80017e4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017be:	4b6b      	ldr	r3, [pc, #428]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a6e      	ldr	r2, [pc, #440]	; (800197c <HAL_RCC_OscConfig+0x33c>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	0019      	movs	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	4b67      	ldr	r3, [pc, #412]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80017ce:	430a      	orrs	r2, r1
 80017d0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80017d2:	4b66      	ldr	r3, [pc, #408]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	0adb      	lsrs	r3, r3, #11
 80017d8:	2207      	movs	r2, #7
 80017da:	4013      	ands	r3, r2
 80017dc:	4a68      	ldr	r2, [pc, #416]	; (8001980 <HAL_RCC_OscConfig+0x340>)
 80017de:	40da      	lsrs	r2, r3
 80017e0:	4b68      	ldr	r3, [pc, #416]	; (8001984 <HAL_RCC_OscConfig+0x344>)
 80017e2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017e4:	4b68      	ldr	r3, [pc, #416]	; (8001988 <HAL_RCC_OscConfig+0x348>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff fa81 	bl	8000cf0 <HAL_InitTick>
 80017ee:	1e03      	subs	r3, r0, #0
 80017f0:	d051      	beq.n	8001896 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e221      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d030      	beq.n	8001860 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017fe:	4b5b      	ldr	r3, [pc, #364]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a5e      	ldr	r2, [pc, #376]	; (800197c <HAL_RCC_OscConfig+0x33c>)
 8001804:	4013      	ands	r3, r2
 8001806:	0019      	movs	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	4b57      	ldr	r3, [pc, #348]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 800180e:	430a      	orrs	r2, r1
 8001810:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001812:	4b56      	ldr	r3, [pc, #344]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4b55      	ldr	r3, [pc, #340]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 8001818:	2180      	movs	r1, #128	; 0x80
 800181a:	0049      	lsls	r1, r1, #1
 800181c:	430a      	orrs	r2, r1
 800181e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001820:	f7ff fac2 	bl	8000da8 <HAL_GetTick>
 8001824:	0003      	movs	r3, r0
 8001826:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182a:	f7ff fabd 	bl	8000da8 <HAL_GetTick>
 800182e:	0002      	movs	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e1fe      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800183c:	4b4b      	ldr	r3, [pc, #300]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4013      	ands	r3, r2
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001848:	4b48      	ldr	r3, [pc, #288]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a4a      	ldr	r2, [pc, #296]	; (8001978 <HAL_RCC_OscConfig+0x338>)
 800184e:	4013      	ands	r3, r2
 8001850:	0019      	movs	r1, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	021a      	lsls	r2, r3, #8
 8001858:	4b44      	ldr	r3, [pc, #272]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 800185a:	430a      	orrs	r2, r1
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	e01b      	b.n	8001898 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001860:	4b42      	ldr	r3, [pc, #264]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b41      	ldr	r3, [pc, #260]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 8001866:	4949      	ldr	r1, [pc, #292]	; (800198c <HAL_RCC_OscConfig+0x34c>)
 8001868:	400a      	ands	r2, r1
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff fa9c 	bl	8000da8 <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001876:	f7ff fa97 	bl	8000da8 <HAL_GetTick>
 800187a:	0002      	movs	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e1d8      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001888:	4b38      	ldr	r3, [pc, #224]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4013      	ands	r3, r2
 8001892:	d1f0      	bne.n	8001876 <HAL_RCC_OscConfig+0x236>
 8001894:	e000      	b.n	8001898 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001896:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2208      	movs	r2, #8
 800189e:	4013      	ands	r3, r2
 80018a0:	d047      	beq.n	8001932 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80018a2:	4b32      	ldr	r3, [pc, #200]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2238      	movs	r2, #56	; 0x38
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b18      	cmp	r3, #24
 80018ac:	d10a      	bne.n	80018c4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80018ae:	4b2f      	ldr	r3, [pc, #188]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80018b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b2:	2202      	movs	r2, #2
 80018b4:	4013      	ands	r3, r2
 80018b6:	d03c      	beq.n	8001932 <HAL_RCC_OscConfig+0x2f2>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d138      	bne.n	8001932 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e1ba      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d019      	beq.n	8001900 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80018ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018d0:	4b26      	ldr	r3, [pc, #152]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	430a      	orrs	r2, r1
 80018d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff fa66 	bl	8000da8 <HAL_GetTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e2:	f7ff fa61 	bl	8000da8 <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e1a2      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018f4:	4b1d      	ldr	r3, [pc, #116]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 80018f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f8:	2202      	movs	r2, #2
 80018fa:	4013      	ands	r3, r2
 80018fc:	d0f1      	beq.n	80018e2 <HAL_RCC_OscConfig+0x2a2>
 80018fe:	e018      	b.n	8001932 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 8001902:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 8001906:	2101      	movs	r1, #1
 8001908:	438a      	bics	r2, r1
 800190a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff fa4c 	bl	8000da8 <HAL_GetTick>
 8001910:	0003      	movs	r3, r0
 8001912:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001916:	f7ff fa47 	bl	8000da8 <HAL_GetTick>
 800191a:	0002      	movs	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e188      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 800192a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192c:	2202      	movs	r2, #2
 800192e:	4013      	ands	r3, r2
 8001930:	d1f1      	bne.n	8001916 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2204      	movs	r2, #4
 8001938:	4013      	ands	r3, r2
 800193a:	d100      	bne.n	800193e <HAL_RCC_OscConfig+0x2fe>
 800193c:	e0c6      	b.n	8001acc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193e:	231f      	movs	r3, #31
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2238      	movs	r2, #56	; 0x38
 800194c:	4013      	ands	r3, r2
 800194e:	2b20      	cmp	r3, #32
 8001950:	d11e      	bne.n	8001990 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_RCC_OscConfig+0x32c>)
 8001954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001956:	2202      	movs	r2, #2
 8001958:	4013      	ands	r3, r2
 800195a:	d100      	bne.n	800195e <HAL_RCC_OscConfig+0x31e>
 800195c:	e0b6      	b.n	8001acc <HAL_RCC_OscConfig+0x48c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d000      	beq.n	8001968 <HAL_RCC_OscConfig+0x328>
 8001966:	e0b1      	b.n	8001acc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e166      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
 800196c:	40021000 	.word	0x40021000
 8001970:	fffeffff 	.word	0xfffeffff
 8001974:	fffbffff 	.word	0xfffbffff
 8001978:	ffff80ff 	.word	0xffff80ff
 800197c:	ffffc7ff 	.word	0xffffc7ff
 8001980:	00f42400 	.word	0x00f42400
 8001984:	20000010 	.word	0x20000010
 8001988:	20000014 	.word	0x20000014
 800198c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001990:	4bac      	ldr	r3, [pc, #688]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	055b      	lsls	r3, r3, #21
 8001998:	4013      	ands	r3, r2
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_OscConfig+0x360>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x362>
 80019a0:	2300      	movs	r3, #0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d011      	beq.n	80019ca <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	4ba7      	ldr	r3, [pc, #668]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 80019a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019aa:	4ba6      	ldr	r3, [pc, #664]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 80019ac:	2180      	movs	r1, #128	; 0x80
 80019ae:	0549      	lsls	r1, r1, #21
 80019b0:	430a      	orrs	r2, r1
 80019b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80019b4:	4ba3      	ldr	r3, [pc, #652]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 80019b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	055b      	lsls	r3, r3, #21
 80019bc:	4013      	ands	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80019c2:	231f      	movs	r3, #31
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ca:	4b9f      	ldr	r3, [pc, #636]	; (8001c48 <HAL_RCC_OscConfig+0x608>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4013      	ands	r3, r2
 80019d4:	d11a      	bne.n	8001a0c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019d6:	4b9c      	ldr	r3, [pc, #624]	; (8001c48 <HAL_RCC_OscConfig+0x608>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4b9b      	ldr	r3, [pc, #620]	; (8001c48 <HAL_RCC_OscConfig+0x608>)
 80019dc:	2180      	movs	r1, #128	; 0x80
 80019de:	0049      	lsls	r1, r1, #1
 80019e0:	430a      	orrs	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80019e4:	f7ff f9e0 	bl	8000da8 <HAL_GetTick>
 80019e8:	0003      	movs	r3, r0
 80019ea:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ee:	f7ff f9db 	bl	8000da8 <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e11c      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a00:	4b91      	ldr	r3, [pc, #580]	; (8001c48 <HAL_RCC_OscConfig+0x608>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d106      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3e2>
 8001a14:	4b8b      	ldr	r3, [pc, #556]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001a16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a18:	4b8a      	ldr	r3, [pc, #552]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a20:	e01c      	b.n	8001a5c <HAL_RCC_OscConfig+0x41c>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x404>
 8001a2a:	4b86      	ldr	r3, [pc, #536]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001a2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a2e:	4b85      	ldr	r3, [pc, #532]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001a30:	2104      	movs	r1, #4
 8001a32:	430a      	orrs	r2, r1
 8001a34:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a36:	4b83      	ldr	r3, [pc, #524]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001a38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a3a:	4b82      	ldr	r3, [pc, #520]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0x41c>
 8001a44:	4b7f      	ldr	r3, [pc, #508]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001a46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a48:	4b7e      	ldr	r3, [pc, #504]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	438a      	bics	r2, r1
 8001a4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a50:	4b7c      	ldr	r3, [pc, #496]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001a52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a54:	4b7b      	ldr	r3, [pc, #492]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001a56:	2104      	movs	r1, #4
 8001a58:	438a      	bics	r2, r1
 8001a5a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d014      	beq.n	8001a8e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff f9a0 	bl	8000da8 <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a6c:	e009      	b.n	8001a82 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6e:	f7ff f99b 	bl	8000da8 <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	4a74      	ldr	r2, [pc, #464]	; (8001c4c <HAL_RCC_OscConfig+0x60c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e0db      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a82:	4b70      	ldr	r3, [pc, #448]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a86:	2202      	movs	r2, #2
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x42e>
 8001a8c:	e013      	b.n	8001ab6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8e:	f7ff f98b 	bl	8000da8 <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a96:	e009      	b.n	8001aac <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a98:	f7ff f986 	bl	8000da8 <HAL_GetTick>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	4a6a      	ldr	r2, [pc, #424]	; (8001c4c <HAL_RCC_OscConfig+0x60c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0c6      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aac:	4b65      	ldr	r3, [pc, #404]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001ab6:	231f      	movs	r3, #31
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d105      	bne.n	8001acc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ac0:	4b60      	ldr	r3, [pc, #384]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ac4:	4b5f      	ldr	r3, [pc, #380]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001ac6:	4962      	ldr	r1, [pc, #392]	; (8001c50 <HAL_RCC_OscConfig+0x610>)
 8001ac8:	400a      	ands	r2, r1
 8001aca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d100      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x496>
 8001ad4:	e0b0      	b.n	8001c38 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad6:	4b5b      	ldr	r3, [pc, #364]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2238      	movs	r2, #56	; 0x38
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b10      	cmp	r3, #16
 8001ae0:	d100      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x4a4>
 8001ae2:	e078      	b.n	8001bd6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d153      	bne.n	8001b94 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aec:	4b55      	ldr	r3, [pc, #340]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b54      	ldr	r3, [pc, #336]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001af2:	4958      	ldr	r1, [pc, #352]	; (8001c54 <HAL_RCC_OscConfig+0x614>)
 8001af4:	400a      	ands	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff f956 	bl	8000da8 <HAL_GetTick>
 8001afc:	0003      	movs	r3, r0
 8001afe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b02:	f7ff f951 	bl	8000da8 <HAL_GetTick>
 8001b06:	0002      	movs	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e092      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b14:	4b4b      	ldr	r3, [pc, #300]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	049b      	lsls	r3, r3, #18
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b20:	4b48      	ldr	r3, [pc, #288]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4a4c      	ldr	r2, [pc, #304]	; (8001c58 <HAL_RCC_OscConfig+0x618>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	0019      	movs	r1, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1a      	ldr	r2, [r3, #32]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	431a      	orrs	r2, r3
 8001b48:	4b3e      	ldr	r3, [pc, #248]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b4e:	4b3d      	ldr	r3, [pc, #244]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4b3c      	ldr	r3, [pc, #240]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	0449      	lsls	r1, r1, #17
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b5c:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	4b38      	ldr	r3, [pc, #224]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001b62:	2180      	movs	r1, #128	; 0x80
 8001b64:	0549      	lsls	r1, r1, #21
 8001b66:	430a      	orrs	r2, r1
 8001b68:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7ff f91d 	bl	8000da8 <HAL_GetTick>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff f918 	bl	8000da8 <HAL_GetTick>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e059      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b86:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	049b      	lsls	r3, r3, #18
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x534>
 8001b92:	e051      	b.n	8001c38 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b94:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001b9a:	492e      	ldr	r1, [pc, #184]	; (8001c54 <HAL_RCC_OscConfig+0x614>)
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff f902 	bl	8000da8 <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff f8fd 	bl	8000da8 <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e03e      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bbc:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	049b      	lsls	r3, r3, #18
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001bce:	4923      	ldr	r1, [pc, #140]	; (8001c5c <HAL_RCC_OscConfig+0x61c>)
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	e030      	b.n	8001c38 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e02b      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001be2:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <HAL_RCC_OscConfig+0x604>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	2203      	movs	r2, #3
 8001bec:	401a      	ands	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d11e      	bne.n	8001c34 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2270      	movs	r2, #112	; 0x70
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d117      	bne.n	8001c34 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	23fe      	movs	r3, #254	; 0xfe
 8001c08:	01db      	lsls	r3, r3, #7
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c10:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d10e      	bne.n	8001c34 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	23f8      	movs	r3, #248	; 0xf8
 8001c1a:	039b      	lsls	r3, r3, #14
 8001c1c:	401a      	ands	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d106      	bne.n	8001c34 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	0f5b      	lsrs	r3, r3, #29
 8001c2a:	075a      	lsls	r2, r3, #29
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e000      	b.n	8001c3a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b008      	add	sp, #32
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40007000 	.word	0x40007000
 8001c4c:	00001388 	.word	0x00001388
 8001c50:	efffffff 	.word	0xefffffff
 8001c54:	feffffff 	.word	0xfeffffff
 8001c58:	1fc1808c 	.word	0x1fc1808c
 8001c5c:	effefffc 	.word	0xeffefffc

08001c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0e9      	b.n	8001e48 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c74:	4b76      	ldr	r3, [pc, #472]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2207      	movs	r2, #7
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d91e      	bls.n	8001cc0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b73      	ldr	r3, [pc, #460]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2207      	movs	r2, #7
 8001c88:	4393      	bics	r3, r2
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	4b70      	ldr	r3, [pc, #448]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c94:	f7ff f888 	bl	8000da8 <HAL_GetTick>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c9c:	e009      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9e:	f7ff f883 	bl	8000da8 <HAL_GetTick>
 8001ca2:	0002      	movs	r2, r0
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	4a6a      	ldr	r2, [pc, #424]	; (8001e54 <HAL_RCC_ClockConfig+0x1f4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e0ca      	b.n	8001e48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cb2:	4b67      	ldr	r3, [pc, #412]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2207      	movs	r2, #7
 8001cb8:	4013      	ands	r3, r2
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d1ee      	bne.n	8001c9e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d015      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2204      	movs	r2, #4
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d006      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cd4:	4b60      	ldr	r3, [pc, #384]	; (8001e58 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	4b5f      	ldr	r3, [pc, #380]	; (8001e58 <HAL_RCC_ClockConfig+0x1f8>)
 8001cda:	21e0      	movs	r1, #224	; 0xe0
 8001cdc:	01c9      	lsls	r1, r1, #7
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce2:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	4a5d      	ldr	r2, [pc, #372]	; (8001e5c <HAL_RCC_ClockConfig+0x1fc>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	0019      	movs	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	4b59      	ldr	r3, [pc, #356]	; (8001e58 <HAL_RCC_ClockConfig+0x1f8>)
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d057      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d08:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HAL_RCC_ClockConfig+0x1f8>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	029b      	lsls	r3, r3, #10
 8001d10:	4013      	ands	r3, r2
 8001d12:	d12b      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e097      	b.n	8001e48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d107      	bne.n	8001d30 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d20:	4b4d      	ldr	r3, [pc, #308]	; (8001e58 <HAL_RCC_ClockConfig+0x1f8>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	049b      	lsls	r3, r3, #18
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d11f      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e08b      	b.n	8001e48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d107      	bne.n	8001d48 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d38:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <HAL_RCC_ClockConfig+0x1f8>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4013      	ands	r3, r2
 8001d42:	d113      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e07f      	b.n	8001e48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d106      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d50:	4b41      	ldr	r3, [pc, #260]	; (8001e58 <HAL_RCC_ClockConfig+0x1f8>)
 8001d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d54:	2202      	movs	r2, #2
 8001d56:	4013      	ands	r3, r2
 8001d58:	d108      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e074      	b.n	8001e48 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d5e:	4b3e      	ldr	r3, [pc, #248]	; (8001e58 <HAL_RCC_ClockConfig+0x1f8>)
 8001d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d62:	2202      	movs	r2, #2
 8001d64:	4013      	ands	r3, r2
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e06d      	b.n	8001e48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d6c:	4b3a      	ldr	r3, [pc, #232]	; (8001e58 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2207      	movs	r2, #7
 8001d72:	4393      	bics	r3, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <HAL_RCC_ClockConfig+0x1f8>)
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d80:	f7ff f812 	bl	8000da8 <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d88:	e009      	b.n	8001d9e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8a:	f7ff f80d 	bl	8000da8 <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	4a2f      	ldr	r2, [pc, #188]	; (8001e54 <HAL_RCC_ClockConfig+0x1f4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e054      	b.n	8001e48 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <HAL_RCC_ClockConfig+0x1f8>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2238      	movs	r2, #56	; 0x38
 8001da4:	401a      	ands	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d1ec      	bne.n	8001d8a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2207      	movs	r2, #7
 8001db6:	4013      	ands	r3, r2
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d21e      	bcs.n	8001dfc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2207      	movs	r2, #7
 8001dc4:	4393      	bics	r3, r2
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dd0:	f7fe ffea 	bl	8000da8 <HAL_GetTick>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dd8:	e009      	b.n	8001dee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dda:	f7fe ffe5 	bl	8000da8 <HAL_GetTick>
 8001dde:	0002      	movs	r2, r0
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <HAL_RCC_ClockConfig+0x1f4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e02c      	b.n	8001e48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dee:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2207      	movs	r2, #7
 8001df4:	4013      	ands	r3, r2
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d1ee      	bne.n	8001dda <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2204      	movs	r2, #4
 8001e02:	4013      	ands	r3, r2
 8001e04:	d009      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_RCC_ClockConfig+0x1f8>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <HAL_RCC_ClockConfig+0x200>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	0019      	movs	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_RCC_ClockConfig+0x1f8>)
 8001e16:	430a      	orrs	r2, r1
 8001e18:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e1a:	f000 f829 	bl	8001e70 <HAL_RCC_GetSysClockFreq>
 8001e1e:	0001      	movs	r1, r0
 8001e20:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_RCC_ClockConfig+0x1f8>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	220f      	movs	r2, #15
 8001e28:	401a      	ands	r2, r3
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <HAL_RCC_ClockConfig+0x204>)
 8001e2c:	0092      	lsls	r2, r2, #2
 8001e2e:	58d3      	ldr	r3, [r2, r3]
 8001e30:	221f      	movs	r2, #31
 8001e32:	4013      	ands	r3, r2
 8001e34:	000a      	movs	r2, r1
 8001e36:	40da      	lsrs	r2, r3
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_RCC_ClockConfig+0x208>)
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_RCC_ClockConfig+0x20c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	0018      	movs	r0, r3
 8001e42:	f7fe ff55 	bl	8000cf0 <HAL_InitTick>
 8001e46:	0003      	movs	r3, r0
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b004      	add	sp, #16
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40022000 	.word	0x40022000
 8001e54:	00001388 	.word	0x00001388
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	fffff0ff 	.word	0xfffff0ff
 8001e60:	ffff8fff 	.word	0xffff8fff
 8001e64:	0800472c 	.word	0x0800472c
 8001e68:	20000010 	.word	0x20000010
 8001e6c:	20000014 	.word	0x20000014

08001e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e76:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2238      	movs	r2, #56	; 0x38
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d10f      	bne.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e80:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0adb      	lsrs	r3, r3, #11
 8001e86:	2207      	movs	r2, #7
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	0013      	movs	r3, r2
 8001e90:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e92:	6839      	ldr	r1, [r7, #0]
 8001e94:	4835      	ldr	r0, [pc, #212]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e96:	f7fe f933 	bl	8000100 <__udivsi3>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	e05d      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ea0:	4b31      	ldr	r3, [pc, #196]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2238      	movs	r2, #56	; 0x38
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d102      	bne.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001eac:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x100>)
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	e054      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb2:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2238      	movs	r2, #56	; 0x38
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b10      	cmp	r3, #16
 8001ebc:	d138      	bne.n	8001f30 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ebe:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	2207      	movs	r2, #7
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d10d      	bne.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	4824      	ldr	r0, [pc, #144]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ee0:	f7fe f90e 	bl	8000100 <__udivsi3>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	227f      	movs	r2, #127	; 0x7f
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	434b      	muls	r3, r1
 8001ef4:	617b      	str	r3, [r7, #20]
        break;
 8001ef6:	e00d      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	481c      	ldr	r0, [pc, #112]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001efc:	f7fe f900 	bl	8000100 <__udivsi3>
 8001f00:	0003      	movs	r3, r0
 8001f02:	0019      	movs	r1, r3
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	0a1b      	lsrs	r3, r3, #8
 8001f0a:	227f      	movs	r2, #127	; 0x7f
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	434b      	muls	r3, r1
 8001f10:	617b      	str	r3, [r7, #20]
        break;
 8001f12:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0f5b      	lsrs	r3, r3, #29
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	3301      	adds	r3, #1
 8001f20:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	6978      	ldr	r0, [r7, #20]
 8001f26:	f7fe f8eb 	bl	8000100 <__udivsi3>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	e015      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f30:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2238      	movs	r2, #56	; 0x38
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b20      	cmp	r3, #32
 8001f3a:	d103      	bne.n	8001f44 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	e00b      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2238      	movs	r2, #56	; 0x38
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b18      	cmp	r3, #24
 8001f4e:	d103      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f50:	23fa      	movs	r3, #250	; 0xfa
 8001f52:	01db      	lsls	r3, r3, #7
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	e001      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f5c:	693b      	ldr	r3, [r7, #16]
}
 8001f5e:	0018      	movs	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	b006      	add	sp, #24
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	00f42400 	.word	0x00f42400
 8001f70:	007a1200 	.word	0x007a1200

08001f74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f78:	4b02      	ldr	r3, [pc, #8]	; (8001f84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	20000010 	.word	0x20000010

08001f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f88:	b5b0      	push	{r4, r5, r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f8c:	f7ff fff2 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001f90:	0004      	movs	r4, r0
 8001f92:	f7ff fb49 	bl	8001628 <LL_RCC_GetAPB1Prescaler>
 8001f96:	0003      	movs	r3, r0
 8001f98:	0b1a      	lsrs	r2, r3, #12
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f9c:	0092      	lsls	r2, r2, #2
 8001f9e:	58d3      	ldr	r3, [r2, r3]
 8001fa0:	221f      	movs	r2, #31
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	40dc      	lsrs	r4, r3
 8001fa6:	0023      	movs	r3, r4
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bdb0      	pop	{r4, r5, r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	0800476c 	.word	0x0800476c

08001fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001fbc:	2313      	movs	r3, #19
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fc4:	2312      	movs	r3, #18
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	029b      	lsls	r3, r3, #10
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d100      	bne.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001fd8:	e0a3      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fda:	2011      	movs	r0, #17
 8001fdc:	183b      	adds	r3, r7, r0
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe2:	4b86      	ldr	r3, [pc, #536]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	055b      	lsls	r3, r3, #21
 8001fea:	4013      	ands	r3, r2
 8001fec:	d110      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fee:	4b83      	ldr	r3, [pc, #524]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ff0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ff2:	4b82      	ldr	r3, [pc, #520]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	0549      	lsls	r1, r1, #21
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ffc:	4b7f      	ldr	r3, [pc, #508]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	055b      	lsls	r3, r3, #21
 8002004:	4013      	ands	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800200a:	183b      	adds	r3, r7, r0
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002010:	4b7b      	ldr	r3, [pc, #492]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b7a      	ldr	r3, [pc, #488]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002016:	2180      	movs	r1, #128	; 0x80
 8002018:	0049      	lsls	r1, r1, #1
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800201e:	f7fe fec3 	bl	8000da8 <HAL_GetTick>
 8002022:	0003      	movs	r3, r0
 8002024:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002026:	e00b      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002028:	f7fe febe 	bl	8000da8 <HAL_GetTick>
 800202c:	0002      	movs	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d904      	bls.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002036:	2313      	movs	r3, #19
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	2203      	movs	r2, #3
 800203c:	701a      	strb	r2, [r3, #0]
        break;
 800203e:	e005      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002040:	4b6f      	ldr	r3, [pc, #444]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4013      	ands	r3, r2
 800204a:	d0ed      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800204c:	2313      	movs	r3, #19
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d154      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002056:	4b69      	ldr	r3, [pc, #420]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002058:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800205a:	23c0      	movs	r3, #192	; 0xc0
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4013      	ands	r3, r2
 8002060:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d019      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	429a      	cmp	r2, r3
 8002070:	d014      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002072:	4b62      	ldr	r3, [pc, #392]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002076:	4a63      	ldr	r2, [pc, #396]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002078:	4013      	ands	r3, r2
 800207a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800207c:	4b5f      	ldr	r3, [pc, #380]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800207e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002080:	4b5e      	ldr	r3, [pc, #376]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002082:	2180      	movs	r1, #128	; 0x80
 8002084:	0249      	lsls	r1, r1, #9
 8002086:	430a      	orrs	r2, r1
 8002088:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800208a:	4b5c      	ldr	r3, [pc, #368]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800208c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800208e:	4b5b      	ldr	r3, [pc, #364]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002090:	495d      	ldr	r1, [pc, #372]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002092:	400a      	ands	r2, r1
 8002094:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002096:	4b59      	ldr	r3, [pc, #356]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2201      	movs	r2, #1
 80020a0:	4013      	ands	r3, r2
 80020a2:	d016      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7fe fe80 	bl	8000da8 <HAL_GetTick>
 80020a8:	0003      	movs	r3, r0
 80020aa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ac:	e00c      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7fe fe7b 	bl	8000da8 <HAL_GetTick>
 80020b2:	0002      	movs	r2, r0
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	4a54      	ldr	r2, [pc, #336]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d904      	bls.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80020be:	2313      	movs	r3, #19
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	2203      	movs	r2, #3
 80020c4:	701a      	strb	r2, [r3, #0]
            break;
 80020c6:	e004      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c8:	4b4c      	ldr	r3, [pc, #304]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020cc:	2202      	movs	r2, #2
 80020ce:	4013      	ands	r3, r2
 80020d0:	d0ed      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80020d2:	2313      	movs	r3, #19
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10a      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020dc:	4b47      	ldr	r3, [pc, #284]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e0:	4a48      	ldr	r2, [pc, #288]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	0019      	movs	r1, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699a      	ldr	r2, [r3, #24]
 80020ea:	4b44      	ldr	r3, [pc, #272]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020ec:	430a      	orrs	r2, r1
 80020ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80020f0:	e00c      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020f2:	2312      	movs	r3, #18
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	2213      	movs	r2, #19
 80020f8:	18ba      	adds	r2, r7, r2
 80020fa:	7812      	ldrb	r2, [r2, #0]
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	e005      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002100:	2312      	movs	r3, #18
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	2213      	movs	r2, #19
 8002106:	18ba      	adds	r2, r7, r2
 8002108:	7812      	ldrb	r2, [r2, #0]
 800210a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800210c:	2311      	movs	r3, #17
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d105      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002116:	4b39      	ldr	r3, [pc, #228]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800211a:	4b38      	ldr	r3, [pc, #224]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800211c:	493c      	ldr	r1, [pc, #240]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800211e:	400a      	ands	r2, r1
 8002120:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2201      	movs	r2, #1
 8002128:	4013      	ands	r3, r2
 800212a:	d009      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800212c:	4b33      	ldr	r3, [pc, #204]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800212e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002130:	2203      	movs	r2, #3
 8002132:	4393      	bics	r3, r2
 8002134:	0019      	movs	r1, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	4b30      	ldr	r3, [pc, #192]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800213c:	430a      	orrs	r2, r1
 800213e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2202      	movs	r2, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d009      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800214a:	4b2c      	ldr	r3, [pc, #176]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	220c      	movs	r2, #12
 8002150:	4393      	bics	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	4b28      	ldr	r3, [pc, #160]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800215a:	430a      	orrs	r2, r1
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2220      	movs	r2, #32
 8002164:	4013      	ands	r3, r2
 8002166:	d009      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002168:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	4a29      	ldr	r2, [pc, #164]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216e:	4013      	ands	r3, r2
 8002170:	0019      	movs	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002178:	430a      	orrs	r2, r1
 800217a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	01db      	lsls	r3, r3, #7
 8002184:	4013      	ands	r3, r2
 8002186:	d015      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800218a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	0899      	lsrs	r1, r3, #2
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002196:	430a      	orrs	r2, r1
 8002198:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	05db      	lsls	r3, r3, #23
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d106      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	0249      	lsls	r1, r1, #9
 80021b0:	430a      	orrs	r2, r1
 80021b2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	4013      	ands	r3, r2
 80021be:	d016      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80021c0:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c4:	4a14      	ldr	r2, [pc, #80]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	0019      	movs	r1, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021d0:	430a      	orrs	r2, r1
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	01db      	lsls	r3, r3, #7
 80021dc:	429a      	cmp	r2, r3
 80021de:	d106      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021e6:	2180      	movs	r1, #128	; 0x80
 80021e8:	0249      	lsls	r1, r1, #9
 80021ea:	430a      	orrs	r2, r1
 80021ec:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80021ee:	2312      	movs	r3, #18
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	781b      	ldrb	r3, [r3, #0]
}
 80021f4:	0018      	movs	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b006      	add	sp, #24
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	40007000 	.word	0x40007000
 8002204:	fffffcff 	.word	0xfffffcff
 8002208:	fffeffff 	.word	0xfffeffff
 800220c:	00001388 	.word	0x00001388
 8002210:	efffffff 	.word	0xefffffff
 8002214:	ffffcfff 	.word	0xffffcfff
 8002218:	ffff3fff 	.word	0xffff3fff

0800221c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e04a      	b.n	80022c4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	223d      	movs	r2, #61	; 0x3d
 8002232:	5c9b      	ldrb	r3, [r3, r2]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d107      	bne.n	800224a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	223c      	movs	r2, #60	; 0x3c
 800223e:	2100      	movs	r1, #0
 8002240:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	0018      	movs	r0, r3
 8002246:	f7fe fbe9 	bl	8000a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	223d      	movs	r2, #61	; 0x3d
 800224e:	2102      	movs	r1, #2
 8002250:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3304      	adds	r3, #4
 800225a:	0019      	movs	r1, r3
 800225c:	0010      	movs	r0, r2
 800225e:	f000 f959 	bl	8002514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2248      	movs	r2, #72	; 0x48
 8002266:	2101      	movs	r1, #1
 8002268:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	223e      	movs	r2, #62	; 0x3e
 800226e:	2101      	movs	r1, #1
 8002270:	5499      	strb	r1, [r3, r2]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	223f      	movs	r2, #63	; 0x3f
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2240      	movs	r2, #64	; 0x40
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2241      	movs	r2, #65	; 0x41
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2242      	movs	r2, #66	; 0x42
 800228e:	2101      	movs	r1, #1
 8002290:	5499      	strb	r1, [r3, r2]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2243      	movs	r2, #67	; 0x43
 8002296:	2101      	movs	r1, #1
 8002298:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2244      	movs	r2, #68	; 0x44
 800229e:	2101      	movs	r1, #1
 80022a0:	5499      	strb	r1, [r3, r2]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2245      	movs	r2, #69	; 0x45
 80022a6:	2101      	movs	r1, #1
 80022a8:	5499      	strb	r1, [r3, r2]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2246      	movs	r2, #70	; 0x46
 80022ae:	2101      	movs	r1, #1
 80022b0:	5499      	strb	r1, [r3, r2]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2247      	movs	r2, #71	; 0x47
 80022b6:	2101      	movs	r1, #1
 80022b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	223d      	movs	r2, #61	; 0x3d
 80022be:	2101      	movs	r1, #1
 80022c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b002      	add	sp, #8
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	223d      	movs	r2, #61	; 0x3d
 80022d8:	5c9b      	ldrb	r3, [r3, r2]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d001      	beq.n	80022e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e034      	b.n	800234e <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	223d      	movs	r2, #61	; 0x3d
 80022e8:	2102      	movs	r1, #2
 80022ea:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a19      	ldr	r2, [pc, #100]	; (8002358 <HAL_TIM_Base_Start+0x8c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d009      	beq.n	800230a <HAL_TIM_Base_Start+0x3e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a18      	ldr	r2, [pc, #96]	; (800235c <HAL_TIM_Base_Start+0x90>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d004      	beq.n	800230a <HAL_TIM_Base_Start+0x3e>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a16      	ldr	r2, [pc, #88]	; (8002360 <HAL_TIM_Base_Start+0x94>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d116      	bne.n	8002338 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <HAL_TIM_Base_Start+0x98>)
 8002312:	4013      	ands	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b06      	cmp	r3, #6
 800231a:	d016      	beq.n	800234a <HAL_TIM_Base_Start+0x7e>
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	025b      	lsls	r3, r3, #9
 8002322:	429a      	cmp	r2, r3
 8002324:	d011      	beq.n	800234a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2101      	movs	r1, #1
 8002332:	430a      	orrs	r2, r1
 8002334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002336:	e008      	b.n	800234a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2101      	movs	r1, #1
 8002344:	430a      	orrs	r2, r1
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	e000      	b.n	800234c <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	b004      	add	sp, #16
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	40012c00 	.word	0x40012c00
 800235c:	40000400 	.word	0x40000400
 8002360:	40014000 	.word	0x40014000
 8002364:	00010007 	.word	0x00010007

08002368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002372:	230f      	movs	r3, #15
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	223c      	movs	r2, #60	; 0x3c
 800237e:	5c9b      	ldrb	r3, [r3, r2]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_TIM_ConfigClockSource+0x20>
 8002384:	2302      	movs	r3, #2
 8002386:	e0bc      	b.n	8002502 <HAL_TIM_ConfigClockSource+0x19a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	223c      	movs	r2, #60	; 0x3c
 800238c:	2101      	movs	r1, #1
 800238e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	223d      	movs	r2, #61	; 0x3d
 8002394:	2102      	movs	r1, #2
 8002396:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4a5a      	ldr	r2, [pc, #360]	; (800250c <HAL_TIM_ConfigClockSource+0x1a4>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4a59      	ldr	r2, [pc, #356]	; (8002510 <HAL_TIM_ConfigClockSource+0x1a8>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2280      	movs	r2, #128	; 0x80
 80023be:	0192      	lsls	r2, r2, #6
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d040      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0xde>
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	0192      	lsls	r2, r2, #6
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d900      	bls.n	80023ce <HAL_TIM_ConfigClockSource+0x66>
 80023cc:	e088      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 80023ce:	2280      	movs	r2, #128	; 0x80
 80023d0:	0152      	lsls	r2, r2, #5
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d100      	bne.n	80023d8 <HAL_TIM_ConfigClockSource+0x70>
 80023d6:	e088      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x182>
 80023d8:	2280      	movs	r2, #128	; 0x80
 80023da:	0152      	lsls	r2, r2, #5
 80023dc:	4293      	cmp	r3, r2
 80023de:	d900      	bls.n	80023e2 <HAL_TIM_ConfigClockSource+0x7a>
 80023e0:	e07e      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 80023e2:	2b70      	cmp	r3, #112	; 0x70
 80023e4:	d018      	beq.n	8002418 <HAL_TIM_ConfigClockSource+0xb0>
 80023e6:	d900      	bls.n	80023ea <HAL_TIM_ConfigClockSource+0x82>
 80023e8:	e07a      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 80023ea:	2b60      	cmp	r3, #96	; 0x60
 80023ec:	d04f      	beq.n	800248e <HAL_TIM_ConfigClockSource+0x126>
 80023ee:	d900      	bls.n	80023f2 <HAL_TIM_ConfigClockSource+0x8a>
 80023f0:	e076      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 80023f2:	2b50      	cmp	r3, #80	; 0x50
 80023f4:	d03b      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x106>
 80023f6:	d900      	bls.n	80023fa <HAL_TIM_ConfigClockSource+0x92>
 80023f8:	e072      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 80023fa:	2b40      	cmp	r3, #64	; 0x40
 80023fc:	d057      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x146>
 80023fe:	d900      	bls.n	8002402 <HAL_TIM_ConfigClockSource+0x9a>
 8002400:	e06e      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 8002402:	2b30      	cmp	r3, #48	; 0x30
 8002404:	d063      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x166>
 8002406:	d86b      	bhi.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 8002408:	2b20      	cmp	r3, #32
 800240a:	d060      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x166>
 800240c:	d868      	bhi.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 800240e:	2b00      	cmp	r3, #0
 8002410:	d05d      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x166>
 8002412:	2b10      	cmp	r3, #16
 8002414:	d05b      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x166>
 8002416:	e063      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6899      	ldr	r1, [r3, #8]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f000 f966 	bl	80026f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2277      	movs	r2, #119	; 0x77
 8002438:	4313      	orrs	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	609a      	str	r2, [r3, #8]
      break;
 8002444:	e052      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6899      	ldr	r1, [r3, #8]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f000 f94f 	bl	80026f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2180      	movs	r1, #128	; 0x80
 8002466:	01c9      	lsls	r1, r1, #7
 8002468:	430a      	orrs	r2, r1
 800246a:	609a      	str	r2, [r3, #8]
      break;
 800246c:	e03e      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6859      	ldr	r1, [r3, #4]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	001a      	movs	r2, r3
 800247c:	f000 f8c0 	bl	8002600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2150      	movs	r1, #80	; 0x50
 8002486:	0018      	movs	r0, r3
 8002488:	f000 f91a 	bl	80026c0 <TIM_ITRx_SetConfig>
      break;
 800248c:	e02e      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6859      	ldr	r1, [r3, #4]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	001a      	movs	r2, r3
 800249c:	f000 f8de 	bl	800265c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2160      	movs	r1, #96	; 0x60
 80024a6:	0018      	movs	r0, r3
 80024a8:	f000 f90a 	bl	80026c0 <TIM_ITRx_SetConfig>
      break;
 80024ac:	e01e      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6859      	ldr	r1, [r3, #4]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	001a      	movs	r2, r3
 80024bc:	f000 f8a0 	bl	8002600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2140      	movs	r1, #64	; 0x40
 80024c6:	0018      	movs	r0, r3
 80024c8:	f000 f8fa 	bl	80026c0 <TIM_ITRx_SetConfig>
      break;
 80024cc:	e00e      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	0019      	movs	r1, r3
 80024d8:	0010      	movs	r0, r2
 80024da:	f000 f8f1 	bl	80026c0 <TIM_ITRx_SetConfig>
      break;
 80024de:	e005      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80024e0:	230f      	movs	r3, #15
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
      break;
 80024e8:	e000      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>
      break;
 80024ea:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	223d      	movs	r2, #61	; 0x3d
 80024f0:	2101      	movs	r1, #1
 80024f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	223c      	movs	r2, #60	; 0x3c
 80024f8:	2100      	movs	r1, #0
 80024fa:	5499      	strb	r1, [r3, r2]

  return status;
 80024fc:	230f      	movs	r3, #15
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	781b      	ldrb	r3, [r3, #0]
}
 8002502:	0018      	movs	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	b004      	add	sp, #16
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	ffceff88 	.word	0xffceff88
 8002510:	ffff00ff 	.word	0xffff00ff

08002514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a2f      	ldr	r2, [pc, #188]	; (80025e4 <TIM_Base_SetConfig+0xd0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d003      	beq.n	8002534 <TIM_Base_SetConfig+0x20>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a2e      	ldr	r2, [pc, #184]	; (80025e8 <TIM_Base_SetConfig+0xd4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d108      	bne.n	8002546 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2270      	movs	r2, #112	; 0x70
 8002538:	4393      	bics	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a26      	ldr	r2, [pc, #152]	; (80025e4 <TIM_Base_SetConfig+0xd0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d013      	beq.n	8002576 <TIM_Base_SetConfig+0x62>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a25      	ldr	r2, [pc, #148]	; (80025e8 <TIM_Base_SetConfig+0xd4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00f      	beq.n	8002576 <TIM_Base_SetConfig+0x62>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a24      	ldr	r2, [pc, #144]	; (80025ec <TIM_Base_SetConfig+0xd8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d00b      	beq.n	8002576 <TIM_Base_SetConfig+0x62>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a23      	ldr	r2, [pc, #140]	; (80025f0 <TIM_Base_SetConfig+0xdc>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d007      	beq.n	8002576 <TIM_Base_SetConfig+0x62>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a22      	ldr	r2, [pc, #136]	; (80025f4 <TIM_Base_SetConfig+0xe0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d003      	beq.n	8002576 <TIM_Base_SetConfig+0x62>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a21      	ldr	r2, [pc, #132]	; (80025f8 <TIM_Base_SetConfig+0xe4>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d108      	bne.n	8002588 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4a20      	ldr	r2, [pc, #128]	; (80025fc <TIM_Base_SetConfig+0xe8>)
 800257a:	4013      	ands	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	4393      	bics	r3, r2
 800258e:	001a      	movs	r2, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <TIM_Base_SetConfig+0xd0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00b      	beq.n	80025ce <TIM_Base_SetConfig+0xba>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a0d      	ldr	r2, [pc, #52]	; (80025f0 <TIM_Base_SetConfig+0xdc>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d007      	beq.n	80025ce <TIM_Base_SetConfig+0xba>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <TIM_Base_SetConfig+0xe0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d003      	beq.n	80025ce <TIM_Base_SetConfig+0xba>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <TIM_Base_SetConfig+0xe4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d103      	bne.n	80025d6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	615a      	str	r2, [r3, #20]
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	b004      	add	sp, #16
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40012c00 	.word	0x40012c00
 80025e8:	40000400 	.word	0x40000400
 80025ec:	40002000 	.word	0x40002000
 80025f0:	40014000 	.word	0x40014000
 80025f4:	40014400 	.word	0x40014400
 80025f8:	40014800 	.word	0x40014800
 80025fc:	fffffcff 	.word	0xfffffcff

08002600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	2201      	movs	r2, #1
 8002618:	4393      	bics	r3, r2
 800261a:	001a      	movs	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	22f0      	movs	r2, #240	; 0xf0
 800262a:	4393      	bics	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	220a      	movs	r2, #10
 800263c:	4393      	bics	r3, r2
 800263e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	621a      	str	r2, [r3, #32]
}
 8002654:	46c0      	nop			; (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	b006      	add	sp, #24
 800265a:	bd80      	pop	{r7, pc}

0800265c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	2210      	movs	r2, #16
 800266e:	4393      	bics	r3, r2
 8002670:	001a      	movs	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	4a0d      	ldr	r2, [pc, #52]	; (80026bc <TIM_TI2_ConfigInputStage+0x60>)
 8002686:	4013      	ands	r3, r2
 8002688:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	031b      	lsls	r3, r3, #12
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	22a0      	movs	r2, #160	; 0xa0
 8002698:	4393      	bics	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	621a      	str	r2, [r3, #32]
}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b006      	add	sp, #24
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	ffff0fff 	.word	0xffff0fff

080026c0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4a08      	ldr	r2, [pc, #32]	; (80026f4 <TIM_ITRx_SetConfig+0x34>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	2207      	movs	r2, #7
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	609a      	str	r2, [r3, #8]
}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b004      	add	sp, #16
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	ffcfff8f 	.word	0xffcfff8f

080026f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	4a09      	ldr	r2, [pc, #36]	; (8002734 <TIM_ETR_SetConfig+0x3c>)
 8002710:	4013      	ands	r3, r2
 8002712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	021a      	lsls	r2, r3, #8
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	431a      	orrs	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4313      	orrs	r3, r2
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	609a      	str	r2, [r3, #8]
}
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	b006      	add	sp, #24
 8002732:	bd80      	pop	{r7, pc}
 8002734:	ffff00ff 	.word	0xffff00ff

08002738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	223c      	movs	r2, #60	; 0x3c
 8002746:	5c9b      	ldrb	r3, [r3, r2]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800274c:	2302      	movs	r3, #2
 800274e:	e04f      	b.n	80027f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	223c      	movs	r2, #60	; 0x3c
 8002754:	2101      	movs	r1, #1
 8002756:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	223d      	movs	r2, #61	; 0x3d
 800275c:	2102      	movs	r1, #2
 800275e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a20      	ldr	r2, [pc, #128]	; (80027f8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d108      	bne.n	800278c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4a1f      	ldr	r2, [pc, #124]	; (80027fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800277e:	4013      	ands	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2270      	movs	r2, #112	; 0x70
 8002790:	4393      	bics	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a13      	ldr	r2, [pc, #76]	; (80027f8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d009      	beq.n	80027c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a12      	ldr	r2, [pc, #72]	; (8002800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d004      	beq.n	80027c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a11      	ldr	r2, [pc, #68]	; (8002804 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d10c      	bne.n	80027de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	4393      	bics	r3, r2
 80027ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	223d      	movs	r2, #61	; 0x3d
 80027e2:	2101      	movs	r1, #1
 80027e4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	223c      	movs	r2, #60	; 0x3c
 80027ea:	2100      	movs	r1, #0
 80027ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	0018      	movs	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b004      	add	sp, #16
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40012c00 	.word	0x40012c00
 80027fc:	ff0fffff 	.word	0xff0fffff
 8002800:	40000400 	.word	0x40000400
 8002804:	40014000 	.word	0x40014000

08002808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e046      	b.n	80028a8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2288      	movs	r2, #136	; 0x88
 800281e:	589b      	ldr	r3, [r3, r2]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2284      	movs	r2, #132	; 0x84
 8002828:	2100      	movs	r1, #0
 800282a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	0018      	movs	r0, r3
 8002830:	f7fe f912 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2288      	movs	r2, #136	; 0x88
 8002838:	2124      	movs	r1, #36	; 0x24
 800283a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2101      	movs	r1, #1
 8002848:	438a      	bics	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	0018      	movs	r0, r3
 8002850:	f000 fc66 	bl	8003120 <UART_SetConfig>
 8002854:	0003      	movs	r3, r0
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e024      	b.n	80028a8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	0018      	movs	r0, r3
 800286a:	f000 fdfd 	bl	8003468 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	490d      	ldr	r1, [pc, #52]	; (80028b0 <HAL_UART_Init+0xa8>)
 800287a:	400a      	ands	r2, r1
 800287c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	212a      	movs	r1, #42	; 0x2a
 800288a:	438a      	bics	r2, r1
 800288c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2101      	movs	r1, #1
 800289a:	430a      	orrs	r2, r1
 800289c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f000 fe95 	bl	80035d0 <UART_CheckIdleState>
 80028a6:	0003      	movs	r3, r0
}
 80028a8:	0018      	movs	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b002      	add	sp, #8
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	ffffb7ff 	.word	0xffffb7ff

080028b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	1dbb      	adds	r3, r7, #6
 80028c2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2288      	movs	r2, #136	; 0x88
 80028c8:	589b      	ldr	r3, [r3, r2]
 80028ca:	2b20      	cmp	r3, #32
 80028cc:	d000      	beq.n	80028d0 <HAL_UART_Transmit+0x1c>
 80028ce:	e088      	b.n	80029e2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_UART_Transmit+0x2a>
 80028d6:	1dbb      	adds	r3, r7, #6
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e080      	b.n	80029e4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	015b      	lsls	r3, r3, #5
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d109      	bne.n	8002902 <HAL_UART_Transmit+0x4e>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d105      	bne.n	8002902 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2201      	movs	r2, #1
 80028fa:	4013      	ands	r3, r2
 80028fc:	d001      	beq.n	8002902 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e070      	b.n	80029e4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2290      	movs	r2, #144	; 0x90
 8002906:	2100      	movs	r1, #0
 8002908:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2288      	movs	r2, #136	; 0x88
 800290e:	2121      	movs	r1, #33	; 0x21
 8002910:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002912:	f7fe fa49 	bl	8000da8 <HAL_GetTick>
 8002916:	0003      	movs	r3, r0
 8002918:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1dba      	adds	r2, r7, #6
 800291e:	2154      	movs	r1, #84	; 0x54
 8002920:	8812      	ldrh	r2, [r2, #0]
 8002922:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1dba      	adds	r2, r7, #6
 8002928:	2156      	movs	r1, #86	; 0x56
 800292a:	8812      	ldrh	r2, [r2, #0]
 800292c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	015b      	lsls	r3, r3, #5
 8002936:	429a      	cmp	r2, r3
 8002938:	d108      	bne.n	800294c <HAL_UART_Transmit+0x98>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d104      	bne.n	800294c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	e003      	b.n	8002954 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002950:	2300      	movs	r3, #0
 8002952:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002954:	e02c      	b.n	80029b0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	0013      	movs	r3, r2
 8002960:	2200      	movs	r2, #0
 8002962:	2180      	movs	r1, #128	; 0x80
 8002964:	f000 fe82 	bl	800366c <UART_WaitOnFlagUntilTimeout>
 8002968:	1e03      	subs	r3, r0, #0
 800296a:	d001      	beq.n	8002970 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e039      	b.n	80029e4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10b      	bne.n	800298e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	001a      	movs	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	05d2      	lsls	r2, r2, #23
 8002982:	0dd2      	lsrs	r2, r2, #23
 8002984:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	3302      	adds	r3, #2
 800298a:	61bb      	str	r3, [r7, #24]
 800298c:	e007      	b.n	800299e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	781a      	ldrb	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	3301      	adds	r3, #1
 800299c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2256      	movs	r2, #86	; 0x56
 80029a2:	5a9b      	ldrh	r3, [r3, r2]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b299      	uxth	r1, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2256      	movs	r2, #86	; 0x56
 80029ae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2256      	movs	r2, #86	; 0x56
 80029b4:	5a9b      	ldrh	r3, [r3, r2]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1cc      	bne.n	8002956 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	0013      	movs	r3, r2
 80029c6:	2200      	movs	r2, #0
 80029c8:	2140      	movs	r1, #64	; 0x40
 80029ca:	f000 fe4f 	bl	800366c <UART_WaitOnFlagUntilTimeout>
 80029ce:	1e03      	subs	r3, r0, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e006      	b.n	80029e4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2288      	movs	r2, #136	; 0x88
 80029da:	2120      	movs	r1, #32
 80029dc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
  }
}
 80029e4:	0018      	movs	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b008      	add	sp, #32
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	1dbb      	adds	r3, r7, #6
 80029f8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	228c      	movs	r2, #140	; 0x8c
 80029fe:	589b      	ldr	r3, [r3, r2]
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	d145      	bne.n	8002a90 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_UART_Receive_IT+0x26>
 8002a0a:	1dbb      	adds	r3, r7, #6
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e03d      	b.n	8002a92 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	015b      	lsls	r3, r3, #5
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d109      	bne.n	8002a36 <HAL_UART_Receive_IT+0x4a>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d105      	bne.n	8002a36 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d001      	beq.n	8002a36 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e02d      	b.n	8002a92 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	041b      	lsls	r3, r3, #16
 8002a46:	4013      	ands	r3, r2
 8002a48:	d019      	beq.n	8002a7e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a4e:	613b      	str	r3, [r7, #16]
  return(result);
 8002a50:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	2301      	movs	r3, #1
 8002a56:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f383 8810 	msr	PRIMASK, r3
}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2180      	movs	r1, #128	; 0x80
 8002a6c:	04c9      	lsls	r1, r1, #19
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	f383 8810 	msr	PRIMASK, r3
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a7e:	1dbb      	adds	r3, r7, #6
 8002a80:	881a      	ldrh	r2, [r3, #0]
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	0018      	movs	r0, r3
 8002a88:	f000 feb8 	bl	80037fc <UART_Start_Receive_IT>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	e000      	b.n	8002a92 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002a90:	2302      	movs	r3, #2
  }
}
 8002a92:	0018      	movs	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b008      	add	sp, #32
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a9c:	b5b0      	push	{r4, r5, r7, lr}
 8002a9e:	b0aa      	sub	sp, #168	; 0xa8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	22a4      	movs	r2, #164	; 0xa4
 8002aac:	18b9      	adds	r1, r7, r2
 8002aae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	20a0      	movs	r0, #160	; 0xa0
 8002ab8:	1839      	adds	r1, r7, r0
 8002aba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	249c      	movs	r4, #156	; 0x9c
 8002ac4:	1939      	adds	r1, r7, r4
 8002ac6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ac8:	0011      	movs	r1, r2
 8002aca:	18bb      	adds	r3, r7, r2
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4aa2      	ldr	r2, [pc, #648]	; (8002d58 <HAL_UART_IRQHandler+0x2bc>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2298      	movs	r2, #152	; 0x98
 8002ad4:	18bd      	adds	r5, r7, r2
 8002ad6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002ad8:	18bb      	adds	r3, r7, r2
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d11a      	bne.n	8002b16 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d015      	beq.n	8002b16 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002aea:	183b      	adds	r3, r7, r0
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2220      	movs	r2, #32
 8002af0:	4013      	ands	r3, r2
 8002af2:	d105      	bne.n	8002b00 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002af4:	193b      	adds	r3, r7, r4
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	055b      	lsls	r3, r3, #21
 8002afc:	4013      	ands	r3, r2
 8002afe:	d00a      	beq.n	8002b16 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d100      	bne.n	8002b0a <HAL_UART_IRQHandler+0x6e>
 8002b08:	e2dc      	b.n	80030c4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	0010      	movs	r0, r2
 8002b12:	4798      	blx	r3
      }
      return;
 8002b14:	e2d6      	b.n	80030c4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b16:	2398      	movs	r3, #152	; 0x98
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d100      	bne.n	8002b22 <HAL_UART_IRQHandler+0x86>
 8002b20:	e122      	b.n	8002d68 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002b22:	239c      	movs	r3, #156	; 0x9c
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a8c      	ldr	r2, [pc, #560]	; (8002d5c <HAL_UART_IRQHandler+0x2c0>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d106      	bne.n	8002b3c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002b2e:	23a0      	movs	r3, #160	; 0xa0
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a8a      	ldr	r2, [pc, #552]	; (8002d60 <HAL_UART_IRQHandler+0x2c4>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	d100      	bne.n	8002b3c <HAL_UART_IRQHandler+0xa0>
 8002b3a:	e115      	b.n	8002d68 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b3c:	23a4      	movs	r3, #164	; 0xa4
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2201      	movs	r2, #1
 8002b44:	4013      	ands	r3, r2
 8002b46:	d012      	beq.n	8002b6e <HAL_UART_IRQHandler+0xd2>
 8002b48:	23a0      	movs	r3, #160	; 0xa0
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4013      	ands	r3, r2
 8002b54:	d00b      	beq.n	8002b6e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2290      	movs	r2, #144	; 0x90
 8002b62:	589b      	ldr	r3, [r3, r2]
 8002b64:	2201      	movs	r2, #1
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2190      	movs	r1, #144	; 0x90
 8002b6c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b6e:	23a4      	movs	r3, #164	; 0xa4
 8002b70:	18fb      	adds	r3, r7, r3
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2202      	movs	r2, #2
 8002b76:	4013      	ands	r3, r2
 8002b78:	d011      	beq.n	8002b9e <HAL_UART_IRQHandler+0x102>
 8002b7a:	239c      	movs	r3, #156	; 0x9c
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2201      	movs	r2, #1
 8002b82:	4013      	ands	r3, r2
 8002b84:	d00b      	beq.n	8002b9e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2290      	movs	r2, #144	; 0x90
 8002b92:	589b      	ldr	r3, [r3, r2]
 8002b94:	2204      	movs	r2, #4
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2190      	movs	r1, #144	; 0x90
 8002b9c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b9e:	23a4      	movs	r3, #164	; 0xa4
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d011      	beq.n	8002bce <HAL_UART_IRQHandler+0x132>
 8002baa:	239c      	movs	r3, #156	; 0x9c
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d00b      	beq.n	8002bce <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2290      	movs	r2, #144	; 0x90
 8002bc2:	589b      	ldr	r3, [r3, r2]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2190      	movs	r1, #144	; 0x90
 8002bcc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002bce:	23a4      	movs	r3, #164	; 0xa4
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2208      	movs	r2, #8
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d017      	beq.n	8002c0a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002bda:	23a0      	movs	r3, #160	; 0xa0
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2220      	movs	r2, #32
 8002be2:	4013      	ands	r3, r2
 8002be4:	d105      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002be6:	239c      	movs	r3, #156	; 0x9c
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a5b      	ldr	r2, [pc, #364]	; (8002d5c <HAL_UART_IRQHandler+0x2c0>)
 8002bee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002bf0:	d00b      	beq.n	8002c0a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2208      	movs	r2, #8
 8002bf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2290      	movs	r2, #144	; 0x90
 8002bfe:	589b      	ldr	r3, [r3, r2]
 8002c00:	2208      	movs	r2, #8
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2190      	movs	r1, #144	; 0x90
 8002c08:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c0a:	23a4      	movs	r3, #164	; 0xa4
 8002c0c:	18fb      	adds	r3, r7, r3
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	4013      	ands	r3, r2
 8002c16:	d013      	beq.n	8002c40 <HAL_UART_IRQHandler+0x1a4>
 8002c18:	23a0      	movs	r3, #160	; 0xa0
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	04db      	lsls	r3, r3, #19
 8002c22:	4013      	ands	r3, r2
 8002c24:	d00c      	beq.n	8002c40 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2280      	movs	r2, #128	; 0x80
 8002c2c:	0112      	lsls	r2, r2, #4
 8002c2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2290      	movs	r2, #144	; 0x90
 8002c34:	589b      	ldr	r3, [r3, r2]
 8002c36:	2220      	movs	r2, #32
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2190      	movs	r1, #144	; 0x90
 8002c3e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2290      	movs	r2, #144	; 0x90
 8002c44:	589b      	ldr	r3, [r3, r2]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d100      	bne.n	8002c4c <HAL_UART_IRQHandler+0x1b0>
 8002c4a:	e23d      	b.n	80030c8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c4c:	23a4      	movs	r3, #164	; 0xa4
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2220      	movs	r2, #32
 8002c54:	4013      	ands	r3, r2
 8002c56:	d015      	beq.n	8002c84 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c58:	23a0      	movs	r3, #160	; 0xa0
 8002c5a:	18fb      	adds	r3, r7, r3
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	4013      	ands	r3, r2
 8002c62:	d106      	bne.n	8002c72 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c64:	239c      	movs	r3, #156	; 0x9c
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	2380      	movs	r3, #128	; 0x80
 8002c6c:	055b      	lsls	r3, r3, #21
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d008      	beq.n	8002c84 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	0010      	movs	r0, r2
 8002c82:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2290      	movs	r2, #144	; 0x90
 8002c88:	589b      	ldr	r3, [r3, r2]
 8002c8a:	2194      	movs	r1, #148	; 0x94
 8002c8c:	187a      	adds	r2, r7, r1
 8002c8e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2240      	movs	r2, #64	; 0x40
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b40      	cmp	r3, #64	; 0x40
 8002c9c:	d004      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c9e:	187b      	adds	r3, r7, r1
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2228      	movs	r2, #40	; 0x28
 8002ca4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ca6:	d04c      	beq.n	8002d42 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	0018      	movs	r0, r3
 8002cac:	f000 feca 	bl	8003a44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2240      	movs	r2, #64	; 0x40
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b40      	cmp	r3, #64	; 0x40
 8002cbc:	d13c      	bne.n	8002d38 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8002cc2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002cc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc6:	2090      	movs	r0, #144	; 0x90
 8002cc8:	183a      	adds	r2, r7, r0
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	2301      	movs	r3, #1
 8002cce:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cd2:	f383 8810 	msr	PRIMASK, r3
}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2140      	movs	r1, #64	; 0x40
 8002ce4:	438a      	bics	r2, r1
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	183b      	adds	r3, r7, r0
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cf0:	f383 8810 	msr	PRIMASK, r3
}
 8002cf4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2280      	movs	r2, #128	; 0x80
 8002cfa:	589b      	ldr	r3, [r3, r2]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d016      	beq.n	8002d2e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2280      	movs	r2, #128	; 0x80
 8002d04:	589b      	ldr	r3, [r3, r2]
 8002d06:	4a17      	ldr	r2, [pc, #92]	; (8002d64 <HAL_UART_IRQHandler+0x2c8>)
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2280      	movs	r2, #128	; 0x80
 8002d0e:	589b      	ldr	r3, [r3, r2]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7fe f9cd 	bl	80010b0 <HAL_DMA_Abort_IT>
 8002d16:	1e03      	subs	r3, r0, #0
 8002d18:	d01c      	beq.n	8002d54 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2280      	movs	r2, #128	; 0x80
 8002d1e:	589b      	ldr	r3, [r3, r2]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	5852      	ldr	r2, [r2, r1]
 8002d28:	0010      	movs	r0, r2
 8002d2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d2c:	e012      	b.n	8002d54 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	0018      	movs	r0, r3
 8002d32:	f000 f9e1 	bl	80030f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d36:	e00d      	b.n	8002d54 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f000 f9dc 	bl	80030f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d40:	e008      	b.n	8002d54 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	0018      	movs	r0, r3
 8002d46:	f000 f9d7 	bl	80030f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2290      	movs	r2, #144	; 0x90
 8002d4e:	2100      	movs	r1, #0
 8002d50:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002d52:	e1b9      	b.n	80030c8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d54:	46c0      	nop			; (mov r8, r8)
    return;
 8002d56:	e1b7      	b.n	80030c8 <HAL_UART_IRQHandler+0x62c>
 8002d58:	0000080f 	.word	0x0000080f
 8002d5c:	10000001 	.word	0x10000001
 8002d60:	04000120 	.word	0x04000120
 8002d64:	08003b11 	.word	0x08003b11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d000      	beq.n	8002d72 <HAL_UART_IRQHandler+0x2d6>
 8002d70:	e13e      	b.n	8002ff0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d72:	23a4      	movs	r3, #164	; 0xa4
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2210      	movs	r2, #16
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d100      	bne.n	8002d80 <HAL_UART_IRQHandler+0x2e4>
 8002d7e:	e137      	b.n	8002ff0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d80:	23a0      	movs	r3, #160	; 0xa0
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2210      	movs	r2, #16
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d100      	bne.n	8002d8e <HAL_UART_IRQHandler+0x2f2>
 8002d8c:	e130      	b.n	8002ff0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2210      	movs	r2, #16
 8002d94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2240      	movs	r2, #64	; 0x40
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d000      	beq.n	8002da6 <HAL_UART_IRQHandler+0x30a>
 8002da4:	e0a4      	b.n	8002ef0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2280      	movs	r2, #128	; 0x80
 8002daa:	589b      	ldr	r3, [r3, r2]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	217e      	movs	r1, #126	; 0x7e
 8002db2:	187b      	adds	r3, r7, r1
 8002db4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002db6:	187b      	adds	r3, r7, r1
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d100      	bne.n	8002dc0 <HAL_UART_IRQHandler+0x324>
 8002dbe:	e185      	b.n	80030cc <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	225c      	movs	r2, #92	; 0x5c
 8002dc4:	5a9b      	ldrh	r3, [r3, r2]
 8002dc6:	187a      	adds	r2, r7, r1
 8002dc8:	8812      	ldrh	r2, [r2, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d300      	bcc.n	8002dd0 <HAL_UART_IRQHandler+0x334>
 8002dce:	e17d      	b.n	80030cc <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	187a      	adds	r2, r7, r1
 8002dd4:	215e      	movs	r1, #94	; 0x5e
 8002dd6:	8812      	ldrh	r2, [r2, #0]
 8002dd8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2280      	movs	r2, #128	; 0x80
 8002dde:	589b      	ldr	r3, [r3, r2]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2220      	movs	r2, #32
 8002de6:	4013      	ands	r3, r2
 8002de8:	d170      	bne.n	8002ecc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dea:	f3ef 8310 	mrs	r3, PRIMASK
 8002dee:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002df2:	67bb      	str	r3, [r7, #120]	; 0x78
 8002df4:	2301      	movs	r3, #1
 8002df6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfa:	f383 8810 	msr	PRIMASK, r3
}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	49b4      	ldr	r1, [pc, #720]	; (80030dc <HAL_UART_IRQHandler+0x640>)
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e12:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e16:	f383 8810 	msr	PRIMASK, r3
}
 8002e1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e20:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e24:	677b      	str	r3, [r7, #116]	; 0x74
 8002e26:	2301      	movs	r3, #1
 8002e28:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e2c:	f383 8810 	msr	PRIMASK, r3
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	438a      	bics	r2, r1
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e44:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e48:	f383 8810 	msr	PRIMASK, r3
}
 8002e4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e52:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e56:	673b      	str	r3, [r7, #112]	; 0x70
 8002e58:	2301      	movs	r3, #1
 8002e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5e:	f383 8810 	msr	PRIMASK, r3
}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2140      	movs	r1, #64	; 0x40
 8002e70:	438a      	bics	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e76:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e7a:	f383 8810 	msr	PRIMASK, r3
}
 8002e7e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	228c      	movs	r2, #140	; 0x8c
 8002e84:	2120      	movs	r1, #32
 8002e86:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e92:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e98:	2301      	movs	r3, #1
 8002e9a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e9e:	f383 8810 	msr	PRIMASK, r3
}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2110      	movs	r1, #16
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eba:	f383 8810 	msr	PRIMASK, r3
}
 8002ebe:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2280      	movs	r2, #128	; 0x80
 8002ec4:	589b      	ldr	r3, [r3, r2]
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f7fe f890 	bl	8000fec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	225c      	movs	r2, #92	; 0x5c
 8002ed6:	5a9a      	ldrh	r2, [r3, r2]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	215e      	movs	r1, #94	; 0x5e
 8002edc:	5a5b      	ldrh	r3, [r3, r1]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	0011      	movs	r1, r2
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f000 f90d 	bl	8003108 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002eee:	e0ed      	b.n	80030cc <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	225c      	movs	r2, #92	; 0x5c
 8002ef4:	5a99      	ldrh	r1, [r3, r2]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	225e      	movs	r2, #94	; 0x5e
 8002efa:	5a9b      	ldrh	r3, [r3, r2]
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	208e      	movs	r0, #142	; 0x8e
 8002f00:	183b      	adds	r3, r7, r0
 8002f02:	1a8a      	subs	r2, r1, r2
 8002f04:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	225e      	movs	r2, #94	; 0x5e
 8002f0a:	5a9b      	ldrh	r3, [r3, r2]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d100      	bne.n	8002f14 <HAL_UART_IRQHandler+0x478>
 8002f12:	e0dd      	b.n	80030d0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002f14:	183b      	adds	r3, r7, r0
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d100      	bne.n	8002f1e <HAL_UART_IRQHandler+0x482>
 8002f1c:	e0d8      	b.n	80030d0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f22:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f24:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f26:	2488      	movs	r4, #136	; 0x88
 8002f28:	193a      	adds	r2, r7, r4
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f383 8810 	msr	PRIMASK, r3
}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4967      	ldr	r1, [pc, #412]	; (80030e0 <HAL_UART_IRQHandler+0x644>)
 8002f44:	400a      	ands	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	193b      	adds	r3, r7, r4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f383 8810 	msr	PRIMASK, r3
}
 8002f54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f56:	f3ef 8310 	mrs	r3, PRIMASK
 8002f5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f5c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f5e:	2484      	movs	r4, #132	; 0x84
 8002f60:	193a      	adds	r2, r7, r4
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	2301      	movs	r3, #1
 8002f66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f383 8810 	msr	PRIMASK, r3
}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	495a      	ldr	r1, [pc, #360]	; (80030e4 <HAL_UART_IRQHandler+0x648>)
 8002f7c:	400a      	ands	r2, r1
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	193b      	adds	r3, r7, r4
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	f383 8810 	msr	PRIMASK, r3
}
 8002f8c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	228c      	movs	r2, #140	; 0x8c
 8002f92:	2120      	movs	r1, #32
 8002f94:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002faa:	2480      	movs	r4, #128	; 0x80
 8002fac:	193a      	adds	r2, r7, r4
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb6:	f383 8810 	msr	PRIMASK, r3
}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2110      	movs	r1, #16
 8002fc8:	438a      	bics	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	193b      	adds	r3, r7, r4
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	f383 8810 	msr	PRIMASK, r3
}
 8002fd8:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fe0:	183b      	adds	r3, r7, r0
 8002fe2:	881a      	ldrh	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	0011      	movs	r1, r2
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f000 f88d 	bl	8003108 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fee:	e06f      	b.n	80030d0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002ff0:	23a4      	movs	r3, #164	; 0xa4
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	035b      	lsls	r3, r3, #13
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d010      	beq.n	8003020 <HAL_UART_IRQHandler+0x584>
 8002ffe:	239c      	movs	r3, #156	; 0x9c
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	03db      	lsls	r3, r3, #15
 8003008:	4013      	ands	r3, r2
 800300a:	d009      	beq.n	8003020 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2280      	movs	r2, #128	; 0x80
 8003012:	0352      	lsls	r2, r2, #13
 8003014:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	0018      	movs	r0, r3
 800301a:	f001 fa1d 	bl	8004458 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800301e:	e05a      	b.n	80030d6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003020:	23a4      	movs	r3, #164	; 0xa4
 8003022:	18fb      	adds	r3, r7, r3
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2280      	movs	r2, #128	; 0x80
 8003028:	4013      	ands	r3, r2
 800302a:	d016      	beq.n	800305a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800302c:	23a0      	movs	r3, #160	; 0xa0
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	4013      	ands	r3, r2
 8003036:	d106      	bne.n	8003046 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003038:	239c      	movs	r3, #156	; 0x9c
 800303a:	18fb      	adds	r3, r7, r3
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	041b      	lsls	r3, r3, #16
 8003042:	4013      	ands	r3, r2
 8003044:	d009      	beq.n	800305a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800304a:	2b00      	cmp	r3, #0
 800304c:	d042      	beq.n	80030d4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	0010      	movs	r0, r2
 8003056:	4798      	blx	r3
    }
    return;
 8003058:	e03c      	b.n	80030d4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800305a:	23a4      	movs	r3, #164	; 0xa4
 800305c:	18fb      	adds	r3, r7, r3
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2240      	movs	r2, #64	; 0x40
 8003062:	4013      	ands	r3, r2
 8003064:	d00a      	beq.n	800307c <HAL_UART_IRQHandler+0x5e0>
 8003066:	23a0      	movs	r3, #160	; 0xa0
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2240      	movs	r2, #64	; 0x40
 800306e:	4013      	ands	r3, r2
 8003070:	d004      	beq.n	800307c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	0018      	movs	r0, r3
 8003076:	f000 fd62 	bl	8003b3e <UART_EndTransmit_IT>
    return;
 800307a:	e02c      	b.n	80030d6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800307c:	23a4      	movs	r3, #164	; 0xa4
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	4013      	ands	r3, r2
 8003088:	d00b      	beq.n	80030a2 <HAL_UART_IRQHandler+0x606>
 800308a:	23a0      	movs	r3, #160	; 0xa0
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	2380      	movs	r3, #128	; 0x80
 8003092:	05db      	lsls	r3, r3, #23
 8003094:	4013      	ands	r3, r2
 8003096:	d004      	beq.n	80030a2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	0018      	movs	r0, r3
 800309c:	f001 f9ec 	bl	8004478 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030a0:	e019      	b.n	80030d6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80030a2:	23a4      	movs	r3, #164	; 0xa4
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	045b      	lsls	r3, r3, #17
 80030ac:	4013      	ands	r3, r2
 80030ae:	d012      	beq.n	80030d6 <HAL_UART_IRQHandler+0x63a>
 80030b0:	23a0      	movs	r3, #160	; 0xa0
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	da0d      	bge.n	80030d6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	0018      	movs	r0, r3
 80030be:	f001 f9d3 	bl	8004468 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030c2:	e008      	b.n	80030d6 <HAL_UART_IRQHandler+0x63a>
      return;
 80030c4:	46c0      	nop			; (mov r8, r8)
 80030c6:	e006      	b.n	80030d6 <HAL_UART_IRQHandler+0x63a>
    return;
 80030c8:	46c0      	nop			; (mov r8, r8)
 80030ca:	e004      	b.n	80030d6 <HAL_UART_IRQHandler+0x63a>
      return;
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	e002      	b.n	80030d6 <HAL_UART_IRQHandler+0x63a>
      return;
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	e000      	b.n	80030d6 <HAL_UART_IRQHandler+0x63a>
    return;
 80030d4:	46c0      	nop			; (mov r8, r8)
  }
}
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b02a      	add	sp, #168	; 0xa8
 80030da:	bdb0      	pop	{r4, r5, r7, pc}
 80030dc:	fffffeff 	.word	0xfffffeff
 80030e0:	fffffedf 	.word	0xfffffedf
 80030e4:	effffffe 	.word	0xeffffffe

080030e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030f0:	46c0      	nop			; (mov r8, r8)
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b002      	add	sp, #8
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003100:	46c0      	nop			; (mov r8, r8)
 8003102:	46bd      	mov	sp, r7
 8003104:	b002      	add	sp, #8
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	000a      	movs	r2, r1
 8003112:	1cbb      	adds	r3, r7, #2
 8003114:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	46bd      	mov	sp, r7
 800311a:	b002      	add	sp, #8
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003128:	231a      	movs	r3, #26
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	4313      	orrs	r3, r2
 8003146:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4abc      	ldr	r2, [pc, #752]	; (8003440 <UART_SetConfig+0x320>)
 8003150:	4013      	ands	r3, r2
 8003152:	0019      	movs	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	430a      	orrs	r2, r1
 800315c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	4ab7      	ldr	r2, [pc, #732]	; (8003444 <UART_SetConfig+0x324>)
 8003166:	4013      	ands	r3, r2
 8003168:	0019      	movs	r1, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	4313      	orrs	r3, r2
 8003184:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4aae      	ldr	r2, [pc, #696]	; (8003448 <UART_SetConfig+0x328>)
 800318e:	4013      	ands	r3, r2
 8003190:	0019      	movs	r1, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	430a      	orrs	r2, r1
 800319a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	220f      	movs	r2, #15
 80031a4:	4393      	bics	r3, r2
 80031a6:	0019      	movs	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4aa4      	ldr	r2, [pc, #656]	; (800344c <UART_SetConfig+0x32c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d127      	bne.n	800320e <UART_SetConfig+0xee>
 80031be:	4ba4      	ldr	r3, [pc, #656]	; (8003450 <UART_SetConfig+0x330>)
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	2203      	movs	r2, #3
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d017      	beq.n	80031fa <UART_SetConfig+0xda>
 80031ca:	d81b      	bhi.n	8003204 <UART_SetConfig+0xe4>
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d00a      	beq.n	80031e6 <UART_SetConfig+0xc6>
 80031d0:	d818      	bhi.n	8003204 <UART_SetConfig+0xe4>
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <UART_SetConfig+0xbc>
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d00a      	beq.n	80031f0 <UART_SetConfig+0xd0>
 80031da:	e013      	b.n	8003204 <UART_SetConfig+0xe4>
 80031dc:	231b      	movs	r3, #27
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]
 80031e4:	e058      	b.n	8003298 <UART_SetConfig+0x178>
 80031e6:	231b      	movs	r3, #27
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	2202      	movs	r2, #2
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e053      	b.n	8003298 <UART_SetConfig+0x178>
 80031f0:	231b      	movs	r3, #27
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	2204      	movs	r2, #4
 80031f6:	701a      	strb	r2, [r3, #0]
 80031f8:	e04e      	b.n	8003298 <UART_SetConfig+0x178>
 80031fa:	231b      	movs	r3, #27
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	2208      	movs	r2, #8
 8003200:	701a      	strb	r2, [r3, #0]
 8003202:	e049      	b.n	8003298 <UART_SetConfig+0x178>
 8003204:	231b      	movs	r3, #27
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	2210      	movs	r2, #16
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	e044      	b.n	8003298 <UART_SetConfig+0x178>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a90      	ldr	r2, [pc, #576]	; (8003454 <UART_SetConfig+0x334>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d127      	bne.n	8003268 <UART_SetConfig+0x148>
 8003218:	4b8d      	ldr	r3, [pc, #564]	; (8003450 <UART_SetConfig+0x330>)
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	220c      	movs	r2, #12
 800321e:	4013      	ands	r3, r2
 8003220:	2b0c      	cmp	r3, #12
 8003222:	d017      	beq.n	8003254 <UART_SetConfig+0x134>
 8003224:	d81b      	bhi.n	800325e <UART_SetConfig+0x13e>
 8003226:	2b08      	cmp	r3, #8
 8003228:	d00a      	beq.n	8003240 <UART_SetConfig+0x120>
 800322a:	d818      	bhi.n	800325e <UART_SetConfig+0x13e>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <UART_SetConfig+0x116>
 8003230:	2b04      	cmp	r3, #4
 8003232:	d00a      	beq.n	800324a <UART_SetConfig+0x12a>
 8003234:	e013      	b.n	800325e <UART_SetConfig+0x13e>
 8003236:	231b      	movs	r3, #27
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e02b      	b.n	8003298 <UART_SetConfig+0x178>
 8003240:	231b      	movs	r3, #27
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	2202      	movs	r2, #2
 8003246:	701a      	strb	r2, [r3, #0]
 8003248:	e026      	b.n	8003298 <UART_SetConfig+0x178>
 800324a:	231b      	movs	r3, #27
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	2204      	movs	r2, #4
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e021      	b.n	8003298 <UART_SetConfig+0x178>
 8003254:	231b      	movs	r3, #27
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2208      	movs	r2, #8
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e01c      	b.n	8003298 <UART_SetConfig+0x178>
 800325e:	231b      	movs	r3, #27
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	2210      	movs	r2, #16
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	e017      	b.n	8003298 <UART_SetConfig+0x178>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a7a      	ldr	r2, [pc, #488]	; (8003458 <UART_SetConfig+0x338>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d104      	bne.n	800327c <UART_SetConfig+0x15c>
 8003272:	231b      	movs	r3, #27
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	2200      	movs	r2, #0
 8003278:	701a      	strb	r2, [r3, #0]
 800327a:	e00d      	b.n	8003298 <UART_SetConfig+0x178>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a76      	ldr	r2, [pc, #472]	; (800345c <UART_SetConfig+0x33c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d104      	bne.n	8003290 <UART_SetConfig+0x170>
 8003286:	231b      	movs	r3, #27
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e003      	b.n	8003298 <UART_SetConfig+0x178>
 8003290:	231b      	movs	r3, #27
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	2210      	movs	r2, #16
 8003296:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d000      	beq.n	80032a6 <UART_SetConfig+0x186>
 80032a4:	e065      	b.n	8003372 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80032a6:	231b      	movs	r3, #27
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d015      	beq.n	80032dc <UART_SetConfig+0x1bc>
 80032b0:	dc18      	bgt.n	80032e4 <UART_SetConfig+0x1c4>
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d00d      	beq.n	80032d2 <UART_SetConfig+0x1b2>
 80032b6:	dc15      	bgt.n	80032e4 <UART_SetConfig+0x1c4>
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <UART_SetConfig+0x1a2>
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d005      	beq.n	80032cc <UART_SetConfig+0x1ac>
 80032c0:	e010      	b.n	80032e4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c2:	f7fe fe61 	bl	8001f88 <HAL_RCC_GetPCLK1Freq>
 80032c6:	0003      	movs	r3, r0
 80032c8:	617b      	str	r3, [r7, #20]
        break;
 80032ca:	e012      	b.n	80032f2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032cc:	4b64      	ldr	r3, [pc, #400]	; (8003460 <UART_SetConfig+0x340>)
 80032ce:	617b      	str	r3, [r7, #20]
        break;
 80032d0:	e00f      	b.n	80032f2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032d2:	f7fe fdcd 	bl	8001e70 <HAL_RCC_GetSysClockFreq>
 80032d6:	0003      	movs	r3, r0
 80032d8:	617b      	str	r3, [r7, #20]
        break;
 80032da:	e00a      	b.n	80032f2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	021b      	lsls	r3, r3, #8
 80032e0:	617b      	str	r3, [r7, #20]
        break;
 80032e2:	e006      	b.n	80032f2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032e8:	231a      	movs	r3, #26
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	2201      	movs	r2, #1
 80032ee:	701a      	strb	r2, [r3, #0]
        break;
 80032f0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d100      	bne.n	80032fa <UART_SetConfig+0x1da>
 80032f8:	e08d      	b.n	8003416 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032fe:	4b59      	ldr	r3, [pc, #356]	; (8003464 <UART_SetConfig+0x344>)
 8003300:	0052      	lsls	r2, r2, #1
 8003302:	5ad3      	ldrh	r3, [r2, r3]
 8003304:	0019      	movs	r1, r3
 8003306:	6978      	ldr	r0, [r7, #20]
 8003308:	f7fc fefa 	bl	8000100 <__udivsi3>
 800330c:	0003      	movs	r3, r0
 800330e:	005a      	lsls	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	18d2      	adds	r2, r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	0019      	movs	r1, r3
 800331e:	0010      	movs	r0, r2
 8003320:	f7fc feee 	bl	8000100 <__udivsi3>
 8003324:	0003      	movs	r3, r0
 8003326:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	2b0f      	cmp	r3, #15
 800332c:	d91c      	bls.n	8003368 <UART_SetConfig+0x248>
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	025b      	lsls	r3, r3, #9
 8003334:	429a      	cmp	r2, r3
 8003336:	d217      	bcs.n	8003368 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	b29a      	uxth	r2, r3
 800333c:	200e      	movs	r0, #14
 800333e:	183b      	adds	r3, r7, r0
 8003340:	210f      	movs	r1, #15
 8003342:	438a      	bics	r2, r1
 8003344:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	085b      	lsrs	r3, r3, #1
 800334a:	b29b      	uxth	r3, r3
 800334c:	2207      	movs	r2, #7
 800334e:	4013      	ands	r3, r2
 8003350:	b299      	uxth	r1, r3
 8003352:	183b      	adds	r3, r7, r0
 8003354:	183a      	adds	r2, r7, r0
 8003356:	8812      	ldrh	r2, [r2, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	183a      	adds	r2, r7, r0
 8003362:	8812      	ldrh	r2, [r2, #0]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	e056      	b.n	8003416 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003368:	231a      	movs	r3, #26
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
 8003370:	e051      	b.n	8003416 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003372:	231b      	movs	r3, #27
 8003374:	18fb      	adds	r3, r7, r3
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d015      	beq.n	80033a8 <UART_SetConfig+0x288>
 800337c:	dc18      	bgt.n	80033b0 <UART_SetConfig+0x290>
 800337e:	2b04      	cmp	r3, #4
 8003380:	d00d      	beq.n	800339e <UART_SetConfig+0x27e>
 8003382:	dc15      	bgt.n	80033b0 <UART_SetConfig+0x290>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <UART_SetConfig+0x26e>
 8003388:	2b02      	cmp	r3, #2
 800338a:	d005      	beq.n	8003398 <UART_SetConfig+0x278>
 800338c:	e010      	b.n	80033b0 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800338e:	f7fe fdfb 	bl	8001f88 <HAL_RCC_GetPCLK1Freq>
 8003392:	0003      	movs	r3, r0
 8003394:	617b      	str	r3, [r7, #20]
        break;
 8003396:	e012      	b.n	80033be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003398:	4b31      	ldr	r3, [pc, #196]	; (8003460 <UART_SetConfig+0x340>)
 800339a:	617b      	str	r3, [r7, #20]
        break;
 800339c:	e00f      	b.n	80033be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800339e:	f7fe fd67 	bl	8001e70 <HAL_RCC_GetSysClockFreq>
 80033a2:	0003      	movs	r3, r0
 80033a4:	617b      	str	r3, [r7, #20]
        break;
 80033a6:	e00a      	b.n	80033be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	617b      	str	r3, [r7, #20]
        break;
 80033ae:	e006      	b.n	80033be <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80033b4:	231a      	movs	r3, #26
 80033b6:	18fb      	adds	r3, r7, r3
 80033b8:	2201      	movs	r2, #1
 80033ba:	701a      	strb	r2, [r3, #0]
        break;
 80033bc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d028      	beq.n	8003416 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033c8:	4b26      	ldr	r3, [pc, #152]	; (8003464 <UART_SetConfig+0x344>)
 80033ca:	0052      	lsls	r2, r2, #1
 80033cc:	5ad3      	ldrh	r3, [r2, r3]
 80033ce:	0019      	movs	r1, r3
 80033d0:	6978      	ldr	r0, [r7, #20]
 80033d2:	f7fc fe95 	bl	8000100 <__udivsi3>
 80033d6:	0003      	movs	r3, r0
 80033d8:	001a      	movs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	18d2      	adds	r2, r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	0019      	movs	r1, r3
 80033e8:	0010      	movs	r0, r2
 80033ea:	f7fc fe89 	bl	8000100 <__udivsi3>
 80033ee:	0003      	movs	r3, r0
 80033f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	2b0f      	cmp	r3, #15
 80033f6:	d90a      	bls.n	800340e <UART_SetConfig+0x2ee>
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	025b      	lsls	r3, r3, #9
 80033fe:	429a      	cmp	r2, r3
 8003400:	d205      	bcs.n	800340e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	b29a      	uxth	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	60da      	str	r2, [r3, #12]
 800340c:	e003      	b.n	8003416 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800340e:	231a      	movs	r3, #26
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	226a      	movs	r2, #106	; 0x6a
 800341a:	2101      	movs	r1, #1
 800341c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2268      	movs	r2, #104	; 0x68
 8003422:	2101      	movs	r1, #1
 8003424:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003432:	231a      	movs	r3, #26
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	781b      	ldrb	r3, [r3, #0]
}
 8003438:	0018      	movs	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	b008      	add	sp, #32
 800343e:	bd80      	pop	{r7, pc}
 8003440:	cfff69f3 	.word	0xcfff69f3
 8003444:	ffffcfff 	.word	0xffffcfff
 8003448:	11fff4ff 	.word	0x11fff4ff
 800344c:	40013800 	.word	0x40013800
 8003450:	40021000 	.word	0x40021000
 8003454:	40004400 	.word	0x40004400
 8003458:	40004800 	.word	0x40004800
 800345c:	40004c00 	.word	0x40004c00
 8003460:	00f42400 	.word	0x00f42400
 8003464:	0800478c 	.word	0x0800478c

08003468 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	2201      	movs	r2, #1
 8003476:	4013      	ands	r3, r2
 8003478:	d00b      	beq.n	8003492 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4a4a      	ldr	r2, [pc, #296]	; (80035ac <UART_AdvFeatureConfig+0x144>)
 8003482:	4013      	ands	r3, r2
 8003484:	0019      	movs	r1, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	2202      	movs	r2, #2
 8003498:	4013      	ands	r3, r2
 800349a:	d00b      	beq.n	80034b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4a43      	ldr	r2, [pc, #268]	; (80035b0 <UART_AdvFeatureConfig+0x148>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	0019      	movs	r1, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	2204      	movs	r2, #4
 80034ba:	4013      	ands	r3, r2
 80034bc:	d00b      	beq.n	80034d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	4a3b      	ldr	r2, [pc, #236]	; (80035b4 <UART_AdvFeatureConfig+0x14c>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	0019      	movs	r1, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	2208      	movs	r2, #8
 80034dc:	4013      	ands	r3, r2
 80034de:	d00b      	beq.n	80034f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	4a34      	ldr	r2, [pc, #208]	; (80035b8 <UART_AdvFeatureConfig+0x150>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	0019      	movs	r1, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	2210      	movs	r2, #16
 80034fe:	4013      	ands	r3, r2
 8003500:	d00b      	beq.n	800351a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4a2c      	ldr	r2, [pc, #176]	; (80035bc <UART_AdvFeatureConfig+0x154>)
 800350a:	4013      	ands	r3, r2
 800350c:	0019      	movs	r1, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	2220      	movs	r2, #32
 8003520:	4013      	ands	r3, r2
 8003522:	d00b      	beq.n	800353c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	4a25      	ldr	r2, [pc, #148]	; (80035c0 <UART_AdvFeatureConfig+0x158>)
 800352c:	4013      	ands	r3, r2
 800352e:	0019      	movs	r1, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	2240      	movs	r2, #64	; 0x40
 8003542:	4013      	ands	r3, r2
 8003544:	d01d      	beq.n	8003582 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a1d      	ldr	r2, [pc, #116]	; (80035c4 <UART_AdvFeatureConfig+0x15c>)
 800354e:	4013      	ands	r3, r2
 8003550:	0019      	movs	r1, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003562:	2380      	movs	r3, #128	; 0x80
 8003564:	035b      	lsls	r3, r3, #13
 8003566:	429a      	cmp	r2, r3
 8003568:	d10b      	bne.n	8003582 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4a15      	ldr	r2, [pc, #84]	; (80035c8 <UART_AdvFeatureConfig+0x160>)
 8003572:	4013      	ands	r3, r2
 8003574:	0019      	movs	r1, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	2280      	movs	r2, #128	; 0x80
 8003588:	4013      	ands	r3, r2
 800358a:	d00b      	beq.n	80035a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4a0e      	ldr	r2, [pc, #56]	; (80035cc <UART_AdvFeatureConfig+0x164>)
 8003594:	4013      	ands	r3, r2
 8003596:	0019      	movs	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	605a      	str	r2, [r3, #4]
  }
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b002      	add	sp, #8
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	fffdffff 	.word	0xfffdffff
 80035b0:	fffeffff 	.word	0xfffeffff
 80035b4:	fffbffff 	.word	0xfffbffff
 80035b8:	ffff7fff 	.word	0xffff7fff
 80035bc:	ffffefff 	.word	0xffffefff
 80035c0:	ffffdfff 	.word	0xffffdfff
 80035c4:	ffefffff 	.word	0xffefffff
 80035c8:	ff9fffff 	.word	0xff9fffff
 80035cc:	fff7ffff 	.word	0xfff7ffff

080035d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2290      	movs	r2, #144	; 0x90
 80035dc:	2100      	movs	r1, #0
 80035de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035e0:	f7fd fbe2 	bl	8000da8 <HAL_GetTick>
 80035e4:	0003      	movs	r3, r0
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2208      	movs	r2, #8
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d10c      	bne.n	8003610 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2280      	movs	r2, #128	; 0x80
 80035fa:	0391      	lsls	r1, r2, #14
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	4a1a      	ldr	r2, [pc, #104]	; (8003668 <UART_CheckIdleState+0x98>)
 8003600:	9200      	str	r2, [sp, #0]
 8003602:	2200      	movs	r2, #0
 8003604:	f000 f832 	bl	800366c <UART_WaitOnFlagUntilTimeout>
 8003608:	1e03      	subs	r3, r0, #0
 800360a:	d001      	beq.n	8003610 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e026      	b.n	800365e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2204      	movs	r2, #4
 8003618:	4013      	ands	r3, r2
 800361a:	2b04      	cmp	r3, #4
 800361c:	d10c      	bne.n	8003638 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2280      	movs	r2, #128	; 0x80
 8003622:	03d1      	lsls	r1, r2, #15
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4a10      	ldr	r2, [pc, #64]	; (8003668 <UART_CheckIdleState+0x98>)
 8003628:	9200      	str	r2, [sp, #0]
 800362a:	2200      	movs	r2, #0
 800362c:	f000 f81e 	bl	800366c <UART_WaitOnFlagUntilTimeout>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d001      	beq.n	8003638 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e012      	b.n	800365e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2288      	movs	r2, #136	; 0x88
 800363c:	2120      	movs	r1, #32
 800363e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	228c      	movs	r2, #140	; 0x8c
 8003644:	2120      	movs	r1, #32
 8003646:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2284      	movs	r2, #132	; 0x84
 8003658:	2100      	movs	r1, #0
 800365a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	0018      	movs	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	b004      	add	sp, #16
 8003664:	bd80      	pop	{r7, pc}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	01ffffff 	.word	0x01ffffff

0800366c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b094      	sub	sp, #80	; 0x50
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	1dfb      	adds	r3, r7, #7
 800367a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800367c:	e0a7      	b.n	80037ce <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003680:	3301      	adds	r3, #1
 8003682:	d100      	bne.n	8003686 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003684:	e0a3      	b.n	80037ce <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003686:	f7fd fb8f 	bl	8000da8 <HAL_GetTick>
 800368a:	0002      	movs	r2, r0
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003692:	429a      	cmp	r2, r3
 8003694:	d302      	bcc.n	800369c <UART_WaitOnFlagUntilTimeout+0x30>
 8003696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003698:	2b00      	cmp	r3, #0
 800369a:	d13f      	bne.n	800371c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800369c:	f3ef 8310 	mrs	r3, PRIMASK
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80036a4:	647b      	str	r3, [r7, #68]	; 0x44
 80036a6:	2301      	movs	r3, #1
 80036a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	f383 8810 	msr	PRIMASK, r3
}
 80036b0:	46c0      	nop			; (mov r8, r8)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	494e      	ldr	r1, [pc, #312]	; (80037f8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80036be:	400a      	ands	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	f383 8810 	msr	PRIMASK, r3
}
 80036cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ce:	f3ef 8310 	mrs	r3, PRIMASK
 80036d2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80036d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d6:	643b      	str	r3, [r7, #64]	; 0x40
 80036d8:	2301      	movs	r3, #1
 80036da:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036de:	f383 8810 	msr	PRIMASK, r3
}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2101      	movs	r1, #1
 80036f0:	438a      	bics	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fa:	f383 8810 	msr	PRIMASK, r3
}
 80036fe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2288      	movs	r2, #136	; 0x88
 8003704:	2120      	movs	r1, #32
 8003706:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	228c      	movs	r2, #140	; 0x8c
 800370c:	2120      	movs	r1, #32
 800370e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2284      	movs	r2, #132	; 0x84
 8003714:	2100      	movs	r1, #0
 8003716:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e069      	b.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2204      	movs	r2, #4
 8003724:	4013      	ands	r3, r2
 8003726:	d052      	beq.n	80037ce <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	69da      	ldr	r2, [r3, #28]
 800372e:	2380      	movs	r3, #128	; 0x80
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	401a      	ands	r2, r3
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	429a      	cmp	r2, r3
 800373a:	d148      	bne.n	80037ce <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2280      	movs	r2, #128	; 0x80
 8003742:	0112      	lsls	r2, r2, #4
 8003744:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003746:	f3ef 8310 	mrs	r3, PRIMASK
 800374a:	613b      	str	r3, [r7, #16]
  return(result);
 800374c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800374e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003750:	2301      	movs	r3, #1
 8003752:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f383 8810 	msr	PRIMASK, r3
}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4924      	ldr	r1, [pc, #144]	; (80037f8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003768:	400a      	ands	r2, r1
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800376e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	f383 8810 	msr	PRIMASK, r3
}
 8003776:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003778:	f3ef 8310 	mrs	r3, PRIMASK
 800377c:	61fb      	str	r3, [r7, #28]
  return(result);
 800377e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003780:	64bb      	str	r3, [r7, #72]	; 0x48
 8003782:	2301      	movs	r3, #1
 8003784:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	f383 8810 	msr	PRIMASK, r3
}
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2101      	movs	r1, #1
 800379a:	438a      	bics	r2, r1
 800379c:	609a      	str	r2, [r3, #8]
 800379e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	f383 8810 	msr	PRIMASK, r3
}
 80037a8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2288      	movs	r2, #136	; 0x88
 80037ae:	2120      	movs	r1, #32
 80037b0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	228c      	movs	r2, #140	; 0x8c
 80037b6:	2120      	movs	r1, #32
 80037b8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2290      	movs	r2, #144	; 0x90
 80037be:	2120      	movs	r1, #32
 80037c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2284      	movs	r2, #132	; 0x84
 80037c6:	2100      	movs	r1, #0
 80037c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e010      	b.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	4013      	ands	r3, r2
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	425a      	negs	r2, r3
 80037de:	4153      	adcs	r3, r2
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	001a      	movs	r2, r3
 80037e4:	1dfb      	adds	r3, r7, #7
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d100      	bne.n	80037ee <UART_WaitOnFlagUntilTimeout+0x182>
 80037ec:	e747      	b.n	800367e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	0018      	movs	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b014      	add	sp, #80	; 0x50
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	fffffe5f 	.word	0xfffffe5f

080037fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b098      	sub	sp, #96	; 0x60
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	1dbb      	adds	r3, r7, #6
 8003808:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1dba      	adds	r2, r7, #6
 8003814:	215c      	movs	r1, #92	; 0x5c
 8003816:	8812      	ldrh	r2, [r2, #0]
 8003818:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1dba      	adds	r2, r7, #6
 800381e:	215e      	movs	r1, #94	; 0x5e
 8003820:	8812      	ldrh	r2, [r2, #0]
 8003822:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	2380      	movs	r3, #128	; 0x80
 8003830:	015b      	lsls	r3, r3, #5
 8003832:	429a      	cmp	r2, r3
 8003834:	d10d      	bne.n	8003852 <UART_Start_Receive_IT+0x56>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d104      	bne.n	8003848 <UART_Start_Receive_IT+0x4c>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2260      	movs	r2, #96	; 0x60
 8003842:	497b      	ldr	r1, [pc, #492]	; (8003a30 <UART_Start_Receive_IT+0x234>)
 8003844:	5299      	strh	r1, [r3, r2]
 8003846:	e02e      	b.n	80038a6 <UART_Start_Receive_IT+0xaa>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2260      	movs	r2, #96	; 0x60
 800384c:	21ff      	movs	r1, #255	; 0xff
 800384e:	5299      	strh	r1, [r3, r2]
 8003850:	e029      	b.n	80038a6 <UART_Start_Receive_IT+0xaa>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10d      	bne.n	8003876 <UART_Start_Receive_IT+0x7a>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d104      	bne.n	800386c <UART_Start_Receive_IT+0x70>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2260      	movs	r2, #96	; 0x60
 8003866:	21ff      	movs	r1, #255	; 0xff
 8003868:	5299      	strh	r1, [r3, r2]
 800386a:	e01c      	b.n	80038a6 <UART_Start_Receive_IT+0xaa>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2260      	movs	r2, #96	; 0x60
 8003870:	217f      	movs	r1, #127	; 0x7f
 8003872:	5299      	strh	r1, [r3, r2]
 8003874:	e017      	b.n	80038a6 <UART_Start_Receive_IT+0xaa>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	055b      	lsls	r3, r3, #21
 800387e:	429a      	cmp	r2, r3
 8003880:	d10d      	bne.n	800389e <UART_Start_Receive_IT+0xa2>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d104      	bne.n	8003894 <UART_Start_Receive_IT+0x98>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2260      	movs	r2, #96	; 0x60
 800388e:	217f      	movs	r1, #127	; 0x7f
 8003890:	5299      	strh	r1, [r3, r2]
 8003892:	e008      	b.n	80038a6 <UART_Start_Receive_IT+0xaa>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2260      	movs	r2, #96	; 0x60
 8003898:	213f      	movs	r1, #63	; 0x3f
 800389a:	5299      	strh	r1, [r3, r2]
 800389c:	e003      	b.n	80038a6 <UART_Start_Receive_IT+0xaa>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2260      	movs	r2, #96	; 0x60
 80038a2:	2100      	movs	r1, #0
 80038a4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2290      	movs	r2, #144	; 0x90
 80038aa:	2100      	movs	r1, #0
 80038ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	228c      	movs	r2, #140	; 0x8c
 80038b2:	2122      	movs	r1, #34	; 0x22
 80038b4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038b6:	f3ef 8310 	mrs	r3, PRIMASK
 80038ba:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80038bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038c0:	2301      	movs	r3, #1
 80038c2:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c6:	f383 8810 	msr	PRIMASK, r3
}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2101      	movs	r1, #1
 80038d8:	430a      	orrs	r2, r1
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038de:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038e2:	f383 8810 	msr	PRIMASK, r3
}
 80038e6:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	059b      	lsls	r3, r3, #22
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d150      	bne.n	8003996 <UART_Start_Receive_IT+0x19a>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2268      	movs	r2, #104	; 0x68
 80038f8:	5a9b      	ldrh	r3, [r3, r2]
 80038fa:	1dba      	adds	r2, r7, #6
 80038fc:	8812      	ldrh	r2, [r2, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d349      	bcc.n	8003996 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	2380      	movs	r3, #128	; 0x80
 8003908:	015b      	lsls	r3, r3, #5
 800390a:	429a      	cmp	r2, r3
 800390c:	d107      	bne.n	800391e <UART_Start_Receive_IT+0x122>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d103      	bne.n	800391e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4a46      	ldr	r2, [pc, #280]	; (8003a34 <UART_Start_Receive_IT+0x238>)
 800391a:	675a      	str	r2, [r3, #116]	; 0x74
 800391c:	e002      	b.n	8003924 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4a45      	ldr	r2, [pc, #276]	; (8003a38 <UART_Start_Receive_IT+0x23c>)
 8003922:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d019      	beq.n	8003960 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800392c:	f3ef 8310 	mrs	r3, PRIMASK
 8003930:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003934:	65bb      	str	r3, [r7, #88]	; 0x58
 8003936:	2301      	movs	r3, #1
 8003938:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393c:	f383 8810 	msr	PRIMASK, r3
}
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2180      	movs	r1, #128	; 0x80
 800394e:	0049      	lsls	r1, r1, #1
 8003950:	430a      	orrs	r2, r1
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003956:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800395a:	f383 8810 	msr	PRIMASK, r3
}
 800395e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003960:	f3ef 8310 	mrs	r3, PRIMASK
 8003964:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003968:	657b      	str	r3, [r7, #84]	; 0x54
 800396a:	2301      	movs	r3, #1
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	f383 8810 	msr	PRIMASK, r3
}
 8003974:	46c0      	nop			; (mov r8, r8)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2180      	movs	r1, #128	; 0x80
 8003982:	0549      	lsls	r1, r1, #21
 8003984:	430a      	orrs	r2, r1
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800398a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398e:	f383 8810 	msr	PRIMASK, r3
}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	e047      	b.n	8003a26 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	015b      	lsls	r3, r3, #5
 800399e:	429a      	cmp	r2, r3
 80039a0:	d107      	bne.n	80039b2 <UART_Start_Receive_IT+0x1b6>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d103      	bne.n	80039b2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4a23      	ldr	r2, [pc, #140]	; (8003a3c <UART_Start_Receive_IT+0x240>)
 80039ae:	675a      	str	r2, [r3, #116]	; 0x74
 80039b0:	e002      	b.n	80039b8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4a22      	ldr	r2, [pc, #136]	; (8003a40 <UART_Start_Receive_IT+0x244>)
 80039b6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d019      	beq.n	80039f4 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c0:	f3ef 8310 	mrs	r3, PRIMASK
 80039c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80039c6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80039c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039ca:	2301      	movs	r3, #1
 80039cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	f383 8810 	msr	PRIMASK, r3
}
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2190      	movs	r1, #144	; 0x90
 80039e2:	0049      	lsls	r1, r1, #1
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	f383 8810 	msr	PRIMASK, r3
}
 80039f2:	e018      	b.n	8003a26 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f4:	f3ef 8310 	mrs	r3, PRIMASK
 80039f8:	613b      	str	r3, [r7, #16]
  return(result);
 80039fa:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80039fc:	653b      	str	r3, [r7, #80]	; 0x50
 80039fe:	2301      	movs	r3, #1
 8003a00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f383 8810 	msr	PRIMASK, r3
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2120      	movs	r1, #32
 8003a16:	430a      	orrs	r2, r1
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	f383 8810 	msr	PRIMASK, r3
}
 8003a24:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b018      	add	sp, #96	; 0x60
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	000001ff 	.word	0x000001ff
 8003a34:	0800416d 	.word	0x0800416d
 8003a38:	08003e81 	.word	0x08003e81
 8003a3c:	08003d0d 	.word	0x08003d0d
 8003a40:	08003b99 	.word	0x08003b99

08003a44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08e      	sub	sp, #56	; 0x38
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a50:	617b      	str	r3, [r7, #20]
  return(result);
 8003a52:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
 8003a56:	2301      	movs	r3, #1
 8003a58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	f383 8810 	msr	PRIMASK, r3
}
 8003a60:	46c0      	nop			; (mov r8, r8)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4926      	ldr	r1, [pc, #152]	; (8003b08 <UART_EndRxTransfer+0xc4>)
 8003a6e:	400a      	ands	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f383 8810 	msr	PRIMASK, r3
}
 8003a7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a82:	623b      	str	r3, [r7, #32]
  return(result);
 8003a84:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a86:	633b      	str	r3, [r7, #48]	; 0x30
 8003a88:	2301      	movs	r3, #1
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	f383 8810 	msr	PRIMASK, r3
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	491b      	ldr	r1, [pc, #108]	; (8003b0c <UART_EndRxTransfer+0xc8>)
 8003aa0:	400a      	ands	r2, r1
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	f383 8810 	msr	PRIMASK, r3
}
 8003aae:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d118      	bne.n	8003aea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8003abc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003abe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f383 8810 	msr	PRIMASK, r3
}
 8003acc:	46c0      	nop			; (mov r8, r8)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2110      	movs	r1, #16
 8003ada:	438a      	bics	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f383 8810 	msr	PRIMASK, r3
}
 8003ae8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	228c      	movs	r2, #140	; 0x8c
 8003aee:	2120      	movs	r1, #32
 8003af0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	46bd      	mov	sp, r7
 8003b02:	b00e      	add	sp, #56	; 0x38
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	fffffedf 	.word	0xfffffedf
 8003b0c:	effffffe 	.word	0xeffffffe

08003b10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	225e      	movs	r2, #94	; 0x5e
 8003b22:	2100      	movs	r1, #0
 8003b24:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2256      	movs	r2, #86	; 0x56
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7ff fae1 	bl	80030f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b004      	add	sp, #16
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b086      	sub	sp, #24
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b46:	f3ef 8310 	mrs	r3, PRIMASK
 8003b4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	2301      	movs	r3, #1
 8003b52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f383 8810 	msr	PRIMASK, r3
}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2140      	movs	r1, #64	; 0x40
 8003b68:	438a      	bics	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f383 8810 	msr	PRIMASK, r3
}
 8003b76:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2288      	movs	r2, #136	; 0x88
 8003b7c:	2120      	movs	r1, #32
 8003b7e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f7ff faad 	bl	80030e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b006      	add	sp, #24
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b090      	sub	sp, #64	; 0x40
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003ba0:	203e      	movs	r0, #62	; 0x3e
 8003ba2:	183b      	adds	r3, r7, r0
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	2160      	movs	r1, #96	; 0x60
 8003ba8:	5a52      	ldrh	r2, [r2, r1]
 8003baa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	228c      	movs	r2, #140	; 0x8c
 8003bb0:	589b      	ldr	r3, [r3, r2]
 8003bb2:	2b22      	cmp	r3, #34	; 0x22
 8003bb4:	d000      	beq.n	8003bb8 <UART_RxISR_8BIT+0x20>
 8003bb6:	e09a      	b.n	8003cee <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bbe:	213c      	movs	r1, #60	; 0x3c
 8003bc0:	187b      	adds	r3, r7, r1
 8003bc2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003bc4:	187b      	adds	r3, r7, r1
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	183b      	adds	r3, r7, r0
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	b2d9      	uxtb	r1, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd4:	400a      	ands	r2, r1
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	225e      	movs	r2, #94	; 0x5e
 8003be8:	5a9b      	ldrh	r3, [r3, r2]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b299      	uxth	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	225e      	movs	r2, #94	; 0x5e
 8003bf4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	225e      	movs	r2, #94	; 0x5e
 8003bfa:	5a9b      	ldrh	r3, [r3, r2]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d000      	beq.n	8003c04 <UART_RxISR_8BIT+0x6c>
 8003c02:	e07c      	b.n	8003cfe <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c04:	f3ef 8310 	mrs	r3, PRIMASK
 8003c08:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c0a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c0e:	2301      	movs	r3, #1
 8003c10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	f383 8810 	msr	PRIMASK, r3
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4938      	ldr	r1, [pc, #224]	; (8003d08 <UART_RxISR_8BIT+0x170>)
 8003c26:	400a      	ands	r2, r1
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	f383 8810 	msr	PRIMASK, r3
}
 8003c34:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c36:	f3ef 8310 	mrs	r3, PRIMASK
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c40:	2301      	movs	r3, #1
 8003c42:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	f383 8810 	msr	PRIMASK, r3
}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2101      	movs	r1, #1
 8003c58:	438a      	bics	r2, r1
 8003c5a:	609a      	str	r2, [r3, #8]
 8003c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c62:	f383 8810 	msr	PRIMASK, r3
}
 8003c66:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	228c      	movs	r2, #140	; 0x8c
 8003c6c:	2120      	movs	r1, #32
 8003c6e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d12f      	bne.n	8003ce4 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c90:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c92:	633b      	str	r3, [r7, #48]	; 0x30
 8003c94:	2301      	movs	r3, #1
 8003c96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f383 8810 	msr	PRIMASK, r3
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2110      	movs	r1, #16
 8003cac:	438a      	bics	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f383 8810 	msr	PRIMASK, r3
}
 8003cba:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	2210      	movs	r2, #16
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b10      	cmp	r3, #16
 8003cc8:	d103      	bne.n	8003cd2 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2210      	movs	r2, #16
 8003cd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	225c      	movs	r2, #92	; 0x5c
 8003cd6:	5a9a      	ldrh	r2, [r3, r2]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	0011      	movs	r1, r2
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f7ff fa13 	bl	8003108 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ce2:	e00c      	b.n	8003cfe <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f7fc fb80 	bl	80003ec <HAL_UART_RxCpltCallback>
}
 8003cec:	e007      	b.n	8003cfe <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699a      	ldr	r2, [r3, #24]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2108      	movs	r1, #8
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	619a      	str	r2, [r3, #24]
}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b010      	add	sp, #64	; 0x40
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	fffffedf 	.word	0xfffffedf

08003d0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b090      	sub	sp, #64	; 0x40
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003d14:	203e      	movs	r0, #62	; 0x3e
 8003d16:	183b      	adds	r3, r7, r0
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	2160      	movs	r1, #96	; 0x60
 8003d1c:	5a52      	ldrh	r2, [r2, r1]
 8003d1e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	228c      	movs	r2, #140	; 0x8c
 8003d24:	589b      	ldr	r3, [r3, r2]
 8003d26:	2b22      	cmp	r3, #34	; 0x22
 8003d28:	d000      	beq.n	8003d2c <UART_RxISR_16BIT+0x20>
 8003d2a:	e09a      	b.n	8003e62 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d32:	213c      	movs	r1, #60	; 0x3c
 8003d34:	187b      	adds	r3, r7, r1
 8003d36:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3c:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003d3e:	187b      	adds	r3, r7, r1
 8003d40:	183a      	adds	r2, r7, r0
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	8812      	ldrh	r2, [r2, #0]
 8003d46:	4013      	ands	r3, r2
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d52:	1c9a      	adds	r2, r3, #2
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	225e      	movs	r2, #94	; 0x5e
 8003d5c:	5a9b      	ldrh	r3, [r3, r2]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b299      	uxth	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	225e      	movs	r2, #94	; 0x5e
 8003d68:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	225e      	movs	r2, #94	; 0x5e
 8003d6e:	5a9b      	ldrh	r3, [r3, r2]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d000      	beq.n	8003d78 <UART_RxISR_16BIT+0x6c>
 8003d76:	e07c      	b.n	8003e72 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d78:	f3ef 8310 	mrs	r3, PRIMASK
 8003d7c:	617b      	str	r3, [r7, #20]
  return(result);
 8003d7e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d80:	637b      	str	r3, [r7, #52]	; 0x34
 8003d82:	2301      	movs	r3, #1
 8003d84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	f383 8810 	msr	PRIMASK, r3
}
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4938      	ldr	r1, [pc, #224]	; (8003e7c <UART_RxISR_16BIT+0x170>)
 8003d9a:	400a      	ands	r2, r1
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f383 8810 	msr	PRIMASK, r3
}
 8003da8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003daa:	f3ef 8310 	mrs	r3, PRIMASK
 8003dae:	623b      	str	r3, [r7, #32]
  return(result);
 8003db0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db2:	633b      	str	r3, [r7, #48]	; 0x30
 8003db4:	2301      	movs	r3, #1
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	f383 8810 	msr	PRIMASK, r3
}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2101      	movs	r1, #1
 8003dcc:	438a      	bics	r2, r1
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd6:	f383 8810 	msr	PRIMASK, r3
}
 8003dda:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	228c      	movs	r2, #140	; 0x8c
 8003de0:	2120      	movs	r1, #32
 8003de2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d12f      	bne.n	8003e58 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8003e02:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e04:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e08:	2301      	movs	r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f383 8810 	msr	PRIMASK, r3
}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2110      	movs	r1, #16
 8003e20:	438a      	bics	r2, r1
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f383 8810 	msr	PRIMASK, r3
}
 8003e2e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	2210      	movs	r2, #16
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b10      	cmp	r3, #16
 8003e3c:	d103      	bne.n	8003e46 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2210      	movs	r2, #16
 8003e44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	225c      	movs	r2, #92	; 0x5c
 8003e4a:	5a9a      	ldrh	r2, [r3, r2]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	0011      	movs	r1, r2
 8003e50:	0018      	movs	r0, r3
 8003e52:	f7ff f959 	bl	8003108 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e56:	e00c      	b.n	8003e72 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f7fc fac6 	bl	80003ec <HAL_UART_RxCpltCallback>
}
 8003e60:	e007      	b.n	8003e72 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699a      	ldr	r2, [r3, #24]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2108      	movs	r1, #8
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	619a      	str	r2, [r3, #24]
}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b010      	add	sp, #64	; 0x40
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	fffffedf 	.word	0xfffffedf

08003e80 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b09c      	sub	sp, #112	; 0x70
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003e88:	236a      	movs	r3, #106	; 0x6a
 8003e8a:	18fb      	adds	r3, r7, r3
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	2160      	movs	r1, #96	; 0x60
 8003e90:	5a52      	ldrh	r2, [r2, r1]
 8003e92:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	228c      	movs	r2, #140	; 0x8c
 8003eb0:	589b      	ldr	r3, [r3, r2]
 8003eb2:	2b22      	cmp	r3, #34	; 0x22
 8003eb4:	d000      	beq.n	8003eb8 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003eb6:	e144      	b.n	8004142 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003eb8:	235e      	movs	r3, #94	; 0x5e
 8003eba:	18fb      	adds	r3, r7, r3
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	2168      	movs	r1, #104	; 0x68
 8003ec0:	5a52      	ldrh	r2, [r2, r1]
 8003ec2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003ec4:	e0eb      	b.n	800409e <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ecc:	215c      	movs	r1, #92	; 0x5c
 8003ece:	187b      	adds	r3, r7, r1
 8003ed0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ed2:	187b      	adds	r3, r7, r1
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	236a      	movs	r3, #106	; 0x6a
 8003eda:	18fb      	adds	r3, r7, r3
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	b2d9      	uxtb	r1, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee4:	400a      	ands	r2, r1
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	225e      	movs	r2, #94	; 0x5e
 8003ef8:	5a9b      	ldrh	r3, [r3, r2]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b299      	uxth	r1, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	225e      	movs	r2, #94	; 0x5e
 8003f04:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f10:	2207      	movs	r2, #7
 8003f12:	4013      	ands	r3, r2
 8003f14:	d049      	beq.n	8003faa <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f18:	2201      	movs	r2, #1
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d010      	beq.n	8003f40 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003f1e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003f20:	2380      	movs	r3, #128	; 0x80
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4013      	ands	r3, r2
 8003f26:	d00b      	beq.n	8003f40 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2290      	movs	r2, #144	; 0x90
 8003f34:	589b      	ldr	r3, [r3, r2]
 8003f36:	2201      	movs	r2, #1
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2190      	movs	r1, #144	; 0x90
 8003f3e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f42:	2202      	movs	r2, #2
 8003f44:	4013      	ands	r3, r2
 8003f46:	d00f      	beq.n	8003f68 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003f48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d00b      	beq.n	8003f68 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2202      	movs	r2, #2
 8003f56:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2290      	movs	r2, #144	; 0x90
 8003f5c:	589b      	ldr	r3, [r3, r2]
 8003f5e:	2204      	movs	r2, #4
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2190      	movs	r1, #144	; 0x90
 8003f66:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d00f      	beq.n	8003f90 <UART_RxISR_8BIT_FIFOEN+0x110>
 8003f70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f72:	2201      	movs	r2, #1
 8003f74:	4013      	ands	r3, r2
 8003f76:	d00b      	beq.n	8003f90 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2290      	movs	r2, #144	; 0x90
 8003f84:	589b      	ldr	r3, [r3, r2]
 8003f86:	2202      	movs	r2, #2
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2190      	movs	r1, #144	; 0x90
 8003f8e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2290      	movs	r2, #144	; 0x90
 8003f94:	589b      	ldr	r3, [r3, r2]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d007      	beq.n	8003faa <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7ff f8ab 	bl	80030f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2290      	movs	r2, #144	; 0x90
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	225e      	movs	r2, #94	; 0x5e
 8003fae:	5a9b      	ldrh	r3, [r3, r2]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d173      	bne.n	800409e <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8003fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc6:	f383 8810 	msr	PRIMASK, r3
}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4961      	ldr	r1, [pc, #388]	; (800415c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8003fd8:	400a      	ands	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fde:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe2:	f383 8810 	msr	PRIMASK, r3
}
 8003fe6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fec:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ff0:	657b      	str	r3, [r7, #84]	; 0x54
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff8:	f383 8810 	msr	PRIMASK, r3
}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4955      	ldr	r1, [pc, #340]	; (8004160 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800400a:	400a      	ands	r2, r1
 800400c:	609a      	str	r2, [r3, #8]
 800400e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004010:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004014:	f383 8810 	msr	PRIMASK, r3
}
 8004018:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	228c      	movs	r2, #140	; 0x8c
 800401e:	2120      	movs	r1, #32
 8004020:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004032:	2b01      	cmp	r3, #1
 8004034:	d12f      	bne.n	8004096 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800403c:	f3ef 8310 	mrs	r3, PRIMASK
 8004040:	623b      	str	r3, [r7, #32]
  return(result);
 8004042:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004044:	653b      	str	r3, [r7, #80]	; 0x50
 8004046:	2301      	movs	r3, #1
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	f383 8810 	msr	PRIMASK, r3
}
 8004050:	46c0      	nop			; (mov r8, r8)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2110      	movs	r1, #16
 800405e:	438a      	bics	r2, r1
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004064:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	f383 8810 	msr	PRIMASK, r3
}
 800406c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	2210      	movs	r2, #16
 8004076:	4013      	ands	r3, r2
 8004078:	2b10      	cmp	r3, #16
 800407a:	d103      	bne.n	8004084 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2210      	movs	r2, #16
 8004082:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	225c      	movs	r2, #92	; 0x5c
 8004088:	5a9a      	ldrh	r2, [r3, r2]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	0011      	movs	r1, r2
 800408e:	0018      	movs	r0, r3
 8004090:	f7ff f83a 	bl	8003108 <HAL_UARTEx_RxEventCallback>
 8004094:	e003      	b.n	800409e <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	0018      	movs	r0, r3
 800409a:	f7fc f9a7 	bl	80003ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800409e:	235e      	movs	r3, #94	; 0x5e
 80040a0:	18fb      	adds	r3, r7, r3
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d004      	beq.n	80040b2 <UART_RxISR_8BIT_FIFOEN+0x232>
 80040a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040aa:	2220      	movs	r2, #32
 80040ac:	4013      	ands	r3, r2
 80040ae:	d000      	beq.n	80040b2 <UART_RxISR_8BIT_FIFOEN+0x232>
 80040b0:	e709      	b.n	8003ec6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80040b2:	204e      	movs	r0, #78	; 0x4e
 80040b4:	183b      	adds	r3, r7, r0
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	215e      	movs	r1, #94	; 0x5e
 80040ba:	5a52      	ldrh	r2, [r2, r1]
 80040bc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80040be:	0001      	movs	r1, r0
 80040c0:	187b      	adds	r3, r7, r1
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d044      	beq.n	8004152 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2268      	movs	r2, #104	; 0x68
 80040cc:	5a9b      	ldrh	r3, [r3, r2]
 80040ce:	187a      	adds	r2, r7, r1
 80040d0:	8812      	ldrh	r2, [r2, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d23d      	bcs.n	8004152 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d6:	f3ef 8310 	mrs	r3, PRIMASK
 80040da:	60bb      	str	r3, [r7, #8]
  return(result);
 80040dc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80040de:	64bb      	str	r3, [r7, #72]	; 0x48
 80040e0:	2301      	movs	r3, #1
 80040e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f383 8810 	msr	PRIMASK, r3
}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	491b      	ldr	r1, [pc, #108]	; (8004164 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80040f8:	400a      	ands	r2, r1
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f383 8810 	msr	PRIMASK, r3
}
 8004106:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a17      	ldr	r2, [pc, #92]	; (8004168 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 800410c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800410e:	f3ef 8310 	mrs	r3, PRIMASK
 8004112:	617b      	str	r3, [r7, #20]
  return(result);
 8004114:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004116:	647b      	str	r3, [r7, #68]	; 0x44
 8004118:	2301      	movs	r3, #1
 800411a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	f383 8810 	msr	PRIMASK, r3
}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2120      	movs	r1, #32
 8004130:	430a      	orrs	r2, r1
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004136:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f383 8810 	msr	PRIMASK, r3
}
 800413e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004140:	e007      	b.n	8004152 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699a      	ldr	r2, [r3, #24]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2108      	movs	r1, #8
 800414e:	430a      	orrs	r2, r1
 8004150:	619a      	str	r2, [r3, #24]
}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	46bd      	mov	sp, r7
 8004156:	b01c      	add	sp, #112	; 0x70
 8004158:	bd80      	pop	{r7, pc}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	fffffeff 	.word	0xfffffeff
 8004160:	effffffe 	.word	0xeffffffe
 8004164:	efffffff 	.word	0xefffffff
 8004168:	08003b99 	.word	0x08003b99

0800416c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b09e      	sub	sp, #120	; 0x78
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004174:	2372      	movs	r3, #114	; 0x72
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	2160      	movs	r1, #96	; 0x60
 800417c:	5a52      	ldrh	r2, [r2, r1]
 800417e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	228c      	movs	r2, #140	; 0x8c
 800419c:	589b      	ldr	r3, [r3, r2]
 800419e:	2b22      	cmp	r3, #34	; 0x22
 80041a0:	d000      	beq.n	80041a4 <UART_RxISR_16BIT_FIFOEN+0x38>
 80041a2:	e144      	b.n	800442e <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80041a4:	2366      	movs	r3, #102	; 0x66
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	2168      	movs	r1, #104	; 0x68
 80041ac:	5a52      	ldrh	r2, [r2, r1]
 80041ae:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80041b0:	e0eb      	b.n	800438a <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041b8:	2164      	movs	r1, #100	; 0x64
 80041ba:	187b      	adds	r3, r7, r1
 80041bc:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c2:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80041c4:	187b      	adds	r3, r7, r1
 80041c6:	2272      	movs	r2, #114	; 0x72
 80041c8:	18ba      	adds	r2, r7, r2
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	8812      	ldrh	r2, [r2, #0]
 80041ce:	4013      	ands	r3, r2
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	1c9a      	adds	r2, r3, #2
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	225e      	movs	r2, #94	; 0x5e
 80041e4:	5a9b      	ldrh	r3, [r3, r2]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b299      	uxth	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	225e      	movs	r2, #94	; 0x5e
 80041f0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80041fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041fc:	2207      	movs	r2, #7
 80041fe:	4013      	ands	r3, r2
 8004200:	d049      	beq.n	8004296 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004204:	2201      	movs	r2, #1
 8004206:	4013      	ands	r3, r2
 8004208:	d010      	beq.n	800422c <UART_RxISR_16BIT_FIFOEN+0xc0>
 800420a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	4013      	ands	r3, r2
 8004212:	d00b      	beq.n	800422c <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2201      	movs	r2, #1
 800421a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2290      	movs	r2, #144	; 0x90
 8004220:	589b      	ldr	r3, [r3, r2]
 8004222:	2201      	movs	r2, #1
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2190      	movs	r1, #144	; 0x90
 800422a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800422c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800422e:	2202      	movs	r2, #2
 8004230:	4013      	ands	r3, r2
 8004232:	d00f      	beq.n	8004254 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8004234:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004236:	2201      	movs	r2, #1
 8004238:	4013      	ands	r3, r2
 800423a:	d00b      	beq.n	8004254 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2202      	movs	r2, #2
 8004242:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2290      	movs	r2, #144	; 0x90
 8004248:	589b      	ldr	r3, [r3, r2]
 800424a:	2204      	movs	r2, #4
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2190      	movs	r1, #144	; 0x90
 8004252:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004256:	2204      	movs	r2, #4
 8004258:	4013      	ands	r3, r2
 800425a:	d00f      	beq.n	800427c <UART_RxISR_16BIT_FIFOEN+0x110>
 800425c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800425e:	2201      	movs	r2, #1
 8004260:	4013      	ands	r3, r2
 8004262:	d00b      	beq.n	800427c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2204      	movs	r2, #4
 800426a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2290      	movs	r2, #144	; 0x90
 8004270:	589b      	ldr	r3, [r3, r2]
 8004272:	2202      	movs	r2, #2
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2190      	movs	r1, #144	; 0x90
 800427a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2290      	movs	r2, #144	; 0x90
 8004280:	589b      	ldr	r3, [r3, r2]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d007      	beq.n	8004296 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	0018      	movs	r0, r3
 800428a:	f7fe ff35 	bl	80030f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2290      	movs	r2, #144	; 0x90
 8004292:	2100      	movs	r1, #0
 8004294:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	225e      	movs	r2, #94	; 0x5e
 800429a:	5a9b      	ldrh	r3, [r3, r2]
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d173      	bne.n	800438a <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042a2:	f3ef 8310 	mrs	r3, PRIMASK
 80042a6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042ac:	2301      	movs	r3, #1
 80042ae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b2:	f383 8810 	msr	PRIMASK, r3
}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4961      	ldr	r1, [pc, #388]	; (8004448 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80042c4:	400a      	ands	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ce:	f383 8810 	msr	PRIMASK, r3
}
 80042d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d4:	f3ef 8310 	mrs	r3, PRIMASK
 80042d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80042da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80042de:	2301      	movs	r3, #1
 80042e0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042e4:	f383 8810 	msr	PRIMASK, r3
}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4955      	ldr	r1, [pc, #340]	; (800444c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80042f6:	400a      	ands	r2, r1
 80042f8:	609a      	str	r2, [r3, #8]
 80042fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042fc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004300:	f383 8810 	msr	PRIMASK, r3
}
 8004304:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	228c      	movs	r2, #140	; 0x8c
 800430a:	2120      	movs	r1, #32
 800430c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800431e:	2b01      	cmp	r3, #1
 8004320:	d12f      	bne.n	8004382 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004328:	f3ef 8310 	mrs	r3, PRIMASK
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004330:	657b      	str	r3, [r7, #84]	; 0x54
 8004332:	2301      	movs	r3, #1
 8004334:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	f383 8810 	msr	PRIMASK, r3
}
 800433c:	46c0      	nop			; (mov r8, r8)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2110      	movs	r1, #16
 800434a:	438a      	bics	r2, r1
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004350:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004354:	f383 8810 	msr	PRIMASK, r3
}
 8004358:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	2210      	movs	r2, #16
 8004362:	4013      	ands	r3, r2
 8004364:	2b10      	cmp	r3, #16
 8004366:	d103      	bne.n	8004370 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2210      	movs	r2, #16
 800436e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	225c      	movs	r2, #92	; 0x5c
 8004374:	5a9a      	ldrh	r2, [r3, r2]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	0011      	movs	r1, r2
 800437a:	0018      	movs	r0, r3
 800437c:	f7fe fec4 	bl	8003108 <HAL_UARTEx_RxEventCallback>
 8004380:	e003      	b.n	800438a <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	0018      	movs	r0, r3
 8004386:	f7fc f831 	bl	80003ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800438a:	2366      	movs	r3, #102	; 0x66
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <UART_RxISR_16BIT_FIFOEN+0x232>
 8004394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004396:	2220      	movs	r2, #32
 8004398:	4013      	ands	r3, r2
 800439a:	d000      	beq.n	800439e <UART_RxISR_16BIT_FIFOEN+0x232>
 800439c:	e709      	b.n	80041b2 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800439e:	2052      	movs	r0, #82	; 0x52
 80043a0:	183b      	adds	r3, r7, r0
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	215e      	movs	r1, #94	; 0x5e
 80043a6:	5a52      	ldrh	r2, [r2, r1]
 80043a8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80043aa:	0001      	movs	r1, r0
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d044      	beq.n	800443e <UART_RxISR_16BIT_FIFOEN+0x2d2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2268      	movs	r2, #104	; 0x68
 80043b8:	5a9b      	ldrh	r3, [r3, r2]
 80043ba:	187a      	adds	r2, r7, r1
 80043bc:	8812      	ldrh	r2, [r2, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d23d      	bcs.n	800443e <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c2:	f3ef 8310 	mrs	r3, PRIMASK
 80043c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80043c8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80043ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043cc:	2301      	movs	r3, #1
 80043ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f383 8810 	msr	PRIMASK, r3
}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	491b      	ldr	r1, [pc, #108]	; (8004450 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80043e4:	400a      	ands	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f383 8810 	msr	PRIMASK, r3
}
 80043f2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a17      	ldr	r2, [pc, #92]	; (8004454 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80043f8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043fa:	f3ef 8310 	mrs	r3, PRIMASK
 80043fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8004400:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004402:	64bb      	str	r3, [r7, #72]	; 0x48
 8004404:	2301      	movs	r3, #1
 8004406:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f383 8810 	msr	PRIMASK, r3
}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2120      	movs	r1, #32
 800441c:	430a      	orrs	r2, r1
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004422:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	f383 8810 	msr	PRIMASK, r3
}
 800442a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800442c:	e007      	b.n	800443e <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699a      	ldr	r2, [r3, #24]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2108      	movs	r1, #8
 800443a:	430a      	orrs	r2, r1
 800443c:	619a      	str	r2, [r3, #24]
}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	46bd      	mov	sp, r7
 8004442:	b01e      	add	sp, #120	; 0x78
 8004444:	bd80      	pop	{r7, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	fffffeff 	.word	0xfffffeff
 800444c:	effffffe 	.word	0xeffffffe
 8004450:	efffffff 	.word	0xefffffff
 8004454:	08003d0d 	.word	0x08003d0d

08004458 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004460:	46c0      	nop			; (mov r8, r8)
 8004462:	46bd      	mov	sp, r7
 8004464:	b002      	add	sp, #8
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b002      	add	sp, #8
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004480:	46c0      	nop			; (mov r8, r8)
 8004482:	46bd      	mov	sp, r7
 8004484:	b002      	add	sp, #8
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2284      	movs	r2, #132	; 0x84
 8004494:	5c9b      	ldrb	r3, [r3, r2]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_UARTEx_DisableFifoMode+0x16>
 800449a:	2302      	movs	r3, #2
 800449c:	e027      	b.n	80044ee <HAL_UARTEx_DisableFifoMode+0x66>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2284      	movs	r2, #132	; 0x84
 80044a2:	2101      	movs	r1, #1
 80044a4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2288      	movs	r2, #136	; 0x88
 80044aa:	2124      	movs	r1, #36	; 0x24
 80044ac:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2101      	movs	r1, #1
 80044c2:	438a      	bics	r2, r1
 80044c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4a0b      	ldr	r2, [pc, #44]	; (80044f8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2288      	movs	r2, #136	; 0x88
 80044e0:	2120      	movs	r1, #32
 80044e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2284      	movs	r2, #132	; 0x84
 80044e8:	2100      	movs	r1, #0
 80044ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	0018      	movs	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b004      	add	sp, #16
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	dfffffff 	.word	0xdfffffff

080044fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2284      	movs	r2, #132	; 0x84
 800450a:	5c9b      	ldrb	r3, [r3, r2]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004510:	2302      	movs	r3, #2
 8004512:	e02e      	b.n	8004572 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2284      	movs	r2, #132	; 0x84
 8004518:	2101      	movs	r1, #1
 800451a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2288      	movs	r2, #136	; 0x88
 8004520:	2124      	movs	r1, #36	; 0x24
 8004522:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2101      	movs	r1, #1
 8004538:	438a      	bics	r2, r1
 800453a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	08d9      	lsrs	r1, r3, #3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	0018      	movs	r0, r3
 8004554:	f000 f854 	bl	8004600 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2288      	movs	r2, #136	; 0x88
 8004564:	2120      	movs	r1, #32
 8004566:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2284      	movs	r2, #132	; 0x84
 800456c:	2100      	movs	r1, #0
 800456e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	0018      	movs	r0, r3
 8004574:	46bd      	mov	sp, r7
 8004576:	b004      	add	sp, #16
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2284      	movs	r2, #132	; 0x84
 800458a:	5c9b      	ldrb	r3, [r3, r2]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004590:	2302      	movs	r3, #2
 8004592:	e02f      	b.n	80045f4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2284      	movs	r2, #132	; 0x84
 8004598:	2101      	movs	r1, #1
 800459a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2288      	movs	r2, #136	; 0x88
 80045a0:	2124      	movs	r1, #36	; 0x24
 80045a2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2101      	movs	r1, #1
 80045b8:	438a      	bics	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	4a0e      	ldr	r2, [pc, #56]	; (80045fc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	0019      	movs	r1, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	0018      	movs	r0, r3
 80045d6:	f000 f813 	bl	8004600 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2288      	movs	r2, #136	; 0x88
 80045e6:	2120      	movs	r1, #32
 80045e8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2284      	movs	r2, #132	; 0x84
 80045ee:	2100      	movs	r1, #0
 80045f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	0018      	movs	r0, r3
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b004      	add	sp, #16
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	f1ffffff 	.word	0xf1ffffff

08004600 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800460c:	2b00      	cmp	r3, #0
 800460e:	d108      	bne.n	8004622 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	226a      	movs	r2, #106	; 0x6a
 8004614:	2101      	movs	r1, #1
 8004616:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2268      	movs	r2, #104	; 0x68
 800461c:	2101      	movs	r1, #1
 800461e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004620:	e043      	b.n	80046aa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004622:	260f      	movs	r6, #15
 8004624:	19bb      	adds	r3, r7, r6
 8004626:	2208      	movs	r2, #8
 8004628:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800462a:	200e      	movs	r0, #14
 800462c:	183b      	adds	r3, r7, r0
 800462e:	2208      	movs	r2, #8
 8004630:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	0e5b      	lsrs	r3, r3, #25
 800463a:	b2da      	uxtb	r2, r3
 800463c:	240d      	movs	r4, #13
 800463e:	193b      	adds	r3, r7, r4
 8004640:	2107      	movs	r1, #7
 8004642:	400a      	ands	r2, r1
 8004644:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	0f5b      	lsrs	r3, r3, #29
 800464e:	b2da      	uxtb	r2, r3
 8004650:	250c      	movs	r5, #12
 8004652:	197b      	adds	r3, r7, r5
 8004654:	2107      	movs	r1, #7
 8004656:	400a      	ands	r2, r1
 8004658:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800465a:	183b      	adds	r3, r7, r0
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	197a      	adds	r2, r7, r5
 8004660:	7812      	ldrb	r2, [r2, #0]
 8004662:	4914      	ldr	r1, [pc, #80]	; (80046b4 <UARTEx_SetNbDataToProcess+0xb4>)
 8004664:	5c8a      	ldrb	r2, [r1, r2]
 8004666:	435a      	muls	r2, r3
 8004668:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800466a:	197b      	adds	r3, r7, r5
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	4a12      	ldr	r2, [pc, #72]	; (80046b8 <UARTEx_SetNbDataToProcess+0xb8>)
 8004670:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004672:	0019      	movs	r1, r3
 8004674:	f7fb fdce 	bl	8000214 <__divsi3>
 8004678:	0003      	movs	r3, r0
 800467a:	b299      	uxth	r1, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	226a      	movs	r2, #106	; 0x6a
 8004680:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004682:	19bb      	adds	r3, r7, r6
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	193a      	adds	r2, r7, r4
 8004688:	7812      	ldrb	r2, [r2, #0]
 800468a:	490a      	ldr	r1, [pc, #40]	; (80046b4 <UARTEx_SetNbDataToProcess+0xb4>)
 800468c:	5c8a      	ldrb	r2, [r1, r2]
 800468e:	435a      	muls	r2, r3
 8004690:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004692:	193b      	adds	r3, r7, r4
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	4a08      	ldr	r2, [pc, #32]	; (80046b8 <UARTEx_SetNbDataToProcess+0xb8>)
 8004698:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800469a:	0019      	movs	r1, r3
 800469c:	f7fb fdba 	bl	8000214 <__divsi3>
 80046a0:	0003      	movs	r3, r0
 80046a2:	b299      	uxth	r1, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2268      	movs	r2, #104	; 0x68
 80046a8:	5299      	strh	r1, [r3, r2]
}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b005      	add	sp, #20
 80046b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	080047a4 	.word	0x080047a4
 80046b8:	080047ac 	.word	0x080047ac

080046bc <__libc_init_array>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	2600      	movs	r6, #0
 80046c0:	4d0c      	ldr	r5, [pc, #48]	; (80046f4 <__libc_init_array+0x38>)
 80046c2:	4c0d      	ldr	r4, [pc, #52]	; (80046f8 <__libc_init_array+0x3c>)
 80046c4:	1b64      	subs	r4, r4, r5
 80046c6:	10a4      	asrs	r4, r4, #2
 80046c8:	42a6      	cmp	r6, r4
 80046ca:	d109      	bne.n	80046e0 <__libc_init_array+0x24>
 80046cc:	2600      	movs	r6, #0
 80046ce:	f000 f821 	bl	8004714 <_init>
 80046d2:	4d0a      	ldr	r5, [pc, #40]	; (80046fc <__libc_init_array+0x40>)
 80046d4:	4c0a      	ldr	r4, [pc, #40]	; (8004700 <__libc_init_array+0x44>)
 80046d6:	1b64      	subs	r4, r4, r5
 80046d8:	10a4      	asrs	r4, r4, #2
 80046da:	42a6      	cmp	r6, r4
 80046dc:	d105      	bne.n	80046ea <__libc_init_array+0x2e>
 80046de:	bd70      	pop	{r4, r5, r6, pc}
 80046e0:	00b3      	lsls	r3, r6, #2
 80046e2:	58eb      	ldr	r3, [r5, r3]
 80046e4:	4798      	blx	r3
 80046e6:	3601      	adds	r6, #1
 80046e8:	e7ee      	b.n	80046c8 <__libc_init_array+0xc>
 80046ea:	00b3      	lsls	r3, r6, #2
 80046ec:	58eb      	ldr	r3, [r5, r3]
 80046ee:	4798      	blx	r3
 80046f0:	3601      	adds	r6, #1
 80046f2:	e7f2      	b.n	80046da <__libc_init_array+0x1e>
 80046f4:	080047b4 	.word	0x080047b4
 80046f8:	080047b4 	.word	0x080047b4
 80046fc:	080047b4 	.word	0x080047b4
 8004700:	080047b8 	.word	0x080047b8

08004704 <memset>:
 8004704:	0003      	movs	r3, r0
 8004706:	1882      	adds	r2, r0, r2
 8004708:	4293      	cmp	r3, r2
 800470a:	d100      	bne.n	800470e <memset+0xa>
 800470c:	4770      	bx	lr
 800470e:	7019      	strb	r1, [r3, #0]
 8004710:	3301      	adds	r3, #1
 8004712:	e7f9      	b.n	8004708 <memset+0x4>

08004714 <_init>:
 8004714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471a:	bc08      	pop	{r3}
 800471c:	469e      	mov	lr, r3
 800471e:	4770      	bx	lr

08004720 <_fini>:
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004726:	bc08      	pop	{r3}
 8004728:	469e      	mov	lr, r3
 800472a:	4770      	bx	lr
